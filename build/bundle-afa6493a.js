!function e(t,o,n){function r(i,s){if(!o[i]){if(!t[i]){var c="function"==typeof require&&require;if(!s&&c)return c(i,!0);if(a)return a(i,!0);var l=new Error("Cannot find module '"+i+"'");throw l.code="MODULE_NOT_FOUND",l}var u=o[i]={exports:{}};t[i][0].call(u.exports,(function(e){return r(t[i][1][e]||e)}),u,u.exports,e,t,o,n)}return o[i].exports}for(var a="function"==typeof require&&require,i=0;i<n.length;i++)r(n[i]);return r}({1:[function(e,t,o){(function(t){!function(n){var r="object"==typeof self&&self.self===self&&self||"object"==typeof t&&t.global===t&&t;if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],(function(e,t,o){r.Backbone=n(r,o,e,t)}));else if(void 0!==o){var a,i=e("underscore");try{a=e("jquery")}catch(e){}n(r,o,i,a)}else r.Backbone=n(r,{},r._,r.jQuery||r.Zepto||r.ender||r.$)}((function(e,t,o,n){var r=e.Backbone,a=Array.prototype.slice;t.VERSION="1.4.0",t.$=n,t.noConflict=function(){return e.Backbone=r,this},t.emulateHTTP=!1,t.emulateJSON=!1;var i,s=t.Events={},c=/\s+/,l=function(e,t,n,r,a){var i,s=0;if(n&&"object"==typeof n){void 0!==r&&"context"in a&&void 0===a.context&&(a.context=r);for(i=o.keys(n);s<i.length;s++)t=l(e,t,i[s],n[i[s]],a)}else if(n&&c.test(n))for(i=n.split(c);s<i.length;s++)t=e(t,i[s],r,a);else t=e(t,n,r,a);return t};s.on=function(e,t,o){(this._events=l(u,this._events||{},e,t,{context:o,ctx:this,listening:i}),i)&&((this._listeners||(this._listeners={}))[i.id]=i,i.interop=!1);return this},s.listenTo=function(e,t,n){if(!e)return this;var r=e._listenId||(e._listenId=o.uniqueId("l")),a=this._listeningTo||(this._listeningTo={}),s=i=a[r];s||(this._listenId||(this._listenId=o.uniqueId("l")),s=i=a[r]=new g(this,e));var c=m(e,t,n,this);if(i=void 0,c)throw c;return s.interop&&s.on(t,n),this};var u=function(e,t,o,n){if(o){var r=e[t]||(e[t]=[]),a=n.context,i=n.ctx,s=n.listening;s&&s.count++,r.push({callback:o,context:a,ctx:a||i,listening:s})}return e},m=function(e,t,o,n){try{e.on(t,o,n)}catch(e){return e}};s.off=function(e,t,o){return this._events?(this._events=l(d,this._events,e,t,{context:o,listeners:this._listeners}),this):this},s.stopListening=function(e,t,n){var r=this._listeningTo;if(!r)return this;for(var a=e?[e._listenId]:o.keys(r),i=0;i<a.length;i++){var s=r[a[i]];if(!s)break;s.obj.off(t,n,this),s.interop&&s.off(t,n)}return o.isEmpty(r)&&(this._listeningTo=void 0),this};var d=function(e,t,n,r){if(e){var a,i=r.context,s=r.listeners,c=0;if(t||i||n){for(a=t?[t]:o.keys(e);c<a.length;c++){var l=e[t=a[c]];if(!l)break;for(var u=[],m=0;m<l.length;m++){var d=l[m];if(n&&n!==d.callback&&n!==d.callback._callback||i&&i!==d.context)u.push(d);else{var h=d.listening;h&&h.off(t,n)}}u.length?e[t]=u:delete e[t]}return e}for(a=o.keys(s);c<a.length;c++)s[a[c]].cleanup()}};s.once=function(e,t,o){var n=l(h,{},e,t,this.off.bind(this));return"string"==typeof e&&null==o&&(t=void 0),this.on(n,t,o)},s.listenToOnce=function(e,t,o){var n=l(h,{},t,o,this.stopListening.bind(this,e));return this.listenTo(e,n)};var h=function(e,t,n,r){if(n){var a=e[t]=o.once((function(){r(t,a),n.apply(this,arguments)}));a._callback=n}return e};s.trigger=function(e){if(!this._events)return this;for(var t=Math.max(0,arguments.length-1),o=Array(t),n=0;n<t;n++)o[n]=arguments[n+1];return l(p,this._events,e,void 0,o),this};var p=function(e,t,o,n){if(e){var r=e[t],a=e.all;r&&a&&(a=a.slice()),r&&f(r,n),a&&f(a,[t].concat(n))}return e},f=function(e,t){var o,n=-1,r=e.length,a=t[0],i=t[1],s=t[2];switch(t.length){case 0:for(;++n<r;)(o=e[n]).callback.call(o.ctx);return;case 1:for(;++n<r;)(o=e[n]).callback.call(o.ctx,a);return;case 2:for(;++n<r;)(o=e[n]).callback.call(o.ctx,a,i);return;case 3:for(;++n<r;)(o=e[n]).callback.call(o.ctx,a,i,s);return;default:for(;++n<r;)(o=e[n]).callback.apply(o.ctx,t);return}},g=function(e,t){this.id=e._listenId,this.listener=e,this.obj=t,this.interop=!0,this.count=0,this._events=void 0};g.prototype.on=s.on,g.prototype.off=function(e,t){var o;this.interop?(this._events=l(d,this._events,e,t,{context:void 0,listeners:void 0}),o=!this._events):(this.count--,o=0===this.count),o&&this.cleanup()},g.prototype.cleanup=function(){delete this.listener._listeningTo[this.obj._listenId],this.interop||delete this.obj._listeners[this.id]},s.bind=s.on,s.unbind=s.off,o.extend(t,s);var b=t.Model=function(e,t){var n=e||{};t||(t={}),this.preinitialize.apply(this,arguments),this.cid=o.uniqueId(this.cidPrefix),this.attributes={},t.collection&&(this.collection=t.collection),t.parse&&(n=this.parse(n,t)||{});var r=o.result(this,"defaults");n=o.defaults(o.extend({},r,n),r),this.set(n,t),this.changed={},this.initialize.apply(this,arguments)};o.extend(b.prototype,s,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",preinitialize:function(){},initialize:function(){},toJSON:function(e){return o.clone(this.attributes)},sync:function(){return t.sync.apply(this,arguments)},get:function(e){return this.attributes[e]},escape:function(e){return o.escape(this.get(e))},has:function(e){return null!=this.get(e)},matches:function(e){return!!o.iteratee(e,this)(this.attributes)},set:function(e,t,n){if(null==e)return this;var r;if("object"==typeof e?(r=e,n=t):(r={})[e]=t,n||(n={}),!this._validate(r,n))return!1;var a=n.unset,i=n.silent,s=[],c=this._changing;this._changing=!0,c||(this._previousAttributes=o.clone(this.attributes),this.changed={});var l=this.attributes,u=this.changed,m=this._previousAttributes;for(var d in r)t=r[d],o.isEqual(l[d],t)||s.push(d),o.isEqual(m[d],t)?delete u[d]:u[d]=t,a?delete l[d]:l[d]=t;if(this.idAttribute in r&&(this.id=this.get(this.idAttribute)),!i){s.length&&(this._pending=n);for(var h=0;h<s.length;h++)this.trigger("change:"+s[h],this,l[s[h]],n)}if(c)return this;if(!i)for(;this._pending;)n=this._pending,this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(e,t){return this.set(e,void 0,o.extend({},t,{unset:!0}))},clear:function(e){var t={};for(var n in this.attributes)t[n]=void 0;return this.set(t,o.extend({},e,{unset:!0}))},hasChanged:function(e){return null==e?!o.isEmpty(this.changed):o.has(this.changed,e)},changedAttributes:function(e){if(!e)return!!this.hasChanged()&&o.clone(this.changed);var t,n=this._changing?this._previousAttributes:this.attributes,r={};for(var a in e){var i=e[a];o.isEqual(n[a],i)||(r[a]=i,t=!0)}return!!t&&r},previous:function(e){return null!=e&&this._previousAttributes?this._previousAttributes[e]:null},previousAttributes:function(){return o.clone(this._previousAttributes)},fetch:function(e){e=o.extend({parse:!0},e);var t=this,n=e.success;return e.success=function(o){var r=e.parse?t.parse(o,e):o;if(!t.set(r,e))return!1;n&&n.call(e.context,t,o,e),t.trigger("sync",t,o,e)},L(this,e),this.sync("read",this,e)},save:function(e,t,n){var r;null==e||"object"==typeof e?(r=e,n=t):(r={})[e]=t;var a=(n=o.extend({validate:!0,parse:!0},n)).wait;if(r&&!a){if(!this.set(r,n))return!1}else if(!this._validate(r,n))return!1;var i=this,s=n.success,c=this.attributes;n.success=function(e){i.attributes=c;var t=n.parse?i.parse(e,n):e;if(a&&(t=o.extend({},r,t)),t&&!i.set(t,n))return!1;s&&s.call(n.context,i,e,n),i.trigger("sync",i,e,n)},L(this,n),r&&a&&(this.attributes=o.extend({},c,r));var l=this.isNew()?"create":n.patch?"patch":"update";"patch"!==l||n.attrs||(n.attrs=r);var u=this.sync(l,this,n);return this.attributes=c,u},destroy:function(e){e=e?o.clone(e):{};var t=this,n=e.success,r=e.wait,a=function(){t.stopListening(),t.trigger("destroy",t,t.collection,e)};e.success=function(o){r&&a(),n&&n.call(e.context,t,o,e),t.isNew()||t.trigger("sync",t,o,e)};var i=!1;return this.isNew()?o.defer(e.success):(L(this,e),i=this.sync("delete",this,e)),r||a(),i},url:function(){var e=o.result(this,"urlRoot")||o.result(this.collection,"url")||O();if(this.isNew())return e;var t=this.get(this.idAttribute);return e.replace(/[^\/]$/,"$&/")+encodeURIComponent(t)},parse:function(e,t){return e},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(e){return this._validate({},o.extend({},e,{validate:!0}))},_validate:function(e,t){if(!t.validate||!this.validate)return!0;e=o.extend({},this.attributes,e);var n=this.validationError=this.validate(e,t)||null;return!n||(this.trigger("invalid",this,n,o.extend(t,{validationError:n})),!1)}});var v=t.Collection=function(e,t){t||(t={}),this.preinitialize.apply(this,arguments),t.model&&(this.model=t.model),void 0!==t.comparator&&(this.comparator=t.comparator),this._reset(),this.initialize.apply(this,arguments),e&&this.reset(e,o.extend({silent:!0},t))},y={add:!0,remove:!0,merge:!0},w={add:!0,remove:!1},k=function(e,t,o){o=Math.min(Math.max(o,0),e.length);var n,r=Array(e.length-o),a=t.length;for(n=0;n<r.length;n++)r[n]=e[n+o];for(n=0;n<a;n++)e[n+o]=t[n];for(n=0;n<r.length;n++)e[n+a+o]=r[n]};o.extend(v.prototype,s,{model:b,preinitialize:function(){},initialize:function(){},toJSON:function(e){return this.map((function(t){return t.toJSON(e)}))},sync:function(){return t.sync.apply(this,arguments)},add:function(e,t){return this.set(e,o.extend({merge:!1},t,w))},remove:function(e,t){t=o.extend({},t);var n=!o.isArray(e);e=n?[e]:e.slice();var r=this._removeModels(e,t);return!t.silent&&r.length&&(t.changes={added:[],merged:[],removed:r},this.trigger("update",this,t)),n?r[0]:r},set:function(e,t){if(null!=e){(t=o.extend({},y,t)).parse&&!this._isModel(e)&&(e=this.parse(e,t)||[]);var n=!o.isArray(e);e=n?[e]:e.slice();var r=t.at;null!=r&&(r=+r),r>this.length&&(r=this.length),r<0&&(r+=this.length+1);var a,i,s=[],c=[],l=[],u=[],m={},d=t.add,h=t.merge,p=t.remove,f=!1,g=this.comparator&&null==r&&!1!==t.sort,b=o.isString(this.comparator)?this.comparator:null;for(i=0;i<e.length;i++){a=e[i];var v=this.get(a);if(v){if(h&&a!==v){var w=this._isModel(a)?a.attributes:a;t.parse&&(w=v.parse(w,t)),v.set(w,t),l.push(v),g&&!f&&(f=v.hasChanged(b))}m[v.cid]||(m[v.cid]=!0,s.push(v)),e[i]=v}else d&&(a=e[i]=this._prepareModel(a,t))&&(c.push(a),this._addReference(a,t),m[a.cid]=!0,s.push(a))}if(p){for(i=0;i<this.length;i++)m[(a=this.models[i]).cid]||u.push(a);u.length&&this._removeModels(u,t)}var C=!1,A=!g&&d&&p;if(s.length&&A?(C=this.length!==s.length||o.some(this.models,(function(e,t){return e!==s[t]})),this.models.length=0,k(this.models,s,0),this.length=this.models.length):c.length&&(g&&(f=!0),k(this.models,c,null==r?this.length:r),this.length=this.models.length),f&&this.sort({silent:!0}),!t.silent){for(i=0;i<c.length;i++)null!=r&&(t.index=r+i),(a=c[i]).trigger("add",a,this,t);(f||C)&&this.trigger("sort",this,t),(c.length||u.length||l.length)&&(t.changes={added:c,removed:u,merged:l},this.trigger("update",this,t))}return n?e[0]:e}},reset:function(e,t){t=t?o.clone(t):{};for(var n=0;n<this.models.length;n++)this._removeReference(this.models[n],t);return t.previousModels=this.models,this._reset(),e=this.add(e,o.extend({silent:!0},t)),t.silent||this.trigger("reset",this,t),e},push:function(e,t){return this.add(e,o.extend({at:this.length},t))},pop:function(e){var t=this.at(this.length-1);return this.remove(t,e)},unshift:function(e,t){return this.add(e,o.extend({at:0},t))},shift:function(e){var t=this.at(0);return this.remove(t,e)},slice:function(){return a.apply(this.models,arguments)},get:function(e){if(null!=e)return this._byId[e]||this._byId[this.modelId(this._isModel(e)?e.attributes:e)]||e.cid&&this._byId[e.cid]},has:function(e){return null!=this.get(e)},at:function(e){return e<0&&(e+=this.length),this.models[e]},where:function(e,t){return this[t?"find":"filter"](e)},findWhere:function(e){return this.where(e,!0)},sort:function(e){var t=this.comparator;if(!t)throw new Error("Cannot sort a set without a comparator");e||(e={});var n=t.length;return o.isFunction(t)&&(t=t.bind(this)),1===n||o.isString(t)?this.models=this.sortBy(t):this.models.sort(t),e.silent||this.trigger("sort",this,e),this},pluck:function(e){return this.map(e+"")},fetch:function(e){var t=(e=o.extend({parse:!0},e)).success,n=this;return e.success=function(o){var r=e.reset?"reset":"set";n[r](o,e),t&&t.call(e.context,n,o,e),n.trigger("sync",n,o,e)},L(this,e),this.sync("read",this,e)},create:function(e,t){var n=(t=t?o.clone(t):{}).wait;if(!(e=this._prepareModel(e,t)))return!1;n||this.add(e,t);var r=this,a=t.success;return t.success=function(e,t,o){n&&r.add(e,o),a&&a.call(o.context,e,t,o)},e.save(null,t),e},parse:function(e,t){return e},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(e){return e[this.model.prototype.idAttribute||"id"]},values:function(){return new A(this,x)},keys:function(){return new A(this,E)},entries:function(){return new A(this,_)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(e,t){if(this._isModel(e))return e.collection||(e.collection=this),e;(t=t?o.clone(t):{}).collection=this;var n=new this.model(e,t);return n.validationError?(this.trigger("invalid",this,n.validationError,t),!1):n},_removeModels:function(e,t){for(var o=[],n=0;n<e.length;n++){var r=this.get(e[n]);if(r){var a=this.indexOf(r);this.models.splice(a,1),this.length--,delete this._byId[r.cid];var i=this.modelId(r.attributes);null!=i&&delete this._byId[i],t.silent||(t.index=a,r.trigger("remove",r,this,t)),o.push(r),this._removeReference(r,t)}}return o},_isModel:function(e){return e instanceof b},_addReference:function(e,t){this._byId[e.cid]=e;var o=this.modelId(e.attributes);null!=o&&(this._byId[o]=e),e.on("all",this._onModelEvent,this)},_removeReference:function(e,t){delete this._byId[e.cid];var o=this.modelId(e.attributes);null!=o&&delete this._byId[o],this===e.collection&&delete e.collection,e.off("all",this._onModelEvent,this)},_onModelEvent:function(e,t,o,n){if(t){if(("add"===e||"remove"===e)&&o!==this)return;if("destroy"===e&&this.remove(t,n),"change"===e){var r=this.modelId(t.previousAttributes()),a=this.modelId(t.attributes);r!==a&&(null!=r&&delete this._byId[r],null!=a&&(this._byId[a]=t))}}this.trigger.apply(this,arguments)}});var C="function"==typeof Symbol&&Symbol.iterator;C&&(v.prototype[C]=v.prototype.values);var A=function(e,t){this._collection=e,this._kind=t,this._index=0},x=1,E=2,_=3;C&&(A.prototype[C]=function(){return this}),A.prototype.next=function(){if(this._collection){if(this._index<this._collection.length){var e,t=this._collection.at(this._index);if(this._index++,this._kind===x)e=t;else{var o=this._collection.modelId(t.attributes);e=this._kind===E?o:[o,t]}return{value:e,done:!1}}this._collection=void 0}return{value:void 0,done:!0}};var M=t.View=function(e){this.cid=o.uniqueId("view"),this.preinitialize.apply(this,arguments),o.extend(this,o.pick(e,T)),this._ensureElement(),this.initialize.apply(this,arguments)},D=/^(\S+)\s*(.*)$/,T=["model","collection","el","id","attributes","className","tagName","events"];o.extend(M.prototype,s,{tagName:"div",$:function(e){return this.$el.find(e)},preinitialize:function(){},initialize:function(){},render:function(){return this},remove:function(){return this._removeElement(),this.stopListening(),this},_removeElement:function(){this.$el.remove()},setElement:function(e){return this.undelegateEvents(),this._setElement(e),this.delegateEvents(),this},_setElement:function(e){this.$el=e instanceof t.$?e:t.$(e),this.el=this.$el[0]},delegateEvents:function(e){if(e||(e=o.result(this,"events")),!e)return this;for(var t in this.undelegateEvents(),e){var n=e[t];if(o.isFunction(n)||(n=this[n]),n){var r=t.match(D);this.delegate(r[1],r[2],n.bind(this))}}return this},delegate:function(e,t,o){return this.$el.on(e+".delegateEvents"+this.cid,t,o),this},undelegateEvents:function(){return this.$el&&this.$el.off(".delegateEvents"+this.cid),this},undelegate:function(e,t,o){return this.$el.off(e+".delegateEvents"+this.cid,t,o),this},_createElement:function(e){return document.createElement(e)},_ensureElement:function(){if(this.el)this.setElement(o.result(this,"el"));else{var e=o.extend({},o.result(this,"attributes"));this.id&&(e.id=o.result(this,"id")),this.className&&(e.class=o.result(this,"className")),this.setElement(this._createElement(o.result(this,"tagName"))),this._setAttributes(e)}},_setAttributes:function(e){this.$el.attr(e)}});var S=function(e,t,n,r){o.each(n,(function(o,n){t[n]&&(e.prototype[n]=function(e,t,o,n){switch(t){case 1:return function(){return e[o](this[n])};case 2:return function(t){return e[o](this[n],t)};case 3:return function(t,r){return e[o](this[n],q(t,this),r)};case 4:return function(t,r,a){return e[o](this[n],q(t,this),r,a)};default:return function(){var t=a.call(arguments);return t.unshift(this[n]),e[o].apply(e,t)}}}(t,o,n,r))}))},q=function(e,t){return o.isFunction(e)?e:o.isObject(e)&&!t._isModel(e)?R(e):o.isString(e)?function(t){return t.get(e)}:e},R=function(e){var t=o.matches(e);return function(e){return t(e.attributes)}};o.each([[v,{forEach:3,each:3,map:3,collect:3,reduce:0,foldl:0,inject:0,reduceRight:0,foldr:0,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:3,includes:3,contains:3,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3,groupBy:3,countBy:3,sortBy:3,indexBy:3,findIndex:3,findLastIndex:3},"models"],[b,{keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1},"attributes"]],(function(e){var t=e[0],n=e[1],r=e[2];t.mixin=function(e){var n=o.reduce(o.functions(e),(function(e,t){return e[t]=0,e}),{});S(t,e,n,r)},S(t,o,n,r)})),t.sync=function(e,n,r){var a=z[e];o.defaults(r||(r={}),{emulateHTTP:t.emulateHTTP,emulateJSON:t.emulateJSON});var i={type:a,dataType:"json"};if(r.url||(i.url=o.result(n,"url")||O()),null!=r.data||!n||"create"!==e&&"update"!==e&&"patch"!==e||(i.contentType="application/json",i.data=JSON.stringify(r.attrs||n.toJSON(r))),r.emulateJSON&&(i.contentType="application/x-www-form-urlencoded",i.data=i.data?{model:i.data}:{}),r.emulateHTTP&&("PUT"===a||"DELETE"===a||"PATCH"===a)){i.type="POST",r.emulateJSON&&(i.data._method=a);var s=r.beforeSend;r.beforeSend=function(e){if(e.setRequestHeader("X-HTTP-Method-Override",a),s)return s.apply(this,arguments)}}"GET"===i.type||r.emulateJSON||(i.processData=!1);var c=r.error;r.error=function(e,t,o){r.textStatus=t,r.errorThrown=o,c&&c.call(r.context,e,t,o)};var l=r.xhr=t.ajax(o.extend(i,r));return n.trigger("request",n,l,r),l};var z={create:"POST",update:"PUT",patch:"PATCH",delete:"DELETE",read:"GET"};t.ajax=function(){return t.$.ajax.apply(t.$,arguments)};var V=t.Router=function(e){e||(e={}),this.preinitialize.apply(this,arguments),e.routes&&(this.routes=e.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},B=/\((.*?)\)/g,G=/(\(\?)?:\w+/g,P=/\*\w+/g,N=/[\-{}\[\]+?.,\\\^$|#\s]/g;o.extend(V.prototype,s,{preinitialize:function(){},initialize:function(){},route:function(e,n,r){o.isRegExp(e)||(e=this._routeToRegExp(e)),o.isFunction(n)&&(r=n,n=""),r||(r=this[n]);var a=this;return t.history.route(e,(function(o){var i=a._extractParameters(e,o);!1!==a.execute(r,i,n)&&(a.trigger.apply(a,["route:"+n].concat(i)),a.trigger("route",n,i),t.history.trigger("route",a,n,i))})),this},execute:function(e,t,o){e&&e.apply(this,t)},navigate:function(e,o){return t.history.navigate(e,o),this},_bindRoutes:function(){if(this.routes){this.routes=o.result(this,"routes");for(var e,t=o.keys(this.routes);null!=(e=t.pop());)this.route(e,this.routes[e])}},_routeToRegExp:function(e){return e=e.replace(N,"\\$&").replace(B,"(?:$1)?").replace(G,(function(e,t){return t?e:"([^/?]+)"})).replace(P,"([^?]*?)"),new RegExp("^"+e+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(e,t){var n=e.exec(t).slice(1);return o.map(n,(function(e,t){return t===n.length-1?e||null:e?decodeURIComponent(e):null}))}});var j=t.History=function(){this.handlers=[],this.checkUrl=this.checkUrl.bind(this),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},F=/^[#\/]|\s+$/g,I=/^\/+|\/+$/g,H=/#.*$/;j.started=!1,o.extend(j.prototype,s,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root&&!this.getSearch()},matchRoot:function(){return this.decodeFragment(this.location.pathname).slice(0,this.root.length-1)+"/"===this.root},decodeFragment:function(e){return decodeURI(e.replace(/%25/g,"%2525"))},getSearch:function(){var e=this.location.href.replace(/#.*/,"").match(/\?.+/);return e?e[0]:""},getHash:function(e){var t=(e||this).location.href.match(/#(.*)$/);return t?t[1]:""},getPath:function(){var e=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return"/"===e.charAt(0)?e.slice(1):e},getFragment:function(e){return null==e&&(e=this._usePushState||!this._wantsHashChange?this.getPath():this.getHash()),e.replace(F,"")},start:function(e){if(j.started)throw new Error("Backbone.history has already been started");if(j.started=!0,this.options=o.extend({root:"/"},this.options,e),this.root=this.options.root,this._wantsHashChange=!1!==this.options.hashChange,this._hasHashChange="onhashchange"in window&&(void 0===document.documentMode||document.documentMode>7),this._useHashChange=this._wantsHashChange&&this._hasHashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!(!this.history||!this.history.pushState),this._usePushState=this._wantsPushState&&this._hasPushState,this.fragment=this.getFragment(),this.root=("/"+this.root+"/").replace(I,"/"),this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var t=this.root.slice(0,-1)||"/";return this.location.replace(t+"#"+this.getPath()),!0}this._hasPushState&&this.atRoot()&&this.navigate(this.getHash(),{replace:!0})}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe"),this.iframe.src="javascript:0",this.iframe.style.display="none",this.iframe.tabIndex=-1;var n=document.body,r=n.insertBefore(this.iframe,n.firstChild).contentWindow;r.document.open(),r.document.close(),r.location.hash="#"+this.fragment}var a=window.addEventListener||function(e,t){return attachEvent("on"+e,t)};if(this._usePushState?a("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe?a("hashchange",this.checkUrl,!1):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),!this.options.silent)return this.loadUrl()},stop:function(){var e=window.removeEventListener||function(e,t){return detachEvent("on"+e,t)};this._usePushState?e("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe&&e("hashchange",this.checkUrl,!1),this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),j.started=!1},route:function(e,t){this.handlers.unshift({route:e,callback:t})},checkUrl:function(e){var t=this.getFragment();if(t===this.fragment&&this.iframe&&(t=this.getHash(this.iframe.contentWindow)),t===this.fragment)return!1;this.iframe&&this.navigate(t),this.loadUrl()},loadUrl:function(e){return!!this.matchRoot()&&(e=this.fragment=this.getFragment(e),o.some(this.handlers,(function(t){if(t.route.test(e))return t.callback(e),!0})))},navigate:function(e,t){if(!j.started)return!1;t&&!0!==t||(t={trigger:!!t}),e=this.getFragment(e||"");var o=this.root;""!==e&&"?"!==e.charAt(0)||(o=o.slice(0,-1)||"/");var n=o+e;e=e.replace(H,"");var r=this.decodeFragment(e);if(this.fragment!==r){if(this.fragment=r,this._usePushState)this.history[t.replace?"replaceState":"pushState"]({},document.title,n);else{if(!this._wantsHashChange)return this.location.assign(n);if(this._updateHash(this.location,e,t.replace),this.iframe&&e!==this.getHash(this.iframe.contentWindow)){var a=this.iframe.contentWindow;t.replace||(a.document.open(),a.document.close()),this._updateHash(a.location,e,t.replace)}}return t.trigger?this.loadUrl(e):void 0}},_updateHash:function(e,t,o){if(o){var n=e.href.replace(/(javascript:|#).*$/,"");e.replace(n+"#"+t)}else e.hash="#"+t}}),t.history=new j;b.extend=v.extend=V.extend=M.extend=j.extend=function(e,t){var n,r=this;return n=e&&o.has(e,"constructor")?e.constructor:function(){return r.apply(this,arguments)},o.extend(n,r,t),n.prototype=o.create(r.prototype,e),n.prototype.constructor=n,n.__super__=r.prototype,n};var O=function(){throw new Error('A "url" property or function must be specified')},L=function(e,t){var o=t.error;t.error=function(n){o&&o.call(t.context,e,n,t),e.trigger("error",e,n,t)}};return t}))}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{jquery:10,underscore:2}],2:[function(e,t,o){(function(e){!function(){var n="object"==typeof self&&self.self===self&&self||"object"==typeof e&&e.global===e&&e||this||{},r=n._,a=Array.prototype,i=Object.prototype,s="undefined"!=typeof Symbol?Symbol.prototype:null,c=a.push,l=a.slice,u=i.toString,m=i.hasOwnProperty,d=Array.isArray,h=Object.keys,p=Object.create,f=function(){},g=function(e){return e instanceof g?e:this instanceof g?void(this._wrapped=e):new g(e)};void 0===o||o.nodeType?n._=g:(void 0!==t&&!t.nodeType&&t.exports&&(o=t.exports=g),o._=g),g.VERSION="1.9.2";var b,v=function(e,t,o){if(void 0===t)return e;switch(null==o?3:o){case 1:return function(o){return e.call(t,o)};case 3:return function(o,n,r){return e.call(t,o,n,r)};case 4:return function(o,n,r,a){return e.call(t,o,n,r,a)}}return function(){return e.apply(t,arguments)}},y=function(e,t,o){return g.iteratee!==b?g.iteratee(e,t):null==e?g.identity:g.isFunction(e)?v(e,t,o):g.isObject(e)&&!g.isArray(e)?g.matcher(e):g.property(e)};g.iteratee=b=function(e,t){return y(e,t,1/0)};var w=function(e,t){return t=null==t?e.length-1:+t,function(){for(var o=Math.max(arguments.length-t,0),n=Array(o),r=0;r<o;r++)n[r]=arguments[r+t];switch(t){case 0:return e.call(this,n);case 1:return e.call(this,arguments[0],n);case 2:return e.call(this,arguments[0],arguments[1],n)}var a=Array(t+1);for(r=0;r<t;r++)a[r]=arguments[r];return a[t]=n,e.apply(this,a)}},k=function(e){if(!g.isObject(e))return{};if(p)return p(e);f.prototype=e;var t=new f;return f.prototype=null,t},C=function(e){return function(t){return null==t?void 0:t[e]}},A=function(e,t){return null!=e&&m.call(e,t)},x=function(e,t){for(var o=t.length,n=0;n<o;n++){if(null==e)return;e=e[t[n]]}return o?e:void 0},E=Math.pow(2,53)-1,_=C("length"),M=function(e){var t=_(e);return"number"==typeof t&&t>=0&&t<=E};g.each=g.forEach=function(e,t,o){var n,r;if(t=v(t,o),M(e))for(n=0,r=e.length;n<r;n++)t(e[n],n,e);else{var a=g.keys(e);for(n=0,r=a.length;n<r;n++)t(e[a[n]],a[n],e)}return e},g.map=g.collect=function(e,t,o){t=y(t,o);for(var n=!M(e)&&g.keys(e),r=(n||e).length,a=Array(r),i=0;i<r;i++){var s=n?n[i]:i;a[i]=t(e[s],s,e)}return a};var D=function(e){var t=function(t,o,n,r){var a=!M(t)&&g.keys(t),i=(a||t).length,s=e>0?0:i-1;for(r||(n=t[a?a[s]:s],s+=e);s>=0&&s<i;s+=e){var c=a?a[s]:s;n=o(n,t[c],c,t)}return n};return function(e,o,n,r){var a=arguments.length>=3;return t(e,v(o,r,4),n,a)}};g.reduce=g.foldl=g.inject=D(1),g.reduceRight=g.foldr=D(-1),g.find=g.detect=function(e,t,o){var n=(M(e)?g.findIndex:g.findKey)(e,t,o);if(void 0!==n&&-1!==n)return e[n]},g.filter=g.select=function(e,t,o){var n=[];return t=y(t,o),g.each(e,(function(e,o,r){t(e,o,r)&&n.push(e)})),n},g.reject=function(e,t,o){return g.filter(e,g.negate(y(t)),o)},g.every=g.all=function(e,t,o){t=y(t,o);for(var n=!M(e)&&g.keys(e),r=(n||e).length,a=0;a<r;a++){var i=n?n[a]:a;if(!t(e[i],i,e))return!1}return!0},g.some=g.any=function(e,t,o){t=y(t,o);for(var n=!M(e)&&g.keys(e),r=(n||e).length,a=0;a<r;a++){var i=n?n[a]:a;if(t(e[i],i,e))return!0}return!1},g.contains=g.includes=g.include=function(e,t,o,n){return M(e)||(e=g.values(e)),("number"!=typeof o||n)&&(o=0),g.indexOf(e,t,o)>=0},g.invoke=w((function(e,t,o){var n,r;return g.isFunction(t)?r=t:g.isArray(t)&&(n=t.slice(0,-1),t=t[t.length-1]),g.map(e,(function(e){var a=r;if(!a){if(n&&n.length&&(e=x(e,n)),null==e)return;a=e[t]}return null==a?a:a.apply(e,o)}))})),g.pluck=function(e,t){return g.map(e,g.property(t))},g.where=function(e,t){return g.filter(e,g.matcher(t))},g.findWhere=function(e,t){return g.find(e,g.matcher(t))},g.max=function(e,t,o){var n,r,a=-1/0,i=-1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var s=0,c=(e=M(e)?e:g.values(e)).length;s<c;s++)null!=(n=e[s])&&n>a&&(a=n);else t=y(t,o),g.each(e,(function(e,o,n){((r=t(e,o,n))>i||r===-1/0&&a===-1/0)&&(a=e,i=r)}));return a},g.min=function(e,t,o){var n,r,a=1/0,i=1/0;if(null==t||"number"==typeof t&&"object"!=typeof e[0]&&null!=e)for(var s=0,c=(e=M(e)?e:g.values(e)).length;s<c;s++)null!=(n=e[s])&&n<a&&(a=n);else t=y(t,o),g.each(e,(function(e,o,n){((r=t(e,o,n))<i||r===1/0&&a===1/0)&&(a=e,i=r)}));return a},g.shuffle=function(e){return g.sample(e,1/0)},g.sample=function(e,t,o){if(null==t||o)return M(e)||(e=g.values(e)),e[g.random(e.length-1)];var n=M(e)?g.clone(e):g.values(e),r=_(n);t=Math.max(Math.min(t,r),0);for(var a=r-1,i=0;i<t;i++){var s=g.random(i,a),c=n[i];n[i]=n[s],n[s]=c}return n.slice(0,t)},g.sortBy=function(e,t,o){var n=0;return t=y(t,o),g.pluck(g.map(e,(function(e,o,r){return{value:e,index:n++,criteria:t(e,o,r)}})).sort((function(e,t){var o=e.criteria,n=t.criteria;if(o!==n){if(o>n||void 0===o)return 1;if(o<n||void 0===n)return-1}return e.index-t.index})),"value")};var T=function(e,t){return function(o,n,r){var a=t?[[],[]]:{};return n=y(n,r),g.each(o,(function(t,r){var i=n(t,r,o);e(a,t,i)})),a}};g.groupBy=T((function(e,t,o){A(e,o)?e[o].push(t):e[o]=[t]})),g.indexBy=T((function(e,t,o){e[o]=t})),g.countBy=T((function(e,t,o){A(e,o)?e[o]++:e[o]=1}));var S=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;g.toArray=function(e){return e?g.isArray(e)?l.call(e):g.isString(e)?e.match(S):M(e)?g.map(e,g.identity):g.values(e):[]},g.size=function(e){return null==e?0:M(e)?e.length:g.keys(e).length},g.partition=T((function(e,t,o){e[o?0:1].push(t)}),!0),g.first=g.head=g.take=function(e,t,o){return null==e||e.length<1?null==t?void 0:[]:null==t||o?e[0]:g.initial(e,e.length-t)},g.initial=function(e,t,o){return l.call(e,0,Math.max(0,e.length-(null==t||o?1:t)))},g.last=function(e,t,o){return null==e||e.length<1?null==t?void 0:[]:null==t||o?e[e.length-1]:g.rest(e,Math.max(0,e.length-t))},g.rest=g.tail=g.drop=function(e,t,o){return l.call(e,null==t||o?1:t)},g.compact=function(e){return g.filter(e,Boolean)};var q=function(e,t,o,n){for(var r=(n=n||[]).length,a=0,i=_(e);a<i;a++){var s=e[a];if(M(s)&&(g.isArray(s)||g.isArguments(s)))if(t)for(var c=0,l=s.length;c<l;)n[r++]=s[c++];else q(s,t,o,n),r=n.length;else o||(n[r++]=s)}return n};g.flatten=function(e,t){return q(e,t,!1)},g.without=w((function(e,t){return g.difference(e,t)})),g.uniq=g.unique=function(e,t,o,n){g.isBoolean(t)||(n=o,o=t,t=!1),null!=o&&(o=y(o,n));for(var r=[],a=[],i=0,s=_(e);i<s;i++){var c=e[i],l=o?o(c,i,e):c;t&&!o?(i&&a===l||r.push(c),a=l):o?g.contains(a,l)||(a.push(l),r.push(c)):g.contains(r,c)||r.push(c)}return r},g.union=w((function(e){return g.uniq(q(e,!0,!0))})),g.intersection=function(e){for(var t=[],o=arguments.length,n=0,r=_(e);n<r;n++){var a=e[n];if(!g.contains(t,a)){var i;for(i=1;i<o&&g.contains(arguments[i],a);i++);i===o&&t.push(a)}}return t},g.difference=w((function(e,t){return t=q(t,!0,!0),g.filter(e,(function(e){return!g.contains(t,e)}))})),g.unzip=function(e){for(var t=e&&g.max(e,_).length||0,o=Array(t),n=0;n<t;n++)o[n]=g.pluck(e,n);return o},g.zip=w(g.unzip),g.object=function(e,t){for(var o={},n=0,r=_(e);n<r;n++)t?o[e[n]]=t[n]:o[e[n][0]]=e[n][1];return o};var R=function(e){return function(t,o,n){o=y(o,n);for(var r=_(t),a=e>0?0:r-1;a>=0&&a<r;a+=e)if(o(t[a],a,t))return a;return-1}};g.findIndex=R(1),g.findLastIndex=R(-1),g.sortedIndex=function(e,t,o,n){for(var r=(o=y(o,n,1))(t),a=0,i=_(e);a<i;){var s=Math.floor((a+i)/2);o(e[s])<r?a=s+1:i=s}return a};var z=function(e,t,o){return function(n,r,a){var i=0,s=_(n);if("number"==typeof a)e>0?i=a>=0?a:Math.max(a+s,i):s=a>=0?Math.min(a+1,s):a+s+1;else if(o&&a&&s)return n[a=o(n,r)]===r?a:-1;if(r!=r)return(a=t(l.call(n,i,s),g.isNaN))>=0?a+i:-1;for(a=e>0?i:s-1;a>=0&&a<s;a+=e)if(n[a]===r)return a;return-1}};g.indexOf=z(1,g.findIndex,g.sortedIndex),g.lastIndexOf=z(-1,g.findLastIndex),g.range=function(e,t,o){null==t&&(t=e||0,e=0),o||(o=t<e?-1:1);for(var n=Math.max(Math.ceil((t-e)/o),0),r=Array(n),a=0;a<n;a++,e+=o)r[a]=e;return r},g.chunk=function(e,t){if(null==t||t<1)return[];for(var o=[],n=0,r=e.length;n<r;)o.push(l.call(e,n,n+=t));return o};var V=function(e,t,o,n,r){if(!(n instanceof t))return e.apply(o,r);var a=k(e.prototype),i=e.apply(a,r);return g.isObject(i)?i:a};g.bind=w((function(e,t,o){if(!g.isFunction(e))throw new TypeError("Bind must be called on a function");var n=w((function(r){return V(e,n,t,this,o.concat(r))}));return n})),g.partial=w((function(e,t){var o=g.partial.placeholder,n=function(){for(var r=0,a=t.length,i=Array(a),s=0;s<a;s++)i[s]=t[s]===o?arguments[r++]:t[s];for(;r<arguments.length;)i.push(arguments[r++]);return V(e,n,this,this,i)};return n})),g.partial.placeholder=g,g.bindAll=w((function(e,t){var o=(t=q(t,!1,!1)).length;if(o<1)throw new Error("bindAll must be passed function names");for(;o--;){var n=t[o];e[n]=g.bind(e[n],e)}})),g.memoize=function(e,t){var o=function(n){var r=o.cache,a=""+(t?t.apply(this,arguments):n);return A(r,a)||(r[a]=e.apply(this,arguments)),r[a]};return o.cache={},o},g.delay=w((function(e,t,o){return setTimeout((function(){return e.apply(null,o)}),t)})),g.defer=g.partial(g.delay,g,1),g.throttle=function(e,t,o){var n,r,a,i,s=0;o||(o={});var c=function(){s=!1===o.leading?0:g.now(),n=null,i=e.apply(r,a),n||(r=a=null)},l=function(){var l=g.now();s||!1!==o.leading||(s=l);var u=t-(l-s);return r=this,a=arguments,u<=0||u>t?(n&&(clearTimeout(n),n=null),s=l,i=e.apply(r,a),n||(r=a=null)):n||!1===o.trailing||(n=setTimeout(c,u)),i};return l.cancel=function(){clearTimeout(n),s=0,n=r=a=null},l},g.debounce=function(e,t,o){var n,r,a=function(t,o){n=null,o&&(r=e.apply(t,o))},i=w((function(i){if(n&&clearTimeout(n),o){var s=!n;n=setTimeout(a,t),s&&(r=e.apply(this,i))}else n=g.delay(a,t,this,i);return r}));return i.cancel=function(){clearTimeout(n),n=null},i},g.wrap=function(e,t){return g.partial(t,e)},g.negate=function(e){return function(){return!e.apply(this,arguments)}},g.compose=function(){var e=arguments,t=e.length-1;return function(){for(var o=t,n=e[t].apply(this,arguments);o--;)n=e[o].call(this,n);return n}},g.after=function(e,t){return function(){if(--e<1)return t.apply(this,arguments)}},g.before=function(e,t){var o;return function(){return--e>0&&(o=t.apply(this,arguments)),e<=1&&(t=null),o}},g.once=g.partial(g.before,2),g.restArguments=w;var B=!{toString:null}.propertyIsEnumerable("toString"),G=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],P=function(e,t){var o=G.length,n=e.constructor,r=g.isFunction(n)&&n.prototype||i,a="constructor";for(A(e,a)&&!g.contains(t,a)&&t.push(a);o--;)(a=G[o])in e&&e[a]!==r[a]&&!g.contains(t,a)&&t.push(a)};g.keys=function(e){if(!g.isObject(e))return[];if(h)return h(e);var t=[];for(var o in e)A(e,o)&&t.push(o);return B&&P(e,t),t},g.allKeys=function(e){if(!g.isObject(e))return[];var t=[];for(var o in e)t.push(o);return B&&P(e,t),t},g.values=function(e){for(var t=g.keys(e),o=t.length,n=Array(o),r=0;r<o;r++)n[r]=e[t[r]];return n},g.mapObject=function(e,t,o){t=y(t,o);for(var n=g.keys(e),r=n.length,a={},i=0;i<r;i++){var s=n[i];a[s]=t(e[s],s,e)}return a},g.pairs=function(e){for(var t=g.keys(e),o=t.length,n=Array(o),r=0;r<o;r++)n[r]=[t[r],e[t[r]]];return n},g.invert=function(e){for(var t={},o=g.keys(e),n=0,r=o.length;n<r;n++)t[e[o[n]]]=o[n];return t},g.functions=g.methods=function(e){var t=[];for(var o in e)g.isFunction(e[o])&&t.push(o);return t.sort()};var N=function(e,t){return function(o){var n=arguments.length;if(t&&(o=Object(o)),n<2||null==o)return o;for(var r=1;r<n;r++)for(var a=arguments[r],i=e(a),s=i.length,c=0;c<s;c++){var l=i[c];t&&void 0!==o[l]||(o[l]=a[l])}return o}};g.extend=N(g.allKeys),g.extendOwn=g.assign=N(g.keys),g.findKey=function(e,t,o){t=y(t,o);for(var n,r=g.keys(e),a=0,i=r.length;a<i;a++)if(t(e[n=r[a]],n,e))return n};var j,F,I=function(e,t,o){return t in o};g.pick=w((function(e,t){var o={},n=t[0];if(null==e)return o;g.isFunction(n)?(t.length>1&&(n=v(n,t[1])),t=g.allKeys(e)):(n=I,t=q(t,!1,!1),e=Object(e));for(var r=0,a=t.length;r<a;r++){var i=t[r],s=e[i];n(s,i,e)&&(o[i]=s)}return o})),g.omit=w((function(e,t){var o,n=t[0];return g.isFunction(n)?(n=g.negate(n),t.length>1&&(o=t[1])):(t=g.map(q(t,!1,!1),String),n=function(e,o){return!g.contains(t,o)}),g.pick(e,n,o)})),g.defaults=N(g.allKeys,!0),g.create=function(e,t){var o=k(e);return t&&g.extendOwn(o,t),o},g.clone=function(e){return g.isObject(e)?g.isArray(e)?e.slice():g.extend({},e):e},g.tap=function(e,t){return t(e),e},g.isMatch=function(e,t){var o=g.keys(t),n=o.length;if(null==e)return!n;for(var r=Object(e),a=0;a<n;a++){var i=o[a];if(t[i]!==r[i]||!(i in r))return!1}return!0},j=function(e,t,o,n){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var r=typeof e;return("function"===r||"object"===r||"object"==typeof t)&&F(e,t,o,n)},F=function(e,t,o,n){e instanceof g&&(e=e._wrapped),t instanceof g&&(t=t._wrapped);var r=u.call(e);if(r!==u.call(t))return!1;switch(r){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return s.valueOf.call(e)===s.valueOf.call(t)}var a="[object Array]"===r;if(!a){if("object"!=typeof e||"object"!=typeof t)return!1;var i=e.constructor,c=t.constructor;if(i!==c&&!(g.isFunction(i)&&i instanceof i&&g.isFunction(c)&&c instanceof c)&&"constructor"in e&&"constructor"in t)return!1}n=n||[];for(var l=(o=o||[]).length;l--;)if(o[l]===e)return n[l]===t;if(o.push(e),n.push(t),a){if((l=e.length)!==t.length)return!1;for(;l--;)if(!j(e[l],t[l],o,n))return!1}else{var m,d=g.keys(e);if(l=d.length,g.keys(t).length!==l)return!1;for(;l--;)if(m=d[l],!A(t,m)||!j(e[m],t[m],o,n))return!1}return o.pop(),n.pop(),!0},g.isEqual=function(e,t){return j(e,t)},g.isEmpty=function(e){return null==e||(M(e)&&(g.isArray(e)||g.isString(e)||g.isArguments(e))?0===e.length:0===g.keys(e).length)},g.isElement=function(e){return!(!e||1!==e.nodeType)},g.isArray=d||function(e){return"[object Array]"===u.call(e)},g.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},g.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],(function(e){g["is"+e]=function(t){return u.call(t)==="[object "+e+"]"}})),g.isArguments(arguments)||(g.isArguments=function(e){return A(e,"callee")});var H=n.document&&n.document.childNodes;"function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof H&&(g.isFunction=function(e){return"function"==typeof e||!1}),g.isFinite=function(e){return!g.isSymbol(e)&&isFinite(e)&&!isNaN(parseFloat(e))},g.isNaN=function(e){return g.isNumber(e)&&isNaN(e)},g.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"===u.call(e)},g.isNull=function(e){return null===e},g.isUndefined=function(e){return void 0===e},g.has=function(e,t){if(!g.isArray(t))return A(e,t);for(var o=t.length,n=0;n<o;n++){var r=t[n];if(null==e||!m.call(e,r))return!1;e=e[r]}return!!o},g.noConflict=function(){return n._=r,this},g.identity=function(e){return e},g.constant=function(e){return function(){return e}},g.noop=function(){},g.property=function(e){return g.isArray(e)?function(t){return x(t,e)}:C(e)},g.propertyOf=function(e){return null==e?function(){}:function(t){return g.isArray(t)?x(e,t):e[t]}},g.matcher=g.matches=function(e){return e=g.extendOwn({},e),function(t){return g.isMatch(t,e)}},g.times=function(e,t,o){var n=Array(Math.max(0,e));t=v(t,o,1);for(var r=0;r<e;r++)n[r]=t(r);return n},g.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},g.now=Date.now||function(){return(new Date).getTime()};var O={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},L=g.invert(O),U=function(e){var t=function(t){return e[t]},o="(?:"+g.keys(e).join("|")+")",n=RegExp(o),r=RegExp(o,"g");return function(e){return e=null==e?"":""+e,n.test(e)?e.replace(r,t):e}};g.escape=U(O),g.unescape=U(L),g.result=function(e,t,o){g.isArray(t)||(t=[t]);var n=t.length;if(!n)return g.isFunction(o)?o.call(e):o;for(var r=0;r<n;r++){var a=null==e?void 0:e[t[r]];void 0===a&&(a=o,r=n),e=g.isFunction(a)?a.call(e):a}return e};var W=0;g.uniqueId=function(e){var t=++W+"";return e?e+t:t},g.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var $=/(.)^/,Q={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},K=/\\|'|\r|\n|\u2028|\u2029/g,Y=function(e){return"\\"+Q[e]};g.template=function(e,t,o){!t&&o&&(t=o),t=g.defaults({},t,g.templateSettings);var n,r=RegExp([(t.escape||$).source,(t.interpolate||$).source,(t.evaluate||$).source].join("|")+"|$","g"),a=0,i="__p+='";e.replace(r,(function(t,o,n,r,s){return i+=e.slice(a,s).replace(K,Y),a=s+t.length,o?i+="'+\n((__t=("+o+"))==null?'':_.escape(__t))+\n'":n?i+="'+\n((__t=("+n+"))==null?'':__t)+\n'":r&&(i+="';\n"+r+"\n__p+='"),t})),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{n=new Function(t.variable||"obj","_",i)}catch(e){throw e.source=i,e}var s=function(e){return n.call(this,e,g)},c=t.variable||"obj";return s.source="function("+c+"){\n"+i+"}",s},g.chain=function(e){var t=g(e);return t._chain=!0,t};var J=function(e,t){return e._chain?g(t).chain():t};g.mixin=function(e){return g.each(g.functions(e),(function(t){var o=g[t]=e[t];g.prototype[t]=function(){var e=[this._wrapped];return c.apply(e,arguments),J(this,o.apply(g,e))}})),g},g.mixin(g),g.each(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=a[e];g.prototype[e]=function(){var o=this._wrapped;return t.apply(o,arguments),"shift"!==e&&"splice"!==e||0!==o.length||delete o[0],J(this,o)}})),g.each(["concat","join","slice"],(function(e){var t=a[e];g.prototype[e]=function(){return J(this,t.apply(this._wrapped,arguments))}})),g.prototype.value=function(){return this._wrapped},g.prototype.valueOf=g.prototype.toJSON=g.prototype.value,g.prototype.toString=function(){return String(this._wrapped)},"function"==typeof define&&define.amd&&define("underscore",[],(function(){return g}))}()}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(e,t,o){},{}],4:[function(e,t,o){var n=Object.create||function(e){var t=function(){};return t.prototype=e,new t},r=Object.keys||function(e){var t=[];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.push(o);return o},a=Function.prototype.bind||function(e){var t=this;return function(){return t.apply(e,arguments)}};function i(){this._events&&Object.prototype.hasOwnProperty.call(this,"_events")||(this._events=n(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0}t.exports=i,i.EventEmitter=i,i.prototype._events=void 0,i.prototype._maxListeners=void 0;var s,c=10;try{var l={};Object.defineProperty&&Object.defineProperty(l,"x",{value:0}),s=0===l.x}catch(e){s=!1}function u(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function m(e,t,o){if(t)e.call(o);else for(var n=e.length,r=k(e,n),a=0;a<n;++a)r[a].call(o)}function d(e,t,o,n){if(t)e.call(o,n);else for(var r=e.length,a=k(e,r),i=0;i<r;++i)a[i].call(o,n)}function h(e,t,o,n,r){if(t)e.call(o,n,r);else for(var a=e.length,i=k(e,a),s=0;s<a;++s)i[s].call(o,n,r)}function p(e,t,o,n,r,a){if(t)e.call(o,n,r,a);else for(var i=e.length,s=k(e,i),c=0;c<i;++c)s[c].call(o,n,r,a)}function f(e,t,o,n){if(t)e.apply(o,n);else for(var r=e.length,a=k(e,r),i=0;i<r;++i)a[i].apply(o,n)}function g(e,t,o,r){var a,i,s;if("function"!=typeof o)throw new TypeError('"listener" argument must be a function');if((i=e._events)?(i.newListener&&(e.emit("newListener",t,o.listener?o.listener:o),i=e._events),s=i[t]):(i=e._events=n(null),e._eventsCount=0),s){if("function"==typeof s?s=i[t]=r?[o,s]:[s,o]:r?s.unshift(o):s.push(o),!s.warned&&(a=u(e))&&a>0&&s.length>a){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+' "'+String(t)+'" listeners added. Use emitter.setMaxListeners() to increase limit.');c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,"object"==typeof console&&console.warn&&console.warn("%s: %s",c.name,c.message)}}else s=i[t]=o,++e._eventsCount;return e}function b(){if(!this.fired)switch(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length){case 0:return this.listener.call(this.target);case 1:return this.listener.call(this.target,arguments[0]);case 2:return this.listener.call(this.target,arguments[0],arguments[1]);case 3:return this.listener.call(this.target,arguments[0],arguments[1],arguments[2]);default:for(var e=new Array(arguments.length),t=0;t<e.length;++t)e[t]=arguments[t];this.listener.apply(this.target,e)}}function v(e,t,o){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:o},r=a.call(b,n);return r.listener=o,n.wrapFn=r,r}function y(e,t,o){var n=e._events;if(!n)return[];var r=n[t];return r?"function"==typeof r?o?[r.listener||r]:[r]:o?function(e){for(var t=new Array(e.length),o=0;o<t.length;++o)t[o]=e[o].listener||e[o];return t}(r):k(r,r.length):[]}function w(e){var t=this._events;if(t){var o=t[e];if("function"==typeof o)return 1;if(o)return o.length}return 0}function k(e,t){for(var o=new Array(t),n=0;n<t;++n)o[n]=e[n];return o}s?Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||e!=e)throw new TypeError('"defaultMaxListeners" must be a positive number');c=e}}):i.defaultMaxListeners=c,i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return u(this)},i.prototype.emit=function(e){var t,o,n,r,a,i,s="error"===e;if(i=this._events)s=s&&null==i.error;else if(!s)return!1;if(s){if(arguments.length>1&&(t=arguments[1]),t instanceof Error)throw t;var c=new Error('Unhandled "error" event. ('+t+")");throw c.context=t,c}if(!(o=i[e]))return!1;var l="function"==typeof o;switch(n=arguments.length){case 1:m(o,l,this);break;case 2:d(o,l,this,arguments[1]);break;case 3:h(o,l,this,arguments[1],arguments[2]);break;case 4:p(o,l,this,arguments[1],arguments[2],arguments[3]);break;default:for(r=new Array(n-1),a=1;a<n;a++)r[a-1]=arguments[a];f(o,l,this,r)}return!0},i.prototype.addListener=function(e,t){return g(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return g(this,e,t,!0)},i.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,v(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,v(this,e,t)),this},i.prototype.removeListener=function(e,t){var o,r,a,i,s;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(o=r[e]))return this;if(o===t||o.listener===t)0==--this._eventsCount?this._events=n(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,o.listener||t));else if("function"!=typeof o){for(a=-1,i=o.length-1;i>=0;i--)if(o[i]===t||o[i].listener===t){s=o[i].listener,a=i;break}if(a<0)return this;0===a?o.shift():function(e,t){for(var o=t,n=o+1,r=e.length;n<r;o+=1,n+=1)e[o]=e[n];e.pop()}(o,a),1===o.length&&(r[e]=o[0]),r.removeListener&&this.emit("removeListener",e,s||t)}return this},i.prototype.removeAllListeners=function(e){var t,o,a;if(!(o=this._events))return this;if(!o.removeListener)return 0===arguments.length?(this._events=n(null),this._eventsCount=0):o[e]&&(0==--this._eventsCount?this._events=n(null):delete o[e]),this;if(0===arguments.length){var i,s=r(o);for(a=0;a<s.length;++a)"removeListener"!==(i=s[a])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=n(null),this._eventsCount=0,this}if("function"==typeof(t=o[e]))this.removeListener(e,t);else if(t)for(a=t.length-1;a>=0;a--)this.removeListener(e,t[a]);return this},i.prototype.listeners=function(e){return y(this,e,!0)},i.prototype.rawListeners=function(e){return y(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):w.call(e,t)},i.prototype.listenerCount=w,i.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]}},{}],5:[function(e,t,o){(function(e){"use strict";var o="production"!==e.env.NODE_ENV?function(e){}:function(e){if(void 0===e)throw new Error("invariant(...): Second argument must be a string.")};t.exports=function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),a=2;a<n;a++)r[a-2]=arguments[a];if(o(t),!e){var i;if(void 0===t)i=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=0;(i=new Error(t.replace(/%s/g,(function(){return String(r[s++])})))).name="Invariant Violation"}throw i.framesToPop=1,i}}}).call(this,e("_process"))},{_process:15}],6:[function(e,t,o){(function(o){"use strict";var n=e("./invariant");t.exports=function(e){var t,r={};for(t in e instanceof Object&&!Array.isArray(e)||("production"!==o.env.NODE_ENV?n(!1,"keyMirror(...): Argument must be an object."):n(!1)),e)e.hasOwnProperty(t)&&(r[t]=t);return r}}).call(this,e("_process"))},{"./invariant":5,_process:15}],7:[function(e,t,o){t.exports.Dispatcher=e("./lib/Dispatcher")},{"./lib/Dispatcher":8}],8:[function(e,t,o){(function(n){"use strict";o.__esModule=!0;var r=e("fbjs/lib/invariant"),a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._callbacks={},this._isDispatching=!1,this._isHandled={},this._isPending={},this._lastID=1}return e.prototype.register=function(e){var t="ID_"+this._lastID++;return this._callbacks[t]=e,t},e.prototype.unregister=function(e){this._callbacks[e]||("production"!==n.env.NODE_ENV?r(!1,"Dispatcher.unregister(...): `%s` does not map to a registered callback.",e):r(!1)),delete this._callbacks[e]},e.prototype.waitFor=function(e){this._isDispatching||("production"!==n.env.NODE_ENV?r(!1,"Dispatcher.waitFor(...): Must be invoked while dispatching."):r(!1));for(var t=0;t<e.length;t++){var o=e[t];this._isPending[o]?this._isHandled[o]||("production"!==n.env.NODE_ENV?r(!1,"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",o):r(!1)):(this._callbacks[o]||("production"!==n.env.NODE_ENV?r(!1,"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",o):r(!1)),this._invokeCallback(o))}},e.prototype.dispatch=function(e){this._isDispatching&&("production"!==n.env.NODE_ENV?r(!1,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."):r(!1)),this._startDispatching(e);try{for(var t in this._callbacks)this._isPending[t]||this._invokeCallback(t)}finally{this._stopDispatching()}},e.prototype.isDispatching=function(){return this._isDispatching},e.prototype._invokeCallback=function(e){this._isPending[e]=!0,this._callbacks[e](this._pendingPayload),this._isHandled[e]=!0},e.prototype._startDispatching=function(e){for(var t in this._callbacks)this._isPending[t]=!1,this._isHandled[t]=!1;this._pendingPayload=e,this._isDispatching=!0},e.prototype._stopDispatching=function(){delete this._pendingPayload,this._isDispatching=!1},e}();t.exports=a}).call(this,e("_process"))},{_process:15,"fbjs/lib/invariant":9}],9:[function(e,t,o){(function(e){"use strict";var o=function(e){};"production"!==e.env.NODE_ENV&&(o=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),t.exports=function(e,t,n,r,a,i,s,c){if(o(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,i,s,c],m=0;(l=new Error(t.replace(/%s/g,(function(){return u[m++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}}).call(this,e("_process"))},{_process:15}],10:[function(e,t,o){
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
!function(e,o){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?o(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return o(e)}:o(e)}("undefined"!=typeof window?window:this,(function(e,t){"use strict";var o=[],n=e.document,r=Object.getPrototypeOf,a=o.slice,i=o.concat,s=o.push,c=o.indexOf,l={},u=l.toString,m=l.hasOwnProperty,d=m.toString,h=d.call(Object),p={},f=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},b={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,o){var r,a,i=(o=o||n).createElement("script");if(i.text=e,t)for(r in b)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);o.head.appendChild(i).parentNode.removeChild(i)}function y(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[u.call(e)]||"object":typeof e}var w=function(e,t){return new w.fn.init(e,t)},k=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,o=y(e);return!f(e)&&!g(e)&&("array"===o||0===t||"number"==typeof t&&t>0&&t-1 in e)}w.fn=w.prototype={jquery:"3.4.1",constructor:w,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,(function(t,o){return e.call(t,o,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,o=+e+(e<0?t:0);return this.pushStack(o>=0&&o<t?[this[o]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:o.sort,splice:o.splice},w.extend=w.fn.extend=function(){var e,t,o,n,r,a,i=arguments[0]||{},s=1,c=arguments.length,l=!1;for("boolean"==typeof i&&(l=i,i=arguments[s]||{},s++),"object"==typeof i||f(i)||(i={}),s===c&&(i=this,s--);s<c;s++)if(null!=(e=arguments[s]))for(t in e)n=e[t],"__proto__"!==t&&i!==n&&(l&&n&&(w.isPlainObject(n)||(r=Array.isArray(n)))?(o=i[t],a=r&&!Array.isArray(o)?[]:r||w.isPlainObject(o)?o:{},r=!1,i[t]=w.extend(l,a,n)):void 0!==n&&(i[t]=n));return i},w.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,o;return!(!e||"[object Object]"!==u.call(e))&&(!(t=r(e))||"function"==typeof(o=m.call(t,"constructor")&&t.constructor)&&d.call(o)===h)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){v(e,{nonce:t&&t.nonce})},each:function(e,t){var o,n=0;if(C(e))for(o=e.length;n<o&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(k,"")},makeArray:function(e,t){var o=t||[];return null!=e&&(C(Object(e))?w.merge(o,"string"==typeof e?[e]:e):s.call(o,e)),o},inArray:function(e,t,o){return null==t?-1:c.call(t,e,o)},merge:function(e,t){for(var o=+t.length,n=0,r=e.length;n<o;n++)e[r++]=t[n];return e.length=r,e},grep:function(e,t,o){for(var n=[],r=0,a=e.length,i=!o;r<a;r++)!t(e[r],r)!==i&&n.push(e[r]);return n},map:function(e,t,o){var n,r,a=0,s=[];if(C(e))for(n=e.length;a<n;a++)null!=(r=t(e[a],a,o))&&s.push(r);else for(a in e)null!=(r=t(e[a],a,o))&&s.push(r);return i.apply([],s)},guid:1,support:p}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=o[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){l["[object "+t+"]"]=t.toLowerCase()}));var A=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,o,n,r,a,i,s,c,l,u,m,d,h,p,f,g,b,v,y,w="sizzle"+1*new Date,k=e.document,C=0,A=0,x=ce(),E=ce(),_=ce(),M=ce(),D=function(e,t){return e===t&&(m=!0),0},T={}.hasOwnProperty,S=[],q=S.pop,R=S.push,z=S.push,V=S.slice,B=function(e,t){for(var o=0,n=e.length;o<n;o++)if(e[o]===t)return o;return-1},G="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",j="\\["+P+"*("+N+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+P+"*\\]",F=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+j+")*)|.*)\\)|)",I=new RegExp(P+"+","g"),H=new RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),O=new RegExp("^"+P+"*,"+P+"*"),L=new RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),U=new RegExp(P+"|>"),W=new RegExp(F),$=new RegExp("^"+N+"$"),Q={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+j),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:new RegExp("^(?:"+G+")$","i"),needsContext:new RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),oe=function(e,t,o){var n="0x"+t-65536;return n!=n||o?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){d()},ie=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{z.apply(S=V.call(k.childNodes),k.childNodes),S[k.childNodes.length].nodeType}catch(e){z={apply:S.length?function(e,t){R.apply(e,V.call(t))}:function(e,t){for(var o=e.length,n=0;e[o++]=t[n++];);e.length=o-1}}}function se(e,t,n,r){var a,s,l,u,m,p,b,v=t&&t.ownerDocument,C=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return n;if(!r&&((t?t.ownerDocument||t:k)!==h&&d(t),t=t||h,f)){if(11!==C&&(m=X.exec(e)))if(a=m[1]){if(9===C){if(!(l=t.getElementById(a)))return n;if(l.id===a)return n.push(l),n}else if(v&&(l=v.getElementById(a))&&y(t,l)&&l.id===a)return n.push(l),n}else{if(m[2])return z.apply(n,t.getElementsByTagName(e)),n;if((a=m[3])&&o.getElementsByClassName&&t.getElementsByClassName)return z.apply(n,t.getElementsByClassName(a)),n}if(o.qsa&&!M[e+" "]&&(!g||!g.test(e))&&(1!==C||"object"!==t.nodeName.toLowerCase())){if(b=e,v=t,1===C&&U.test(e)){for((u=t.getAttribute("id"))?u=u.replace(ne,re):t.setAttribute("id",u=w),s=(p=i(e)).length;s--;)p[s]="#"+u+" "+ye(p[s]);b=p.join(","),v=ee.test(e)&&be(t.parentNode)||t}try{return z.apply(n,v.querySelectorAll(b)),n}catch(t){M(e,!0)}finally{u===w&&t.removeAttribute("id")}}}return c(e.replace(H,"$1"),t,n,r)}function ce(){var e=[];return function t(o,r){return e.push(o+" ")>n.cacheLength&&delete t[e.shift()],t[o+" "]=r}}function le(e){return e[w]=!0,e}function ue(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function me(e,t){for(var o=e.split("|"),r=o.length;r--;)n.attrHandle[o[r]]=t}function de(e,t){var o=t&&e,n=o&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(o)for(;o=o.nextSibling;)if(o===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var o=t.nodeName.toLowerCase();return("input"===o||"button"===o)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return le((function(t){return t=+t,le((function(o,n){for(var r,a=e([],o.length,t),i=a.length;i--;)o[r=a[i]]&&(o[r]=!(n[r]=o[r]))}))}))}function be(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in o=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,o=(e.ownerDocument||e).documentElement;return!K.test(t||o&&o.nodeName||"HTML")},d=se.setDocument=function(e){var t,r,i=e?e.ownerDocument||e:k;return i!==h&&9===i.nodeType&&i.documentElement?(p=(h=i).documentElement,f=!a(h),k!==h&&(r=h.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ae,!1):r.attachEvent&&r.attachEvent("onunload",ae)),o.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),o.getElementsByTagName=ue((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),o.getElementsByClassName=Z.test(h.getElementsByClassName),o.getById=ue((function(e){return p.appendChild(e).id=w,!h.getElementsByName||!h.getElementsByName(w).length})),o.getById?(n.filter.ID=function(e){var t=e.replace(te,oe);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var o=t.getElementById(e);return o?[o]:[]}}):(n.filter.ID=function(e){var t=e.replace(te,oe);return function(e){var o=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return o&&o.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var o,n,r,a=t.getElementById(e);if(a){if((o=a.getAttributeNode("id"))&&o.value===e)return[a];for(r=t.getElementsByName(e),n=0;a=r[n++];)if((o=a.getAttributeNode("id"))&&o.value===e)return[a]}return[]}}),n.find.TAG=o.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):o.qsa?t.querySelectorAll(e):void 0}:function(e,t){var o,n=[],r=0,a=t.getElementsByTagName(e);if("*"===e){for(;o=a[r++];)1===o.nodeType&&n.push(o);return n}return a},n.find.CLASS=o.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&f)return t.getElementsByClassName(e)},b=[],g=[],(o.qsa=Z.test(h.querySelectorAll))&&(ue((function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+G+")"),e.querySelectorAll("[id~="+w+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+P+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(o.matchesSelector=Z.test(v=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue((function(e){o.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),b.push("!=",F)})),g=g.length&&new RegExp(g.join("|")),b=b.length&&new RegExp(b.join("|")),t=Z.test(p.compareDocumentPosition),y=t||Z.test(p.contains)?function(e,t){var o=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(o.contains?o.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return m=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!o.sortDetached&&t.compareDocumentPosition(e)===n?e===h||e.ownerDocument===k&&y(k,e)?-1:t===h||t.ownerDocument===k&&y(k,t)?1:u?B(u,e)-B(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return m=!0,0;var o,n=0,r=e.parentNode,a=t.parentNode,i=[e],s=[t];if(!r||!a)return e===h?-1:t===h?1:r?-1:a?1:u?B(u,e)-B(u,t):0;if(r===a)return de(e,t);for(o=e;o=o.parentNode;)i.unshift(o);for(o=t;o=o.parentNode;)s.unshift(o);for(;i[n]===s[n];)n++;return n?de(i[n],s[n]):i[n]===k?-1:s[n]===k?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&d(e),o.matchesSelector&&f&&!M[t+" "]&&(!b||!b.test(t))&&(!g||!g.test(t)))try{var n=v.call(e,t);if(n||o.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){M(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==h&&d(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==h&&d(e);var r=n.attrHandle[t.toLowerCase()],a=r&&T.call(n.attrHandle,t.toLowerCase())?r(e,t,!f):void 0;return void 0!==a?a:o.attributes||!f?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},se.escape=function(e){return(e+"").replace(ne,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,a=0;if(m=!o.detectDuplicates,u=!o.sortStable&&e.slice(0),e.sort(D),m){for(;t=e[a++];)t===e[a]&&(r=n.push(a));for(;r--;)e.splice(n[r],1)}return u=null,e},r=se.getText=function(e){var t,o="",n=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)o+=r(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[n++];)o+=r(t);return o},(n=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,oe),e[3]=(e[3]||e[4]||e[5]||"").replace(te,oe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,o=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":o&&W.test(o)&&(t=i(o,!0))&&(t=o.indexOf(")",o.length-t)-o.length)&&(e[0]=e[0].slice(0,t),e[2]=o.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,oe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&x(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,o){return function(n){var r=se.attr(n,e);return null==r?"!="===t:!t||(r+="","="===t?r===o:"!="===t?r!==o:"^="===t?o&&0===r.indexOf(o):"*="===t?o&&r.indexOf(o)>-1:"$="===t?o&&r.slice(-o.length)===o:"~="===t?(" "+r.replace(I," ")+" ").indexOf(o)>-1:"|="===t&&(r===o||r.slice(0,o.length+1)===o+"-"))}},CHILD:function(e,t,o,n,r){var a="nth"!==e.slice(0,3),i="last"!==e.slice(-4),s="of-type"===t;return 1===n&&0===r?function(e){return!!e.parentNode}:function(t,o,c){var l,u,m,d,h,p,f=a!==i?"nextSibling":"previousSibling",g=t.parentNode,b=s&&t.nodeName.toLowerCase(),v=!c&&!s,y=!1;if(g){if(a){for(;f;){for(d=t;d=d[f];)if(s?d.nodeName.toLowerCase()===b:1===d.nodeType)return!1;p=f="only"===e&&!p&&"nextSibling"}return!0}if(p=[i?g.firstChild:g.lastChild],i&&v){for(y=(h=(l=(u=(m=(d=g)[w]||(d[w]={}))[d.uniqueID]||(m[d.uniqueID]={}))[e]||[])[0]===C&&l[1])&&l[2],d=h&&g.childNodes[h];d=++h&&d&&d[f]||(y=h=0)||p.pop();)if(1===d.nodeType&&++y&&d===t){u[e]=[C,h,y];break}}else if(v&&(y=h=(l=(u=(m=(d=t)[w]||(d[w]={}))[d.uniqueID]||(m[d.uniqueID]={}))[e]||[])[0]===C&&l[1]),!1===y)for(;(d=++h&&d&&d[f]||(y=h=0)||p.pop())&&((s?d.nodeName.toLowerCase()!==b:1!==d.nodeType)||!++y||(v&&((u=(m=d[w]||(d[w]={}))[d.uniqueID]||(m[d.uniqueID]={}))[e]=[C,y]),d!==t)););return(y-=r)===n||y%n==0&&y/n>=0}}},PSEUDO:function(e,t){var o,r=n.pseudos[e]||n.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[w]?r(t):r.length>1?(o=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,o){for(var n,a=r(e,t),i=a.length;i--;)e[n=B(e,a[i])]=!(o[n]=a[i])})):function(e){return r(e,0,o)}):r}},pseudos:{not:le((function(e){var t=[],o=[],n=s(e.replace(H,"$1"));return n[w]?le((function(e,t,o,r){for(var a,i=n(e,null,r,[]),s=e.length;s--;)(a=i[s])&&(e[s]=!(t[s]=a))})):function(e,r,a){return t[0]=e,n(t,null,a,o),t[0]=null,!o.pop()}})),has:le((function(e){return function(t){return se(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,oe),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:le((function(e){return $.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,oe).toLowerCase(),function(t){var o;do{if(o=f?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(o=o.toLowerCase())===e||0===o.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var o=e.location&&e.location.hash;return o&&o.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,o){return[o<0?o+t:o]})),even:ge((function(e,t){for(var o=0;o<t;o+=2)e.push(o);return e})),odd:ge((function(e,t){for(var o=1;o<t;o+=2)e.push(o);return e})),lt:ge((function(e,t,o){for(var n=o<0?o+t:o>t?t:o;--n>=0;)e.push(n);return e})),gt:ge((function(e,t,o){for(var n=o<0?o+t:o;++n<t;)e.push(n);return e}))}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=pe(t);function ve(){}function ye(e){for(var t=0,o=e.length,n="";t<o;t++)n+=e[t].value;return n}function we(e,t,o){var n=t.dir,r=t.next,a=r||n,i=o&&"parentNode"===a,s=A++;return t.first?function(t,o,r){for(;t=t[n];)if(1===t.nodeType||i)return e(t,o,r);return!1}:function(t,o,c){var l,u,m,d=[C,s];if(c){for(;t=t[n];)if((1===t.nodeType||i)&&e(t,o,c))return!0}else for(;t=t[n];)if(1===t.nodeType||i)if(u=(m=t[w]||(t[w]={}))[t.uniqueID]||(m[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[n]||t;else{if((l=u[a])&&l[0]===C&&l[1]===s)return d[2]=l[2];if(u[a]=d,d[2]=e(t,o,c))return!0}return!1}}function ke(e){return e.length>1?function(t,o,n){for(var r=e.length;r--;)if(!e[r](t,o,n))return!1;return!0}:e[0]}function Ce(e,t,o,n,r){for(var a,i=[],s=0,c=e.length,l=null!=t;s<c;s++)(a=e[s])&&(o&&!o(a,n,r)||(i.push(a),l&&t.push(s)));return i}function Ae(e,t,o,n,r,a){return n&&!n[w]&&(n=Ae(n)),r&&!r[w]&&(r=Ae(r,a)),le((function(a,i,s,c){var l,u,m,d=[],h=[],p=i.length,f=a||function(e,t,o){for(var n=0,r=t.length;n<r;n++)se(e,t[n],o);return o}(t||"*",s.nodeType?[s]:s,[]),g=!e||!a&&t?f:Ce(f,d,e,s,c),b=o?r||(a?e:p||n)?[]:i:g;if(o&&o(g,b,s,c),n)for(l=Ce(b,h),n(l,[],s,c),u=l.length;u--;)(m=l[u])&&(b[h[u]]=!(g[h[u]]=m));if(a){if(r||e){if(r){for(l=[],u=b.length;u--;)(m=b[u])&&l.push(g[u]=m);r(null,b=[],l,c)}for(u=b.length;u--;)(m=b[u])&&(l=r?B(a,m):d[u])>-1&&(a[l]=!(i[l]=m))}}else b=Ce(b===i?b.splice(p,b.length):b),r?r(null,i,b,c):z.apply(i,b)}))}function xe(e){for(var t,o,r,a=e.length,i=n.relative[e[0].type],s=i||n.relative[" "],c=i?1:0,u=we((function(e){return e===t}),s,!0),m=we((function(e){return B(t,e)>-1}),s,!0),d=[function(e,o,n){var r=!i&&(n||o!==l)||((t=o).nodeType?u(e,o,n):m(e,o,n));return t=null,r}];c<a;c++)if(o=n.relative[e[c].type])d=[we(ke(d),o)];else{if((o=n.filter[e[c].type].apply(null,e[c].matches))[w]){for(r=++c;r<a&&!n.relative[e[r].type];r++);return Ae(c>1&&ke(d),c>1&&ye(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(H,"$1"),o,c<r&&xe(e.slice(c,r)),r<a&&xe(e=e.slice(r)),r<a&&ye(e))}d.push(o)}return ke(d)}return ve.prototype=n.filters=n.pseudos,n.setFilters=new ve,i=se.tokenize=function(e,t){var o,r,a,i,s,c,l,u=E[e+" "];if(u)return t?0:u.slice(0);for(s=e,c=[],l=n.preFilter;s;){for(i in o&&!(r=O.exec(s))||(r&&(s=s.slice(r[0].length)||s),c.push(a=[])),o=!1,(r=L.exec(s))&&(o=r.shift(),a.push({value:o,type:r[0].replace(H," ")}),s=s.slice(o.length)),n.filter)!(r=Q[i].exec(s))||l[i]&&!(r=l[i](r))||(o=r.shift(),a.push({value:o,type:i,matches:r}),s=s.slice(o.length));if(!o)break}return t?s.length:s?se.error(e):E(e,c).slice(0)},s=se.compile=function(e,t){var o,r=[],a=[],s=_[e+" "];if(!s){for(t||(t=i(e)),o=t.length;o--;)(s=xe(t[o]))[w]?r.push(s):a.push(s);(s=_(e,function(e,t){var o=t.length>0,r=e.length>0,a=function(a,i,s,c,u){var m,p,g,b=0,v="0",y=a&&[],w=[],k=l,A=a||r&&n.find.TAG("*",u),x=C+=null==k?1:Math.random()||.1,E=A.length;for(u&&(l=i===h||i||u);v!==E&&null!=(m=A[v]);v++){if(r&&m){for(p=0,i||m.ownerDocument===h||(d(m),s=!f);g=e[p++];)if(g(m,i||h,s)){c.push(m);break}u&&(C=x)}o&&((m=!g&&m)&&b--,a&&y.push(m))}if(b+=v,o&&v!==b){for(p=0;g=t[p++];)g(y,w,i,s);if(a){if(b>0)for(;v--;)y[v]||w[v]||(w[v]=q.call(c));w=Ce(w)}z.apply(c,w),u&&!a&&w.length>0&&b+t.length>1&&se.uniqueSort(c)}return u&&(C=x,l=k),y};return o?le(a):a}(a,r))).selector=e}return s},c=se.select=function(e,t,o,r){var a,c,l,u,m,d="function"==typeof e&&e,h=!r&&i(e=d.selector||e);if(o=o||[],1===h.length){if((c=h[0]=h[0].slice(0)).length>2&&"ID"===(l=c[0]).type&&9===t.nodeType&&f&&n.relative[c[1].type]){if(!(t=(n.find.ID(l.matches[0].replace(te,oe),t)||[])[0]))return o;d&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(a=Q.needsContext.test(e)?0:c.length;a--&&(l=c[a],!n.relative[u=l.type]);)if((m=n.find[u])&&(r=m(l.matches[0].replace(te,oe),ee.test(c[0].type)&&be(t.parentNode)||t))){if(c.splice(a,1),!(e=r.length&&ye(c)))return z.apply(o,r),o;break}}return(d||s(e,h))(r,t,!f,o,!t||ee.test(e)&&be(t.parentNode)||t),o},o.sortStable=w.split("").sort(D).join("")===w,o.detectDuplicates=!!m,d(),o.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||me("type|href|height|width",(function(e,t,o){if(!o)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),o.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||me("value",(function(e,t,o){if(!o&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||me(G,(function(e,t,o){var n;if(!o)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null})),se}(e);w.find=A,w.expr=A.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=A.uniqueSort,w.text=A.getText,w.isXMLDoc=A.isXML,w.contains=A.contains,w.escapeSelector=A.escape;var x=function(e,t,o){for(var n=[],r=void 0!==o;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&w(e).is(o))break;n.push(e)}return n},E=function(e,t){for(var o=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&o.push(e);return o},_=w.expr.match.needsContext;function M(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function T(e,t,o){return f(t)?w.grep(e,(function(e,n){return!!t.call(e,n,e)!==o})):t.nodeType?w.grep(e,(function(e){return e===t!==o})):"string"!=typeof t?w.grep(e,(function(e){return c.call(t,e)>-1!==o})):w.filter(t,e,o)}w.filter=function(e,t,o){var n=t[0];return o&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?w.find.matchesSelector(n,e)?[n]:[]:w.find.matches(e,w.grep(t,(function(e){return 1===e.nodeType})))},w.fn.extend({find:function(e){var t,o,n=this.length,r=this;if("string"!=typeof e)return this.pushStack(w(e).filter((function(){for(t=0;t<n;t++)if(w.contains(r[t],this))return!0})));for(o=this.pushStack([]),t=0;t<n;t++)w.find(e,r[t],o);return n>1?w.uniqueSort(o):o},filter:function(e){return this.pushStack(T(this,e||[],!1))},not:function(e){return this.pushStack(T(this,e||[],!0))},is:function(e){return!!T(this,"string"==typeof e&&_.test(e)?w(e):e||[],!1).length}});var S,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,o){var r,a;if(!e)return this;if(o=o||S,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:q.exec(e))||!r[1]&&t)return!t||t.jquery?(t||o).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:n,!0)),D.test(r[1])&&w.isPlainObject(t))for(r in t)f(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=n.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):f(e)?void 0!==o.ready?o.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,S=w(n);var R=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function V(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),o=t.length;return this.filter((function(){for(var e=0;e<o;e++)if(w.contains(this,t[e]))return!0}))},closest:function(e,t){var o,n=0,r=this.length,a=[],i="string"!=typeof e&&w(e);if(!_.test(e))for(;n<r;n++)for(o=this[n];o&&o!==t;o=o.parentNode)if(o.nodeType<11&&(i?i.index(o)>-1:1===o.nodeType&&w.find.matchesSelector(o,e))){a.push(o);break}return this.pushStack(a.length>1?w.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?c.call(w(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x(e,"parentNode")},parentsUntil:function(e,t,o){return x(e,"parentNode",o)},next:function(e){return V(e,"nextSibling")},prev:function(e){return V(e,"previousSibling")},nextAll:function(e){return x(e,"nextSibling")},prevAll:function(e){return x(e,"previousSibling")},nextUntil:function(e,t,o){return x(e,"nextSibling",o)},prevUntil:function(e,t,o){return x(e,"previousSibling",o)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(M(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},(function(e,t){w.fn[e]=function(o,n){var r=w.map(this,t,o);return"Until"!==e.slice(-5)&&(n=o),n&&"string"==typeof n&&(r=w.filter(n,r)),this.length>1&&(z[e]||w.uniqueSort(r),R.test(e)&&r.reverse()),this.pushStack(r)}}));var B=/[^\x20\t\r\n\f]+/g;function G(e){return e}function P(e){throw e}function N(e,t,o,n){var r;try{e&&f(r=e.promise)?r.call(e).done(t).fail(o):e&&f(r=e.then)?r.call(e,t,o):t.apply(void 0,[e].slice(n))}catch(e){o.apply(void 0,[e])}}w.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return w.each(e.match(B)||[],(function(e,o){t[o]=!0})),t}(e):w.extend({},e);var t,o,n,r,a=[],i=[],s=-1,c=function(){for(r=r||e.once,n=t=!0;i.length;s=-1)for(o=i.shift();++s<a.length;)!1===a[s].apply(o[0],o[1])&&e.stopOnFalse&&(s=a.length,o=!1);e.memory||(o=!1),t=!1,r&&(a=o?[]:"")},l={add:function(){return a&&(o&&!t&&(s=a.length-1,i.push(o)),function t(o){w.each(o,(function(o,n){f(n)?e.unique&&l.has(n)||a.push(n):n&&n.length&&"string"!==y(n)&&t(n)}))}(arguments),o&&!t&&c()),this},remove:function(){return w.each(arguments,(function(e,t){for(var o;(o=w.inArray(t,a,o))>-1;)a.splice(o,1),o<=s&&s--})),this},has:function(e){return e?w.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return r=i=[],a=o="",this},disabled:function(){return!a},lock:function(){return r=i=[],o||t||(a=o=""),this},locked:function(){return!!r},fireWith:function(e,o){return r||(o=[e,(o=o||[]).slice?o.slice():o],i.push(o),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!n}};return l},w.extend({Deferred:function(t){var o=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return w.Deferred((function(t){w.each(o,(function(o,n){var r=f(e[n[4]])&&e[n[4]];a[n[1]]((function(){var e=r&&r.apply(this,arguments);e&&f(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(t,n,r){var a=0;function i(t,o,n,r){return function(){var s=this,c=arguments,l=function(){var e,l;if(!(t<a)){if((e=n.apply(s,c))===o.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,f(l)?r?l.call(e,i(a,o,G,r),i(a,o,P,r)):(a++,l.call(e,i(a,o,G,r),i(a,o,P,r),i(a,o,G,o.notifyWith))):(n!==G&&(s=void 0,c=[e]),(r||o.resolveWith)(s,c))}},u=r?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,u.stackTrace),t+1>=a&&(n!==P&&(s=void 0,c=[e]),o.rejectWith(s,c))}};t?u():(w.Deferred.getStackHook&&(u.stackTrace=w.Deferred.getStackHook()),e.setTimeout(u))}}return w.Deferred((function(e){o[0][3].add(i(0,e,f(r)?r:G,e.notifyWith)),o[1][3].add(i(0,e,f(t)?t:G)),o[2][3].add(i(0,e,f(n)?n:P))})).promise()},promise:function(e){return null!=e?w.extend(e,r):r}},a={};return w.each(o,(function(e,t){var i=t[2],s=t[5];r[t[1]]=i.add,s&&i.add((function(){n=s}),o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith})),r.promise(a),t&&t.call(a,a),a},when:function(e){var t=arguments.length,o=t,n=Array(o),r=a.call(arguments),i=w.Deferred(),s=function(e){return function(o){n[e]=this,r[e]=arguments.length>1?a.call(arguments):o,--t||i.resolveWith(n,r)}};if(t<=1&&(N(e,i.done(s(o)).resolve,i.reject,!t),"pending"===i.state()||f(r[o]&&r[o].then)))return i.then();for(;o--;)N(r[o],s(o),i.reject);return i.promise()}});var j=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(t,o){e.console&&e.console.warn&&t&&j.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,o)},w.readyException=function(t){e.setTimeout((function(){throw t}))};var F=w.Deferred();function I(){n.removeEventListener("DOMContentLoaded",I),e.removeEventListener("load",I),w.ready()}w.fn.ready=function(e){return F.then(e).catch((function(e){w.readyException(e)})),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(n,[w]))}}),w.ready.then=F.then,"complete"===n.readyState||"loading"!==n.readyState&&!n.documentElement.doScroll?e.setTimeout(w.ready):(n.addEventListener("DOMContentLoaded",I),e.addEventListener("load",I));var H=function(e,t,o,n,r,a,i){var s=0,c=e.length,l=null==o;if("object"===y(o))for(s in r=!0,o)H(e,t,s,o[s],!0,a,i);else if(void 0!==n&&(r=!0,f(n)||(i=!0),l&&(i?(t.call(e,n),t=null):(l=t,t=function(e,t,o){return l.call(w(e),o)})),t))for(;s<c;s++)t(e[s],o,i?n:n.call(e[s],s,t(e[s],o)));return r?e:l?t.call(e):c?t(e[0],o):a},O=/^-ms-/,L=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function W(e){return e.replace(O,"ms-").replace(L,U)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,o){var n,r=this.cache(e);if("string"==typeof t)r[W(t)]=o;else for(n in t)r[W(n)]=t[n];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][W(t)]},access:function(e,t,o){return void 0===t||t&&"string"==typeof t&&void 0===o?this.get(e,t):(this.set(e,t,o),void 0!==o?o:t)},remove:function(e,t){var o,n=e[this.expando];if(void 0!==n){if(void 0!==t){o=(t=Array.isArray(t)?t.map(W):(t=W(t))in n?[t]:t.match(B)||[]).length;for(;o--;)delete n[t[o]]}(void 0===t||w.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var K=new Q,Y=new Q,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function X(e,t,o){var n;if(void 0===o&&1===e.nodeType)if(n="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(o=e.getAttribute(n))){try{o=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:J.test(e)?JSON.parse(e):e)}(o)}catch(e){}Y.set(e,t,o)}else o=void 0;return o}w.extend({hasData:function(e){return Y.hasData(e)||K.hasData(e)},data:function(e,t,o){return Y.access(e,t,o)},removeData:function(e,t){Y.remove(e,t)},_data:function(e,t,o){return K.access(e,t,o)},_removeData:function(e,t){K.remove(e,t)}}),w.fn.extend({data:function(e,t){var o,n,r,a=this[0],i=a&&a.attributes;if(void 0===e){if(this.length&&(r=Y.get(a),1===a.nodeType&&!K.get(a,"hasDataAttrs"))){for(o=i.length;o--;)i[o]&&0===(n=i[o].name).indexOf("data-")&&(n=W(n.slice(5)),X(a,n,r[n]));K.set(a,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Y.set(this,e)})):H(this,(function(t){var o;if(a&&void 0===t)return void 0!==(o=Y.get(a,e))||void 0!==(o=X(a,e))?o:void 0;this.each((function(){Y.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Y.remove(this,e)}))}}),w.extend({queue:function(e,t,o){var n;if(e)return t=(t||"fx")+"queue",n=K.get(e,t),o&&(!n||Array.isArray(o)?n=K.access(e,t,w.makeArray(o)):n.push(o)),n||[]},dequeue:function(e,t){t=t||"fx";var o=w.queue(e,t),n=o.length,r=o.shift(),a=w._queueHooks(e,t);"inprogress"===r&&(r=o.shift(),n--),r&&("fx"===t&&o.unshift("inprogress"),delete a.stop,r.call(e,(function(){w.dequeue(e,t)}),a)),!n&&a&&a.empty.fire()},_queueHooks:function(e,t){var o=t+"queueHooks";return K.get(e,o)||K.access(e,o,{empty:w.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",o])}))})}}),w.fn.extend({queue:function(e,t){var o=2;return"string"!=typeof e&&(t=e,e="fx",o--),arguments.length<o?w.queue(this[0],e):void 0===t?this:this.each((function(){var o=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==o[0]&&w.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){w.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var o,n=1,r=w.Deferred(),a=this,i=this.length,s=function(){--n||r.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";i--;)(o=K.get(a[i],e+"queueHooks"))&&o.empty&&(n++,o.empty.add(s));return s(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ne=n.documentElement,re=function(e){return w.contains(e.ownerDocument,e)},ae={composed:!0};ne.getRootNode&&(re=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var ie=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&re(e)&&"none"===w.css(e,"display")},se=function(e,t,o,n){var r,a,i={};for(a in t)i[a]=e.style[a],e.style[a]=t[a];for(a in r=o.apply(e,n||[]),t)e.style[a]=i[a];return r};function ce(e,t,o,n){var r,a,i=20,s=n?function(){return n.cur()}:function(){return w.css(e,t,"")},c=s(),l=o&&o[3]||(w.cssNumber[t]?"":"px"),u=e.nodeType&&(w.cssNumber[t]||"px"!==l&&+c)&&te.exec(w.css(e,t));if(u&&u[3]!==l){for(c/=2,l=l||u[3],u=+c||1;i--;)w.style(e,t,u+l),(1-a)*(1-(a=s()/c||.5))<=0&&(i=0),u/=a;u*=2,w.style(e,t,u+l),o=o||[]}return o&&(u=+u||+c||0,r=o[1]?u+(o[1]+1)*o[2]:+o[2],n&&(n.unit=l,n.start=u,n.end=r)),r}var le={};function ue(e){var t,o=e.ownerDocument,n=e.nodeName,r=le[n];return r||(t=o.body.appendChild(o.createElement(n)),r=w.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),le[n]=r,r)}function me(e,t){for(var o,n,r=[],a=0,i=e.length;a<i;a++)(n=e[a]).style&&(o=n.style.display,t?("none"===o&&(r[a]=K.get(n,"display")||null,r[a]||(n.style.display="")),""===n.style.display&&ie(n)&&(r[a]=ue(n))):"none"!==o&&(r[a]="none",K.set(n,"display",o)));for(a=0;a<i;a++)null!=r[a]&&(e[a].style.display=r[a]);return e}w.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ie(this)?w(this).show():w(this).hide()}))}});var de=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,fe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var o;return o=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&M(e,t)?w.merge([e],o):o}function be(e,t){for(var o=0,n=e.length;o<n;o++)K.set(e[o],"globalEval",!t||K.get(t[o],"globalEval"))}fe.optgroup=fe.option,fe.tbody=fe.tfoot=fe.colgroup=fe.caption=fe.thead,fe.th=fe.td;var ve,ye,we=/<|&#?\w+;/;function ke(e,t,o,n,r){for(var a,i,s,c,l,u,m=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((a=e[h])||0===a)if("object"===y(a))w.merge(d,a.nodeType?[a]:a);else if(we.test(a)){for(i=i||m.appendChild(t.createElement("div")),s=(he.exec(a)||["",""])[1].toLowerCase(),c=fe[s]||fe._default,i.innerHTML=c[1]+w.htmlPrefilter(a)+c[2],u=c[0];u--;)i=i.lastChild;w.merge(d,i.childNodes),(i=m.firstChild).textContent=""}else d.push(t.createTextNode(a));for(m.textContent="",h=0;a=d[h++];)if(n&&w.inArray(a,n)>-1)r&&r.push(a);else if(l=re(a),i=ge(m.appendChild(a),"script"),l&&be(i),o)for(u=0;a=i[u++];)pe.test(a.type||"")&&o.push(a);return m}ve=n.createDocumentFragment().appendChild(n.createElement("div")),(ye=n.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),ve.appendChild(ye),p.checkClone=ve.cloneNode(!0).cloneNode(!0).lastChild.checked,ve.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!ve.cloneNode(!0).lastChild.defaultValue;var Ce=/^key/,Ae=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xe=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function _e(){return!1}function Me(e,t){return e===function(){try{return n.activeElement}catch(e){}}()==("focus"===t)}function De(e,t,o,n,r,a){var i,s;if("object"==typeof t){for(s in"string"!=typeof o&&(n=n||o,o=void 0),t)De(e,s,o,n,t[s],a);return e}if(null==n&&null==r?(r=o,n=o=void 0):null==r&&("string"==typeof o?(r=n,n=void 0):(r=n,n=o,o=void 0)),!1===r)r=_e;else if(!r)return e;return 1===a&&(i=r,(r=function(e){return w().off(e),i.apply(this,arguments)}).guid=i.guid||(i.guid=w.guid++)),e.each((function(){w.event.add(this,t,r,n,o)}))}function Te(e,t,o){o?(K.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var n,r,i=K.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),K.set(this,t,i),n=o(this,t),this[t](),i!==(r=K.get(this,t))||n?K.set(this,t,!1):r={},i!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else i.length&&(K.set(this,t,{value:w.event.trigger(w.extend(i[0],w.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&w.event.add(e,t,Ee)}w.event={global:{},add:function(e,t,o,n,r){var a,i,s,c,l,u,m,d,h,p,f,g=K.get(e);if(g)for(o.handler&&(o=(a=o).handler,r=a.selector),r&&w.find.matchesSelector(ne,r),o.guid||(o.guid=w.guid++),(c=g.events)||(c=g.events={}),(i=g.handle)||(i=g.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(B)||[""]).length;l--;)h=f=(s=xe.exec(t[l])||[])[1],p=(s[2]||"").split(".").sort(),h&&(m=w.event.special[h]||{},h=(r?m.delegateType:m.bindType)||h,m=w.event.special[h]||{},u=w.extend({type:h,origType:f,data:n,handler:o,guid:o.guid,selector:r,needsContext:r&&w.expr.match.needsContext.test(r),namespace:p.join(".")},a),(d=c[h])||((d=c[h]=[]).delegateCount=0,m.setup&&!1!==m.setup.call(e,n,p,i)||e.addEventListener&&e.addEventListener(h,i)),m.add&&(m.add.call(e,u),u.handler.guid||(u.handler.guid=o.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),w.event.global[h]=!0)},remove:function(e,t,o,n,r){var a,i,s,c,l,u,m,d,h,p,f,g=K.hasData(e)&&K.get(e);if(g&&(c=g.events)){for(l=(t=(t||"").match(B)||[""]).length;l--;)if(h=f=(s=xe.exec(t[l])||[])[1],p=(s[2]||"").split(".").sort(),h){for(m=w.event.special[h]||{},d=c[h=(n?m.delegateType:m.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=a=d.length;a--;)u=d[a],!r&&f!==u.origType||o&&o.guid!==u.guid||s&&!s.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(d.splice(a,1),u.selector&&d.delegateCount--,m.remove&&m.remove.call(e,u));i&&!d.length&&(m.teardown&&!1!==m.teardown.call(e,p,g.handle)||w.removeEvent(e,h,g.handle),delete c[h])}else for(h in c)w.event.remove(e,h+t[l],o,n,!0);w.isEmptyObject(c)&&K.remove(e,"handle events")}},dispatch:function(e){var t,o,n,r,a,i,s=w.event.fix(e),c=new Array(arguments.length),l=(K.get(this,"events")||{})[s.type]||[],u=w.event.special[s.type]||{};for(c[0]=s,t=1;t<arguments.length;t++)c[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(i=w.event.handlers.call(this,s,l),t=0;(r=i[t++])&&!s.isPropagationStopped();)for(s.currentTarget=r.elem,o=0;(a=r.handlers[o++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==a.namespace&&!s.rnamespace.test(a.namespace)||(s.handleObj=a,s.data=a.data,void 0!==(n=((w.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,c))&&!1===(s.result=n)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var o,n,r,a,i,s=[],c=t.delegateCount,l=e.target;if(c&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(a=[],i={},o=0;o<c;o++)void 0===i[r=(n=t[o]).selector+" "]&&(i[r]=n.needsContext?w(r,this).index(l)>-1:w.find(r,this,null,[l]).length),i[r]&&a.push(n);a.length&&s.push({elem:l,handlers:a})}return l=this,c<t.length&&s.push({elem:l,handlers:t.slice(c)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:f(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return de.test(t.type)&&t.click&&M(t,"input")&&Te(t,"click",Ee),!1},trigger:function(e){var t=this||e;return de.test(t.type)&&t.click&&M(t,"input")&&Te(t,"click"),!0},_default:function(e){var t=e.target;return de.test(t.type)&&t.click&&M(t,"input")&&K.get(t,"click")||M(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,o){e.removeEventListener&&e.removeEventListener(t,o)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:_e,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:_e,isPropagationStopped:_e,isImmediatePropagationStopped:_e,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ce.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ae.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(e,t){w.event.special[e]={setup:function(){return Te(this,e,Me),!1},trigger:function(){return Te(this,e),!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var o,n=this,r=e.relatedTarget,a=e.handleObj;return r&&(r===n||w.contains(n,r))||(e.type=a.origType,o=a.handler.apply(this,arguments),e.type=t),o}}})),w.fn.extend({on:function(e,t,o,n){return De(this,e,t,o,n)},one:function(e,t,o,n){return De(this,e,t,o,n,1)},off:function(e,t,o){var n,r;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,w(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(o=t,t=void 0),!1===o&&(o=_e),this.each((function(){w.event.remove(this,e,o,t)}))}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Re=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ve(e,t){return M(e,"table")&&M(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function Be(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ge(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var o,n,r,a,i,s,c,l;if(1===t.nodeType){if(K.hasData(e)&&(a=K.access(e),i=K.set(t,a),l=a.events))for(r in delete i.handle,i.events={},l)for(o=0,n=l[r].length;o<n;o++)w.event.add(t,r,l[r][o]);Y.hasData(e)&&(s=Y.access(e),c=w.extend({},s),Y.set(t,c))}}function Ne(e,t){var o=t.nodeName.toLowerCase();"input"===o&&de.test(e.type)?t.checked=e.checked:"input"!==o&&"textarea"!==o||(t.defaultValue=e.defaultValue)}function je(e,t,o,n){t=i.apply([],t);var r,a,s,c,l,u,m=0,d=e.length,h=d-1,g=t[0],b=f(g);if(b||d>1&&"string"==typeof g&&!p.checkClone&&Re.test(g))return e.each((function(r){var a=e.eq(r);b&&(t[0]=g.call(this,r,a.html())),je(a,t,o,n)}));if(d&&(a=(r=ke(t,e[0].ownerDocument,!1,e,n)).firstChild,1===r.childNodes.length&&(r=a),a||n)){for(c=(s=w.map(ge(r,"script"),Be)).length;m<d;m++)l=r,m!==h&&(l=w.clone(l,!0,!0),c&&w.merge(s,ge(l,"script"))),o.call(e[m],l,m);if(c)for(u=s[s.length-1].ownerDocument,w.map(s,Ge),m=0;m<c;m++)l=s[m],pe.test(l.type||"")&&!K.access(l,"globalEval")&&w.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&!l.noModule&&w._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):v(l.textContent.replace(ze,""),l,u))}return e}function Fe(e,t,o){for(var n,r=t?w.filter(t,e):e,a=0;null!=(n=r[a]);a++)o||1!==n.nodeType||w.cleanData(ge(n)),n.parentNode&&(o&&re(n)&&be(ge(n,"script")),n.parentNode.removeChild(n));return e}w.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,o){var n,r,a,i,s=e.cloneNode(!0),c=re(e);if(!(p.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(i=ge(s),n=0,r=(a=ge(e)).length;n<r;n++)Ne(a[n],i[n]);if(t)if(o)for(a=a||ge(e),i=i||ge(s),n=0,r=a.length;n<r;n++)Pe(a[n],i[n]);else Pe(e,s);return(i=ge(s,"script")).length>0&&be(i,!c&&ge(e,"script")),s},cleanData:function(e){for(var t,o,n,r=w.event.special,a=0;void 0!==(o=e[a]);a++)if($(o)){if(t=o[K.expando]){if(t.events)for(n in t.events)r[n]?w.event.remove(o,n):w.removeEvent(o,n,t.handle);o[K.expando]=void 0}o[Y.expando]&&(o[Y.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Fe(this,e,!0)},remove:function(e){return Fe(this,e)},text:function(e){return H(this,(function(e){return void 0===e?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ve(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ve(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return w.clone(this,e,t)}))},html:function(e){return H(this,(function(e){var t=this[0]||{},o=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!fe[(he.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;o<n;o++)1===(t=this[o]||{}).nodeType&&(w.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var o=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ge(this)),o&&o.replaceChild(t,this))}),e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){w.fn[e]=function(e){for(var o,n=[],r=w(e),a=r.length-1,i=0;i<=a;i++)o=i===a?this:this.clone(!0),w(r[i])[t](o),s.apply(n,o.get());return this.pushStack(n)}}));var Ie=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),He=function(t){var o=t.ownerDocument.defaultView;return o&&o.opener||(o=e),o.getComputedStyle(t)},Oe=new RegExp(oe.join("|"),"i");function Le(e,t,o){var n,r,a,i,s=e.style;return(o=o||He(e))&&(""!==(i=o.getPropertyValue(t)||o[t])||re(e)||(i=w.style(e,t)),!p.pixelBoxStyles()&&Ie.test(i)&&Oe.test(t)&&(n=s.width,r=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=i,i=o.width,s.width=n,s.minWidth=r,s.maxWidth=a)),void 0!==i?i+"":i}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(l).appendChild(u);var t=e.getComputedStyle(u);r="1%"!==t.top,c=12===o(t.marginLeft),u.style.right="60%",s=36===o(t.right),a=36===o(t.width),u.style.position="absolute",i=12===o(u.offsetWidth/3),ne.removeChild(l),u=null}}function o(e){return Math.round(parseFloat(e))}var r,a,i,s,c,l=n.createElement("div"),u=n.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===u.style.backgroundClip,w.extend(p,{boxSizingReliable:function(){return t(),a},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),i}}))}();var We=["Webkit","Moz","ms"],$e=n.createElement("div").style,Qe={};function Ke(e){var t=w.cssProps[e]||Qe[e];return t||(e in $e?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),o=We.length;o--;)if((e=We[o]+t)in $e)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Je=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},Xe={letterSpacing:"0",fontWeight:"400"};function et(e,t,o){var n=te.exec(t);return n?Math.max(0,n[2]-(o||0))+(n[3]||"px"):t}function tt(e,t,o,n,r,a){var i="width"===t?1:0,s=0,c=0;if(o===(n?"border":"content"))return 0;for(;i<4;i+=2)"margin"===o&&(c+=w.css(e,o+oe[i],!0,r)),n?("content"===o&&(c-=w.css(e,"padding"+oe[i],!0,r)),"margin"!==o&&(c-=w.css(e,"border"+oe[i]+"Width",!0,r))):(c+=w.css(e,"padding"+oe[i],!0,r),"padding"!==o?c+=w.css(e,"border"+oe[i]+"Width",!0,r):s+=w.css(e,"border"+oe[i]+"Width",!0,r));return!n&&a>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-c-s-.5))||0),c}function ot(e,t,o){var n=He(e),r=(!p.boxSizingReliable()||o)&&"border-box"===w.css(e,"boxSizing",!1,n),a=r,i=Le(e,t,n),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ie.test(i)){if(!o)return i;i="auto"}return(!p.boxSizingReliable()&&r||"auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,n))&&e.getClientRects().length&&(r="border-box"===w.css(e,"boxSizing",!1,n),(a=s in e)&&(i=e[s])),(i=parseFloat(i)||0)+tt(e,t,o||(r?"border":"content"),a,n,i)+"px"}function nt(e,t,o,n,r){return new nt.prototype.init(e,t,o,n,r)}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var o=Le(e,"opacity");return""===o?"1":o}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,o,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,a,i,s=W(t),c=Je.test(t),l=e.style;if(c||(t=Ke(s)),i=w.cssHooks[t]||w.cssHooks[s],void 0===o)return i&&"get"in i&&void 0!==(r=i.get(e,!1,n))?r:l[t];"string"===(a=typeof o)&&(r=te.exec(o))&&r[1]&&(o=ce(e,t,r),a="number"),null!=o&&o==o&&("number"!==a||c||(o+=r&&r[3]||(w.cssNumber[s]?"":"px")),p.clearCloneStyle||""!==o||0!==t.indexOf("background")||(l[t]="inherit"),i&&"set"in i&&void 0===(o=i.set(e,o,n))||(c?l.setProperty(t,o):l[t]=o))}},css:function(e,t,o,n){var r,a,i,s=W(t);return Je.test(t)||(t=Ke(s)),(i=w.cssHooks[t]||w.cssHooks[s])&&"get"in i&&(r=i.get(e,!0,o)),void 0===r&&(r=Le(e,t,n)),"normal"===r&&t in Xe&&(r=Xe[t]),""===o||o?(a=parseFloat(r),!0===o||isFinite(a)?a||0:r):r}}),w.each(["height","width"],(function(e,t){w.cssHooks[t]={get:function(e,o,n){if(o)return!Ye.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ot(e,t,n):se(e,Ze,(function(){return ot(e,t,n)}))},set:function(e,o,n){var r,a=He(e),i=!p.scrollboxSize()&&"absolute"===a.position,s=(i||n)&&"border-box"===w.css(e,"boxSizing",!1,a),c=n?tt(e,t,n,s,a):0;return s&&i&&(c-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-tt(e,t,"border",!1,a)-.5)),c&&(r=te.exec(o))&&"px"!==(r[3]||"px")&&(e.style[t]=o,o=w.css(e,t)),et(0,o,c)}}})),w.cssHooks.marginLeft=Ue(p.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Le(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(e,t){w.cssHooks[e+t]={expand:function(o){for(var n=0,r={},a="string"==typeof o?o.split(" "):[o];n<4;n++)r[e+oe[n]+t]=a[n]||a[n-2]||a[0];return r}},"margin"!==e&&(w.cssHooks[e+t].set=et)})),w.fn.extend({css:function(e,t){return H(this,(function(e,t,o){var n,r,a={},i=0;if(Array.isArray(t)){for(n=He(e),r=t.length;i<r;i++)a[t[i]]=w.css(e,t[i],!1,n);return a}return void 0!==o?w.style(e,t,o):w.css(e,t)}),e,t,arguments.length>1)}}),w.Tween=nt,nt.prototype={constructor:nt,init:function(e,t,o,n,r,a){this.elem=e,this.prop=o,this.easing=r||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=a||(w.cssNumber[o]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,o=nt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),o&&o.set?o.set(this):nt.propHooks._default.set(this),this}},nt.prototype.init.prototype=nt.prototype,nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||!w.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},nt.propHooks.scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=nt.prototype.init,w.fx.step={};var rt,at,it=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function ct(){at&&(!1===n.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(ct):e.setTimeout(ct,w.fx.interval),w.fx.tick())}function lt(){return e.setTimeout((function(){rt=void 0})),rt=Date.now()}function ut(e,t){var o,n=0,r={height:e};for(t=t?1:0;n<4;n+=2-t)r["margin"+(o=oe[n])]=r["padding"+o]=e;return t&&(r.opacity=r.width=e),r}function mt(e,t,o){for(var n,r=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),a=0,i=r.length;a<i;a++)if(n=r[a].call(o,t,e))return n}function dt(e,t,o){var n,r,a=0,i=dt.prefilters.length,s=w.Deferred().always((function(){delete c.elem})),c=function(){if(r)return!1;for(var t=rt||lt(),o=Math.max(0,l.startTime+l.duration-t),n=1-(o/l.duration||0),a=0,i=l.tweens.length;a<i;a++)l.tweens[a].run(n);return s.notifyWith(e,[l,n,o]),n<1&&i?o:(i||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},o),originalProperties:t,originalOptions:o,startTime:rt||lt(),duration:o.duration,tweens:[],createTween:function(t,o){var n=w.Tween(e,l.opts,t,o,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(n),n},stop:function(t){var o=0,n=t?l.tweens.length:0;if(r)return this;for(r=!0;o<n;o++)l.tweens[o].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),u=l.props;for(!function(e,t){var o,n,r,a,i;for(o in e)if(r=t[n=W(o)],a=e[o],Array.isArray(a)&&(r=a[1],a=e[o]=a[0]),o!==n&&(e[n]=a,delete e[o]),(i=w.cssHooks[n])&&"expand"in i)for(o in a=i.expand(a),delete e[n],a)o in e||(e[o]=a[o],t[o]=r);else t[n]=r}(u,l.opts.specialEasing);a<i;a++)if(n=dt.prefilters[a].call(l,e,u,l.opts))return f(n.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return w.map(u,mt,l),f(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(c,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(dt,{tweeners:{"*":[function(e,t){var o=this.createTween(e,t);return ce(o.elem,e,te.exec(t),o),o}]},tweener:function(e,t){f(e)?(t=e,e=["*"]):e=e.match(B);for(var o,n=0,r=e.length;n<r;n++)o=e[n],dt.tweeners[o]=dt.tweeners[o]||[],dt.tweeners[o].unshift(t)},prefilters:[function(e,t,o){var n,r,a,i,s,c,l,u,m="width"in t||"height"in t,d=this,h={},p=e.style,f=e.nodeType&&ie(e),g=K.get(e,"fxshow");for(n in o.queue||(null==(i=w._queueHooks(e,"fx")).unqueued&&(i.unqueued=0,s=i.empty.fire,i.empty.fire=function(){i.unqueued||s()}),i.unqueued++,d.always((function(){d.always((function(){i.unqueued--,w.queue(e,"fx").length||i.empty.fire()}))}))),t)if(r=t[n],it.test(r)){if(delete t[n],a=a||"toggle"===r,r===(f?"hide":"show")){if("show"!==r||!g||void 0===g[n])continue;f=!0}h[n]=g&&g[n]||w.style(e,n)}if((c=!w.isEmptyObject(t))||!w.isEmptyObject(h))for(n in m&&1===e.nodeType&&(o.overflow=[p.overflow,p.overflowX,p.overflowY],null==(l=g&&g.display)&&(l=K.get(e,"display")),"none"===(u=w.css(e,"display"))&&(l?u=l:(me([e],!0),l=e.style.display||l,u=w.css(e,"display"),me([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===w.css(e,"float")&&(c||(d.done((function(){p.display=l})),null==l&&(u=p.display,l="none"===u?"":u)),p.display="inline-block")),o.overflow&&(p.overflow="hidden",d.always((function(){p.overflow=o.overflow[0],p.overflowX=o.overflow[1],p.overflowY=o.overflow[2]}))),c=!1,h)c||(g?"hidden"in g&&(f=g.hidden):g=K.access(e,"fxshow",{display:l}),a&&(g.hidden=!f),f&&me([e],!0),d.done((function(){for(n in f||me([e]),K.remove(e,"fxshow"),h)w.style(e,n,h[n])}))),c=mt(f?g[n]:0,n,d),n in g||(g[n]=c.start,f&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),w.speed=function(e,t,o){var n=e&&"object"==typeof e?w.extend({},e):{complete:o||!o&&t||f(e)&&e,duration:e,easing:o&&t||t&&!f(t)&&t};return w.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in w.fx.speeds?n.duration=w.fx.speeds[n.duration]:n.duration=w.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){f(n.old)&&n.old.call(this),n.queue&&w.dequeue(this,n.queue)},n},w.fn.extend({fadeTo:function(e,t,o,n){return this.filter(ie).css("opacity",0).show().end().animate({opacity:t},e,o,n)},animate:function(e,t,o,n){var r=w.isEmptyObject(e),a=w.speed(t,o,n),i=function(){var t=dt(this,w.extend({},e),a);(r||K.get(this,"finish"))&&t.stop(!0)};return i.finish=i,r||!1===a.queue?this.each(i):this.queue(a.queue,i)},stop:function(e,t,o){var n=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof e&&(o=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",a=w.timers,i=K.get(this);if(r)i[r]&&i[r].stop&&n(i[r]);else for(r in i)i[r]&&i[r].stop&&st.test(r)&&n(i[r]);for(r=a.length;r--;)a[r].elem!==this||null!=e&&a[r].queue!==e||(a[r].anim.stop(o),t=!1,a.splice(r,1));!t&&o||w.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,o=K.get(this),n=o[e+"queue"],r=o[e+"queueHooks"],a=w.timers,i=n?n.length:0;for(o.finish=!0,w.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<i;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete o.finish}))}}),w.each(["toggle","show","hide"],(function(e,t){var o=w.fn[t];w.fn[t]=function(e,n,r){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(ut(t,!0),e,n,r)}})),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){w.fn[e]=function(e,o,n){return this.animate(t,e,o,n)}})),w.timers=[],w.fx.tick=function(){var e,t=0,o=w.timers;for(rt=Date.now();t<o.length;t++)(e=o[t])()||o[t]!==e||o.splice(t--,1);o.length||w.fx.stop(),rt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){at||(at=!0,ct())},w.fx.stop=function(){at=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,o){return t=w.fx&&w.fx.speeds[t]||t,o=o||"fx",this.queue(o,(function(o,n){var r=e.setTimeout(o,t);n.stop=function(){e.clearTimeout(r)}}))},function(){var e=n.createElement("input"),t=n.createElement("select").appendChild(n.createElement("option"));e.type="checkbox",p.checkOn=""!==e.value,p.optSelected=t.selected,(e=n.createElement("input")).value="t",e.type="radio",p.radioValue="t"===e.value}();var ht,pt=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return H(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){w.removeAttr(this,e)}))}}),w.extend({attr:function(e,t,o){var n,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?w.prop(e,t,o):(1===a&&w.isXMLDoc(e)||(r=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?ht:void 0)),void 0!==o?null===o?void w.removeAttr(e,t):r&&"set"in r&&void 0!==(n=r.set(e,o,t))?n:(e.setAttribute(t,o+""),o):r&&"get"in r&&null!==(n=r.get(e,t))?n:null==(n=w.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&"radio"===t&&M(e,"input")){var o=e.value;return e.setAttribute("type",t),o&&(e.value=o),t}}}},removeAttr:function(e,t){var o,n=0,r=t&&t.match(B);if(r&&1===e.nodeType)for(;o=r[n++];)e.removeAttribute(o)}}),ht={set:function(e,t,o){return!1===t?w.removeAttr(e,o):e.setAttribute(o,o),o}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(e,t){var o=pt[t]||w.find.attr;pt[t]=function(e,t,n){var r,a,i=t.toLowerCase();return n||(a=pt[i],pt[i]=r,r=null!=o(e,t,n)?i:null,pt[i]=a),r}}));var ft=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function bt(e){return(e.match(B)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(B)||[]}w.fn.extend({prop:function(e,t){return H(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[w.propFix[e]||e]}))}}),w.extend({prop:function(e,t,o){var n,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&w.isXMLDoc(e)||(t=w.propFix[t]||t,r=w.propHooks[t]),void 0!==o?r&&"set"in r&&void 0!==(n=r.set(e,o,t))?n:e[t]=o:r&&"get"in r&&null!==(n=r.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(e){var t,o,n,r,a,i,s,c=0;if(f(e))return this.each((function(t){w(this).addClass(e.call(this,t,vt(this)))}));if((t=yt(e)).length)for(;o=this[c++];)if(r=vt(o),n=1===o.nodeType&&" "+bt(r)+" "){for(i=0;a=t[i++];)n.indexOf(" "+a+" ")<0&&(n+=a+" ");r!==(s=bt(n))&&o.setAttribute("class",s)}return this},removeClass:function(e){var t,o,n,r,a,i,s,c=0;if(f(e))return this.each((function(t){w(this).removeClass(e.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;o=this[c++];)if(r=vt(o),n=1===o.nodeType&&" "+bt(r)+" "){for(i=0;a=t[i++];)for(;n.indexOf(" "+a+" ")>-1;)n=n.replace(" "+a+" "," ");r!==(s=bt(n))&&o.setAttribute("class",s)}return this},toggleClass:function(e,t){var o=typeof e,n="string"===o||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):f(e)?this.each((function(o){w(this).toggleClass(e.call(this,o,vt(this),t),t)})):this.each((function(){var t,r,a,i;if(n)for(r=0,a=w(this),i=yt(e);t=i[r++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==o||((t=vt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,o,n=0;for(t=" "+e+" ";o=this[n++];)if(1===o.nodeType&&(" "+bt(vt(o))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;w.fn.extend({val:function(e){var t,o,n,r=this[0];return arguments.length?(n=f(e),this.each((function(o){var r;1===this.nodeType&&(null==(r=n?e.call(this,o,w(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=w.map(r,(function(e){return null==e?"":e+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=w.valHooks[r.type]||w.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(o=t.get(r,"value"))?o:"string"==typeof(o=r.value)?o.replace(wt,""):null==o?"":o:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:bt(w.text(e))}},select:{get:function(e){var t,o,n,r=e.options,a=e.selectedIndex,i="select-one"===e.type,s=i?null:[],c=i?a+1:r.length;for(n=a<0?c:i?a:0;n<c;n++)if(((o=r[n]).selected||n===a)&&!o.disabled&&(!o.parentNode.disabled||!M(o.parentNode,"optgroup"))){if(t=w(o).val(),i)return t;s.push(t)}return s},set:function(e,t){for(var o,n,r=e.options,a=w.makeArray(t),i=r.length;i--;)((n=r[i]).selected=w.inArray(w.valHooks.option.get(n),a)>-1)&&(o=!0);return o||(e.selectedIndex=-1),a}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},p.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),p.focusin="onfocusin"in e;var kt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,o,r,a){var i,s,c,l,u,d,h,p,b=[r||n],v=m.call(t,"type")?t.type:t,y=m.call(t,"namespace")?t.namespace.split("."):[];if(s=p=c=r=r||n,3!==r.nodeType&&8!==r.nodeType&&!kt.test(v+w.event.triggered)&&(v.indexOf(".")>-1&&(y=v.split("."),v=y.shift(),y.sort()),u=v.indexOf(":")<0&&"on"+v,(t=t[w.expando]?t:new w.Event(v,"object"==typeof t&&t)).isTrigger=a?2:3,t.namespace=y.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),o=null==o?[t]:w.makeArray(o,[t]),h=w.event.special[v]||{},a||!h.trigger||!1!==h.trigger.apply(r,o))){if(!a&&!h.noBubble&&!g(r)){for(l=h.delegateType||v,kt.test(l+v)||(s=s.parentNode);s;s=s.parentNode)b.push(s),c=s;c===(r.ownerDocument||n)&&b.push(c.defaultView||c.parentWindow||e)}for(i=0;(s=b[i++])&&!t.isPropagationStopped();)p=s,t.type=i>1?l:h.bindType||v,(d=(K.get(s,"events")||{})[t.type]&&K.get(s,"handle"))&&d.apply(s,o),(d=u&&s[u])&&d.apply&&$(s)&&(t.result=d.apply(s,o),!1===t.result&&t.preventDefault());return t.type=v,a||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(b.pop(),o)||!$(r)||u&&f(r[v])&&!g(r)&&((c=r[u])&&(r[u]=null),w.event.triggered=v,t.isPropagationStopped()&&p.addEventListener(v,Ct),r[v](),t.isPropagationStopped()&&p.removeEventListener(v,Ct),w.event.triggered=void 0,c&&(r[u]=c)),t.result}},simulate:function(e,t,o){var n=w.extend(new w.Event,o,{type:e,isSimulated:!0});w.event.trigger(n,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each((function(){w.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var o=this[0];if(o)return w.event.trigger(e,t,o,!0)}}),p.focusin||w.each({focus:"focusin",blur:"focusout"},(function(e,t){var o=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var n=this.ownerDocument||this,r=K.access(n,t);r||n.addEventListener(e,o,!0),K.access(n,t,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=K.access(n,t)-1;r?K.access(n,t,r):(n.removeEventListener(e,o,!0),K.remove(n,t))}}}));var At=e.location,xt=Date.now(),Et=/\?/;w.parseXML=function(t){var o;if(!t||"string"!=typeof t)return null;try{o=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){o=void 0}return o&&!o.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),o};var _t=/\[\]$/,Mt=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function St(e,t,o,n){var r;if(Array.isArray(t))w.each(t,(function(t,r){o||_t.test(e)?n(e,r):St(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,o,n)}));else if(o||"object"!==y(t))n(e,t);else for(r in t)St(e+"["+r+"]",t[r],o,n)}w.param=function(e,t){var o,n=[],r=function(e,t){var o=f(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==o?"":o)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,(function(){r(this.name,this.value)}));else for(o in e)St(o,e[o],t,r);return n.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&Tt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!de.test(e))})).map((function(e,t){var o=w(this).val();return null==o?null:Array.isArray(o)?w.map(o,(function(e){return{name:t.name,value:e.replace(Mt,"\r\n")}})):{name:t.name,value:o.replace(Mt,"\r\n")}})).get()}});var qt=/%20/g,Rt=/#.*$/,zt=/([?&])_=[^&]*/,Vt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Bt=/^(?:GET|HEAD)$/,Gt=/^\/\//,Pt={},Nt={},jt="*/".concat("*"),Ft=n.createElement("a");function It(e){return function(t,o){"string"!=typeof t&&(o=t,t="*");var n,r=0,a=t.toLowerCase().match(B)||[];if(f(o))for(;n=a[r++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(o)):(e[n]=e[n]||[]).push(o)}}function Ht(e,t,o,n){var r={},a=e===Nt;function i(s){var c;return r[s]=!0,w.each(e[s]||[],(function(e,s){var l=s(t,o,n);return"string"!=typeof l||a||r[l]?a?!(c=l):void 0:(t.dataTypes.unshift(l),i(l),!1)})),c}return i(t.dataTypes[0])||!r["*"]&&i("*")}function Ot(e,t){var o,n,r=w.ajaxSettings.flatOptions||{};for(o in t)void 0!==t[o]&&((r[o]?e:n||(n={}))[o]=t[o]);return n&&w.extend(!0,e,n),e}Ft.href=At.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ot(Ot(e,w.ajaxSettings),t):Ot(w.ajaxSettings,e)},ajaxPrefilter:It(Pt),ajaxTransport:It(Nt),ajax:function(t,o){"object"==typeof t&&(o=t,t=void 0),o=o||{};var r,a,i,s,c,l,u,m,d,h,p=w.ajaxSetup({},o),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?w(f):w.event,b=w.Deferred(),v=w.Callbacks("once memory"),y=p.statusCode||{},k={},C={},A="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Vt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=C[e.toLowerCase()]=C[e.toLowerCase()]||e,k[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)x.always(e[x.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||A;return r&&r.abort(t),E(0,t),this}};if(b.promise(x),p.url=((t||p.url||At.href)+"").replace(Gt,At.protocol+"//"),p.type=o.method||o.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(B)||[""],null==p.crossDomain){l=n.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ft.protocol+"//"+Ft.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=w.param(p.data,p.traditional)),Ht(Pt,p,o,x),u)return x;for(d in(m=w.event&&p.global)&&0==w.active++&&w.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Bt.test(p.type),a=p.url.replace(Rt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(qt,"+")):(h=p.url.slice(a.length),p.data&&(p.processData||"string"==typeof p.data)&&(a+=(Et.test(a)?"&":"?")+p.data,delete p.data),!1===p.cache&&(a=a.replace(zt,"$1"),h=(Et.test(a)?"&":"?")+"_="+xt+++h),p.url=a+h),p.ifModified&&(w.lastModified[a]&&x.setRequestHeader("If-Modified-Since",w.lastModified[a]),w.etag[a]&&x.setRequestHeader("If-None-Match",w.etag[a])),(p.data&&p.hasContent&&!1!==p.contentType||o.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+jt+"; q=0.01":""):p.accepts["*"]),p.headers)x.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(f,x,p)||u))return x.abort();if(A="abort",v.add(p.complete),x.done(p.success),x.fail(p.error),r=Ht(Nt,p,o,x)){if(x.readyState=1,m&&g.trigger("ajaxSend",[x,p]),u)return x;p.async&&p.timeout>0&&(c=e.setTimeout((function(){x.abort("timeout")}),p.timeout));try{u=!1,r.send(k,E)}catch(e){if(u)throw e;E(-1,e)}}else E(-1,"No Transport");function E(t,o,n,s){var l,d,h,k,C,A=o;u||(u=!0,c&&e.clearTimeout(c),r=void 0,i=s||"",x.readyState=t>0?4:0,l=t>=200&&t<300||304===t,n&&(k=function(e,t,o){for(var n,r,a,i,s=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(r in s)if(s[r]&&s[r].test(n)){c.unshift(r);break}if(c[0]in o)a=c[0];else{for(r in o){if(!c[0]||e.converters[r+" "+c[0]]){a=r;break}i||(i=r)}a=a||i}if(a)return a!==c[0]&&c.unshift(a),o[a]}(p,x,n)),k=function(e,t,o,n){var r,a,i,s,c,l={},u=e.dataTypes.slice();if(u[1])for(i in e.converters)l[i.toLowerCase()]=e.converters[i];for(a=u.shift();a;)if(e.responseFields[a]&&(o[e.responseFields[a]]=t),!c&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=a,a=u.shift())if("*"===a)a=c;else if("*"!==c&&c!==a){if(!(i=l[c+" "+a]||l["* "+a]))for(r in l)if((s=r.split(" "))[1]===a&&(i=l[c+" "+s[0]]||l["* "+s[0]])){!0===i?i=l[r]:!0!==l[r]&&(a=s[0],u.unshift(s[1]));break}if(!0!==i)if(i&&e.throws)t=i(t);else try{t=i(t)}catch(e){return{state:"parsererror",error:i?e:"No conversion from "+c+" to "+a}}}return{state:"success",data:t}}(p,k,x,l),l?(p.ifModified&&((C=x.getResponseHeader("Last-Modified"))&&(w.lastModified[a]=C),(C=x.getResponseHeader("etag"))&&(w.etag[a]=C)),204===t||"HEAD"===p.type?A="nocontent":304===t?A="notmodified":(A=k.state,d=k.data,l=!(h=k.error))):(h=A,!t&&A||(A="error",t<0&&(t=0))),x.status=t,x.statusText=(o||A)+"",l?b.resolveWith(f,[d,A,x]):b.rejectWith(f,[x,A,h]),x.statusCode(y),y=void 0,m&&g.trigger(l?"ajaxSuccess":"ajaxError",[x,p,l?d:h]),v.fireWith(f,[x,A]),m&&(g.trigger("ajaxComplete",[x,p]),--w.active||w.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,o){return w.get(e,t,o,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],(function(e,t){w[t]=function(e,o,n,r){return f(o)&&(r=r||n,n=o,o=void 0),w.ajax(w.extend({url:e,type:t,dataType:r,data:o,success:n},w.isPlainObject(e)&&e))}})),w._evalUrl=function(e,t){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){w.globalEval(e,t)}})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(f(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return f(e)?this.each((function(t){w(this).wrapInner(e.call(this,t))})):this.each((function(){var t=w(this),o=t.contents();o.length?o.wrapAll(e):t.append(e)}))},wrap:function(e){var t=f(e);return this.each((function(o){w(this).wrapAll(t?e.call(this,o):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},Ut=w.ajaxSettings.xhr();p.cors=!!Ut&&"withCredentials"in Ut,p.ajax=Ut=!!Ut,w.ajaxTransport((function(t){var o,n;if(p.cors||Ut&&!t.crossDomain)return{send:function(r,a){var i,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(i in t.xhrFields)s[i]=t.xhrFields[i];for(i in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(i,r[i]);o=function(e){return function(){o&&(o=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?a(0,"error"):a(s.status,s.statusText):a(Lt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=o(),n=s.onerror=s.ontimeout=o("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout((function(){o&&n()}))},o=o("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}})),w.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),w.ajaxTransport("script",(function(e){var t,o;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=w("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",o=function(e){t.remove(),o=null,e&&a("error"===e.type?404:200,e.type)}),n.head.appendChild(t[0])},abort:function(){o&&o()}}}));var Wt,$t=[],Qt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$t.pop()||w.expando+"_"+xt++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",(function(t,o,n){var r,a,i,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=f(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+r):!1!==t.jsonp&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return i||w.error(r+" was not called"),i[0]},t.dataTypes[0]="json",a=e[r],e[r]=function(){i=arguments},n.always((function(){void 0===a?w(e).removeProp(r):e[r]=a,t[r]&&(t.jsonpCallback=o.jsonpCallback,$t.push(r)),i&&f(a)&&a(i[0]),i=a=void 0})),"script"})),p.createHTMLDocument=((Wt=n.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Wt.childNodes.length),w.parseHTML=function(e,t,o){return"string"!=typeof e?[]:("boolean"==typeof t&&(o=t,t=!1),t||(p.createHTMLDocument?((r=(t=n.implementation.createHTMLDocument("")).createElement("base")).href=n.location.href,t.head.appendChild(r)):t=n),i=!o&&[],(a=D.exec(e))?[t.createElement(a[1])]:(a=ke([e],t,i),i&&i.length&&w(i).remove(),w.merge([],a.childNodes)));var r,a,i},w.fn.load=function(e,t,o){var n,r,a,i=this,s=e.indexOf(" ");return s>-1&&(n=bt(e.slice(s)),e=e.slice(0,s)),f(t)?(o=t,t=void 0):t&&"object"==typeof t&&(r="POST"),i.length>0&&w.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){a=arguments,i.html(n?w("<div>").append(w.parseHTML(e)).find(n):e)})).always(o&&function(e,t){i.each((function(){o.apply(this,a||[e.responseText,t,e])}))}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){w.fn[t]=function(e){return this.on(t,e)}})),w.expr.pseudos.animated=function(e){return w.grep(w.timers,(function(t){return e===t.elem})).length},w.offset={setOffset:function(e,t,o){var n,r,a,i,s,c,l=w.css(e,"position"),u=w(e),m={};"static"===l&&(e.style.position="relative"),s=u.offset(),a=w.css(e,"top"),c=w.css(e,"left"),("absolute"===l||"fixed"===l)&&(a+c).indexOf("auto")>-1?(i=(n=u.position()).top,r=n.left):(i=parseFloat(a)||0,r=parseFloat(c)||0),f(t)&&(t=t.call(e,o,w.extend({},s))),null!=t.top&&(m.top=t.top-s.top+i),null!=t.left&&(m.left=t.left-s.left+r),"using"in t?t.using.call(e,m):u.css(m)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){w.offset.setOffset(this,e,t)}));var t,o,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),o=n.ownerDocument.defaultView,{top:t.top+o.pageYOffset,left:t.left+o.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,o,n=this[0],r={top:0,left:0};if("fixed"===w.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),o=n.ownerDocument,e=n.offsetParent||o.documentElement;e&&(e===o.body||e===o.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((r=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),r.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-w.css(n,"marginTop",!0),left:t.left-r.left-w.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||ne}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var o="pageYOffset"===t;w.fn[e]=function(n){return H(this,(function(e,n,r){var a;if(g(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===r)return a?a[t]:e[n];a?a.scrollTo(o?a.pageXOffset:r,o?r:a.pageYOffset):e[n]=r}),e,n,arguments.length)}})),w.each(["top","left"],(function(e,t){w.cssHooks[t]=Ue(p.pixelPosition,(function(e,o){if(o)return o=Le(e,t),Ie.test(o)?w(e).position()[t]+"px":o}))})),w.each({Height:"height",Width:"width"},(function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},(function(o,n){w.fn[n]=function(r,a){var i=arguments.length&&(o||"boolean"!=typeof r),s=o||(!0===r||!0===a?"margin":"border");return H(this,(function(t,o,r){var a;return g(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===r?w.css(t,o,s):w.style(t,o,r,s)}),t,i?r:void 0,i)}}))})),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){w.fn[t]=function(e,o){return arguments.length>0?this.on(t,null,e,o):this.trigger(t)}})),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,o){return this.on(e,null,t,o)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,o,n){return this.on(t,e,o,n)},undelegate:function(e,t,o){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",o)}}),w.proxy=function(e,t){var o,n,r;if("string"==typeof t&&(o=e[t],t=e,e=o),f(e))return n=a.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||w.guid++,r},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=M,w.isFunction=f,w.isWindow=g,w.camelCase=W,w.type=y,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return w}));var Kt=e.jQuery,Yt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Yt),t&&e.jQuery===w&&(e.jQuery=Kt),w},t||(e.jQuery=e.$=w),w}))},{}],11:[function(e,t,o){o.markdown=e("./markdown"),o.parse=o.markdown.toHTML},{"./markdown":12}],12:[function(e,t,o){!function(t){var o=t.Markdown=function(e){switch(typeof e){case"undefined":this.dialect=o.dialects.Gruber;break;case"object":this.dialect=e;break;default:if(!(e in o.dialects))throw new Error("Unknown Markdown dialect '"+String(e)+"'");this.dialect=o.dialects[e]}this.em_state=[],this.strong_state=[],this.debug_indent=""};function n(){return"Markdown.mk_block( "+uneval(this.toString())+", "+uneval(this.trailing)+", "+uneval(this.lineNumber)+" )"}function r(){var t=e("util");return"Markdown.mk_block( "+t.inspect(this.toString())+", "+t.inspect(this.trailing)+", "+t.inspect(this.lineNumber)+" )"}t.parse=function(e,t){return new o(t).toTree(e)},t.toHTML=function(e,o,n){var r=t.toHTMLTree(e,o,n);return t.renderJsonML(r)},t.toHTMLTree=function(e,t,o){"string"==typeof e&&(e=this.parse(e,t));var n=d(e),r={};n&&n.references&&(r=n.references);var a=function e(t,o,n){var r;n=n||{};var a=t.slice(0);"function"==typeof n.preprocessTreeNode&&(a=n.preprocessTreeNode(a,o));var i=d(a);if(i){for(r in a[1]={},i)a[1][r]=i[r];i=a[1]}if("string"==typeof a)return a;switch(a[0]){case"header":a[0]="h"+a[1].level,delete a[1].level;break;case"bulletlist":a[0]="ul";break;case"numberlist":a[0]="ol";break;case"listitem":a[0]="li";break;case"para":a[0]="p";break;case"markdown":a[0]="html",i&&delete i.references;break;case"code_block":a[0]="pre",r=i?2:1;var s=["code"];s.push.apply(s,a.splice(r,a.length-r)),a[r]=s;break;case"inlinecode":a[0]="code";break;case"img":a[1].src=a[1].href,delete a[1].href;break;case"linebreak":a[0]="br";break;case"link":a[0]="a";break;case"link_ref":if(a[0]="a",!(c=o[i.ref]))return i.original;delete i.ref,i.href=c.href,c.title&&(i.title=c.title),delete i.original;break;case"img_ref":var c;if(a[0]="img",!(c=o[i.ref]))return i.original;delete i.ref,i.src=c.href,c.title&&(i.title=c.title),delete i.original}if(r=1,i){for(var l in a[1]){r=2;break}1===r&&a.splice(r,1)}for(;r<a.length;++r)a[r]=e(a[r],o,n);return a}(e,r,o);return function e(t){var o=d(t)?2:1;for(;o<t.length;)"string"==typeof t[o]?o+1<t.length&&"string"==typeof t[o+1]?t[o]+=t.splice(o+1,1)[0]:++o:(e(t[o]),++o)}(a),a};var i=o.mk_block=function(e,t,o){1==arguments.length&&(t="\n\n");var a=new String(e);return a.trailing=t,a.inspect=r,a.toSource=n,null!=o&&(a.lineNumber=o),a};function s(e){for(var t=0,o=-1;-1!==(o=e.indexOf("\n",o+1));)t++;return t}function c(e,t){var o=e+"_state",n="strong"==e?"em_state":"strong_state";function r(e){this.len_after=e,this.name="close_"+t}return function(a,i){if(this[o][0]==t)return this[o].shift(),[a.length,new r(a.length-t.length)];var s=this[n].slice(),c=this[o].slice();this[o].unshift(t);var l=this.processInline(a.substr(t.length)),u=l[l.length-1];this[o].shift();return u instanceof r?(l.pop(),[a.length-u.len_after,[e].concat(l)]):(this[n]=s,this[o]=c,[t.length,t])}}o.prototype.split_blocks=function(e,t){e=e.replace(/(\r\n|\n|\r)/g,"\n");var o,n=/([\s\S]+?)($|\n#|\n(?:\s*\n|$)+)/g,r=[],a=1;for(null!=(o=/^(\s*\n)/.exec(e))&&(a+=s(o[0]),n.lastIndex=o[0].length);null!==(o=n.exec(e));)"\n#"==o[2]&&(o[2]="\n",n.lastIndex--),r.push(i(o[1],o[2],a)),a+=s(o[0]);return r},o.prototype.processBlock=function(e,t){var o=this.dialect.block,n=o.__order__;if("__call__"in o)return o.__call__.call(this,e,t);for(var r=0;r<n.length;r++){var a=o[n[r]].call(this,e,t);if(a)return(!u(a)||a.length>0&&!u(a[0]))&&this.debug(n[r],"didn't return a proper array"),a}return[]},o.prototype.processInline=function(e){return this.dialect.inline.__call__.call(this,String(e))},o.prototype.toTree=function(e,t){var o=e instanceof Array?e:this.split_blocks(e),n=this.tree;try{for(this.tree=t||this.tree||["markdown"];o.length;){var r=this.processBlock(o.shift(),o);r.length&&this.tree.push.apply(this.tree,r)}return this.tree}finally{t&&(this.tree=n)}},o.prototype.debug=function(){var e=Array.prototype.slice.call(arguments);e.unshift(this.debug_indent),"undefined"!=typeof print&&print.apply(print,e),"undefined"!=typeof console&&void 0!==console.log&&console.log.apply(null,e)},o.prototype.loop_re_over_block=function(e,t,o){for(var n,r=t.valueOf();r.length&&null!=(n=e.exec(r));)r=r.substr(n[0].length),o.call(this,n);return r},o.dialects={},o.dialects.Gruber={block:{atxHeader:function(e,t){var o=e.match(/^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/);if(o){var n=["header",{level:o[1].length}];return Array.prototype.push.apply(n,this.processInline(o[2])),o[0].length<e.length&&t.unshift(i(e.substr(o[0].length),e.trailing,e.lineNumber+2)),[n]}},setextHeader:function(e,t){var o=e.match(/^(.*)\n([-=])\2\2+(?:\n|$)/);if(o){var n=["header",{level:"="===o[2]?1:2},o[1]];return o[0].length<e.length&&t.unshift(i(e.substr(o[0].length),e.trailing,e.lineNumber+2)),[n]}},code:function(e,t){var o=[],n=/^(?: {0,3}\t| {4})(.*)\n?/;if(e.match(n)){e:for(;;){var r=this.loop_re_over_block(n,e.valueOf(),(function(e){o.push(e[1])}));if(r.length){t.unshift(i(r,e.trailing));break e}if(!t.length)break e;if(!t[0].match(n))break e;o.push(e.trailing.replace(/[^\n]/g,"").substring(2)),e=t.shift()}return[["code_block",o.join("\n")]]}},horizRule:function(e,t){var o=e.match(/^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/);if(o){var n=[["hr"]];return o[1]&&n.unshift.apply(n,this.processBlock(o[1],[])),o[3]&&t.unshift(i(o[3])),n}},lists:function(){var e=/[*+-]/,t=new RegExp("^( {0,3})([*+-]|\\d+\\.)[ \t]+"),o="(?: {0,3}\\t| {4})";function n(e,t,o,n){if(t)e.push(["para"].concat(o));else{var r=e[e.length-1]instanceof Array&&"para"==e[e.length-1][0]?e[e.length-1]:e;n&&e.length>1&&o.unshift(n);for(var a=0;a<o.length;a++){var i=o[a];"string"==typeof i&&r.length>1&&"string"==typeof r[r.length-1]?r[r.length-1]+=i:r.push(i)}}}function r(e,t){for(var n=new RegExp("^("+o+"{"+e+"}.*?\\n?)*$"),r=new RegExp("^"+o+"{"+e+"}","gm"),a=[];t.length>0&&n.exec(t[0]);){var s=t.shift(),c=s.replace(r,"");a.push(i(c,s.trailing,s.lineNumber))}return a}function a(e,t,o){var n=e.list,r=n[n.length-1];if(!(r[1]instanceof Array&&"para"==r[1][0]))if(t+1==o.length)r.push(["para"].concat(r.splice(1,r.length-1)));else{var a=r.pop();r.push(["para"].concat(r.splice(1,r.length-1)),a)}}return function(i,s){var c=i.match(t);if(c){for(var u,m,d,h=[],p=D(c),f=!1,g=[h[0].list];;){for(var b=i.split(/(?=\n)/),v="",y=0;y<b.length;y++){var w="",k=b[y].replace(/^\n/,(function(e){return w=e,""})),C=(d=h.length,new RegExp("(?:^("+o+"{0,"+d+"} {0,3})([*+-]|\\d+\\.)\\s+)|(^"+o+"{0,"+(d-1)+"}[ ]{0,4})"));if(void 0!==(c=k.match(C))[1]){v.length&&(n(u,f,this.processInline(v),w),f=!1,v=""),c[1]=c[1].replace(/ {0,3}\t/g,"    ");var A=Math.floor(c[1].length/4)+1;if(A>h.length)p=D(c),u.push(p),u=p[1]=["listitem"];else{var x=!1;for(m=0;m<h.length;m++)if(h[m].indent==c[1]){p=h[m].list,h.splice(m+1,h.length-(m+1)),x=!0;break}x||(++A<=h.length?(h.splice(A,h.length-A),p=h[A-1].list):(p=D(c),u.push(p))),u=["listitem"],p.push(u)}w=""}k.length>c[0].length&&(v+=w+k.substr(c[0].length))}v.length&&(n(u,f,this.processInline(v),w),f=!1,v="");var E=r(h.length,s);E.length>0&&(l(h,a,this),u.push.apply(u,this.toTree(E,[])));var _=s[0]&&s[0].valueOf()||"";if(!_.match(t)&&!_.match(/^ /))break;i=s.shift();var M=this.dialect.block.horizRule(i,s);if(M){g.push.apply(g,M);break}l(h,a,this),f=!0}return g}function D(t){var o=e.exec(t[2])?["bulletlist"]:["numberlist"];return h.push({list:o,indent:t[1]}),o}}}(),blockquote:function(e,t){if(e.match(/^>/m)){var o=[];if(">"!=e[0]){for(var n=e.split(/\n/),r=[],a=e.lineNumber;n.length&&">"!=n[0][0];)r.push(n.shift()),a++;var s=i(r.join("\n"),"\n",e.lineNumber);o.push.apply(o,this.processBlock(s,[])),e=i(n.join("\n"),e.trailing,a)}for(;t.length&&">"==t[0][0];){var c=t.shift();e=i(e+e.trailing+c,c.trailing,e.lineNumber)}var l=e.replace(/^> ?/gm,""),u=(this.tree,this.toTree(l,["blockquote"])),h=d(u);return h&&h.references&&(delete h.references,m(h)&&u.splice(1,1)),o.push(u),o}},referenceDefn:function(e,t){var o=/^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;if(e.match(o)){d(this.tree)||this.tree.splice(1,0,{});var n=d(this.tree);void 0===n.references&&(n.references={});var r=this.loop_re_over_block(o,e,(function(e){e[2]&&"<"==e[2][0]&&">"==e[2][e[2].length-1]&&(e[2]=e[2].substring(1,e[2].length-1));var t=n.references[e[1].toLowerCase()]={href:e[2]};void 0!==e[4]?t.title=e[4]:void 0!==e[5]&&(t.title=e[5])}));return r.length&&t.unshift(i(r,e.trailing)),[]}},para:function(e,t){return[["para"].concat(this.processInline(e))]}}},o.dialects.Gruber.inline={__oneElement__:function(e,t,o){var n,r;return t=t||this.dialect.inline.__patterns__,(n=new RegExp("([\\s\\S]*?)("+(t.source||t)+")").exec(e))?n[1]?[n[1].length,n[1]]:(n[2]in this.dialect.inline&&(r=this.dialect.inline[n[2]].call(this,e.substr(n.index),n,o||[])),r=r||[n[2].length,n[2]]):[e.length,e]},__call__:function(e,t){var o,n=[];function r(e){"string"==typeof e&&"string"==typeof n[n.length-1]?n[n.length-1]+=e:n.push(e)}for(;e.length>0;)o=this.dialect.inline.__oneElement__.call(this,e,t,n),e=e.substr(o.shift()),l(o,r);return n},"]":function(){},"}":function(){},__escape__:/^\\[\\`\*_{}\[\]()#\+.!\-]/,"\\":function(e){return this.dialect.inline.__escape__.exec(e)?[2,e.charAt(1)]:[1,"\\"]},"![":function(e){var t=e.match(/^!\[(.*?)\][ \t]*\([ \t]*([^")]*?)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/);if(t){t[2]&&"<"==t[2][0]&&">"==t[2][t[2].length-1]&&(t[2]=t[2].substring(1,t[2].length-1)),t[2]=this.dialect.inline.__call__.call(this,t[2],/\\/)[0];var o={alt:t[1],href:t[2]||""};return void 0!==t[4]&&(o.title=t[4]),[t[0].length,["img",o]]}return(t=e.match(/^!\[(.*?)\][ \t]*\[(.*?)\]/))?[t[0].length,["img_ref",{alt:t[1],ref:t[2].toLowerCase(),original:t[0]}]]:[2,"!["]},"[":function(e){var t=String(e),n=o.DialectHelpers.inline_until_char.call(this,e.substr(1),"]");if(!n)return[1,"["];var r,a,i=1+n[0],s=n[1],c=(e=e.substr(i)).match(/^\s*\([ \t]*([^"']*)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/);if(c){var l=c[1];if(i+=c[0].length,l&&"<"==l[0]&&">"==l[l.length-1]&&(l=l.substring(1,l.length-1)),!c[3])for(var u=1,m=0;m<l.length;m++)switch(l[m]){case"(":u++;break;case")":0==--u&&(i-=l.length-m,l=l.substring(0,m))}return a={href:(l=this.dialect.inline.__call__.call(this,l,/\\/)[0])||""},void 0!==c[3]&&(a.title=c[3]),r=["link",a].concat(s),[i,r]}return(c=e.match(/^\s*\[(.*?)\]/))?(i+=c[0].length,r=["link_ref",a={ref:(c[1]||String(s)).toLowerCase(),original:t.substr(0,i)}].concat(s),[i,r]):1==s.length&&"string"==typeof s[0]?(r=["link_ref",a={ref:s[0].toLowerCase(),original:t.substr(0,i)},s[0]],[i,r]):[1,"["]},"<":function(e){var t;return null!=(t=e.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/))?t[3]?[t[0].length,["link",{href:"mailto:"+t[3]},t[3]]]:"mailto"==t[2]?[t[0].length,["link",{href:t[1]},t[1].substr("mailto:".length)]]:[t[0].length,["link",{href:t[1]},t[1]]]:[1,"<"]},"`":function(e){var t=e.match(/(`+)(([\s\S]*?)\1)/);return t&&t[2]?[t[1].length+t[2].length,["inlinecode",t[3]]]:[1,"`"]},"  \n":function(e){return[3,["linebreak"]]}},o.dialects.Gruber.inline["**"]=c("strong","**"),o.dialects.Gruber.inline.__=c("strong","__"),o.dialects.Gruber.inline["*"]=c("em","*"),o.dialects.Gruber.inline._=c("em","_"),o.buildBlockOrder=function(e){var t=[];for(var o in e)"__order__"!=o&&"__call__"!=o&&t.push(o);e.__order__=t},o.buildInlinePatterns=function(e){var t=[];for(var o in e)if(!o.match(/^__.*__$/)){var n=o.replace(/([\\.*+?|()\[\]{}])/g,"\\$1").replace(/\n/,"\\n");t.push(1==o.length?n:"(?:"+n+")")}t=t.join("|"),e.__patterns__=t;var r=e.__call__;e.__call__=function(e,o){return null!=o?r.call(this,e,o):r.call(this,e,t)}},o.DialectHelpers={},o.DialectHelpers.inline_until_char=function(e,t){for(var o=0,n=[];;){if(e.charAt(o)==t)return[++o,n];if(o>=e.length)return null;var r=this.dialect.inline.__oneElement__.call(this,e.substr(o));o+=r[0],n.push.apply(n,r.slice(1))}},o.subclassDialect=function(e){function t(){}function o(){}return t.prototype=e.block,o.prototype=e.inline,{block:new t,inline:new o}},o.buildBlockOrder(o.dialects.Gruber.block),o.buildInlinePatterns(o.dialects.Gruber.inline),o.dialects.Maruku=o.subclassDialect(o.dialects.Gruber),o.dialects.Maruku.processMetaHash=function(e){for(var t=function(e){var t=e.split(""),o=[""],n=!1;for(;t.length;){var r=t.shift();switch(r){case" ":n?o[o.length-1]+=r:o.push("");break;case"'":case'"':n=!n;break;case"\\":r=t.shift();default:o[o.length-1]+=r}}return o}(e),o={},n=0;n<t.length;++n)if(/^#/.test(t[n]))o.id=t[n].substring(1);else if(/^\./.test(t[n]))o.class?o.class=o.class+t[n].replace(/./," "):o.class=t[n].substring(1);else if(/\=/.test(t[n])){var r=t[n].split(/\=/);o[r[0]]=r[1]}return o},o.dialects.Maruku.block.document_meta=function(e,t){if(!(e.lineNumber>1)&&e.match(/^(?:\w+:.*\n)*\w+:.*$/)){d(this.tree)||this.tree.splice(1,0,{});var o=e.split(/\n/);for(p in o){var n=o[p].match(/(\w+):\s*(.*)$/),r=n[1].toLowerCase(),a=n[2];this.tree[1][r]=a}return[]}},o.dialects.Maruku.block.block_meta=function(e,t){var o=e.match(/(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/);if(o){var n,r=this.dialect.processMetaHash(o[2]);if(""===o[1]){var i=this.tree[this.tree.length-1];if(n=d(i),"string"==typeof i)return;for(a in n||(n={},i.splice(1,0,n)),r)n[a]=r[a];return[]}var s=e.replace(/\n.*$/,""),c=this.processBlock(s,[]);for(a in(n=d(c[0]))||(n={},c[0].splice(1,0,n)),r)n[a]=r[a];return c}},o.dialects.Maruku.block.definition_list=function(e,t){var o,n=/^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,r=["dl"];if(s=e.match(n)){for(var a=[e];t.length&&n.exec(t[0]);)a.push(t.shift());for(var i=0;i<a.length;++i){var s,c=(s=a[i].match(n))[1].replace(/\n$/,"").split(/\n/),l=s[2].split(/\n:\s+/);for(o=0;o<c.length;++o)r.push(["dt",c[o]]);for(o=0;o<l.length;++o)r.push(["dd"].concat(this.processInline(l[o].replace(/(\n)\s+/,"$1"))))}return[r]}},o.dialects.Maruku.block.table=function(e,t){var o,n,r=function(e,t){(t=t||"\\s").match(/^[\\|\[\]{}?*.+^$]$/)&&(t="\\"+t);for(var o,n=[],r=new RegExp("^((?:\\\\.|[^\\\\"+t+"])*)"+t+"(.*)");o=e.match(r);)n.push(o[1]),e=o[2];return n.push(e),n};if(n=e.match(/^ {0,3}\|(.+)\n {0,3}\|\s*([\-:]+[\-| :]*)\n((?:\s*\|.*(?:\n|$))*)(?=\n|$)/))n[3]=n[3].replace(/^\s*\|/gm,"");else if(!(n=e.match(/^ {0,3}(\S(?:\\.|[^\\|])*\|.*)\n {0,3}([\-:]+\s*\|[\-| :]*)\n((?:(?:\\.|[^\\|])*\|.*(?:\n|$))*)(?=\n|$)/)))return;var a=["table",["thead",["tr"]],["tbody"]];n[2]=n[2].replace(/\|\s*$/,"").split("|");var i=[];for(l(n[2],(function(e){e.match(/^\s*-+:\s*$/)?i.push({align:"right"}):e.match(/^\s*:-+\s*$/)?i.push({align:"left"}):e.match(/^\s*:-+:\s*$/)?i.push({align:"center"}):i.push({})})),n[1]=r(n[1].replace(/\|\s*$/,""),"|"),o=0;o<n[1].length;o++)a[1][1].push(["th",i[o]||{}].concat(this.processInline(n[1][o].trim())));return l(n[3].replace(/\|\s*$/gm,"").split("\n"),(function(e){var t=["tr"];for(e=r(e,"|"),o=0;o<e.length;o++)t.push(["td",i[o]||{}].concat(this.processInline(e[o].trim())));a[2].push(t)}),this),[a]},o.dialects.Maruku.inline["{:"]=function(e,t,o){if(!o.length)return[2,"{:"];var n=o[o.length-1];if("string"==typeof n)return[2,"{:"];var r=e.match(/^\{:\s*((?:\\\}|[^\}])*)\s*\}/);if(!r)return[2,"{:"];var a=this.dialect.processMetaHash(r[1]),i=d(n);for(var s in i||(i={},n.splice(1,0,i)),a)i[s]=a[s];return[r[0].length,""]},o.dialects.Maruku.inline.__escape__=/^\\[\\`\*_{}\[\]()#\+.!\-|:]/,o.buildBlockOrder(o.dialects.Maruku.block),o.buildInlinePatterns(o.dialects.Maruku.inline);var l,u=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)};l=Array.prototype.forEach?function(e,t,o){return e.forEach(t,o)}:function(e,t,o){for(var n=0;n<e.length;n++)t.call(o||e,e[n],n,e)};var m=function(e){for(var t in e)if(hasOwnProperty.call(e,t))return!1;return!0};function d(e){return u(e)&&e.length>1&&"object"==typeof e[1]&&!u(e[1])?e[1]:void 0}function h(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function f(e){if("string"==typeof e)return h(e);var t=e.shift(),o={},n=[];for(!e.length||"object"!=typeof e[0]||e[0]instanceof Array||(o=e.shift());e.length;)n.push(f(e.shift()));var r="";for(var a in o)r+=" "+a+'="'+h(o[a])+'"';return"img"==t||"br"==t||"hr"==t?"<"+t+r+"/>":"<"+t+r+">"+n.join("")+"</"+t+">"}t.renderJsonML=function(e,t){(t=t||{}).root=t.root||!1;var o=[];if(t.root)o.push(f(e));else for(e.shift(),!e.length||"object"!=typeof e[0]||e[0]instanceof Array||e.shift();e.length;)o.push(f(e.shift()));return o.join("\n\n")}}(void 0===o?(window.markdown={},window.markdown):o)},{util:41}],13:[function(e,t,o){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
"use strict";var n=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}t.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},o=0;o<10;o++)t["_"+String.fromCharCode(o)]=o;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var o,s,c=i(e),l=1;l<arguments.length;l++){for(var u in o=Object(arguments[l]))r.call(o,u)&&(c[u]=o[u]);if(n){s=n(o);for(var m=0;m<s.length;m++)a.call(o,s[m])&&(c[s[m]]=o[s[m]])}}return c}},{}],14:[function(e,t,o){(function(e){function t(e,t){for(var o=0,n=e.length-1;n>=0;n--){var r=e[n];"."===r?e.splice(n,1):".."===r?(e.splice(n,1),o++):o&&(e.splice(n,1),o--)}if(t)for(;o--;o)e.unshift("..");return e}function n(e,t){if(e.filter)return e.filter(t);for(var o=[],n=0;n<e.length;n++)t(e[n],n,e)&&o.push(e[n]);return o}o.resolve=function(){for(var o="",r=!1,a=arguments.length-1;a>=-1&&!r;a--){var i=a>=0?arguments[a]:e.cwd();if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(o=i+"/"+o,r="/"===i.charAt(0))}return(r?"/":"")+(o=t(n(o.split("/"),(function(e){return!!e})),!r).join("/"))||"."},o.normalize=function(e){var a=o.isAbsolute(e),i="/"===r(e,-1);return(e=t(n(e.split("/"),(function(e){return!!e})),!a).join("/"))||a||(e="."),e&&i&&(e+="/"),(a?"/":"")+e},o.isAbsolute=function(e){return"/"===e.charAt(0)},o.join=function(){var e=Array.prototype.slice.call(arguments,0);return o.normalize(n(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},o.relative=function(e,t){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var o=e.length-1;o>=0&&""===e[o];o--);return t>o?[]:e.slice(t,o-t+1)}e=o.resolve(e).substr(1),t=o.resolve(t).substr(1);for(var r=n(e.split("/")),a=n(t.split("/")),i=Math.min(r.length,a.length),s=i,c=0;c<i;c++)if(r[c]!==a[c]){s=c;break}var l=[];for(c=s;c<r.length;c++)l.push("..");return(l=l.concat(a.slice(s))).join("/")},o.sep="/",o.delimiter=":",o.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),o=47===t,n=-1,r=!0,a=e.length-1;a>=1;--a)if(47===(t=e.charCodeAt(a))){if(!r){n=a;break}}else r=!1;return-1===n?o?"/":".":o&&1===n?"/":e.slice(0,n)},o.basename=function(e,t){var o=function(e){"string"!=typeof e&&(e+="");var t,o=0,n=-1,r=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!r){o=t+1;break}}else-1===n&&(r=!1,n=t+1);return-1===n?"":e.slice(o,n)}(e);return t&&o.substr(-1*t.length)===t&&(o=o.substr(0,o.length-t.length)),o},o.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,o=0,n=-1,r=!0,a=0,i=e.length-1;i>=0;--i){var s=e.charCodeAt(i);if(47!==s)-1===n&&(r=!1,n=i+1),46===s?-1===t?t=i:1!==a&&(a=1):-1!==t&&(a=-1);else if(!r){o=i+1;break}}return-1===t||-1===n||0===a||1===a&&t===n-1&&t===o+1?"":e.slice(t,n)};var r="b"==="ab".substr(-1)?function(e,t,o){return e.substr(t,o)}:function(e,t,o){return t<0&&(t=e.length+t),e.substr(t,o)}}).call(this,e("_process"))},{_process:15}],15:[function(e,t,o){var n,r,a=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var l,u=[],m=!1,d=-1;function h(){m&&l&&(m=!1,l.length?u=l.concat(u):d=-1,u.length&&p())}function p(){if(!m){var e=c(h);m=!0;for(var t=u.length;t;){for(l=u,u=[];++d<t;)l&&l[d].run();d=-1,t=u.length}l=null,m=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function g(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var o=1;o<arguments.length;o++)t[o-1]=arguments[o];u.push(new f(e,t)),1!==u.length||m||c(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=g,a.addListener=g,a.once=g,a.off=g,a.removeListener=g,a.removeAllListeners=g,a.emit=g,a.prependListener=g,a.prependOnceListener=g,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},{}],16:[function(e,t,o){(function(o){"use strict";var n=function(){};if("production"!==o.env.NODE_ENV){var r=e("./lib/ReactPropTypesSecret"),a={},i=Function.call.bind(Object.prototype.hasOwnProperty);n=function(e){var t="Warning: "+e;"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(e){}}}function s(e,t,s,c,l){if("production"!==o.env.NODE_ENV)for(var u in e)if(i(e,u)){var m;try{if("function"!=typeof e[u]){var d=Error((c||"React class")+": "+s+" type `"+u+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[u]+"`.");throw d.name="Invariant Violation",d}m=e[u](t,u,c,s,null,r)}catch(e){m=e}if(!m||m instanceof Error||n((c||"React class")+": type specification of "+s+" `"+u+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof m+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),m instanceof Error&&!(m.message in a)){a[m.message]=!0;var h=l?l():"";n("Failed "+s+" type: "+m.message+(null!=h?h:""))}}}s.resetWarningCache=function(){"production"!==o.env.NODE_ENV&&(a={})},t.exports=s}).call(this,e("_process"))},{"./lib/ReactPropTypesSecret":20,_process:15}],17:[function(e,t,o){"use strict";var n=e("./lib/ReactPropTypesSecret");function r(){}function a(){}a.resetWarningCache=r,t.exports=function(){function e(e,t,o,r,a,i){if(i!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var o={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:r};return o.PropTypes=o,o}},{"./lib/ReactPropTypesSecret":20}],18:[function(e,t,o){(function(o){"use strict";var n=e("react-is"),r=e("object-assign"),a=e("./lib/ReactPropTypesSecret"),i=e("./checkPropTypes"),s=Function.call.bind(Object.prototype.hasOwnProperty),c=function(){};function l(){return null}"production"!==o.env.NODE_ENV&&(c=function(e){var t="Warning: "+e;"undefined"!=typeof console&&console.error(t);try{throw new Error(t)}catch(e){}}),t.exports=function(e,t){var u="function"==typeof Symbol&&Symbol.iterator;var m={array:f("array"),bool:f("boolean"),func:f("function"),number:f("number"),object:f("object"),string:f("string"),symbol:f("symbol"),any:p(l),arrayOf:function(e){return p((function(t,o,n,r,i){if("function"!=typeof e)return new h("Property `"+i+"` of component `"+n+"` has invalid PropType notation inside arrayOf.");var s=t[o];if(!Array.isArray(s))return new h("Invalid "+r+" `"+i+"` of type `"+b(s)+"` supplied to `"+n+"`, expected an array.");for(var c=0;c<s.length;c++){var l=e(s,c,n,r,i+"["+c+"]",a);if(l instanceof Error)return l}return null}))},element:p((function(t,o,n,r,a){var i=t[o];return e(i)?null:new h("Invalid "+r+" `"+a+"` of type `"+b(i)+"` supplied to `"+n+"`, expected a single ReactElement.")})),elementType:p((function(e,t,o,r,a){var i=e[t];return n.isValidElementType(i)?null:new h("Invalid "+r+" `"+a+"` of type `"+b(i)+"` supplied to `"+o+"`, expected a single ReactElement type.")})),instanceOf:function(e){return p((function(t,o,n,r,a){if(!(t[o]instanceof e)){var i=e.name||"<<anonymous>>";return new h("Invalid "+r+" `"+a+"` of type `"+function(e){if(!e.constructor||!e.constructor.name)return"<<anonymous>>";return e.constructor.name}(t[o])+"` supplied to `"+n+"`, expected instance of `"+i+"`.")}return null}))},node:p((function(e,t,o,n,r){return g(e[t])?null:new h("Invalid "+n+" `"+r+"` supplied to `"+o+"`, expected a ReactNode.")})),objectOf:function(e){return p((function(t,o,n,r,i){if("function"!=typeof e)return new h("Property `"+i+"` of component `"+n+"` has invalid PropType notation inside objectOf.");var c=t[o],l=b(c);if("object"!==l)return new h("Invalid "+r+" `"+i+"` of type `"+l+"` supplied to `"+n+"`, expected an object.");for(var u in c)if(s(c,u)){var m=e(c,u,n,r,i+"."+u,a);if(m instanceof Error)return m}return null}))},oneOf:function(e){if(!Array.isArray(e))return"production"!==o.env.NODE_ENV&&(arguments.length>1?c("Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."):c("Invalid argument supplied to oneOf, expected an array.")),l;function t(t,o,n,r,a){for(var i=t[o],s=0;s<e.length;s++)if(d(i,e[s]))return null;var c=JSON.stringify(e,(function(e,t){return"symbol"===v(t)?String(t):t}));return new h("Invalid "+r+" `"+a+"` of value `"+String(i)+"` supplied to `"+n+"`, expected one of "+c+".")}return p(t)},oneOfType:function(e){if(!Array.isArray(e))return"production"!==o.env.NODE_ENV&&c("Invalid argument supplied to oneOfType, expected an instance of array."),l;for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)return c("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+y(n)+" at index "+t+"."),l}return p((function(t,o,n,r,i){for(var s=0;s<e.length;s++){if(null==(0,e[s])(t,o,n,r,i,a))return null}return new h("Invalid "+r+" `"+i+"` supplied to `"+n+"`.")}))},shape:function(e){return p((function(t,o,n,r,i){var s=t[o],c=b(s);if("object"!==c)return new h("Invalid "+r+" `"+i+"` of type `"+c+"` supplied to `"+n+"`, expected `object`.");for(var l in e){var u=e[l];if(u){var m=u(s,l,n,r,i+"."+l,a);if(m)return m}}return null}))},exact:function(e){return p((function(t,o,n,i,s){var c=t[o],l=b(c);if("object"!==l)return new h("Invalid "+i+" `"+s+"` of type `"+l+"` supplied to `"+n+"`, expected `object`.");var u=r({},t[o],e);for(var m in u){var d=e[m];if(!d)return new h("Invalid "+i+" `"+s+"` key `"+m+"` supplied to `"+n+"`.\nBad object: "+JSON.stringify(t[o],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var p=d(c,m,n,i,s+"."+m,a);if(p)return p}return null}))}};function d(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function h(e){this.message=e,this.stack=""}function p(e){if("production"!==o.env.NODE_ENV)var n={},r=0;function i(i,s,l,u,m,d,p){if(u=u||"<<anonymous>>",d=d||l,p!==a){if(t){var f=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw f.name="Invariant Violation",f}if("production"!==o.env.NODE_ENV&&"undefined"!=typeof console){var g=u+":"+l;!n[g]&&r<3&&(c("You are manually calling a React.PropTypes validation function for the `"+d+"` prop on `"+u+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),n[g]=!0,r++)}}return null==s[l]?i?null===s[l]?new h("The "+m+" `"+d+"` is marked as required in `"+u+"`, but its value is `null`."):new h("The "+m+" `"+d+"` is marked as required in `"+u+"`, but its value is `undefined`."):null:e(s,l,u,m,d)}var s=i.bind(null,!1);return s.isRequired=i.bind(null,!0),s}function f(e){return p((function(t,o,n,r,a,i){var s=t[o];return b(s)!==e?new h("Invalid "+r+" `"+a+"` of type `"+v(s)+"` supplied to `"+n+"`, expected `"+e+"`."):null}))}function g(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(g);if(null===t||e(t))return!0;var o=function(e){var t=e&&(u&&e[u]||e["@@iterator"]);if("function"==typeof t)return t}(t);if(!o)return!1;var n,r=o.call(t);if(o!==t.entries){for(;!(n=r.next()).done;)if(!g(n.value))return!1}else for(;!(n=r.next()).done;){var a=n.value;if(a&&!g(a[1]))return!1}return!0;default:return!1}}function b(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||!!t&&("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}(t,e)?"symbol":t}function v(e){if(null==e)return""+e;var t=b(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function y(e){var t=v(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}return h.prototype=Error.prototype,m.checkPropTypes=i,m.resetWarningCache=i.resetWarningCache,m.PropTypes=m,m}}).call(this,e("_process"))},{"./checkPropTypes":16,"./lib/ReactPropTypesSecret":20,_process:15,"object-assign":13,"react-is":27}],19:[function(e,t,o){(function(o){if("production"!==o.env.NODE_ENV){var n=e("react-is");t.exports=e("./factoryWithTypeCheckers")(n.isElement,!0)}else t.exports=e("./factoryWithThrowingShims")()}).call(this,e("_process"))},{"./factoryWithThrowingShims":17,"./factoryWithTypeCheckers":18,_process:15,"react-is":27}],20:[function(e,t,o){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},{}],21:[function(e,t,o){(function(e,n){
/*!
 *
 * Copyright 2009-2017 Kris Kowal under the terms of the MIT
 * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
!function(e){"use strict";if("function"==typeof bootstrap)bootstrap("promise",e);else if("object"==typeof o&&"object"==typeof t)t.exports=e();else if("function"==typeof define&&define.amd)define(e);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=e}else{if("undefined"==typeof window&&"undefined"==typeof self)throw new Error("This environment was not anticipated by Q. Please file a bug.");var n="undefined"!=typeof window?window:self,r=n.Q;n.Q=e(),n.Q.noConflict=function(){return n.Q=r,this}}}((function(){"use strict";var t=!1;try{throw new Error}catch(e){t=!!e.stack}var o,r=A(),a=function(){},i=function(){var t={task:void 0,next:null},o=t,r=!1,a=void 0,s=!1,c=[];function l(){for(var e,o;t.next;)e=(t=t.next).task,t.task=void 0,(o=t.domain)&&(t.domain=void 0,o.enter()),u(e,o);for(;c.length;)u(e=c.pop());r=!1}function u(e,t){try{e()}catch(e){if(s)throw t&&t.exit(),setTimeout(l,0),t&&t.enter(),e;setTimeout((function(){throw e}),0)}t&&t.exit()}if(i=function(t){o=o.next={task:t,domain:s&&e.domain,next:null},r||(r=!0,a())},"object"==typeof e&&"[object process]"===e.toString()&&e.nextTick)s=!0,a=function(){e.nextTick(l)};else if("function"==typeof n)a="undefined"!=typeof window?n.bind(window,l):function(){n(l)};else if("undefined"!=typeof MessageChannel){var m=new MessageChannel;m.port1.onmessage=function(){a=d,m.port1.onmessage=l,l()};var d=function(){m.port2.postMessage(0)};a=function(){setTimeout(l,0),d()}}else a=function(){setTimeout(l,0)};return i.runAfter=function(e){c.push(e),r||(r=!0,a())},i}(),s=Function.call;function c(e){return function(){return s.apply(e,arguments)}}var l,u=c(Array.prototype.slice),m=c(Array.prototype.reduce||function(e,t){var o=0,n=this.length;if(1===arguments.length)for(;;){if(o in this){t=this[o++];break}if(++o>=n)throw new TypeError}for(;o<n;o++)o in this&&(t=e(t,this[o],o));return t}),d=c(Array.prototype.indexOf||function(e){for(var t=0;t<this.length;t++)if(this[t]===e)return t;return-1}),h=c(Array.prototype.map||function(e,t){var o=this,n=[];return m(o,(function(r,a,i){n.push(e.call(t,a,i,o))}),void 0),n}),p=Object.create||function(e){function t(){}return t.prototype=e,new t},f=Object.defineProperty||function(e,t,o){return e[t]=o.value,e},g=c(Object.prototype.hasOwnProperty),b=Object.keys||function(e){var t=[];for(var o in e)g(e,o)&&t.push(o);return t},v=c(Object.prototype.toString);function y(e){return"[object StopIteration]"===v(e)||e instanceof l}l="undefined"!=typeof ReturnValue?ReturnValue:function(e){this.value=e};function w(e,o){if(t&&o.stack&&"object"==typeof e&&null!==e&&e.stack){for(var n=[],r=o;r;r=r.source)r.stack&&(!e.__minimumStackCounter__||e.__minimumStackCounter__>r.stackCounter)&&(f(e,"__minimumStackCounter__",{value:r.stackCounter,configurable:!0}),n.unshift(r.stack));n.unshift(e.stack);var a=function(e){for(var t=e.split("\n"),o=[],n=0;n<t.length;++n){var r=t[n];!C(r)&&(-1===(a=r).indexOf("(module.js:")&&-1===a.indexOf("(node.js:"))&&r&&o.push(r)}var a;return o.join("\n")}(n.join("\nFrom previous event:\n"));f(e,"stack",{value:a,configurable:!0})}}function k(e){var t=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(e);if(t)return[t[1],Number(t[2])];var o=/at ([^ ]+):(\d+):(?:\d+)$/.exec(e);if(o)return[o[1],Number(o[2])];var n=/.*@(.+):(\d+)$/.exec(e);return n?[n[1],Number(n[2])]:void 0}function C(e){var t=k(e);if(!t)return!1;var n=t[0],a=t[1];return n===o&&a>=r&&a<=K}function A(){if(t)try{throw new Error}catch(t){var e=t.stack.split("\n"),n=k(e[0].indexOf("@")>0?e[1]:e[2]);if(!n)return;return o=n[0],n[1]}}function x(e){return e instanceof T?e:z(e)?function(e){var t=_();return x.nextTick((function(){try{e.then(t.resolve,t.reject,t.notify)}catch(e){t.reject(e)}})),t.promise}(e):O(e)}x.resolve=x,x.nextTick=i,x.longStackSupport=!1;var E=1;function _(){var e,o=[],n=[],r=p(_.prototype),a=p(T.prototype);if(a.promiseDispatch=function(t,r,a){var i=u(arguments);o?(o.push(i),"when"===r&&a[1]&&n.push(a[1])):x.nextTick((function(){e.promiseDispatch.apply(e,i)}))},a.valueOf=function(){if(o)return a;var t=q(e);return R(t)&&(e=t),t},a.inspect=function(){return e?e.inspect():{state:"pending"}},x.longStackSupport&&t)try{throw new Error}catch(e){a.stack=e.stack.substring(e.stack.indexOf("\n")+1),a.stackCounter=E++}function i(r){e=r,x.longStackSupport&&t&&(a.source=r),m(o,(function(e,t){x.nextTick((function(){r.promiseDispatch.apply(r,t)}))}),void 0),o=void 0,n=void 0}return r.promise=a,r.resolve=function(t){e||i(x(t))},r.fulfill=function(t){e||i(O(t))},r.reject=function(t){e||i(H(t))},r.notify=function(t){e||m(n,(function(e,o){x.nextTick((function(){o(t)}))}),void 0)},r}function M(e){if("function"!=typeof e)throw new TypeError("resolver must be a function.");var t=_();try{e(t.resolve,t.reject,t.notify)}catch(e){t.reject(e)}return t.promise}function D(e){return M((function(t,o){for(var n=0,r=e.length;n<r;n++)x(e[n]).then(t,o)}))}function T(e,t,o){void 0===t&&(t=function(e){return H(new Error("Promise does not support operation: "+e))}),void 0===o&&(o=function(){return{state:"unknown"}});var n=p(T.prototype);if(n.promiseDispatch=function(o,r,a){var i;try{i=e[r]?e[r].apply(n,a):t.call(n,r,a)}catch(e){i=H(e)}o&&o(i)},n.inspect=o,o){var r=o();"rejected"===r.state&&(n.exception=r.reason),n.valueOf=function(){var e=o();return"pending"===e.state||"rejected"===e.state?n:e.value}}return n}function S(e,t,o,n){return x(e).then(t,o,n)}function q(e){if(R(e)){var t=e.inspect();if("fulfilled"===t.state)return t.value}return e}function R(e){return e instanceof T}function z(e){return(t=e)===Object(t)&&"function"==typeof e.then;var t}"object"==typeof e&&e&&e.env&&e.env.Q_DEBUG&&(x.longStackSupport=!0),x.defer=_,_.prototype.makeNodeResolver=function(){var e=this;return function(t,o){t?e.reject(t):arguments.length>2?e.resolve(u(arguments,1)):e.resolve(o)}},x.Promise=M,x.promise=M,M.race=D,M.all=W,M.reject=H,M.resolve=x,x.passByCopy=function(e){return e},T.prototype.passByCopy=function(){return this},x.join=function(e,t){return x(e).join(t)},T.prototype.join=function(e){return x([this,e]).spread((function(e,t){if(e===t)return e;throw new Error("Q can't join: not the same: "+e+" "+t)}))},x.race=D,T.prototype.race=function(){return this.then(x.race)},x.makePromise=T,T.prototype.toString=function(){return"[object Promise]"},T.prototype.then=function(e,t,o){var n=this,r=_(),a=!1;return x.nextTick((function(){n.promiseDispatch((function(t){a||(a=!0,r.resolve(function(t){try{return"function"==typeof e?e(t):t}catch(e){return H(e)}}(t)))}),"when",[function(e){a||(a=!0,r.resolve(function(e){if("function"==typeof t){w(e,n);try{return t(e)}catch(e){return H(e)}}return H(e)}(e)))}])})),n.promiseDispatch(void 0,"when",[void 0,function(e){var t,n=!1;try{t=function(e){return"function"==typeof o?o(e):e}(e)}catch(e){if(n=!0,!x.onerror)throw e;x.onerror(e)}n||r.notify(t)}]),r.promise},x.tap=function(e,t){return x(e).tap(t)},T.prototype.tap=function(e){return e=x(e),this.then((function(t){return e.fcall(t).thenResolve(t)}))},x.when=S,T.prototype.thenResolve=function(e){return this.then((function(){return e}))},x.thenResolve=function(e,t){return x(e).thenResolve(t)},T.prototype.thenReject=function(e){return this.then((function(){throw e}))},x.thenReject=function(e,t){return x(e).thenReject(t)},x.nearer=q,x.isPromise=R,x.isPromiseAlike=z,x.isPending=function(e){return R(e)&&"pending"===e.inspect().state},T.prototype.isPending=function(){return"pending"===this.inspect().state},x.isFulfilled=function(e){return!R(e)||"fulfilled"===e.inspect().state},T.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},x.isRejected=function(e){return R(e)&&"rejected"===e.inspect().state},T.prototype.isRejected=function(){return"rejected"===this.inspect().state};var V,B,G,P=[],N=[],j=[],F=!0;function I(){P.length=0,N.length=0,F||(F=!0)}function H(t){var o=T({when:function(o){return o&&function(t){if(F){var o=d(N,t);-1!==o&&("object"==typeof e&&"function"==typeof e.emit&&x.nextTick.runAfter((function(){var n=d(j,t);-1!==n&&(e.emit("rejectionHandled",P[o],t),j.splice(n,1))})),N.splice(o,1),P.splice(o,1))}}(this),o?o(t):this}},(function(){return this}),(function(){return{state:"rejected",reason:t}}));return function(t,o){F&&("object"==typeof e&&"function"==typeof e.emit&&x.nextTick.runAfter((function(){-1!==d(N,t)&&(e.emit("unhandledRejection",o,t),j.push(t))})),N.push(t),o&&void 0!==o.stack?P.push(o.stack):P.push("(no stack) "+o))}(o,t),o}function O(e){return T({when:function(){return e},get:function(t){return e[t]},set:function(t,o){e[t]=o},delete:function(t){delete e[t]},post:function(t,o){return null==t?e.apply(void 0,o):e[t].apply(e,o)},apply:function(t,o){return e.apply(t,o)},keys:function(){return b(e)}},void 0,(function(){return{state:"fulfilled",value:e}}))}function L(e,t,o){return x(e).spread(t,o)}function U(e,t,o){return x(e).dispatch(t,o)}function W(e){return S(e,(function(e){var t=0,o=_();return m(e,(function(n,r,a){var i;R(r)&&"fulfilled"===(i=r.inspect()).state?e[a]=i.value:(++t,S(r,(function(n){e[a]=n,0==--t&&o.resolve(e)}),o.reject,(function(e){o.notify({index:a,value:e})})))}),void 0),0===t&&o.resolve(e),o.promise}))}function $(e){if(0===e.length)return x.resolve();var t=x.defer(),o=0;return m(e,(function(n,r,a){var i=e[a];o++,S(i,(function(e){t.resolve(e)}),(function(e){if(0===--o){var n=e||new Error(""+e);n.message="Q can't get fulfillment value from any promise, all promises were rejected. Last error message: "+n.message,t.reject(n)}}),(function(e){t.notify({index:a,value:e})}))}),void 0),t.promise}function Q(e){return S(e,(function(e){return e=h(e,x),S(W(h(e,(function(e){return S(e,a,a)}))),(function(){return e}))}))}x.resetUnhandledRejections=I,x.getUnhandledReasons=function(){return P.slice()},x.stopUnhandledRejectionTracking=function(){I(),F=!1},I(),x.reject=H,x.fulfill=O,x.master=function(e){return T({isDef:function(){}},(function(t,o){return U(e,t,o)}),(function(){return x(e).inspect()}))},x.spread=L,T.prototype.spread=function(e,t){return this.all().then((function(t){return e.apply(void 0,t)}),t)},x.async=function(e){return function(){function t(e,t){var a;if("undefined"==typeof StopIteration){try{a=o[e](t)}catch(e){return H(e)}return a.done?x(a.value):S(a.value,n,r)}try{a=o[e](t)}catch(e){return y(e)?x(e.value):H(e)}return S(a,n,r)}var o=e.apply(this,arguments),n=t.bind(t,"next"),r=t.bind(t,"throw");return n()}},x.spawn=function(e){x.done(x.async(e)())},x.return=function(e){throw new l(e)},x.promised=function(e){return function(){return L([this,W(arguments)],(function(t,o){return e.apply(t,o)}))}},x.dispatch=U,T.prototype.dispatch=function(e,t){var o=this,n=_();return x.nextTick((function(){o.promiseDispatch(n.resolve,e,t)})),n.promise},x.get=function(e,t){return x(e).dispatch("get",[t])},T.prototype.get=function(e){return this.dispatch("get",[e])},x.set=function(e,t,o){return x(e).dispatch("set",[t,o])},T.prototype.set=function(e,t){return this.dispatch("set",[e,t])},x.del=x.delete=function(e,t){return x(e).dispatch("delete",[t])},T.prototype.del=T.prototype.delete=function(e){return this.dispatch("delete",[e])},x.mapply=x.post=function(e,t,o){return x(e).dispatch("post",[t,o])},T.prototype.mapply=T.prototype.post=function(e,t){return this.dispatch("post",[e,t])},x.send=x.mcall=x.invoke=function(e,t){return x(e).dispatch("post",[t,u(arguments,2)])},T.prototype.send=T.prototype.mcall=T.prototype.invoke=function(e){return this.dispatch("post",[e,u(arguments,1)])},x.fapply=function(e,t){return x(e).dispatch("apply",[void 0,t])},T.prototype.fapply=function(e){return this.dispatch("apply",[void 0,e])},x.try=x.fcall=function(e){return x(e).dispatch("apply",[void 0,u(arguments,1)])},T.prototype.fcall=function(){return this.dispatch("apply",[void 0,u(arguments)])},x.fbind=function(e){var t=x(e),o=u(arguments,1);return function(){return t.dispatch("apply",[this,o.concat(u(arguments))])}},T.prototype.fbind=function(){var e=this,t=u(arguments);return function(){return e.dispatch("apply",[this,t.concat(u(arguments))])}},x.keys=function(e){return x(e).dispatch("keys",[])},T.prototype.keys=function(){return this.dispatch("keys",[])},x.all=W,T.prototype.all=function(){return W(this)},x.any=$,T.prototype.any=function(){return $(this)},x.allResolved=(V=Q,B="allResolved",G="allSettled",function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(B+" is deprecated, use "+G+" instead.",new Error("").stack),V.apply(V,arguments)}),T.prototype.allResolved=function(){return Q(this)},x.allSettled=function(e){return x(e).allSettled()},T.prototype.allSettled=function(){return this.then((function(e){return W(h(e,(function(e){function t(){return e.inspect()}return(e=x(e)).then(t,t)})))}))},x.fail=x.catch=function(e,t){return x(e).then(void 0,t)},T.prototype.fail=T.prototype.catch=function(e){return this.then(void 0,e)},x.progress=function(e,t){return x(e).then(void 0,void 0,t)},T.prototype.progress=function(e){return this.then(void 0,void 0,e)},x.fin=x.finally=function(e,t){return x(e).finally(t)},T.prototype.fin=T.prototype.finally=function(e){if(!e||"function"!=typeof e.apply)throw new Error("Q can't apply finally callback");return e=x(e),this.then((function(t){return e.fcall().then((function(){return t}))}),(function(t){return e.fcall().then((function(){throw t}))}))},x.done=function(e,t,o,n){return x(e).done(t,o,n)},T.prototype.done=function(t,o,n){var r=function(e){x.nextTick((function(){if(w(e,a),!x.onerror)throw e;x.onerror(e)}))},a=t||o||n?this.then(t,o,n):this;"object"==typeof e&&e&&e.domain&&(r=e.domain.bind(r)),a.then(void 0,r)},x.timeout=function(e,t,o){return x(e).timeout(t,o)},T.prototype.timeout=function(e,t){var o=_(),n=setTimeout((function(){t&&"string"!=typeof t||((t=new Error(t||"Timed out after "+e+" ms")).code="ETIMEDOUT"),o.reject(t)}),e);return this.then((function(e){clearTimeout(n),o.resolve(e)}),(function(e){clearTimeout(n),o.reject(e)}),o.notify),o.promise},x.delay=function(e,t){return void 0===t&&(t=e,e=void 0),x(e).delay(t)},T.prototype.delay=function(e){return this.then((function(t){var o=_();return setTimeout((function(){o.resolve(t)}),e),o.promise}))},x.nfapply=function(e,t){return x(e).nfapply(t)},T.prototype.nfapply=function(e){var t=_(),o=u(e);return o.push(t.makeNodeResolver()),this.fapply(o).fail(t.reject),t.promise},x.nfcall=function(e){var t=u(arguments,1);return x(e).nfapply(t)},T.prototype.nfcall=function(){var e=u(arguments),t=_();return e.push(t.makeNodeResolver()),this.fapply(e).fail(t.reject),t.promise},x.nfbind=x.denodeify=function(e){if(void 0===e)throw new Error("Q can't wrap an undefined function");var t=u(arguments,1);return function(){var o=t.concat(u(arguments)),n=_();return o.push(n.makeNodeResolver()),x(e).fapply(o).fail(n.reject),n.promise}},T.prototype.nfbind=T.prototype.denodeify=function(){var e=u(arguments);return e.unshift(this),x.denodeify.apply(void 0,e)},x.nbind=function(e,t){var o=u(arguments,2);return function(){var n=o.concat(u(arguments)),r=_();function a(){return e.apply(t,arguments)}return n.push(r.makeNodeResolver()),x(a).fapply(n).fail(r.reject),r.promise}},T.prototype.nbind=function(){var e=u(arguments,0);return e.unshift(this),x.nbind.apply(void 0,e)},x.nmapply=x.npost=function(e,t,o){return x(e).npost(t,o)},T.prototype.nmapply=T.prototype.npost=function(e,t){var o=u(t||[]),n=_();return o.push(n.makeNodeResolver()),this.dispatch("post",[e,o]).fail(n.reject),n.promise},x.nsend=x.nmcall=x.ninvoke=function(e,t){var o=u(arguments,2),n=_();return o.push(n.makeNodeResolver()),x(e).dispatch("post",[t,o]).fail(n.reject),n.promise},T.prototype.nsend=T.prototype.nmcall=T.prototype.ninvoke=function(e){var t=u(arguments,1),o=_();return t.push(o.makeNodeResolver()),this.dispatch("post",[e,t]).fail(o.reject),o.promise},x.nodeify=function(e,t){return x(e).nodeify(t)},T.prototype.nodeify=function(e){if(!e)return this;this.then((function(t){x.nextTick((function(){e(null,t)}))}),(function(t){x.nextTick((function(){e(t)}))}))},x.noConflict=function(){throw new Error("Q.noConflict only works when Q is used as a global")};var K=A();return x}))}).call(this,e("_process"),e("timers").setImmediate)},{_process:15,timers:37}],22:[function(e,t,o){(function(t){
/** @license React v16.13.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";"production"!==t.env.NODE_ENV&&function(){var t=e("react"),n=e("object-assign"),r=e("scheduler"),a=e("prop-types/checkPropTypes"),i=e("scheduler/tracing"),s=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function c(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];u("warn",e,o)}function l(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];u("error",e,o)}function u(e,t,o){if(!(o.length>0&&"string"==typeof o[o.length-1]&&0===o[o.length-1].indexOf("\n    in"))){var n=s.ReactDebugCurrentFrame.getStackAddendum();""!==n&&(t+="%s",o=o.concat([n]))}var r=o.map((function(e){return""+e}));r.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,r);try{var a=0,i="Warning: "+t.replace(/%s/g,(function(){return o[a++]}));throw new Error(i)}catch(e){}}if(s.hasOwnProperty("ReactCurrentDispatcher")||(s.ReactCurrentDispatcher={current:null}),s.hasOwnProperty("ReactCurrentBatchConfig")||(s.ReactCurrentBatchConfig={suspense:null}),!t)throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");var m=function(e,t,o,n,r,a,i,s,c){var l=Array.prototype.slice.call(arguments,3);try{t.apply(o,l)}catch(e){this.onError(e)}};if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var d=document.createElement("react");m=function(e,t,o,n,r,a,i,s,c){if("undefined"==typeof document)throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");var l,u=document.createEvent("Event"),m=!0,h=window.event,p=Object.getOwnPropertyDescriptor(window,"event"),f=Array.prototype.slice.call(arguments,3);function g(){d.removeEventListener(w,g,!1),void 0!==window.event&&window.hasOwnProperty("event")&&(window.event=h),t.apply(o,f),m=!1}var b=!1,v=!1;function y(e){if(l=e.error,b=!0,null===l&&0===e.colno&&0===e.lineno&&(v=!0),e.defaultPrevented&&null!=l&&"object"==typeof l)try{l._suppressLogging=!0}catch(e){}}var w="react-"+(e||"invokeguardedcallback");window.addEventListener("error",y),d.addEventListener(w,g,!1),u.initEvent(w,!1,!1),d.dispatchEvent(u),p&&Object.defineProperty(window,"event",p),m&&(b?v&&(l=new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.")):l=new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."),this.onError(l)),window.removeEventListener("error",y)}}var h=m,p=!1,f=null,g=!1,b=null,v={onError:function(e){p=!0,f=e}};function y(e,t,o,n,r,a,i,s,c){p=!1,f=null,h.apply(v,arguments)}function w(){return p}function k(){if(p){var e=f;return p=!1,f=null,e}throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.")}var C,A=null,x=null,E=null;function _(e,t,o){var n=e.type||"unknown-event";e.currentTarget=E(o),function(e,t,o,n,r,a,i,s,c){if(y.apply(this,arguments),p){var l=k();g||(g=!0,b=l)}}(n,t,void 0,e),e.currentTarget=null}C=function(e){var t=e._dispatchListeners,o=e._dispatchInstances,n=Array.isArray(t),r=n?t.length:t?1:0,a=Array.isArray(o),i=a?o.length:o?1:0;a===n&&i===r||l("EventPluginUtils: Invalid `event`.")};var M=/^(.*)[\\\/]/;var D="function"==typeof Symbol&&Symbol.for,T=D?Symbol.for("react.element"):60103,S=D?Symbol.for("react.portal"):60106,q=D?Symbol.for("react.fragment"):60107,R=D?Symbol.for("react.strict_mode"):60108,z=D?Symbol.for("react.profiler"):60114,V=D?Symbol.for("react.provider"):60109,B=D?Symbol.for("react.context"):60110,G=D?Symbol.for("react.concurrent_mode"):60111,P=D?Symbol.for("react.forward_ref"):60112,N=D?Symbol.for("react.suspense"):60113,j=D?Symbol.for("react.suspense_list"):60120,F=D?Symbol.for("react.memo"):60115,I=D?Symbol.for("react.lazy"):60116,H=D?Symbol.for("react.block"):60121,O="function"==typeof Symbol&&Symbol.iterator;function L(e){if(null===e||"object"!=typeof e)return null;var t=O&&e[O]||e["@@iterator"];return"function"==typeof t?t:null}function U(e){return 1===e._status?e._result:null}function W(e){if(null==e)return null;if("number"==typeof e.tag&&l("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case q:return"Fragment";case S:return"Portal";case z:return"Profiler";case R:return"StrictMode";case N:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return"Context.Consumer";case V:return"Context.Provider";case P:return o=e,n=e.render,r="ForwardRef",a=n.displayName||n.name||"",o.displayName||(""!==a?r+"("+a+")":r);case F:return W(e.type);case H:return W(e.render);case I:var t=U(e);if(t)return W(t)}var o,n,r,a;return null}var $=s.ReactDebugCurrentFrame;function Q(e){switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:return"";default:var t=e._debugOwner,o=e._debugSource,n=W(e.type),r=null;return t&&(r=W(t.type)),function(e,t,o){var n="";if(t){var r=t.fileName,a=r.replace(M,"");if(/^index\./.test(a)){var i=r.match(M);if(i){var s=i[1];if(s)a=s.replace(M,"")+"/"+a}}n=" (at "+a+":"+t.lineNumber+")"}else o&&(n=" (created by "+o+")");return"\n    in "+(e||"Unknown")+n}(n,o,r)}}function K(e){var t="",o=e;do{t+=Q(o),o=o.return}while(o);return t}var Y=null,J=null;function Z(){if(null===Y)return null;var e=Y._debugOwner;return null!=e?W(e.type):null}function X(){return null===Y?"":K(Y)}function ee(){$.getCurrentStack=null,Y=null,J=null}function te(e){$.getCurrentStack=X,Y=e,J=null}function oe(e){J=e}var ne=null,re={};function ae(){if(ne)for(var e in re){var t=re[e],o=ne.indexOf(e);if(!(o>-1))throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `"+e+"`.");if(!ce[o]){if(!t.extractEvents)throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `"+e+"` does not.");ce[o]=t;var n=t.eventTypes;for(var r in n)if(!ie(n[r],t,r))throw Error("EventPluginRegistry: Failed to publish event `"+r+"` for plugin `"+e+"`.")}}}function ie(e,t,o){if(le.hasOwnProperty(o))throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `"+o+"`.");le[o]=e;var n=e.phasedRegistrationNames;if(n){for(var r in n){if(n.hasOwnProperty(r))se(n[r],t,o)}return!0}return!!e.registrationName&&(se(e.registrationName,t,o),!0)}function se(e,t,o){if(ue[e])throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `"+e+"`.");ue[e]=t,me[e]=t.eventTypes[o].dependencies;var n=e.toLowerCase();de[n]=e,"onDoubleClick"===e&&(de.ondblclick=e)}var ce=[],le={},ue={},me={},de={};function he(e){var t=!1;for(var o in e)if(e.hasOwnProperty(o)){var n=e[o];if(!re.hasOwnProperty(o)||re[o]!==n){if(re[o])throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `"+o+"`.");re[o]=n,t=!0}}t&&ae()}var pe=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),fe=null,ge=null,be=null;function ve(e){var t=x(e);if(t){if("function"!=typeof fe)throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");var o=t.stateNode;if(o){var n=A(o);fe(t.stateNode,t.type,n)}}}function ye(e){ge?be?be.push(e):be=[e]:ge=e}function we(){if(ge){var e=ge,t=be;if(ge=null,be=null,ve(e),t)for(var o=0;o<t.length;o++)ve(t[o])}}var ke=function(e,t){return e(t)},Ce=function(e,t,o,n,r){return e(t,o,n,r)},Ae=function(){},xe=ke,Ee=!1,_e=!1;function Me(){(null!==ge||null!==be)&&(Ae(),we())}var De=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",Te=De+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",Se=new RegExp("^["+De+"]["+Te+"]*$"),qe=Object.prototype.hasOwnProperty,Re={},ze={};function Ve(e){return!!qe.call(ze,e)||!qe.call(Re,e)&&(Se.test(e)?(ze[e]=!0,!0):(Re[e]=!0,l("Invalid attribute name: `%s`",e),!1))}function Be(e,t,o){return null!==t?0===t.type:!o&&(e.length>2&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))}function Ge(e,t,o,n){if(null!==o&&0===o.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":if(n)return!1;if(null!==o)return!o.acceptsBooleans;var r=e.toLowerCase().slice(0,5);return"data-"!==r&&"aria-"!==r;default:return!1}}function Pe(e,t,o,n){if(null==t)return!0;if(Ge(e,t,o,n))return!0;if(n)return!1;if(null!==o)switch(o.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||t<1}return!1}function Ne(e){return Fe.hasOwnProperty(e)?Fe[e]:null}function je(e,t,o,n,r,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=r,this.mustUseProperty=o,this.propertyName=e,this.type=t,this.sanitizeURL=a}var Fe={};["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"].forEach((function(e){Fe[e]=new je(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0],o=e[1];Fe[t]=new je(t,1,!1,o,null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Fe[e]=new je(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Fe[e]=new je(e,2,!1,e,null,!1)})),["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","disablePictureInPicture","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach((function(e){Fe[e]=new je(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Fe[e]=new je(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Fe[e]=new je(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Fe[e]=new je(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Fe[e]=new je(e,5,!1,e.toLowerCase(),null,!1)}));var Ie=/[\-\:]([a-z])/g,He=function(e){return e[1].toUpperCase()};["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach((function(e){var t=e.replace(Ie,He);Fe[t]=new je(t,1,!1,e,null,!1)})),["xlink:actuate","xlink:arcrole","xlink:role","xlink:show","xlink:title","xlink:type"].forEach((function(e){var t=e.replace(Ie,He);Fe[t]=new je(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Ie,He);Fe[t]=new je(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Fe[e]=new je(e,1,!1,e.toLowerCase(),null,!1)}));Fe.xlinkHref=new je("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Fe[e]=new je(e,1,!1,e.toLowerCase(),null,!0)}));s.ReactDebugCurrentFrame;var Oe=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i,Le=!1;function Ue(e){!Le&&Oe.test(e)&&(Le=!0,l("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",JSON.stringify(e)))}function We(e,t,o,n){if(n.mustUseProperty)return e[n.propertyName];n.sanitizeURL&&Ue(""+o);var r=n.attributeName,a=null;if(4===n.type){if(e.hasAttribute(r)){var i=e.getAttribute(r);return""===i||(Pe(t,o,n,!1)?i:i===""+o?o:i)}}else if(e.hasAttribute(r)){if(Pe(t,o,n,!1))return e.getAttribute(r);if(3===n.type)return o;a=e.getAttribute(r)}return Pe(t,o,n,!1)?null===a?o:a:a===""+o?o:a}function $e(e,t,o){if(Ve(t)){if(!e.hasAttribute(t))return void 0===o?void 0:null;var n=e.getAttribute(t);return n===""+o?o:n}}function Qe(e,t,o,n){var r=Ne(t);if(!Be(t,r,n))if(Pe(t,o,r,n)&&(o=null),n||null===r){if(Ve(t)){var a=t;null===o?e.removeAttribute(a):e.setAttribute(a,""+o)}}else if(r.mustUseProperty){var i=r.propertyName;if(null===o){var s=r.type;e[i]=3!==s&&""}else e[i]=o}else{var c=r.attributeName,l=r.attributeNamespace;if(null===o)e.removeAttribute(c);else{var u,m=r.type;3===m||4===m&&!0===o?u="":(u=""+o,r.sanitizeURL&&Ue(u.toString())),l?e.setAttributeNS(l,c,u):e.setAttribute(c,u)}}}function Ke(e){return""+e}function Ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}var Je,Ze={checkPropTypes:null};Je=s.ReactDebugCurrentFrame;var Xe={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},et={value:function(e,t,o){return Xe[e.type]||e.onChange||e.readOnly||e.disabled||null==e[t]?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,o){return e.onChange||e.readOnly||e.disabled||null==e[t]?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}};function tt(e){var t=e.type,o=e.nodeName;return o&&"input"===o.toLowerCase()&&("checkbox"===t||"radio"===t)}function ot(e){return e._valueTracker}function nt(e){ot(e)||(e._valueTracker=function(e){var t=tt(e)?"checked":"value",o=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==o&&"function"==typeof o.get&&"function"==typeof o.set){var r=o.get,a=o.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:o.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){!function(e){e._valueTracker=null}(e),delete e[t]}}}}(e))}function rt(e){if(!e)return!1;var t=ot(e);if(!t)return!0;var o=t.getValue(),n=function(e){var t="";return e?t=tt(e)?e.checked?"true":"false":e.value:t}(e);return n!==o&&(t.setValue(n),!0)}Ze.checkPropTypes=function(e,t){a(et,t,"prop",e,Je.getStackAddendum)};var at=!1,it=!1,st=!1,ct=!1;function lt(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}function ut(e,t){var o=e,r=t.checked;return n({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:o._wrapperState.initialChecked})}function mt(e,t){Ze.checkPropTypes("input",t),void 0===t.checked||void 0===t.defaultChecked||it||(l("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",Z()||"A component",t.type),it=!0),void 0===t.value||void 0===t.defaultValue||at||(l("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components",Z()||"A component",t.type),at=!0);var o=e,n=null==t.defaultValue?"":t.defaultValue;o._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:Ye(null!=t.value?t.value:n),controlled:lt(t)}}function dt(e,t){var o=e,n=t.checked;null!=n&&Qe(o,"checked",n,!1)}function ht(e,t){var o=e,n=lt(t);o._wrapperState.controlled||!n||ct||(l("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components",t.type),ct=!0),!o._wrapperState.controlled||n||st||(l("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components",t.type),st=!0),dt(e,t);var r=Ye(t.value),a=t.type;if(null!=r)"number"===a?(0===r&&""===o.value||o.value!=r)&&(o.value=Ke(r)):o.value!==Ke(r)&&(o.value=Ke(r));else if("submit"===a||"reset"===a)return void o.removeAttribute("value");t.hasOwnProperty("value")?gt(o,t.type,r):t.hasOwnProperty("defaultValue")&&gt(o,t.type,Ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(o.defaultChecked=!!t.defaultChecked)}function pt(e,t,o){var n=e;if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(("submit"===r||"reset"===r)&&(void 0===t.value||null===t.value))return;var a=Ke(n._wrapperState.initialValue);o||a!==n.value&&(n.value=a),n.defaultValue=a}var i=n.name;""!==i&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!!n._wrapperState.initialChecked,""!==i&&(n.name=i)}function ft(e,t){var o=e;ht(o,t),function(e,t){var o=t.name;if("radio"===t.type&&null!=o){for(var n=e;n.parentNode;)n=n.parentNode;for(var r=n.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),a=0;a<r.length;a++){var i=r[a];if(i!==e&&i.form===e.form){var s=Ca(i);if(!s)throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");rt(i),ht(i,s)}}}}(o,t)}function gt(e,t,o){"number"===t&&e.ownerDocument.activeElement===e||(null==o?e.defaultValue=Ke(e._wrapperState.initialValue):e.defaultValue!==Ke(o)&&(e.defaultValue=Ke(o)))}var bt,vt=!1,yt=!1;function wt(e,o){"object"==typeof o.children&&null!==o.children&&t.Children.forEach(o.children,(function(e){null!=e&&"string"!=typeof e&&"number"!=typeof e&&"string"==typeof e.type&&(yt||(yt=!0,l("Only strings and numbers are supported as <option> children.")))})),null==o.selected||vt||(l("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),vt=!0)}function kt(e,o){var r=n({children:void 0},o),a=function(e){var o="";return t.Children.forEach(e,(function(e){null!=e&&(o+=e)})),o}(o.children);return a&&(r.children=a),r}function Ct(){var e=Z();return e?"\n\nCheck the render method of `"+e+"`.":""}bt=!1;var At=["value","defaultValue"];function xt(e,t,o,n){var r=e.options;if(t){for(var a=o,i={},s=0;s<a.length;s++)i["$"+a[s]]=!0;for(var c=0;c<r.length;c++){var l=i.hasOwnProperty("$"+r[c].value);r[c].selected!==l&&(r[c].selected=l),l&&n&&(r[c].defaultSelected=!0)}}else{for(var u=Ke(Ye(o)),m=null,d=0;d<r.length;d++){if(r[d].value===u)return r[d].selected=!0,void(n&&(r[d].defaultSelected=!0));null!==m||r[d].disabled||(m=r[d])}null!==m&&(m.selected=!0)}}function Et(e,t){return n({},t,{value:void 0})}function _t(e,t){var o=e;!function(e){Ze.checkPropTypes("select",e);for(var t=0;t<At.length;t++){var o=At[t];if(null!=e[o]){var n=Array.isArray(e[o]);e.multiple&&!n?l("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",o,Ct()):!e.multiple&&n&&l("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",o,Ct())}}}(t),o._wrapperState={wasMultiple:!!t.multiple},void 0===t.value||void 0===t.defaultValue||bt||(l("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components"),bt=!0)}var Mt=!1;function Dt(e,t){var o=e;if(null!=t.dangerouslySetInnerHTML)throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");return n({},t,{value:void 0,defaultValue:void 0,children:Ke(o._wrapperState.initialValue)})}function Tt(e,t){var o=e;Ze.checkPropTypes("textarea",t),void 0===t.value||void 0===t.defaultValue||Mt||(l("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components",Z()||"A component"),Mt=!0);var n=t.value;if(null==n){var r=t.children,a=t.defaultValue;if(null!=r){if(l("Use the `defaultValue` or `value` props instead of setting children on <textarea>."),null!=a)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(Array.isArray(r)){if(!(r.length<=1))throw Error("<textarea> can only have at most one child.");r=r[0]}a=r}null==a&&(a=""),n=a}o._wrapperState={initialValue:Ye(n)}}function St(e,t){var o=e,n=Ye(t.value),r=Ye(t.defaultValue);if(null!=n){var a=Ke(n);a!==o.value&&(o.value=a),null==t.defaultValue&&o.defaultValue!==a&&(o.defaultValue=a)}null!=r&&(o.defaultValue=Ke(r))}function qt(e,t){var o=e,n=o.textContent;n===o._wrapperState.initialValue&&""!==n&&null!==n&&(o.value=n)}var Rt="http://www.w3.org/1999/xhtml",zt="http://www.w3.org/2000/svg",Vt=Rt,Bt=zt;function Gt(e){switch(e){case"svg":return zt;case"math":return"http://www.w3.org/1998/Math/MathML";default:return Rt}}function Pt(e,t){return null==e||e===Rt?Gt(t):e===zt&&"foreignObject"===t?Rt:e}var Nt,jt,Ft=(jt=function(e,t){if(e.namespaceURI!==Bt||"innerHTML"in e)e.innerHTML=t;else{(Nt=Nt||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>";for(var o=Nt.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;o.firstChild;)e.appendChild(o.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,o,n){MSApp.execUnsafeLocalFunction((function(){return jt(e,t,o,n)}))}:jt),It=function(e,t){if(t){var o=e.firstChild;if(o&&o===e.lastChild&&3===o.nodeType)return void(o.nodeValue=t)}e.textContent=t};function Ht(e,t){var o={};return o[e.toLowerCase()]=t.toLowerCase(),o["Webkit"+e]="webkit"+t,o["Moz"+e]="moz"+t,o}var Ot={animationend:Ht("Animation","AnimationEnd"),animationiteration:Ht("Animation","AnimationIteration"),animationstart:Ht("Animation","AnimationStart"),transitionend:Ht("Transition","TransitionEnd")},Lt={},Ut={};function Wt(e){if(Lt[e])return Lt[e];if(!Ot[e])return e;var t=Ot[e];for(var o in t)if(t.hasOwnProperty(o)&&o in Ut)return Lt[e]=t[o];return e}pe&&(Ut=document.createElement("div").style,"AnimationEvent"in window||(delete Ot.animationend.animation,delete Ot.animationiteration.animation,delete Ot.animationstart.animation),"TransitionEvent"in window||delete Ot.transitionend.transition);var $t=Wt("animationend"),Qt=Wt("animationiteration"),Kt=Wt("animationstart"),Yt=Wt("transitionend"),Jt=["abort","canplay","canplaythrough","durationchange","emptied","encrypted","ended","error","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"];var Zt=new("function"==typeof WeakMap?WeakMap:Map);function Xt(e){var t=Zt.get(e);return void 0===t&&(t=new Map,Zt.set(e,t)),t}function eo(e){return e._reactInternalFiber}var to=s.ReactCurrentOwner;function oo(e){var t=e,o=e;if(e.alternate)for(;t.return;)t=t.return;else{var n=t;do{0!=(1026&(t=n).effectTag)&&(o=t.return),n=t.return}while(n)}return 3===t.tag?o:null}function no(e){if(13===e.tag){var t=e.memoizedState;if(null===t){var o=e.alternate;null!==o&&(t=o.memoizedState)}if(null!==t)return t.dehydrated}return null}function ro(e){return 3===e.tag?e.stateNode.containerInfo:null}function ao(e){if(oo(e)!==e)throw Error("Unable to find node on an unmounted component.")}function io(e){var t=e.alternate;if(!t){var o=oo(e);if(null===o)throw Error("Unable to find node on an unmounted component.");return o!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){var s=a.return;if(null!==s){n=r=s;continue}break}if(a.child===i.child){for(var c=a.child;c;){if(c===n)return ao(a),e;if(c===r)return ao(a),t;c=c.sibling}throw Error("Unable to find node on an unmounted component.")}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(n.alternate!==r)throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(3!==n.tag)throw Error("Unable to find node on an unmounted component.");return n.stateNode.current===n?e:t}function so(e){var t=io(e);if(!t)return null;for(var o=t;;){if(5===o.tag||6===o.tag)return o;if(o.child)o.child.return=o,o=o.child;else{if(o===t)return null;for(;!o.sibling;){if(!o.return||o.return===t)return null;o=o.return}o.sibling.return=o.return,o=o.sibling}}return null}function co(e,t){if(null==t)throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function lo(e,t,o){Array.isArray(e)?e.forEach(t,o):e&&t.call(o,e)}var uo=null,mo=function(e){e&&(!function(e){var t=e._dispatchListeners,o=e._dispatchInstances;if(C(e),Array.isArray(t))for(var n=0;n<t.length&&!e.isPropagationStopped();n++)_(e,t[n],o[n]);else t&&_(e,t,o);e._dispatchListeners=null,e._dispatchInstances=null}(e),e.isPersistent()||e.constructor.release(e))},ho=function(e){return mo(e)};function po(e){null!==e&&(uo=co(uo,e));var t=uo;if(uo=null,t){if(lo(t,ho),uo)throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");!function(){if(g){var e=b;throw g=!1,b=null,e}}()}}function fo(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function go(e){if(!pe)return!1;var t="on"+e,o=t in document;if(!o){var n=document.createElement("div");n.setAttribute(t,"return;"),o="function"==typeof n[t]}return o}var bo,vo,yo,wo=[];function ko(e){if(3===e.tag)return e.stateNode.containerInfo;for(;e.return;)e=e.return;return 3!==e.tag?null:e.stateNode.containerInfo}function Co(e,t,o,n,r){po(function(e,t,o,n,r){for(var a=null,i=0;i<ce.length;i++){var s=ce[i];if(s){var c=s.extractEvents(e,t,o,n,r);c&&(a=co(a,c))}}return a}(e,t,o,n,r))}function Ao(e){var t=e.targetInst,o=t;do{if(!o){e.ancestors.push(o);break}var n=ko(o);if(!n)break;var r=o.tag;5!==r&&6!==r||e.ancestors.push(o),o=ya(n)}while(o);for(var a=0;a<e.ancestors.length;a++){t=e.ancestors[a];var i=fo(e.nativeEvent),s=e.topLevelType,c=e.nativeEvent,l=e.eventSystemFlags;0===a&&(l|=64),Co(s,t,c,i,l)}}function xo(e,t,o,n){var r,a=function(e,t,o,n){if(wo.length){var r=wo.pop();return r.topLevelType=e,r.eventSystemFlags=n,r.nativeEvent=t,r.targetInst=o,r}return{topLevelType:e,eventSystemFlags:n,nativeEvent:t,targetInst:o,ancestors:[]}}(e,o,n,t);try{!function(e,t,o){if(_e)return e(t,o);_e=!0;try{xe(e,t,o)}finally{_e=!1,Me()}}(Ao,a)}finally{(r=a).topLevelType=null,r.nativeEvent=null,r.targetInst=null,r.ancestors.length=0,wo.length<10&&wo.push(r)}}function Eo(e,t,o){if(!o.has(e)){switch(e){case"scroll":sn("scroll",t);break;case"focus":case"blur":sn("focus",t),sn("blur",t),o.set("blur",null),o.set("focus",null);break;case"cancel":case"close":go(e)&&sn(e,t);break;case"invalid":case"submit":case"reset":break;default:-1!==Jt.indexOf(e)||an(e,t)}o.set(e,null)}}var _o=!1,Mo=[],Do=null,To=null,So=null,qo=new Map,Ro=new Map,zo=[];var Vo=["mousedown","mouseup","touchcancel","touchend","touchstart","auxclick","dblclick","pointercancel","pointerdown","pointerup","dragend","dragstart","drop","compositionend","compositionstart","keydown","keypress","keyup","input","textInput","close","cancel","copy","cut","paste","click","change","contextmenu","reset","submit"],Bo=["focus","blur","dragenter","dragleave","mouseover","mouseout","pointerover","pointerout","gotpointercapture","lostpointercapture"];function Go(e){return Vo.indexOf(e)>-1}function Po(e,t,o){Eo(e,t,o)}function No(e,t,o,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|o,nativeEvent:r,container:n}}function jo(e,t,o,n,r){var a=No(e,t,o,n,r);Mo.push(a)}function Fo(e,t){switch(e){case"focus":case"blur":Do=null;break;case"dragenter":case"dragleave":To=null;break;case"mouseover":case"mouseout":So=null;break;case"pointerover":case"pointerout":var o=t.pointerId;qo.delete(o);break;case"gotpointercapture":case"lostpointercapture":var n=t.pointerId;Ro.delete(n)}}function Io(e,t,o,n,r,a){if(null===e||e.nativeEvent!==a){var i=No(t,o,n,r,a);if(null!==t){var s=wa(t);null!==s&&vo(s)}return i}return e.eventSystemFlags|=n,e}function Ho(e){var t=ya(e.target);if(null!==t){var o=oo(t);if(null!==o){var n=o.tag;if(13===n){var a=no(o);if(null!==a)return e.blockedOn=a,void r.unstable_runWithPriority(e.priority,(function(){yo(o)}))}else if(3===n){if(o.stateNode.hydrate)return void(e.blockedOn=ro(o))}}}e.blockedOn=null}function Oo(e){if(null!==e.blockedOn)return!1;var t=dn(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var o=wa(t);return null!==o&&vo(o),e.blockedOn=t,!1}return!0}function Lo(e,t,o){Oo(e)&&o.delete(t)}function Uo(){for(_o=!1;Mo.length>0;){var e=Mo[0];if(null!==e.blockedOn){var t=wa(e.blockedOn);null!==t&&bo(t);break}var o=dn(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==o?e.blockedOn=o:Mo.shift()}null!==Do&&Oo(Do)&&(Do=null),null!==To&&Oo(To)&&(To=null),null!==So&&Oo(So)&&(So=null),qo.forEach(Lo),Ro.forEach(Lo)}function Wo(e,t){e.blockedOn===t&&(e.blockedOn=null,_o||(_o=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Uo)))}function $o(e){if(Mo.length>0){Wo(Mo[0],e);for(var t=1;t<Mo.length;t++){var o=Mo[t];o.blockedOn===e&&(o.blockedOn=null)}}null!==Do&&Wo(Do,e),null!==To&&Wo(To,e),null!==So&&Wo(So,e);var n=function(t){return Wo(t,e)};qo.forEach(n),Ro.forEach(n);for(var r=0;r<zo.length;r++){var a=zo[r];a.blockedOn===e&&(a.blockedOn=null)}for(;zo.length>0;){var i=zo[0];if(null!==i.blockedOn)break;Ho(i),null===i.blockedOn&&zo.shift()}}var Qo={},Ko=new Map,Yo=new Map,Jo=["change","selectionchange","textInput","compositionstart","compositionend","compositionupdate"],Zo=["drag","drag","dragenter","dragEnter","dragexit","dragExit","dragleave","dragLeave","dragover","dragOver","mousemove","mouseMove","mouseout","mouseOut","mouseover","mouseOver","pointermove","pointerMove","pointerout","pointerOut","pointerover","pointerOver","scroll","scroll","toggle","toggle","touchmove","touchMove","wheel","wheel"],Xo=["abort","abort",$t,"animationEnd",Qt,"animationIteration",Kt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Yt,"transitionEnd","waiting","waiting"];function en(e,t){for(var o=0;o<e.length;o+=2){var n=e[o],r=e[o+1],a="on"+(r[0].toUpperCase()+r.slice(1)),i={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[n],eventPriority:t};Yo.set(n,t),Ko.set(n,i),Qo[r]=i}}en(["blur","blur","cancel","cancel","click","click","close","close","contextmenu","contextMenu","copy","copy","cut","cut","auxclick","auxClick","dblclick","doubleClick","dragend","dragEnd","dragstart","dragStart","drop","drop","focus","focus","input","input","invalid","invalid","keydown","keyDown","keypress","keyPress","keyup","keyUp","mousedown","mouseDown","mouseup","mouseUp","paste","paste","pause","pause","play","play","pointercancel","pointerCancel","pointerdown","pointerDown","pointerup","pointerUp","ratechange","rateChange","reset","reset","seeked","seeked","submit","submit","touchcancel","touchCancel","touchend","touchEnd","touchstart","touchStart","volumechange","volumeChange"],0),en(Zo,1),en(Xo,2),function(e,t){for(var o=0;o<e.length;o++)Yo.set(e[o],t)}(Jo,0);var tn=r.unstable_UserBlockingPriority,on=r.unstable_runWithPriority,nn=!0;function rn(e){nn=!!e}function an(e,t){cn(t,e,!1)}function sn(e,t){cn(t,e,!0)}function cn(e,t,o){var n;switch(function(e){var t=Yo.get(e);return void 0===t?2:t}(t)){case 0:n=ln.bind(null,t,1,e);break;case 1:n=un.bind(null,t,1,e);break;case 2:default:n=mn.bind(null,t,1,e)}var r=t;o?function(e,t,o){e.addEventListener(t,o,!0)}(e,r,n):function(e,t,o){e.addEventListener(t,o,!1)}(e,r,n)}function ln(e,t,o,n){n.timeStamp,Ee||Ae(),function(e,t,o,n,r){var a=Ee;Ee=!0;try{Ce(e,t,o,n,r)}finally{(Ee=a)||Me()}}(mn,e,t,o,n)}function un(e,t,o,n){on(tn,mn.bind(null,e,t,o,n))}function mn(e,t,o,n){if(nn)if(Mo.length>0&&Go(e))jo(null,e,t,o,n);else{var r=dn(e,t,o,n);null!==r?Go(e)?jo(r,e,t,o,n):function(e,t,o,n,r){switch(t){case"focus":return Do=Io(Do,e,t,o,n,r),!0;case"dragenter":return To=Io(To,e,t,o,n,r),!0;case"mouseover":return So=Io(So,e,t,o,n,r),!0;case"pointerover":var a=r,i=a.pointerId;return qo.set(i,Io(qo.get(i)||null,e,t,o,n,a)),!0;case"gotpointercapture":var s=r,c=s.pointerId;return Ro.set(c,Io(Ro.get(c)||null,e,t,o,n,s)),!0}return!1}(r,e,t,o,n)||(Fo(e,n),xo(e,t,n,null)):Fo(e,n)}}function dn(e,t,o,n){var r=ya(fo(n));if(null!==r){var a=oo(r);if(null===a)r=null;else{var i=a.tag;if(13===i){var s=no(a);if(null!==s)return s;r=null}else if(3===i){if(a.stateNode.hydrate)return ro(a);r=null}else a!==r&&(r=null)}}return xo(e,t,n,r),null}var hn={animation:["animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction"],background:["backgroundAttachment","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize"],backgroundPosition:["backgroundPositionX","backgroundPositionY"],border:["borderBottomColor","borderBottomStyle","borderBottomWidth","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","borderTopColor","borderTopStyle","borderTopWidth"],borderBlockEnd:["borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth"],borderBlockStart:["borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth"],borderBottom:["borderBottomColor","borderBottomStyle","borderBottomWidth"],borderColor:["borderBottomColor","borderLeftColor","borderRightColor","borderTopColor"],borderImage:["borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth"],borderInlineEnd:["borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth"],borderInlineStart:["borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth"],borderLeft:["borderLeftColor","borderLeftStyle","borderLeftWidth"],borderRadius:["borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius"],borderRight:["borderRightColor","borderRightStyle","borderRightWidth"],borderStyle:["borderBottomStyle","borderLeftStyle","borderRightStyle","borderTopStyle"],borderTop:["borderTopColor","borderTopStyle","borderTopWidth"],borderWidth:["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth"],columnRule:["columnRuleColor","columnRuleStyle","columnRuleWidth"],columns:["columnCount","columnWidth"],flex:["flexBasis","flexGrow","flexShrink"],flexFlow:["flexDirection","flexWrap"],font:["fontFamily","fontFeatureSettings","fontKerning","fontLanguageOverride","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontWeight","lineHeight"],fontVariant:["fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition"],gap:["columnGap","rowGap"],grid:["gridAutoColumns","gridAutoFlow","gridAutoRows","gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],gridArea:["gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart"],gridColumn:["gridColumnEnd","gridColumnStart"],gridColumnGap:["columnGap"],gridGap:["columnGap","rowGap"],gridRow:["gridRowEnd","gridRowStart"],gridRowGap:["rowGap"],gridTemplate:["gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],listStyle:["listStyleImage","listStylePosition","listStyleType"],margin:["marginBottom","marginLeft","marginRight","marginTop"],marker:["markerEnd","markerMid","markerStart"],mask:["maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPositionX","maskPositionY","maskRepeat","maskSize"],maskPosition:["maskPositionX","maskPositionY"],outline:["outlineColor","outlineStyle","outlineWidth"],overflow:["overflowX","overflowY"],padding:["paddingBottom","paddingLeft","paddingRight","paddingTop"],placeContent:["alignContent","justifyContent"],placeItems:["alignItems","justifyItems"],placeSelf:["alignSelf","justifySelf"],textDecoration:["textDecorationColor","textDecorationLine","textDecorationStyle"],textEmphasis:["textEmphasisColor","textEmphasisStyle"],transition:["transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction"],wordWrap:["overflowWrap"]},pn={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var fn=["Webkit","ms","Moz","O"];function gn(e,t,o){return null==t||"boolean"==typeof t||""===t?"":o||"number"!=typeof t||0===t||pn.hasOwnProperty(e)&&pn[e]?(""+t).trim():t+"px"}Object.keys(pn).forEach((function(e){fn.forEach((function(t){pn[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=pn[e]}))}));var bn=/([A-Z])/g,vn=/^ms-/;var yn=/^(?:webkit|moz|o)[A-Z]/,wn=/^-ms-/,kn=/-(.)/g,Cn=/;\s*$/,An={},xn={},En=!1,_n=!1,Mn=function(e){An.hasOwnProperty(e)&&An[e]||(An[e]=!0,l("Unsupported style property %s. Did you mean %s?",e,e.replace(wn,"ms-").replace(kn,(function(e,t){return t.toUpperCase()}))))},Dn=function(e,t){e.indexOf("-")>-1?Mn(e):yn.test(e)?function(e){An.hasOwnProperty(e)&&An[e]||(An[e]=!0,l("Unsupported vendor-prefixed style property %s. Did you mean %s?",e,e.charAt(0).toUpperCase()+e.slice(1)))}(e):Cn.test(t)&&function(e,t){xn.hasOwnProperty(t)&&xn[t]||(xn[t]=!0,l('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',e,t.replace(Cn,"")))}(e,t),"number"==typeof t&&(isNaN(t)?function(e,t){En||(En=!0,l("`NaN` is an invalid value for the `%s` css style property.",e))}(e):isFinite(t)||function(e,t){_n||(_n=!0,l("`Infinity` is an invalid value for the `%s` css style property.",e))}(e))};function Tn(e){var t="",o="";for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];if(null!=r){var a=0===n.indexOf("--");t+=o+(a?n:n.replace(bn,"-$1").toLowerCase().replace(vn,"-ms-"))+":",t+=gn(n,r,a),o=";"}}return t||null}function Sn(e,t){var o=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--");r||Dn(n,t[n]);var a=gn(n,t[n],r);"float"===n&&(n="cssFloat"),r?o.setProperty(n,a):o[n]=a}}function qn(e){var t={};for(var o in e)for(var n=hn[o]||[o],r=0;r<n.length;r++)t[n[r]]=o;return t}var Rn=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),zn=null;function Vn(e,t){if(t){if(Rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(e+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."+zn.getStackAddendum());if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.")}if(!t.suppressContentEditableWarning&&t.contentEditable&&null!=t.children&&l("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."),null!=t.style&&"object"!=typeof t.style)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."+zn.getStackAddendum())}}function Bn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}zn=s.ReactDebugCurrentFrame;var Gn={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",disablepictureinpicture:"disablePictureInPicture",download:"download",draggable:"draggable",enctype:"encType",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},Pn={"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},Nn={},jn=new RegExp("^(aria)-["+Te+"]*$"),Fn=new RegExp("^(aria)[A-Z]["+Te+"]*$"),In=Object.prototype.hasOwnProperty;function Hn(e,t){if(In.call(Nn,t)&&Nn[t])return!0;if(Fn.test(t)){var o="aria-"+t.slice(4).toLowerCase(),n=Pn.hasOwnProperty(o)?o:null;if(null==n)return l("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",t),Nn[t]=!0,!0;if(t!==n)return l("Invalid ARIA attribute `%s`. Did you mean `%s`?",t,n),Nn[t]=!0,!0}if(jn.test(t)){var r=t.toLowerCase(),a=Pn.hasOwnProperty(r)?r:null;if(null==a)return Nn[t]=!0,!1;if(t!==a)return l("Unknown ARIA attribute `%s`. Did you mean `%s`?",t,a),Nn[t]=!0,!0}return!0}function On(e,t){Bn(e,t)||function(e,t){var o=[];for(var n in t){Hn(0,n)||o.push(n)}var r=o.map((function(e){return"`"+e+"`"})).join(", ");1===o.length?l("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop",r,e):o.length>1&&l("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop",r,e)}(e,t)}var Ln=!1;var Un,Wn={},$n=Object.prototype.hasOwnProperty,Qn=/^on./,Kn=/^on[^A-Z]/,Yn=new RegExp("^(aria)-["+Te+"]*$"),Jn=new RegExp("^(aria)[A-Z]["+Te+"]*$");Un=function(e,t,o,n){if($n.call(Wn,t)&&Wn[t])return!0;var r=t.toLowerCase();if("onfocusin"===r||"onfocusout"===r)return l("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),Wn[t]=!0,!0;if(n){if(ue.hasOwnProperty(t))return!0;var a=de.hasOwnProperty(r)?de[r]:null;if(null!=a)return l("Invalid event handler property `%s`. Did you mean `%s`?",t,a),Wn[t]=!0,!0;if(Qn.test(t))return l("Unknown event handler property `%s`. It will be ignored.",t),Wn[t]=!0,!0}else if(Qn.test(t))return Kn.test(t)&&l("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",t),Wn[t]=!0,!0;if(Yn.test(t)||Jn.test(t))return!0;if("innerhtml"===r)return l("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),Wn[t]=!0,!0;if("aria"===r)return l("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),Wn[t]=!0,!0;if("is"===r&&null!=o&&"string"!=typeof o)return l("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",typeof o),Wn[t]=!0,!0;if("number"==typeof o&&isNaN(o))return l("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",t),Wn[t]=!0,!0;var i=Ne(t),s=null!==i&&0===i.type;if(Gn.hasOwnProperty(r)){var c=Gn[r];if(c!==t)return l("Invalid DOM property `%s`. Did you mean `%s`?",t,c),Wn[t]=!0,!0}else if(!s&&t!==r)return l("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",t,r),Wn[t]=!0,!0;return"boolean"==typeof o&&Ge(t,o,i,!1)?(o?l('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',o,t,t,o,t):l('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',o,t,t,o,t,t,t),Wn[t]=!0,!0):!!s||(Ge(t,o,i,!1)?(Wn[t]=!0,!1):("false"!==o&&"true"!==o||null===i||3!==i.type||(l("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",o,t,"false"===o?"The browser will interpret it as a truthy value.":'Although this works, it will not work as expected if you pass the string "false".',t,o),Wn[t]=!0),!0))};function Zn(e,t,o){Bn(e,t)||function(e,t,o){var n=[];for(var r in t){Un(0,r,t[r],o)||n.push(r)}var a=n.map((function(e){return"`"+e+"`"})).join(", ");1===n.length?l("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior",a,e):n.length>1&&l("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior",a,e)}(e,t,o)}var Xn,er,tr,or,nr,rr,ar,ir,sr,cr,lr=!1,ur=!1,mr=Vt;Xn={time:!0,dialog:!0,webview:!0},tr=function(e,t){On(e,t),function(e,t){"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Ln||(Ln=!0,"select"===e&&t.multiple?l("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",e):l("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",e))}(e,t),Zn(e,t,!0)},ir=pe&&!document.documentMode;var dr=/\r\n?/g,hr=/\u0000|\uFFFD/g;function pr(e,t){!function(e,t){for(var o=Xt(t),n=me[e],r=0;r<n.length;r++){Eo(n[r],t,o)}}(t,9===e.nodeType||11===e.nodeType?e:e.ownerDocument)}function fr(e){return 9===e.nodeType?e:e.ownerDocument}function gr(){}function br(e){e.onclick=gr}function vr(e,t,o,n){var r,a=Bn(t,o);switch(tr(t,o),a&&!ur&&e.shadyRoot&&(l("%s is using shady DOM. Using shady DOM with React can cause things to break subtly.",Z()||"A component"),ur=!0),t){case"iframe":case"object":case"embed":an("load",e),r=o;break;case"video":case"audio":for(var i=0;i<Jt.length;i++)an(Jt[i],e);r=o;break;case"source":an("error",e),r=o;break;case"img":case"image":case"link":an("error",e),an("load",e),r=o;break;case"form":an("reset",e),an("submit",e),r=o;break;case"details":an("toggle",e),r=o;break;case"input":mt(e,o),r=ut(e,o),an("invalid",e),pr(n,"onChange");break;case"option":wt(0,o),r=kt(0,o);break;case"select":_t(e,o),r=Et(0,o),an("invalid",e),pr(n,"onChange");break;case"textarea":Tt(e,o),r=Dt(e,o),an("invalid",e),pr(n,"onChange");break;default:r=o}switch(Vn(t,r),function(e,t,o,n,r){for(var a in n)if(n.hasOwnProperty(a)){var i=n[a];if("style"===a)i&&Object.freeze(i),Sn(t,i);else if("dangerouslySetInnerHTML"===a){var s=i?i.__html:void 0;null!=s&&Ft(t,s)}else if("children"===a){if("string"==typeof i)("textarea"!==e||""!==i)&&It(t,i);else"number"==typeof i&&It(t,""+i)}else"suppressContentEditableWarning"===a||"suppressHydrationWarning"===a||"autoFocus"===a||(ue.hasOwnProperty(a)?null!=i&&("function"!=typeof i&&ar(a,i),pr(o,a)):null!=i&&Qe(t,a,i,r))}}(t,e,n,r,a),t){case"input":nt(e),pt(e,o,!1);break;case"textarea":nt(e),qt(e);break;case"option":!function(e,t){null!=t.value&&e.setAttribute("value",Ke(Ye(t.value)))}(e,o);break;case"select":!function(e,t){var o=e;o.multiple=!!t.multiple;var n=t.value;null!=n?xt(o,!!t.multiple,n,!1):null!=t.defaultValue&&xt(o,!!t.multiple,t.defaultValue,!0)}(e,o);break;default:"function"==typeof r.onClick&&br(e)}}function yr(e,t,o,n,r){tr(t,n);var a,i,s,c,u=null;switch(t){case"input":a=ut(e,o),i=ut(e,n),u=[];break;case"option":a=kt(0,o),i=kt(0,n),u=[];break;case"select":a=Et(0,o),i=Et(0,n),u=[];break;case"textarea":a=Dt(e,o),i=Dt(e,n),u=[];break;default:i=n,"function"!=typeof(a=o).onClick&&"function"==typeof i.onClick&&br(e)}Vn(t,i);var m=null;for(s in a)if(!i.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s){var d=a[s];for(c in d)d.hasOwnProperty(c)&&(m||(m={}),m[c]="")}else"dangerouslySetInnerHTML"===s||"children"===s||"suppressContentEditableWarning"===s||"suppressHydrationWarning"===s||"autoFocus"===s||(ue.hasOwnProperty(s)?u||(u=[]):(u=u||[]).push(s,null));for(s in i){var h=i[s],p=null!=a?a[s]:void 0;if(i.hasOwnProperty(s)&&h!==p&&(null!=h||null!=p))if("style"===s)if(h&&Object.freeze(h),p){for(c in p)!p.hasOwnProperty(c)||h&&h.hasOwnProperty(c)||(m||(m={}),m[c]="");for(c in h)h.hasOwnProperty(c)&&p[c]!==h[c]&&(m||(m={}),m[c]=h[c])}else m||(u||(u=[]),u.push(s,m)),m=h;else if("dangerouslySetInnerHTML"===s){var f=h?h.__html:void 0,g=p?p.__html:void 0;null!=f&&g!==f&&(u=u||[]).push(s,f)}else"children"===s?p===h||"string"!=typeof h&&"number"!=typeof h||(u=u||[]).push(s,""+h):"suppressContentEditableWarning"===s||"suppressHydrationWarning"===s||(ue.hasOwnProperty(s)?(null!=h&&("function"!=typeof h&&ar(s,h),pr(r,s)),u||p===h||(u=[])):(u=u||[]).push(s,h))}return m&&(!function(e,t){if(t){var o,n=qn(e),r=qn(t),a={};for(var i in n){var s=n[i],c=r[i];if(c&&s!==c){var u=s+","+c;if(a[u])continue;a[u]=!0,l("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",null==(o=e[s])||"boolean"==typeof o||""===o?"Removing":"Updating",s,c)}}}}(m,i.style),(u=u||[]).push("style",m)),u}function wr(e,t,o,n,r){"input"===o&&"radio"===r.type&&null!=r.name&&dt(e,r);Bn(o,n);switch(function(e,t,o,n){for(var r=0;r<t.length;r+=2){var a=t[r],i=t[r+1];"style"===a?Sn(e,i):"dangerouslySetInnerHTML"===a?Ft(e,i):"children"===a?It(e,i):Qe(e,a,i,n)}}(e,t,0,Bn(o,r)),o){case"input":ht(e,r);break;case"textarea":St(e,r);break;case"select":!function(e,t){var o=e,n=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!t.multiple;var r=t.value;null!=r?xt(o,!!t.multiple,r,!1):n!==!!t.multiple&&(null!=t.defaultValue?xt(o,!!t.multiple,t.defaultValue,!0):xt(o,!!t.multiple,t.multiple?[]:"",!1))}(e,r)}}function kr(e,t){or(e.nodeValue,t)}function Cr(e,t){lr||(lr=!0,l("Did not expect server HTML to contain a <%s> in <%s>.",t.nodeName.toLowerCase(),e.nodeName.toLowerCase()))}function Ar(e,t){lr||(lr=!0,l('Did not expect server HTML to contain the text node "%s" in <%s>.',t.nodeValue,e.nodeName.toLowerCase()))}function xr(e,t,o){lr||(lr=!0,l("Expected server HTML to contain a matching <%s> in <%s>.",t,e.nodeName.toLowerCase()))}function Er(e,t){""!==t&&(lr||(lr=!0,l('Expected server HTML to contain a matching text node for "%s" in <%s>.',t,e.nodeName.toLowerCase())))}function _r(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Mr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Dr(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function Tr(e,t){for(var o=Mr(e),n=0,r=0;o;){if(3===o.nodeType){if(r=n+o.textContent.length,n<=t&&r>=t)return{node:o,offset:t-n};n=r}o=Mr(Dr(o))}}function Sr(e){var t=e.ownerDocument,o=t&&t.defaultView||window,n=o.getSelection&&o.getSelection();if(!n||0===n.rangeCount)return null;var r=n.anchorNode,a=n.anchorOffset,i=n.focusNode,s=n.focusOffset;try{r.nodeType,i.nodeType}catch(e){return null}return function(e,t,o,n,r){var a=0,i=-1,s=-1,c=0,l=0,u=e,m=null;e:for(;;){for(var d=null;u!==t||0!==o&&3!==u.nodeType||(i=a+o),u!==n||0!==r&&3!==u.nodeType||(s=a+r),3===u.nodeType&&(a+=u.nodeValue.length),null!==(d=u.firstChild);)m=u,u=d;for(;;){if(u===e)break e;if(m===t&&++c===o&&(i=a),m===n&&++l===r&&(s=a),null!==(d=u.nextSibling))break;m=(u=m).parentNode}u=d}if(-1===i||-1===s)return null;return{start:i,end:s}}(e,r,a,i,s)}function qr(e){return e&&3===e.nodeType}function Rr(e){return e&&e.ownerDocument&&function e(t,o){return!(!t||!o)&&(t===o||!qr(t)&&(qr(o)?e(t,o.parentNode):"contains"in t?t.contains(o):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(o))))}(e.ownerDocument.documentElement,e)}function zr(e){try{return"string"==typeof e.contentWindow.location.href}catch(e){return!1}}function Vr(){for(var e=window,t=_r();t instanceof e.HTMLIFrameElement;){if(!zr(t))return t;t=_r((e=t.contentWindow).document)}return t}function Br(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Gr(e){var t=Vr(),o=e.focusedElem,n=e.selectionRange;if(t!==o&&Rr(o)){null!==n&&Br(o)&&function(e,t){var o=t.start,n=t.end;void 0===n&&(n=o);"selectionStart"in e?(e.selectionStart=o,e.selectionEnd=Math.min(n,e.value.length)):function(e,t){var o=e.ownerDocument||document,n=o&&o.defaultView||window;if(n.getSelection){var r=n.getSelection(),a=e.textContent.length,i=Math.min(t.start,a),s=void 0===t.end?i:Math.min(t.end,a);if(!r.extend&&i>s){var c=s;s=i,i=c}var l=Tr(e,i),u=Tr(e,s);if(l&&u){if(1===r.rangeCount&&r.anchorNode===l.node&&r.anchorOffset===l.offset&&r.focusNode===u.node&&r.focusOffset===u.offset)return;var m=o.createRange();m.setStart(l.node,l.offset),r.removeAllRanges(),i>s?(r.addRange(m),r.extend(u.node,u.offset)):(m.setEnd(u.node,u.offset),r.addRange(m))}}}(e,t)}(o,n);for(var r=[],a=o;a=a.parentNode;)1===a.nodeType&&r.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"==typeof o.focus&&o.focus();for(var i=0;i<r.length;i++){var s=r[i];s.element.scrollLeft=s.left,s.element.scrollTop=s.top}}}sr=function(e){return("string"==typeof e?e:""+e).replace(dr,"\n").replace(hr,"")},or=function(e,t){if(!lr){var o=sr(t),n=sr(e);n!==o&&(lr=!0,l('Text content did not match. Server: "%s" Client: "%s"',n,o))}},nr=function(e,t,o){if(!lr){var n=sr(o),r=sr(t);r!==n&&(lr=!0,l("Prop `%s` did not match. Server: %s Client: %s",e,JSON.stringify(r),JSON.stringify(n)))}},rr=function(e){if(!lr){lr=!0;var t=[];e.forEach((function(e){t.push(e)})),l("Extra attributes from the server: %s",t)}},ar=function(e,t){!1===t?l("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",e,e,e):l("Expected `%s` listener to be a function, instead got a value of `%s` type.",e,typeof t)},cr=function(e,t){var o=e.namespaceURI===mr?e.ownerDocument.createElement(e.tagName):e.ownerDocument.createElementNS(e.namespaceURI,e.tagName);return o.innerHTML=t,o.innerHTML};var Pr,Nr,jr=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],Fr=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],Ir=Fr.concat(["button"]),Hr=["dd","dt","li","option","optgroup","p","rp","rt"],Or={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};Nr=function(e,t){var o=n({},e||Or),r={tag:t};return-1!==Fr.indexOf(t)&&(o.aTagInScope=null,o.buttonTagInScope=null,o.nobrTagInScope=null),-1!==Ir.indexOf(t)&&(o.pTagInButtonScope=null),-1!==jr.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(o.listItemTagAutoclosing=null,o.dlItemTagAutoclosing=null),o.current=r,"form"===t&&(o.formTag=r),"a"===t&&(o.aTagInScope=r),"button"===t&&(o.buttonTagInScope=r),"nobr"===t&&(o.nobrTagInScope=r),"p"===t&&(o.pTagInButtonScope=r),"li"===t&&(o.listItemTagAutoclosing=r),"dd"!==t&&"dt"!==t||(o.dlItemTagAutoclosing=r),o};var Lr={};Pr=function(e,t,o){var n=(o=o||Or).current,r=n&&n.tag;null!=t&&(null!=e&&l("validateDOMNesting: when childText is passed, childTag should be null"),e="#text");var a=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e||"frameset"===e;case"frameset":return"frame"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===Hr.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frameset":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0}(e,r)?null:n,i=a?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,o),s=a||i;if(s){var c=s.tag,u=!!a+"|"+e+"|"+c+"|"+X();if(!Lr[u]){Lr[u]=!0;var m=e,d="";if("#text"===e?/\S/.test(t)?m="Text nodes":(m="Whitespace text nodes",d=" Make sure you don't have any extra whitespace between tags on each line of your source code."):m="<"+e+">",a){var h="";"table"===c&&"tr"===e&&(h+=" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),l("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s",m,c,d,h)}else l("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.",m,c)}}};var Ur=null,Wr=null;function $r(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Qr(e){var t,o;Ur=nn,o=Vr(),Wr={activeElementDetached:null,focusedElem:o,selectionRange:Br(o)?(t=o,("selectionStart"in t?{start:t.selectionStart,end:t.selectionEnd}:Sr(t))||{start:0,end:0}):null},rn(!1)}function Kr(e,t,o,n,r){var a=n;if(Pr(e,null,a.ancestorInfo),"string"==typeof t.children||"number"==typeof t.children){var i=""+t.children,s=Nr(a.ancestorInfo,e);Pr(null,i,s)}var c=function(e,t,o,n){var r,a,i=fr(o),s=n;if(s===mr&&(s=Gt(e)),s===mr){if((r=Bn(e,t))||e===e.toLowerCase()||l("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",e),"script"===e){var c=i.createElement("div");c.innerHTML="<script><\/script>";var u=c.firstChild;a=c.removeChild(u)}else if("string"==typeof t.is)a=i.createElement(e,{is:t.is});else if(a=i.createElement(e),"select"===e){var m=a;t.multiple?m.multiple=!0:t.size&&(m.size=t.size)}}else a=i.createElementNS(s,e);return s===mr&&(r||"[object HTMLUnknownElement]"!==Object.prototype.toString.call(a)||Object.prototype.hasOwnProperty.call(Xn,e)||(Xn[e]=!0,l("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",e))),a}(e,t,o,a.namespace);return ga(r,c),Aa(c,t),c}function Yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function Jr(e,t){return!!t.hidden}function Zr(e,t,o,n){Pr(null,e,o.ancestorInfo);var r=function(e,t){return fr(t).createTextNode(e)}(e,t);return ga(n,r),r}var Xr="function"==typeof setTimeout?setTimeout:void 0,ea="function"==typeof clearTimeout?clearTimeout:void 0;function ta(e){It(e,"")}function oa(e,t){e.removeChild(t)}function na(e){var t=(e=e).style;"function"==typeof t.setProperty?t.setProperty("display","none","important"):t.display="none"}function ra(e,t){e=e;var o=t.style,n=null!=o&&o.hasOwnProperty("display")?o.display:null;e.style.display=gn("display",n)}function aa(e,t){e.nodeValue=t}function ia(e){return"$!"===e.data}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function ca(e){return sa(e.nextSibling)}function la(e){return sa(e.firstChild)}function ua(e,t,o,n,r,a){return ga(a,e),Aa(e,o),function(e,t,o,n,r){var a,i;switch(er=!0===o.suppressHydrationWarning,a=Bn(t,o),tr(t,o),a&&!ur&&e.shadyRoot&&(l("%s is using shady DOM. Using shady DOM with React can cause things to break subtly.",Z()||"A component"),ur=!0),t){case"iframe":case"object":case"embed":an("load",e);break;case"video":case"audio":for(var s=0;s<Jt.length;s++)an(Jt[s],e);break;case"source":an("error",e);break;case"img":case"image":case"link":an("error",e),an("load",e);break;case"form":an("reset",e),an("submit",e);break;case"details":an("toggle",e);break;case"input":mt(e,o),an("invalid",e),pr(r,"onChange");break;case"option":wt(0,o);break;case"select":_t(e,o),an("invalid",e),pr(r,"onChange");break;case"textarea":Tt(e,o),an("invalid",e),pr(r,"onChange")}Vn(t,o),i=new Set;for(var c=e.attributes,u=0;u<c.length;u++){switch(c[u].name.toLowerCase()){case"data-reactroot":case"value":case"checked":case"selected":break;default:i.add(c[u].name)}}var m,d=null;for(var h in o)if(o.hasOwnProperty(h)){var p=o[h];if("children"===h)"string"==typeof p?e.textContent!==p&&(er||or(e.textContent,p),d=["children",p]):"number"==typeof p&&e.textContent!==""+p&&(er||or(e.textContent,p),d=["children",""+p]);else if(ue.hasOwnProperty(h))null!=p&&("function"!=typeof p&&ar(h,p),pr(r,h));else if("boolean"==typeof a){var f=void 0,g=Ne(h);if(er);else if("suppressContentEditableWarning"===h||"suppressHydrationWarning"===h||"value"===h||"checked"===h||"selected"===h);else if("dangerouslySetInnerHTML"===h){var b=e.innerHTML,v=p?p.__html:void 0,y=cr(e,null!=v?v:"");y!==b&&nr(h,b,y)}else if("style"===h){if(i.delete(h),ir){var w=Tn(p);w!==(f=e.getAttribute("style"))&&nr(h,f,w)}}else if(a)i.delete(h.toLowerCase()),p!==(f=$e(e,h,p))&&nr(h,f,p);else if(!Be(h,g,a)&&!Pe(h,p,g,a)){var k=!1;if(null!==g)i.delete(g.attributeName),f=We(e,h,p,g);else{var C=n;if(C===mr&&(C=Gt(t)),C===mr)i.delete(h.toLowerCase());else{var A=(m=void 0,m=h.toLowerCase(),Gn.hasOwnProperty(m)&&Gn[m]||null);null!==A&&A!==h&&(k=!0,i.delete(A)),i.delete(h)}f=$e(e,h,p)}p===f||k||nr(h,f,p)}}}switch(i.size>0&&!er&&rr(i),t){case"input":nt(e),pt(e,o,!0);break;case"textarea":nt(e),qt(e);break;case"select":case"option":break;default:"function"==typeof o.onClick&&br(e)}return d}(e,t,o,r.namespace,n)}function ma(e){for(var t=e.previousSibling,o=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===o)return t;o--}else"/$"===n&&o++}t=t.previousSibling}return null}var da=Math.random().toString(36).slice(2),ha="__reactInternalInstance$"+da,pa="__reactEventHandlers$"+da,fa="__reactContainere$"+da;function ga(e,t){t[ha]=e}function ba(e){e[fa]=null}function va(e){return!!e[fa]}function ya(e){var t=e[ha];if(t)return t;for(var o=e.parentNode;o;){if(t=o[fa]||o[ha]){var n=t.alternate;if(null!==t.child||null!==n&&null!==n.child)for(var r=ma(e);null!==r;){var a=r[ha];if(a)return a;r=ma(r)}return t}o=(e=o).parentNode}return null}function wa(e){var t=e[ha]||e[fa];return t&&(5===t.tag||6===t.tag||13===t.tag||3===t.tag)?t:null}function ka(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error("getNodeFromInstance: Invalid argument.")}function Ca(e){return e[pa]||null}function Aa(e,t){e[pa]=t}function xa(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ea(e,t,o,n,r){for(var a=e&&t?function(e,t){for(var o=0,n=e;n;n=xa(n))o++;for(var r=0,a=t;a;a=xa(a))r++;for(;o-r>0;)e=xa(e),o--;for(;r-o>0;)t=xa(t),r--;for(var i=o;i--;){if(e===t||e===t.alternate)return e;e=xa(e),t=xa(t)}return null}(e,t):null,i=[];e&&e!==a;){var s=e.alternate;if(null!==s&&s===a)break;i.push(e),e=xa(e)}for(var c=[];t&&t!==a;){var l=t.alternate;if(null!==l&&l===a)break;c.push(t),t=xa(t)}for(var u=0;u<i.length;u++)o(i[u],"bubbled",n);for(var m=c.length;m-- >0;)o(c[m],"captured",r)}function _a(e,t){var o,n=e.stateNode;if(!n)return null;var r=A(n);if(!r)return null;if(o=r[t],function(e,t,o){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":return!(!o.disabled||(n=t,"button"!==n&&"input"!==n&&"select"!==n&&"textarea"!==n));default:return!1}var n}(t,e.type,r))return null;if(o&&"function"!=typeof o)throw Error("Expected `"+t+"` listener to be a function, instead got a value of `"+typeof o+"` type.");return o}function Ma(e,t,o){e||l("Dispatching inst must not be null");var n=function(e,t,o){return _a(e,t.dispatchConfig.phasedRegistrationNames[o])}(e,o,t);n&&(o._dispatchListeners=co(o._dispatchListeners,n),o._dispatchInstances=co(o._dispatchInstances,e))}function Da(e){e&&e.dispatchConfig.phasedRegistrationNames&&function(e,t,o){for(var n,r=[];e;)r.push(e),e=xa(e);for(n=r.length;n-- >0;)t(r[n],"captured",o);for(n=0;n<r.length;n++)t(r[n],"bubbled",o)}(e._targetInst,Ma,e)}function Ta(e,t,o){if(e&&o&&o.dispatchConfig.registrationName){var n=_a(e,o.dispatchConfig.registrationName);n&&(o._dispatchListeners=co(o._dispatchListeners,n),o._dispatchInstances=co(o._dispatchInstances,e))}}function Sa(e){e&&e.dispatchConfig.registrationName&&Ta(e._targetInst,0,e)}function qa(e){lo(e,Da)}var Ra=null,za=null,Va=null;function Ba(){if(Va)return Va;var e,t,o=za,n=o.length,r=Ga(),a=r.length;for(e=0;e<n&&o[e]===r[e];e++);var i=n-e;for(t=1;t<=i&&o[n-t]===r[a-t];t++);var s=t>1?1-t:void 0;return Va=r.slice(e,s)}function Ga(){return"value"in Ra?Ra.value:Ra.textContent}var Pa={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Na(){return!0}function ja(){return!1}function Fa(e,t,o,n){delete this.nativeEvent,delete this.preventDefault,delete this.stopPropagation,delete this.isDefaultPrevented,delete this.isPropagationStopped,this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=o;var r=this.constructor.Interface;for(var a in r)if(r.hasOwnProperty(a)){delete this[a];var i=r[a];i?this[a]=i(o):"target"===a?this.target=n:this[a]=o[a]}var s=null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue;return this.isDefaultPrevented=s?Na:ja,this.isPropagationStopped=ja,this}function Ia(e,t){var o="function"==typeof t;return{configurable:!0,set:function(e){return n(o?"setting the method":"setting the property","This is effectively a no-op"),e},get:function(){return n(o?"accessing the method":"accessing the property",o?"This is a no-op function":"This is set to null"),t}};function n(t,o){l("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.",t,e,o)}}function Ha(e,t,o,n){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,o,n),r}return new this(e,t,o,n)}function Oa(e){if(!(e instanceof this))throw Error("Trying to release an event instance into a pool of a different type.");e.destructor(),this.eventPool.length<10&&this.eventPool.push(e)}function La(e){e.eventPool=[],e.getPooled=Ha,e.release=Oa}n(Fa.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Na)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Na)},persist:function(){this.isPersistent=Na},isPersistent:ja,destructor:function(){var e=this.constructor.Interface;for(var t in e)Object.defineProperty(this,t,Ia(t,e[t]));this.dispatchConfig=null,this._targetInst=null,this.nativeEvent=null,this.isDefaultPrevented=ja,this.isPropagationStopped=ja,this._dispatchListeners=null,this._dispatchInstances=null,Object.defineProperty(this,"nativeEvent",Ia("nativeEvent",null)),Object.defineProperty(this,"isDefaultPrevented",Ia("isDefaultPrevented",ja)),Object.defineProperty(this,"isPropagationStopped",Ia("isPropagationStopped",ja)),Object.defineProperty(this,"preventDefault",Ia("preventDefault",(function(){}))),Object.defineProperty(this,"stopPropagation",Ia("stopPropagation",(function(){})))}}),Fa.Interface=Pa,Fa.extend=function(e){var t=this,o=function(){};o.prototype=t.prototype;var r=new o;function a(){return t.apply(this,arguments)}return n(r,a.prototype),a.prototype=r,a.prototype.constructor=a,a.Interface=n({},t.Interface,e),a.extend=t.extend,La(a),a},La(Fa);var Ua=Fa.extend({data:null}),Wa=Fa.extend({data:null}),$a=[9,13,27,32],Qa=pe&&"CompositionEvent"in window,Ka=null;pe&&"documentMode"in document&&(Ka=document.documentMode);var Ya=pe&&"TextEvent"in window&&!Ka,Ja=pe&&(!Qa||Ka&&Ka>8&&Ka<=11),Za=String.fromCharCode(32),Xa={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["blur","compositionend","keydown","keypress","keyup","mousedown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["blur","compositionstart","keydown","keypress","keyup","mousedown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["blur","compositionupdate","keydown","keypress","keyup","mousedown"]}},ei=!1;function ti(e,t){switch(e){case"keyup":return-1!==$a.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function oi(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function ni(e){return"ko"===e.locale}var ri=!1;function ai(e,t,o,n){var r,a;if(Qa?r=function(e){switch(e){case"compositionstart":return Xa.compositionStart;case"compositionend":return Xa.compositionEnd;case"compositionupdate":return Xa.compositionUpdate}}(e):ri?ti(e,o)&&(r=Xa.compositionEnd):function(e,t){return"keydown"===e&&229===t.keyCode}(e,o)&&(r=Xa.compositionStart),!r)return null;Ja&&!ni(o)&&(ri||r!==Xa.compositionStart?r===Xa.compositionEnd&&ri&&(a=Ba()):ri=function(e){return Ra=e,za=Ga(),!0}(n));var i=Ua.getPooled(r,t,o,n);if(a)i.data=a;else{var s=oi(o);null!==s&&(i.data=s)}return qa(i),i}function ii(e,t){if(ri){if("compositionend"===e||!Qa&&ti(e,t)){var o=Ba();return Ra=null,za=null,Va=null,ri=!1,o}return null}switch(e){case"paste":return null;case"keypress":if(!function(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}(t)){if(t.char&&t.char.length>1)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ja&&!ni(t)?null:t.data;default:return null}}function si(e,t,o,n){var r;if(!(r=Ya?function(e,t){switch(e){case"compositionend":return oi(t);case"keypress":return 32!==t.which?null:(ei=!0,Za);case"textInput":var o=t.data;return o===Za&&ei?null:o;default:return null}}(e,o):ii(e,o)))return null;var a=Wa.getPooled(Xa.beforeInput,t,o,n);return a.data=r,qa(a),a}var ci={eventTypes:Xa,extractEvents:function(e,t,o,n,r){var a=ai(e,t,o,n),i=si(e,t,o,n);return null===a?i:null===i?a:[a,i]}},li={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ui(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!li[e.type]:"textarea"===t}var mi={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["blur","change","click","focus","input","keydown","keyup","selectionchange"]}};function di(e,t,o){var n=Fa.getPooled(mi.change,e,t,o);return n.type="change",ye(o),qa(n),n}var hi=null,pi=null;function fi(e){!function(e,t){if(Ee)return e(t);Ee=!0;try{ke(e,t)}finally{Ee=!1,Me()}}(gi,di(pi,e,fo(e)))}function gi(e){po(e)}function bi(e){if(rt(ka(e)))return e}function vi(e,t){if("change"===e)return t}var yi=!1;function wi(){hi&&(hi.detachEvent("onpropertychange",ki),hi=null,pi=null)}function ki(e){"value"===e.propertyName&&bi(pi)&&fi(e)}function Ci(e,t,o){"focus"===e?(wi(),function(e,t){pi=t,(hi=e).attachEvent("onpropertychange",ki)}(t,o)):"blur"===e&&wi()}function Ai(e,t){if("selectionchange"===e||"keyup"===e||"keydown"===e)return bi(pi)}function xi(e,t){if("click"===e)return bi(t)}function Ei(e,t){if("input"===e||"change"===e)return bi(t)}pe&&(yi=go("input")&&(!document.documentMode||document.documentMode>9));var _i={eventTypes:mi,_isInputEventSupported:yi,extractEvents:function(e,t,o,n,r){var a,i,s,c,l,u,m=t?ka(t):window;if("select"===(c=(s=m).nodeName&&s.nodeName.toLowerCase())||"input"===c&&"file"===s.type?a=vi:ui(m)?yi?a=Ei:(a=Ai,i=Ci):function(e){var t=e.nodeName;return t&&"input"===t.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}(m)&&(a=xi),a){var d=a(e,t);if(d)return di(d,o,n)}i&&i(e,m,t),"blur"===e&&(u=(l=m)._wrapperState)&&u.controlled&&"number"===l.type&&gt(l,"number",l.value)}},Mi=Fa.extend({view:null,detail:null}),Di={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ti(e){var t=this.nativeEvent;if(t.getModifierState)return t.getModifierState(e);var o=Di[e];return!!o&&!!t[o]}function Si(e){return Ti}var qi=0,Ri=0,zi=!1,Vi=!1,Bi=Mi.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Si,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qi;return qi=e.screenX,zi?"mousemove"===e.type?e.screenX-t:0:(zi=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ri;return Ri=e.screenY,Vi?"mousemove"===e.type?e.screenY-t:0:(Vi=!0,0)}}),Gi=Bi.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Pi={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ni={eventTypes:Pi,extractEvents:function(e,t,o,n,r){var a,i,s,c,l,u,m,d="mouseover"===e||"pointerover"===e,h="mouseout"===e||"pointerout"===e;if(d&&0==(32&r)&&(o.relatedTarget||o.fromElement))return null;if(!h&&!d)return null;if(n.window===n)a=n;else{var p=n.ownerDocument;a=p?p.defaultView||p.parentWindow:window}if(h){i=t;var f=o.relatedTarget||o.toElement;if(null!==(s=f?ya(f):null))(s!==oo(s)||5!==s.tag&&6!==s.tag)&&(s=null)}else i=null,s=t;if(i===s)return null;"mouseout"===e||"mouseover"===e?(c=Bi,l=Pi.mouseLeave,u=Pi.mouseEnter,m="mouse"):"pointerout"!==e&&"pointerover"!==e||(c=Gi,l=Pi.pointerLeave,u=Pi.pointerEnter,m="pointer");var g=null==i?a:ka(i),b=null==s?a:ka(s),v=c.getPooled(l,i,o,n);v.type=m+"leave",v.target=g,v.relatedTarget=b;var y=c.getPooled(u,s,o,n);return y.type=m+"enter",y.target=b,y.relatedTarget=g,function(e,t,o,n){Ea(o,n,Ta,e,t)}(v,y,i,s),0==(64&r)?[v]:[v,y]}};var ji="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fi=Object.prototype.hasOwnProperty;function Ii(e,t){if(ji(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var o=Object.keys(e),n=Object.keys(t);if(o.length!==n.length)return!1;for(var r=0;r<o.length;r++)if(!Fi.call(t,o[r])||!ji(e[o[r]],t[o[r]]))return!1;return!0}var Hi=pe&&"documentMode"in document&&document.documentMode<=11,Oi={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["blur","contextmenu","dragend","focus","keydown","keyup","mousedown","mouseup","selectionchange"]}},Li=null,Ui=null,Wi=null,$i=!1;function Qi(e){return e.window===e?e.document:9===e.nodeType?e:e.ownerDocument}function Ki(e,t){var o=Qi(t);if($i||null==Li||Li!==_r(o))return null;var n=function(e){if("selectionStart"in e&&Br(e))return{start:e.selectionStart,end:e.selectionEnd};var t=(e.ownerDocument&&e.ownerDocument.defaultView||window).getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}(Li);if(!Wi||!Ii(Wi,n)){Wi=n;var r=Fa.getPooled(Oi.select,Ui,e,t);return r.type="select",r.target=Li,qa(r),r}return null}var Yi={eventTypes:Oi,extractEvents:function(e,t,o,n,r,a){var i=a||Qi(n);if(!i||!function(e,t){for(var o=Xt(t),n=me[e],r=0;r<n.length;r++){var a=n[r];if(!o.has(a))return!1}return!0}("onSelect",i))return null;var s=t?ka(t):window;switch(e){case"focus":(ui(s)||"true"===s.contentEditable)&&(Li=s,Ui=t,Wi=null);break;case"blur":Li=null,Ui=null,Wi=null;break;case"mousedown":$i=!0;break;case"contextmenu":case"mouseup":case"dragend":return $i=!1,Ki(o,n);case"selectionchange":if(Hi)break;case"keydown":case"keyup":return Ki(o,n)}return null}},Ji=Fa.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Zi=Fa.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xi=Mi.extend({relatedTarget:null});function es(e){var t,o=e.keyCode;return"charCode"in e?0===(t=e.charCode)&&13===o&&(t=13):t=o,10===t&&(t=13),t>=32||13===t?t:0}var ts={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},os={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};var ns=Mi.extend({key:function(e){if(e.key){var t=ts[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var o=es(e);return 13===o?"Enter":String.fromCharCode(o)}return"keydown"===e.type||"keyup"===e.type?os[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Si,charCode:function(e){return"keypress"===e.type?es(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?es(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),rs=Bi.extend({dataTransfer:null}),as=Mi.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Si}),is=Fa.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ss=Bi.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),cs=["abort","cancel","canplay","canplaythrough","close","durationchange","emptied","encrypted","ended","error","input","invalid","load","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","reset","seeked","seeking","stalled","submit","suspend","timeupdate","toggle","volumechange","waiting"],ls={eventTypes:Qo,extractEvents:function(e,t,o,n,r){var a,i=Ko.get(e);if(!i)return null;switch(e){case"keypress":if(0===es(o))return null;case"keydown":case"keyup":a=ns;break;case"blur":case"focus":a=Xi;break;case"click":if(2===o.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":a=Bi;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":a=rs;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":a=as;break;case $t:case Qt:case Kt:a=Ji;break;case Yt:a=is;break;case"scroll":a=Mi;break;case"wheel":a=ss;break;case"copy":case"cut":case"paste":a=Zi;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":a=Gi;break;default:-1===cs.indexOf(e)&&l("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.",e),a=Fa}var s=a.getPooled(i,t,o,n);return qa(s),s}};!function(e){if(ne)throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");ne=Array.prototype.slice.call(e),ae()}(["ResponderEventPlugin","SimpleEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"]),A=Ca,x=wa,(E=ka)&&x||l("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode."),he({SimpleEventPlugin:ls,EnterLeaveEventPlugin:Ni,ChangeEventPlugin:_i,SelectEventPlugin:Yi,BeforeInputEventPlugin:ci});var us="undefined"!=typeof performance&&"function"==typeof performance.mark&&"function"==typeof performance.clearMarks&&"function"==typeof performance.measure&&"function"==typeof performance.clearMeasures,ms=null,ds=null,hs=null,ps=!1,fs=!1,gs=!1,bs=0,vs=0,ys=new Set,ws=function(e){return"⚛ "+e},ks=function(e){performance.mark(ws(e))},Cs=function(e,t,o){var n=ws(t),r=function(e,t){return""+(t?"⛔ ":"⚛ ")+e+(t?" Warning: "+t:"")}(e,o);try{performance.measure(r,n)}catch(e){}performance.clearMarks(n),performance.clearMeasures(r)},As=function(e,t){return e+" (#"+t+")"},xs=function(e,t,o){return null===o?e+" ["+(t?"update":"mount")+"]":e+"."+o},Es=function(e,t){var o=W(e.type)||"Unknown",n=e._debugID,r=null!==e.alternate,a=xs(o,r,t);if(ps&&ys.has(a))return!1;ys.add(a);var i=As(a,n);return ks(i),!0},_s=function(e,t){var o=W(e.type)||"Unknown",n=e._debugID,r=null!==e.alternate,a=xs(o,r,t);!function(e){performance.clearMarks(ws(e))}(As(a,n))},Ms=function(e,t,o){var n=W(e.type)||"Unknown",r=e._debugID,a=null!==e.alternate,i=xs(n,a,t),s=As(i,r);Cs(i,s,o)},Ds=function(e){switch(e.tag){case 3:case 5:case 6:case 4:case 7:case 10:case 9:case 8:return!0;default:return!1}},Ts=function(e){null!==e.return&&Ts(e.return),e._debugIsCurrentlyTiming&&Es(e,null)};function Ss(){vs++}function qs(e){us&&!Ds(e)&&(ms=e,Es(e,null)&&(e._debugIsCurrentlyTiming=!0))}function Rs(e){us&&!Ds(e)&&(e._debugIsCurrentlyTiming=!1,_s(e,null))}function zs(e){us&&!Ds(e)&&(ms=e.return,e._debugIsCurrentlyTiming&&(e._debugIsCurrentlyTiming=!1,Ms(e,null,null)))}function Vs(e){if(us&&!Ds(e)&&(ms=e.return,e._debugIsCurrentlyTiming)){e._debugIsCurrentlyTiming=!1;var t=13===e.tag?"Rendering was suspended":"An error was thrown inside this error boundary";Ms(e,null,t)}}function Bs(e,t){us&&(null!==ds&&null!==hs&&_s(hs,ds),hs=null,ds=null,gs=!1,Es(e,t)&&(hs=e,ds=t))}function Gs(){us&&(null!==ds&&null!==hs&&Ms(hs,ds,gs?"Scheduled a cascading update":null),ds=null,hs=null)}function Ps(e){ms=e,us&&(bs=0,ks("(React Tree Reconciliation)"),null!==ms&&Ts(ms))}function Ns(e,t){if(us){var o=null;null!==e?o=3===e.tag?"A top-level update interrupted the previous render":"An update to "+(W(e.type)||"Unknown")+" interrupted the previous render":bs>1&&(o="There were cascading updates"),bs=0;var n=t?"(React Tree Reconciliation: Completed Root)":"(React Tree Reconciliation: Yielded)";!function(){for(var e=ms;e;)e._debugIsCurrentlyTiming&&Ms(e,null,null),e=e.return}(),Cs(n,"(React Tree Reconciliation)",o)}}function js(){us&&(vs=0,ks("(Committing Snapshot Effects)"))}function Fs(){if(us){var e=vs;vs=0,Cs("(Committing Snapshot Effects: "+e+" Total)","(Committing Snapshot Effects)",null)}}function Is(){us&&(vs=0,ks("(Committing Host Effects)"))}function Hs(){if(us){var e=vs;vs=0,Cs("(Committing Host Effects: "+e+" Total)","(Committing Host Effects)",null)}}function Os(){us&&(vs=0,ks("(Calling Lifecycle Methods)"))}function Ls(){if(us){var e=vs;vs=0,Cs("(Calling Lifecycle Methods: "+e+" Total)","(Calling Lifecycle Methods)",null)}}var Us,Ws=[];Us=[];var $s,Qs=-1;function Ks(e){return{current:e}}function Ys(e,t){Qs<0?l("Unexpected pop."):(t!==Us[Qs]&&l("Unexpected Fiber popped."),e.current=Ws[Qs],Ws[Qs]=null,Us[Qs]=null,Qs--)}function Js(e,t,o){Qs++,Ws[Qs]=e.current,Us[Qs]=o,e.current=t}$s={};var Zs={};Object.freeze(Zs);var Xs=Ks(Zs),ec=Ks(!1),tc=Zs;function oc(e,t,o){return o&&ic(t)?tc:Xs.current}function nc(e,t,o){var n=e.stateNode;n.__reactInternalMemoizedUnmaskedChildContext=t,n.__reactInternalMemoizedMaskedChildContext=o}function rc(e,t){var o=e.type,n=o.contextTypes;if(!n)return Zs;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={};for(var s in n)i[s]=t[s];var c=W(o)||"Unknown";return a(n,i,"context",c,X),r&&nc(e,t,i),i}function ac(){return ec.current}function ic(e){var t=e.childContextTypes;return null!=t}function sc(e){Ys(ec,e),Ys(Xs,e)}function cc(e){Ys(ec,e),Ys(Xs,e)}function lc(e,t,o){if(Xs.current!==Zs)throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");Js(Xs,t,e),Js(ec,o,e)}function uc(e,t,o){var r,i=e.stateNode,s=t.childContextTypes;if("function"!=typeof i.getChildContext){var c=W(t)||"Unknown";return $s[c]||($s[c]=!0,l("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",c,c)),o}for(var u in oe("getChildContext"),Bs(e,"getChildContext"),r=i.getChildContext(),Gs(),oe(null),r)if(!(u in s))throw Error((W(t)||"Unknown")+'.getChildContext(): key "'+u+'" is not defined in childContextTypes.');var m=W(t)||"Unknown";return a(s,r,"child context",m,X),n({},o,{},r)}function mc(e){var t=e.stateNode,o=t&&t.__reactInternalMemoizedMergedChildContext||Zs;return tc=Xs.current,Js(Xs,o,e),Js(ec,ec.current,e),!0}function dc(e,t,o){var n=e.stateNode;if(!n)throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");if(o){var r=uc(e,t,tc);n.__reactInternalMemoizedMergedChildContext=r,Ys(ec,e),Ys(Xs,e),Js(Xs,r,e),Js(ec,o,e)}else Ys(ec,e),Js(ec,o,e)}function hc(e){if(!function(e){return oo(e)===e}(e)||1!==e.tag)throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");var t=e;do{switch(t.tag){case 3:return t.stateNode.context;case 1:if(ic(t.type))return t.stateNode.__reactInternalMemoizedMergedChildContext}t=t.return}while(null!==t);throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.")}var pc=r.unstable_runWithPriority,fc=r.unstable_scheduleCallback,gc=r.unstable_cancelCallback,bc=r.unstable_shouldYield,vc=r.unstable_requestPaint,yc=r.unstable_now,wc=r.unstable_getCurrentPriorityLevel,kc=r.unstable_ImmediatePriority,Cc=r.unstable_UserBlockingPriority,Ac=r.unstable_NormalPriority,xc=r.unstable_LowPriority,Ec=r.unstable_IdlePriority;if(null==i.__interactionsRef||null==i.__interactionsRef.current)throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");var _c={},Mc=bc,Dc=void 0!==vc?vc:function(){},Tc=null,Sc=null,qc=!1,Rc=yc(),zc=Rc<1e4?yc:function(){return yc()-Rc};function Vc(){switch(wc()){case kc:return 99;case Cc:return 98;case Ac:return 97;case xc:return 96;case Ec:return 95;default:throw Error("Unknown priority level.")}}function Bc(e){switch(e){case 99:return kc;case 98:return Cc;case 97:return Ac;case 96:return xc;case 95:return Ec;default:throw Error("Unknown priority level.")}}function Gc(e,t){var o=Bc(e);return pc(o,t)}function Pc(e,t,o){var n=Bc(e);return fc(n,t,o)}function Nc(e){return null===Tc?(Tc=[e],Sc=fc(kc,Fc)):Tc.push(e),_c}function jc(){if(null!==Sc){var e=Sc;Sc=null,gc(e)}Fc()}function Fc(){if(!qc&&null!==Tc){qc=!0;var e=0;try{var t=Tc;Gc(99,(function(){for(;e<t.length;e++){var o=t[e];do{o=o(!0)}while(null!==o)}})),Tc=null}catch(t){throw null!==Tc&&(Tc=Tc.slice(e+1)),fc(kc,jc),t}finally{qc=!1}}}var Ic=1073741823;function Hc(e){return 1073741821-(e/10|0)}function Oc(e){return 10*(1073741821-e)}function Lc(e,t,o){return 1073741821-(1+((1073741821-e+t/10)/(n=o/10)|0))*n;var n}function Uc(e){return Lc(e,500,100)}function Wc(e,t){if(t===Ic)return 99;if(1===t||2===t)return 95;var o=Oc(t)-Oc(e);return o<=0?99:o<=600?98:o<=5250?97:95}var $c={recordUnsafeLifecycleWarnings:function(e,t){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(e,t){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},Qc=function(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")},Kc=[],Yc=[],Jc=[],Zc=[],Xc=[],el=[],tl=new Set;$c.recordUnsafeLifecycleWarnings=function(e,t){tl.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&Kc.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillMount&&Yc.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&Jc.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&Zc.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&Xc.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillUpdate&&el.push(e))},$c.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;Kc.length>0&&(Kc.forEach((function(t){e.add(W(t.type)||"Component"),tl.add(t.type)})),Kc=[]);var t=new Set;Yc.length>0&&(Yc.forEach((function(e){t.add(W(e.type)||"Component"),tl.add(e.type)})),Yc=[]);var o=new Set;Jc.length>0&&(Jc.forEach((function(e){o.add(W(e.type)||"Component"),tl.add(e.type)})),Jc=[]);var n=new Set;Zc.length>0&&(Zc.forEach((function(e){n.add(W(e.type)||"Component"),tl.add(e.type)})),Zc=[]);var r=new Set;Xc.length>0&&(Xc.forEach((function(e){r.add(W(e.type)||"Component"),tl.add(e.type)})),Xc=[]);var a=new Set;(el.length>0&&(el.forEach((function(e){a.add(W(e.type)||"Component"),tl.add(e.type)})),el=[]),t.size>0)&&l("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",Qc(t));n.size>0&&l("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s",Qc(n));a.size>0&&l("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",Qc(a));e.size>0&&c("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",Qc(e));o.size>0&&c("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",Qc(o));r.size>0&&c("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",Qc(r))};var ol=new Map,nl=new Set;$c.recordLegacyContextWarning=function(e,t){var o=function(e){for(var t=null,o=e;null!==o;)1&o.mode&&(t=o),o=o.return;return t}(e);if(null!==o){if(!nl.has(e.type)){var n=ol.get(o);(null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===n&&(n=[],ol.set(o,n)),n.push(e))}}else l("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.")},$c.flushLegacyContextWarning=function(){ol.forEach((function(e,t){if(0!==e.length){var o=e[0],n=new Set;e.forEach((function(e){n.add(W(e.type)||"Component"),nl.add(e.type)})),l("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s",Qc(n),K(o))}}))},$c.discardPendingWarnings=function(){Kc=[],Yc=[],Jc=[],Zc=[],Xc=[],el=[],ol=new Map};var rl=null,al=null,il=function(e){rl=e};function sl(e){if(null===rl)return e;var t=rl(e);return void 0===t?e:t.current}function cl(e){return sl(e)}function ll(e){if(null===rl)return e;var t=rl(e);if(void 0===t){if(null!=e&&"function"==typeof e.render){var o=sl(e.render);if(e.render!==o){var n={$$typeof:P,render:o};return void 0!==e.displayName&&(n.displayName=e.displayName),n}}return e}return t.current}function ul(e,t){if(null===rl)return!1;var o=e.elementType,n=t.type,r=!1,a="object"==typeof n&&null!==n?n.$$typeof:null;switch(e.tag){case 1:"function"==typeof n&&(r=!0);break;case 0:("function"==typeof n||a===I)&&(r=!0);break;case 11:(a===P||a===I)&&(r=!0);break;case 14:case 15:(a===F||a===I)&&(r=!0);break;default:return!1}if(r){var i=rl(o);if(void 0!==i&&i===rl(n))return!0}return!1}function ml(e){null!==rl&&"function"==typeof WeakSet&&(null===al&&(al=new WeakSet),al.add(e))}var dl=function(e,t){if(null!==rl){var o=t.staleFamilies,n=t.updatedFamilies;Kp(),Tp((function(){!function e(t,o,n){var r=t.alternate,a=t.child,i=t.sibling,s=t.tag,c=t.type,l=null;switch(s){case 0:case 15:case 1:l=c;break;case 11:l=c.render}if(null===rl)throw new Error("Expected resolveFamily to be set during hot reload.");var u=!1,m=!1;if(null!==l){var d=rl(l);void 0!==d&&(n.has(d)?m=!0:o.has(d)&&(1===s?m=!0:u=!0))}null!==al&&(al.has(t)||null!==r&&al.has(r))&&(m=!0);m&&(t._debugNeedsRemount=!0);(m||u)&&kp(t,Ic);null===a||m||e(a,o,n);null!==i&&e(i,o,n)}(e.current,n,o)}))}},hl=function(e,t){e.context===Zs&&(Kp(),function(e,t,o,n){Gc(99,e.bind(null,t,o,n))}((function(){Jf(t,e,null,null)})))};var pl=function(e,t){var o=new Set,n=new Set(t.map((function(e){return e.current})));return function e(t,o,n){var r=t.child,a=t.sibling,i=t.tag,s=t.type,c=null;switch(i){case 0:case 15:case 1:c=s;break;case 11:c=s.render}var l=!1;null!==c&&o.has(c)&&(l=!0);l?function(e,t){if(function(e,t){var o=e,n=!1;for(;;){if(5===o.tag)n=!0,t.add(o.stateNode);else if(null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)return n;for(;null===o.sibling;){if(null===o.return||o.return===e)return n;o=o.return}o.sibling.return=o.return,o=o.sibling}return!1}(e,t))return;var o=e;for(;;){switch(o.tag){case 5:return void t.add(o.stateNode);case 4:case 3:return void t.add(o.stateNode.containerInfo)}if(null===o.return)throw new Error("Expected to reach root first.");o=o.return}}(t,n):null!==r&&e(r,o,n);null!==a&&e(a,o,n)}(e.current,n,o),o};function fl(e,t){if(e&&e.defaultProps){var o=n({},t),r=e.defaultProps;for(var a in r)void 0===o[a]&&(o[a]=r[a]);return o}return t}function gl(e){if(function(e){if(-1===e._status){e._status=0;var t=(0,e._ctor)();e._result=t,t.then((function(t){if(0===e._status){var o=t.default;void 0===o&&l("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",t),e._status=1,e._result=o}}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(e),1!==e._status)throw e._result;return e._result}var bl,vl=Ks(null);bl={};var yl=null,wl=null,kl=null,Cl=!1;function Al(){yl=null,wl=null,kl=null,Cl=!1}function xl(){Cl=!0}function El(){Cl=!1}function _l(e,t){var o=e.type._context;Js(vl,o._currentValue,e),o._currentValue=t,void 0!==o._currentRenderer&&null!==o._currentRenderer&&o._currentRenderer!==bl&&l("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),o._currentRenderer=bl}function Ml(e){var t=vl.current;Ys(vl,e),e.type._context._currentValue=t}function Dl(e,t){for(var o=e;null!==o;){var n=o.alternate;if(o.childExpirationTime<t)o.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}o=o.return}}function Tl(e,t){yl=e,wl=null,kl=null;var o=e.dependencies;null!==o&&(null!==o.firstContext&&(o.expirationTime>=t&&ah(),o.firstContext=null))}function Sl(e,t){if(Cl&&l("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."),kl===e);else if(!1===t||0===t);else{var o;"number"!=typeof t||1073741823===t?(kl=e,o=1073741823):o=t;var n={context:e,observedBits:o,next:null};if(null===wl){if(null===yl)throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");wl=n,yl.dependencies={expirationTime:0,firstContext:n,responders:null}}else wl=wl.next=n}return e._currentValue}var ql,Rl,zl=2,Vl=!1;function Bl(e){var t={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null};e.updateQueue=t}function Gl(e,t){var o=t.updateQueue,n=e.updateQueue;if(o===n){var r={baseState:n.baseState,baseQueue:n.baseQueue,shared:n.shared,effects:n.effects};t.updateQueue=r}}function Pl(e,t){var o={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null};return o.next=o,o.priority=Vc(),o}function Nl(e,t){var o=e.updateQueue;if(null!==o){var n=o.shared,r=n.pending;null===r?t.next=t:(t.next=r.next,r.next=t),n.pending=t,Rl!==n||ql||(l("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."),ql=!0)}}function jl(e,t){var o=e.alternate;null!==o&&Gl(o,e);var n=e.updateQueue,r=n.baseQueue;null===r?(n.baseQueue=t.next=t,t.next=t):(t.next=r.next,r.next=t)}function Fl(e,t,o,r,a,i){switch(o.tag){case 1:var s=o.payload;if("function"==typeof s){xl(),1&e.mode&&s.call(i,r,a);var c=s.call(i,r,a);return El(),c}return s;case 3:e.effectTag=-4097&e.effectTag|64;case 0:var l,u=o.payload;return"function"==typeof u?(xl(),1&e.mode&&u.call(i,r,a),l=u.call(i,r,a),El()):l=u,null==l?r:n({},r,l);case zl:return Vl=!0,r}return r}function Il(e,t,o,n){var r=e.updateQueue;Vl=!1,Rl=r.shared;var a=r.baseQueue,i=r.shared.pending;if(null!==i){if(null!==a){var s=a.next,c=i.next;a.next=c,i.next=s}a=i,r.shared.pending=null;var l=e.alternate;if(null!==l){var u=l.updateQueue;null!==u&&(u.baseQueue=i)}}if(null!==a){var m=a.next,d=r.baseState,h=0,p=null,f=null,g=null;if(null!==m)for(var b=m;;){var v=b.expirationTime;if(v<n){var y={expirationTime:b.expirationTime,suspenseConfig:b.suspenseConfig,tag:b.tag,payload:b.payload,callback:b.callback,next:null};null===g?(f=g=y,p=d):g=g.next=y,v>h&&(h=v)}else{if(null!==g){var w={expirationTime:Ic,suspenseConfig:b.suspenseConfig,tag:b.tag,payload:b.payload,callback:b.callback,next:null};g=g.next=w}if(Gp(v,b.suspenseConfig),d=Fl(e,0,b,d,t,o),null!==b.callback){e.effectTag|=32;var k=r.effects;null===k?r.effects=[b]:k.push(b)}}if(null===(b=b.next)||b===m){if(null===(i=r.shared.pending))break;b=a.next=i.next,i.next=m,r.baseQueue=a=i,r.shared.pending=null}}null===g?p=d:g.next=f,r.baseState=p,r.baseQueue=g,Pp(h),e.expirationTime=h,e.memoizedState=d}Rl=null}function Hl(e,t){if("function"!=typeof e)throw Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function Ol(){Vl=!1}function Ll(){return Vl}function Ul(e,t,o){var n=t.effects;if(t.effects=null,null!==n)for(var r=0;r<n.length;r++){var a=n[r],i=a.callback;null!==i&&(a.callback=null,Hl(i,o))}}ql=!1,Rl=null;var Wl=s.ReactCurrentBatchConfig;function $l(){return Wl.suspense}var Ql,Kl,Yl,Jl,Zl,Xl,eu,tu,ou,nu,ru={},au=Array.isArray,iu=(new t.Component).refs;Ql=new Set,Kl=new Set,Yl=new Set,Jl=new Set,tu=new Set,Zl=new Set,ou=new Set,nu=new Set;var su=new Set;function cu(e,t,o,r){var a=e.memoizedState;1&e.mode&&o(r,a);var i=o(r,a);Xl(t,i);var s=null==i?a:n({},a,i);(e.memoizedState=s,0===e.expirationTime)&&(e.updateQueue.baseState=s)}eu=function(e,t){if(null!==e&&"function"!=typeof e){var o=t+"_"+e;su.has(o)||(su.add(o),l("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e))}},Xl=function(e,t){if(void 0===t){var o=W(e)||"Component";Zl.has(o)||(Zl.add(o),l("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",o))}},Object.defineProperty(ru,"_processChildContext",{enumerable:!1,value:function(){throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).")}}),Object.freeze(ru);var lu,uu,mu,du,hu,pu={isMounted:function(e){var t=to.current;if(null!==t&&1===t.tag){var o=t,n=o.stateNode;n._warnedAboutRefsInRender||l("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",W(o.type)||"A component"),n._warnedAboutRefsInRender=!0}var r=eo(e);return!!r&&oo(r)===r},enqueueSetState:function(e,t,o){var n=eo(e),r=yp(),a=$l(),i=wp(r,n,a),s=Pl(i,a);s.payload=t,null!=o&&(eu(o,"setState"),s.callback=o),Nl(n,s),kp(n,i)},enqueueReplaceState:function(e,t,o){var n=eo(e),r=yp(),a=$l(),i=wp(r,n,a),s=Pl(i,a);s.tag=1,s.payload=t,null!=o&&(eu(o,"replaceState"),s.callback=o),Nl(n,s),kp(n,i)},enqueueForceUpdate:function(e,t){var o=eo(e),n=yp(),r=$l(),a=wp(n,o,r),i=Pl(a,r);i.tag=zl,null!=t&&(eu(t,"forceUpdate"),i.callback=t),Nl(o,i),kp(o,a)}};function fu(e,t,o,n,r,a,i){var s=e.stateNode;if("function"==typeof s.shouldComponentUpdate){1&e.mode&&s.shouldComponentUpdate(n,a,i),Bs(e,"shouldComponentUpdate");var c=s.shouldComponentUpdate(n,a,i);return Gs(),void 0===c&&l("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",W(t)||"Component"),c}return!t.prototype||!t.prototype.isPureReactComponent||(!Ii(o,n)||!Ii(r,a))}function gu(e,t){var o;t.updater=pu,e.stateNode=t,o=e,t._reactInternalFiber=o,t._reactInternalInstance=ru}function bu(e,t,o){var n=!1,r=Zs,a=Zs,i=t.contextType;if("contextType"in t&&(!(null===i||void 0!==i&&i.$$typeof===B&&void 0===i._context)&&!nu.has(t))){nu.add(t);var s="";s=void 0===i?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof i?" However, it is set to a "+typeof i+".":i.$$typeof===V?" Did you accidentally pass the Context.Provider instead?":void 0!==i._context?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(i).join(", ")+"}.",l("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",W(t)||"Component",s)}if("object"==typeof i&&null!==i)a=Sl(i);else{r=oc(0,t,!0);var c=t.contextTypes;a=(n=null!=c)?rc(e,r):Zs}1&e.mode&&new t(o,a);var u=new t(o,a),m=e.memoizedState=null!==u.state&&void 0!==u.state?u.state:null;if(gu(e,u),"function"==typeof t.getDerivedStateFromProps&&null===m){var d=W(t)||"Component";Kl.has(d)||(Kl.add(d),l("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",d,null===u.state?"null":"undefined",d))}if("function"==typeof t.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate){var h=null,p=null,f=null;if("function"==typeof u.componentWillMount&&!0!==u.componentWillMount.__suppressDeprecationWarning?h="componentWillMount":"function"==typeof u.UNSAFE_componentWillMount&&(h="UNSAFE_componentWillMount"),"function"==typeof u.componentWillReceiveProps&&!0!==u.componentWillReceiveProps.__suppressDeprecationWarning?p="componentWillReceiveProps":"function"==typeof u.UNSAFE_componentWillReceiveProps&&(p="UNSAFE_componentWillReceiveProps"),"function"==typeof u.componentWillUpdate&&!0!==u.componentWillUpdate.__suppressDeprecationWarning?f="componentWillUpdate":"function"==typeof u.UNSAFE_componentWillUpdate&&(f="UNSAFE_componentWillUpdate"),null!==h||null!==p||null!==f){var g=W(t)||"Component",b="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";Jl.has(g)||(Jl.add(g),l("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles",g,b,null!==h?"\n  "+h:"",null!==p?"\n  "+p:"",null!==f?"\n  "+f:""))}}return n&&nc(e,r,a),u}function vu(e,t,o,n){var r=t.state;if(Bs(e,"componentWillReceiveProps"),"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(o,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(o,n),Gs(),t.state!==r){var a=W(e.type)||"Component";Ql.has(a)||(Ql.add(a),l("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",a)),pu.enqueueReplaceState(t,t.state,null)}}function yu(e,t,o,n){!function(e,t,o){var n=e.stateNode,r=W(t)||"Component";n.render||(t.prototype&&"function"==typeof t.prototype.render?l("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",r):l("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",r)),!n.getInitialState||n.getInitialState.isReactClassApproved||n.state||l("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",r),n.getDefaultProps&&!n.getDefaultProps.isReactClassApproved&&l("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",r),n.propTypes&&l("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",r),n.contextType&&l("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",r),n.contextTypes&&l("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",r),t.contextType&&t.contextTypes&&!ou.has(t)&&(ou.add(t),l("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",r)),"function"==typeof n.componentShouldUpdate&&l("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",r),t.prototype&&t.prototype.isPureReactComponent&&void 0!==n.shouldComponentUpdate&&l("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",W(t)||"A pure component"),"function"==typeof n.componentDidUnmount&&l("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",r),"function"==typeof n.componentDidReceiveProps&&l("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",r),"function"==typeof n.componentWillRecieveProps&&l("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",r),"function"==typeof n.UNSAFE_componentWillRecieveProps&&l("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",r);var a=n.props!==o;void 0!==n.props&&a&&l("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",r,r),n.defaultProps&&l("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",r,r),"function"!=typeof n.getSnapshotBeforeUpdate||"function"==typeof n.componentDidUpdate||Yl.has(t)||(Yl.add(t),l("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",W(t))),"function"==typeof n.getDerivedStateFromProps&&l("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",r),"function"==typeof n.getDerivedStateFromError&&l("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",r),"function"==typeof t.getSnapshotBeforeUpdate&&l("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",r);var i=n.state;i&&("object"!=typeof i||au(i))&&l("%s.state: must be set to an object or null",r),"function"==typeof n.getChildContext&&"object"!=typeof t.childContextTypes&&l("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",r)}(e,t,o);var r=e.stateNode;r.props=o,r.state=e.memoizedState,r.refs=iu,Bl(e);var a=t.contextType;if("object"==typeof a&&null!==a)r.context=Sl(a);else{var i=oc(0,t,!0);r.context=rc(e,i)}if(r.state===o){var s=W(t)||"Component";tu.has(s)||(tu.add(s),l("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",s))}1&e.mode&&$c.recordLegacyContextWarning(e,r),$c.recordUnsafeLifecycleWarnings(e,r),Il(e,o,r,n),r.state=e.memoizedState;var c=t.getDerivedStateFromProps;"function"==typeof c&&(cu(e,t,c,o),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(!function(e,t){Bs(e,"componentWillMount");var o=t.state;"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),Gs(),o!==t.state&&(l("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",W(e.type)||"Component"),pu.enqueueReplaceState(t,t.state,null))}(e,r),Il(e,o,r,n),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var wu;lu=!1,uu=!1,mu={},du={},hu={},wu=function(e){if(null!==e&&"object"==typeof e&&e._store&&!e._store.validated&&null==e.key){if("object"!=typeof e._store)throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");e._store.validated=!0;var t='Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.'+X();du[t]||(du[t]=!0,l('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.'))}};var ku=Array.isArray;function Cu(e,t,o){var n=o.ref;if(null!==n&&"function"!=typeof n&&"object"!=typeof n){if(1&e.mode&&(!o._owner||!o._self||o._owner.stateNode===o._self)){var r=W(e.type)||"Component";mu[r]||(l('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s',n,K(e)),mu[r]=!0)}if(o._owner){var a,i=o._owner;if(i){var s=i;if(1!==s.tag)throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");a=s.stateNode}if(!a)throw Error("Missing owner for string ref "+n+". This error is likely caused by a bug in React. Please file an issue.");var c=""+n;if(null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===c)return t.ref;var u=function(e){var t=a.refs;t===iu&&(t=a.refs={}),null===e?delete t[c]:t[c]=e};return u._stringRef=c,u}if("string"!=typeof n)throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");if(!o._owner)throw Error("Element ref was specified as a string ("+n+") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.")}return n}function Au(e,t){if("textarea"!==e.type){var o;throw o=" If you meant to render a collection of children, use an array instead."+X(),Error("Objects are not valid as a React child (found: "+("[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t)+")."+o)}}function xu(){var e="Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."+X();hu[e]||(hu[e]=!0,l("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."))}function Eu(e){function t(t,o){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=o,t.lastEffect=o):t.firstEffect=t.lastEffect=o,o.nextEffect=null,o.effectTag=8}}function o(o,n){if(!e)return null;for(var r=n;null!==r;)t(o,r),r=r.sibling;return null}function n(e,t){for(var o=new Map,n=t;null!==n;)null!==n.key?o.set(n.key,n):o.set(n.index,n),n=n.sibling;return o}function r(e,t){var o=Pf(e,t);return o.index=0,o.sibling=null,o}function a(t,o,n){if(t.index=n,!e)return o;var r=t.alternate;if(null!==r){var a=r.index;return a<o?(t.effectTag=2,o):a}return t.effectTag=2,o}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,o,n){if(null===t||6!==t.tag){var a=Hf(o,e.mode,n);return a.return=e,a}var i=r(t,o);return i.return=e,i}function c(e,t,o,n){if(null!==t&&(t.elementType===o.type||ul(t,o))){var a=r(t,o.props);return a.ref=Cu(e,t,o),a.return=e,a._debugSource=o._source,a._debugOwner=o._owner,a}var i=Ff(o,e.mode,n);return i.ref=Cu(e,t,o),i.return=e,i}function u(e,t,o,n){if(null===t||4!==t.tag||t.stateNode.containerInfo!==o.containerInfo||t.stateNode.implementation!==o.implementation){var a=Of(o,e.mode,n);return a.return=e,a}var i=r(t,o.children||[]);return i.return=e,i}function m(e,t,o,n,a){if(null===t||7!==t.tag){var i=If(o,e.mode,n,a);return i.return=e,i}var s=r(t,o);return s.return=e,s}function d(e,t,o){if("string"==typeof t||"number"==typeof t){var n=Hf(""+t,e.mode,o);return n.return=e,n}if("object"==typeof t&&null!==t){switch(t.$$typeof){case T:var r=Ff(t,e.mode,o);return r.ref=Cu(e,null,t),r.return=e,r;case S:var a=Of(t,e.mode,o);return a.return=e,a}if(ku(t)||L(t)){var i=If(t,e.mode,o,null);return i.return=e,i}Au(e,t)}return"function"==typeof t&&xu(),null}function h(e,t,o,n){var r=null!==t?t.key:null;if("string"==typeof o||"number"==typeof o)return null!==r?null:s(e,t,""+o,n);if("object"==typeof o&&null!==o){switch(o.$$typeof){case T:return o.key===r?o.type===q?m(e,t,o.props.children,n,r):c(e,t,o,n):null;case S:return o.key===r?u(e,t,o,n):null}if(ku(o)||L(o))return null!==r?null:m(e,t,o,n,null);Au(e,o)}return"function"==typeof o&&xu(),null}function p(e,t,o,n,r){if("string"==typeof n||"number"==typeof n)return s(t,e.get(o)||null,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case T:var a=e.get(null===n.key?o:n.key)||null;return n.type===q?m(t,a,n.props.children,r,n.key):c(t,a,n,r);case S:return u(t,e.get(null===n.key?o:n.key)||null,n,r)}if(ku(n)||L(n))return m(t,e.get(o)||null,n,r,null);Au(t,n)}return"function"==typeof n&&xu(),null}function f(e,t){if("object"!=typeof e||null===e)return t;switch(e.$$typeof){case T:case S:wu(e);var o=e.key;if("string"!=typeof o)break;if(null===t){(t=new Set).add(o);break}if(!t.has(o)){t.add(o);break}l("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",o)}return t}return function(s,c,u,m){var g="object"==typeof u&&null!==u&&u.type===q&&null===u.key;g&&(u=u.props.children);var b="object"==typeof u&&null!==u;if(b)switch(u.$$typeof){case T:return i(function(e,n,a,i){for(var s=a.key,c=n;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===q){o(e,c.sibling);var l=r(c,a.props.children);return l.return=e,l._debugSource=a._source,l._debugOwner=a._owner,l}break;case 22:default:if(c.elementType===a.type||ul(c,a)){o(e,c.sibling);var u=r(c,a.props);return u.ref=Cu(e,c,a),u.return=e,u._debugSource=a._source,u._debugOwner=a._owner,u}}o(e,c);break}t(e,c),c=c.sibling}if(a.type===q){var m=If(a.props.children,e.mode,i,a.key);return m.return=e,m}var d=Ff(a,e.mode,i);return d.ref=Cu(e,n,a),d.return=e,d}(s,c,u,m));case S:return i(function(e,n,a,i){for(var s=a.key,c=n;null!==c;){if(c.key===s){if(4===c.tag&&c.stateNode.containerInfo===a.containerInfo&&c.stateNode.implementation===a.implementation){o(e,c.sibling);var l=r(c,a.children||[]);return l.return=e,l}o(e,c);break}t(e,c),c=c.sibling}var u=Of(a,e.mode,i);return u.return=e,u}(s,c,u,m))}if("string"==typeof u||"number"==typeof u)return i(function(e,t,n,a){if(null!==t&&6===t.tag){o(e,t.sibling);var i=r(t,n);return i.return=e,i}o(e,t);var s=Hf(n,e.mode,a);return s.return=e,s}(s,c,""+u,m));if(ku(u))return function(r,i,s,c){for(var l=null,u=0;u<s.length;u++){l=f(s[u],l)}for(var m=null,g=null,b=i,v=0,y=0,w=null;null!==b&&y<s.length;y++){b.index>y?(w=b,b=null):w=b.sibling;var k=h(r,b,s[y],c);if(null===k){null===b&&(b=w);break}e&&b&&null===k.alternate&&t(r,b),v=a(k,v,y),null===g?m=k:g.sibling=k,g=k,b=w}if(y===s.length)return o(r,b),m;if(null===b){for(;y<s.length;y++){var C=d(r,s[y],c);null!==C&&(v=a(C,v,y),null===g?m=C:g.sibling=C,g=C)}return m}for(var A=n(0,b);y<s.length;y++){var x=p(A,r,y,s[y],c);null!==x&&(e&&null!==x.alternate&&A.delete(null===x.key?y:x.key),v=a(x,v,y),null===g?m=x:g.sibling=x,g=x)}return e&&A.forEach((function(e){return t(r,e)})),m}(s,c,u,m);if(L(u))return function(r,i,s,c){var u=L(s);if("function"!=typeof u)throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");"function"==typeof Symbol&&"Generator"===s[Symbol.toStringTag]&&(uu||l("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."),uu=!0),s.entries===u&&(lu||l("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead."),lu=!0);var m=u.call(s);if(m)for(var g=null,b=m.next();!b.done;b=m.next()){g=f(b.value,g)}var v=u.call(s);if(null==v)throw Error("An iterable object provided no iterator.");for(var y=null,w=null,k=i,C=0,A=0,x=null,E=v.next();null!==k&&!E.done;A++,E=v.next()){k.index>A?(x=k,k=null):x=k.sibling;var _=h(r,k,E.value,c);if(null===_){null===k&&(k=x);break}e&&k&&null===_.alternate&&t(r,k),C=a(_,C,A),null===w?y=_:w.sibling=_,w=_,k=x}if(E.done)return o(r,k),y;if(null===k){for(;!E.done;A++,E=v.next()){var M=d(r,E.value,c);null!==M&&(C=a(M,C,A),null===w?y=M:w.sibling=M,w=M)}return y}for(var D=n(0,k);!E.done;A++,E=v.next()){var T=p(D,r,A,E.value,c);null!==T&&(e&&null!==T.alternate&&D.delete(null===T.key?A:T.key),C=a(T,C,A),null===w?y=T:w.sibling=T,w=T)}return e&&D.forEach((function(e){return t(r,e)})),y}(s,c,u,m);if(b&&Au(s,u),"function"==typeof u&&xu(),void 0===u&&!g)switch(s.tag){case 1:if(s.stateNode.render._isMockFunction)break;case 0:var v=s.type;throw Error((v.displayName||v.name||"Component")+"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.")}return o(s,c)}}var _u=Eu(!0),Mu=Eu(!1);function Du(e,t){for(var o=e.child;null!==o;)Nf(o,t),o=o.sibling}var Tu={},Su=Ks(Tu),qu=Ks(Tu),Ru=Ks(Tu);function zu(e){if(e===Tu)throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");return e}function Vu(){return zu(Ru.current)}function Bu(e,t){Js(Ru,t,e),Js(qu,e,e),Js(Su,Tu,e);var o=function(e){var t,o,n=e.nodeType;switch(n){case 9:case 11:t=9===n?"#document":"#fragment";var r=e.documentElement;o=r?r.namespaceURI:Pt(null,"");break;default:var a=8===n?e.parentNode:e;o=Pt(a.namespaceURI||null,t=a.tagName)}var i=t.toLowerCase();return{namespace:o,ancestorInfo:Nr(null,i)}}(t);Ys(Su,e),Js(Su,o,e)}function Gu(e){Ys(Su,e),Ys(qu,e),Ys(Ru,e)}function Pu(){return zu(Su.current)}function Nu(e){zu(Ru.current);var t,o,n,r=zu(Su.current),a=(t=r,o=e.type,{namespace:Pt((n=t).namespace,o),ancestorInfo:Nr(n.ancestorInfo,o)});r!==a&&(Js(qu,e,e),Js(Su,a,e))}function ju(e){qu.current===e&&(Ys(Su,e),Ys(qu,e))}var Fu=Ks(0);function Iu(e,t){return 0!=(e&t)}function Hu(e){return 1&e}function Ou(e,t){return 1&e|t}function Lu(e,t){Js(Fu,t,e)}function Uu(e){Ys(Fu,e)}function Wu(e,t){var o=e.memoizedState;if(null!==o)return null!==o.dehydrated;var n=e.memoizedProps;return void 0!==n.fallback&&(!0!==n.unstable_avoidThisFallback||!t)}function $u(e){for(var t=e;null!==t;){if(13===t.tag){var o=t.memoizedState;if(null!==o){var n=o.dehydrated;if(null===n||"$?"===n.data||ia(n))return t}}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return null;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Qu(e,t){var o={responder:e,props:t};return Object.freeze(o),o}var Ku,Yu=s.ReactCurrentDispatcher,Ju=s.ReactCurrentBatchConfig;Ku=new Set;var Zu=0,Xu=null,em=null,tm=null,om=!1,nm=null,rm=null,am=-1,im=!1;function sm(){var e=nm;null===rm?rm=[e]:rm.push(e)}function cm(){var e=nm;null!==rm&&(am++,rm[am]!==e&&function(e){var t=W(Xu.type);if(!Ku.has(t)&&(Ku.add(t),null!==rm)){for(var o="",n=0;n<=am;n++){for(var r=rm[n],a=n===am?e:r,i=n+1+". "+r;i.length<30;)i+=" ";o+=i+=a+"\n"}l("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,o)}}(e))}function lm(e){null==e||Array.isArray(e)||l("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",nm,typeof e)}function um(){throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.")}function mm(e,t){if(im)return!1;if(null===t)return l("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",nm),!1;e.length!==t.length&&l("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",nm,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var o=0;o<t.length&&o<e.length;o++)if(!ji(e[o],t[o]))return!1;return!0}function dm(e,t,o,n,r,a){Zu=a,Xu=t,rm=null!==e?e._debugHookTypes:null,am=-1,im=null!==e&&e.type!==t.type,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,null!==e&&null!==e.memoizedState?Yu.current=Xm:Yu.current=null!==rm?Zm:Jm;var i=o(n,r);if(t.expirationTime===Zu){var s=0;do{if(t.expirationTime=0,!(s<25))throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");s+=1,im=!1,em=null,tm=null,t.updateQueue=null,am=-1,Yu.current=ed,i=o(n,r)}while(t.expirationTime===Zu)}Yu.current=Ym,t._debugHookTypes=rm;var c=null!==em&&null!==em.next;if(Zu=0,Xu=null,em=null,tm=null,nm=null,rm=null,am=-1,om=!1,c)throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");return i}function hm(e,t,o){t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0)}function pm(){if(Yu.current=Ym,om)for(var e=Xu.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}Zu=0,Xu=null,em=null,tm=null,rm=null,am=-1,nm=null,om=!1}function fm(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===tm?Xu.memoizedState=tm=e:tm=tm.next=e,tm}function gm(){var e,t;if(null===em){var o=Xu.alternate;e=null!==o?o.memoizedState:null}else e=em.next;if(null!==(t=null===tm?Xu.memoizedState:tm.next))t=(tm=t).next,em=e;else{if(null===e)throw Error("Rendered more hooks than during the previous render.");var n={memoizedState:(em=e).memoizedState,baseState:em.baseState,baseQueue:em.baseQueue,queue:em.queue,next:null};null===tm?Xu.memoizedState=tm=n:tm=tm.next=n}return tm}function bm(e,t){return"function"==typeof t?t(e):t}function vm(e,t,o){var n,r=fm();n=void 0!==o?o(t):t,r.memoizedState=r.baseState=n;var a=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},i=a.dispatch=Km.bind(null,Xu,a);return[r.memoizedState,i]}function ym(e,t,o){var n=gm(),r=n.queue;if(null===r)throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");r.lastRenderedReducer=e;var a=em,i=a.baseQueue,s=r.pending;if(null!==s){if(null!==i){var c=i.next,l=s.next;i.next=l,s.next=c}a.baseQueue=i=s,r.pending=null}if(null!==i){var u=i.next,m=a.baseState,d=null,h=null,p=null,f=u;do{var g=f.expirationTime;if(g<Zu){var b={expirationTime:f.expirationTime,suspenseConfig:f.suspenseConfig,action:f.action,eagerReducer:f.eagerReducer,eagerState:f.eagerState,next:null};null===p?(h=p=b,d=m):p=p.next=b,g>Xu.expirationTime&&(Xu.expirationTime=g,Pp(g))}else{if(null!==p){var v={expirationTime:Ic,suspenseConfig:f.suspenseConfig,action:f.action,eagerReducer:f.eagerReducer,eagerState:f.eagerState,next:null};p=p.next=v}if(Gp(g,f.suspenseConfig),f.eagerReducer===e)m=f.eagerState;else m=e(m,f.action)}f=f.next}while(null!==f&&f!==u);null===p?d=m:p.next=h,ji(m,n.memoizedState)||ah(),n.memoizedState=m,n.baseState=d,n.baseQueue=p,r.lastRenderedState=m}var y=r.dispatch;return[n.memoizedState,y]}function wm(e,t,o){var n=gm(),r=n.queue;if(null===r)throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");r.lastRenderedReducer=e;var a=r.dispatch,i=r.pending,s=n.memoizedState;if(null!==i){r.pending=null;var c=i.next,l=c;do{s=e(s,l.action),l=l.next}while(l!==c);ji(s,n.memoizedState)||ah(),n.memoizedState=s,null===n.baseQueue&&(n.baseState=s),r.lastRenderedState=s}return[s,a]}function km(e){var t=fm();"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e;var o=t.queue={pending:null,dispatch:null,lastRenderedReducer:bm,lastRenderedState:e},n=o.dispatch=Km.bind(null,Xu,o);return[t.memoizedState,n]}function Cm(e){return ym(bm)}function Am(e){return wm(bm)}function xm(e,t,o,n){var r={tag:e,create:t,destroy:o,deps:n,next:null},a=Xu.updateQueue;if(null===a)a={lastEffect:null},Xu.updateQueue=a,a.lastEffect=r.next=r;else{var i=a.lastEffect;if(null===i)a.lastEffect=r.next=r;else{var s=i.next;i.next=r,r.next=s,a.lastEffect=r}}return r}function Em(e){var t=fm(),o={current:e};return Object.seal(o),t.memoizedState=o,o}function _m(e){return gm().memoizedState}function Mm(e,t,o,n){var r=fm(),a=void 0===n?null:n;Xu.effectTag|=e,r.memoizedState=xm(1|t,o,void 0,a)}function Dm(e,t,o,n){var r=gm(),a=void 0===n?null:n,i=void 0;if(null!==em){var s=em.memoizedState;if(i=s.destroy,null!==a)if(mm(a,s.deps))return void xm(t,o,i,a)}Xu.effectTag|=e,r.memoizedState=xm(1|t,o,i,a)}function Tm(e,t){return"undefined"!=typeof jest&&df(Xu),Mm(516,4,e,t)}function Sm(e,t){return"undefined"!=typeof jest&&df(Xu),Dm(516,4,e,t)}function qm(e,t){return Mm(4,2,e,t)}function Rm(e,t){return Dm(4,2,e,t)}function zm(e,t){if("function"==typeof t){var o=t,n=e();return o(n),function(){o(null)}}if(null!=t){var r=t;r.hasOwnProperty("current")||l("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(r).join(", ")+"}");var a=e();return r.current=a,function(){r.current=null}}}function Vm(e,t,o){"function"!=typeof t&&l("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var n=null!=o?o.concat([e]):null;return Mm(4,2,zm.bind(null,t,e),n)}function Bm(e,t,o){"function"!=typeof t&&l("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var n=null!=o?o.concat([e]):null;return Dm(4,2,zm.bind(null,t,e),n)}function Gm(e,t){}var Pm=Gm;function Nm(e,t){var o=void 0===t?null:t;return fm().memoizedState=[e,o],e}function jm(e,t){var o=gm(),n=void 0===t?null:t,r=o.memoizedState;if(null!==r&&(null!==n&&mm(n,r[1])))return r[0];return o.memoizedState=[e,n],e}function Fm(e,t){var o=fm(),n=void 0===t?null:t,r=e();return o.memoizedState=[r,n],r}function Im(e,t){var o=gm(),n=void 0===t?null:t,r=o.memoizedState;if(null!==r&&(null!==n&&mm(n,r[1])))return r[0];var a=e();return o.memoizedState=[a,n],a}function Hm(e,t){var o=km(e),n=o[0],r=o[1];return Tm((function(){var o=Ju.suspense;Ju.suspense=void 0===t?null:t;try{r(e)}finally{Ju.suspense=o}}),[e,t]),n}function Om(e,t){var o=Cm(),n=o[0],r=o[1];return Sm((function(){var o=Ju.suspense;Ju.suspense=void 0===t?null:t;try{r(e)}finally{Ju.suspense=o}}),[e,t]),n}function Lm(e,t){var o=Am(),n=o[0],r=o[1];return Sm((function(){var o=Ju.suspense;Ju.suspense=void 0===t?null:t;try{r(e)}finally{Ju.suspense=o}}),[e,t]),n}function Um(e,t,o){var n=Vc();Gc(n<98?98:n,(function(){e(!0)})),Gc(n>97?97:n,(function(){var n=Ju.suspense;Ju.suspense=void 0===t?null:t;try{e(!1),o()}finally{Ju.suspense=n}}))}function Wm(e){var t=km(!1),o=t[0],n=t[1];return[Nm(Um.bind(null,n,e),[n,e]),o]}function $m(e){var t=Cm(),o=t[0],n=t[1];return[jm(Um.bind(null,n,e),[n,e]),o]}function Qm(e){var t=Am(),o=t[0],n=t[1];return[jm(Um.bind(null,n,e),[n,e]),o]}function Km(e,t,o){"function"==typeof arguments[3]&&l("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var n=yp(),r=$l(),a=wp(n,e,r),i={expirationTime:a,suspenseConfig:r,action:o,eagerReducer:null,eagerState:null,next:null};i.priority=Vc();var s=t.pending;null===s?i.next=i:(i.next=s.next,s.next=i),t.pending=i;var c=e.alternate;if(e===Xu||null!==c&&c===Xu)om=!0,i.expirationTime=Zu,Xu.expirationTime=Zu;else{if(0===e.expirationTime&&(null===c||0===c.expirationTime)){var u=t.lastRenderedReducer;if(null!==u){var m;m=Yu.current,Yu.current=od;try{var d=t.lastRenderedState,h=u(d,o);if(i.eagerReducer=u,i.eagerState=h,ji(h,d))return}catch(e){}finally{Yu.current=m}}}"undefined"!=typeof jest&&(mf(e),hf(e)),kp(e,a)}}var Ym={readContext:Sl,useCallback:um,useContext:um,useEffect:um,useImperativeHandle:um,useLayoutEffect:um,useMemo:um,useReducer:um,useRef:um,useState:um,useDebugValue:um,useResponder:um,useDeferredValue:um,useTransition:um},Jm=null,Zm=null,Xm=null,ed=null,td=null,od=null,nd=null,rd=function(){l("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")},ad=function(){l("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks")};Jm={readContext:function(e,t){return Sl(e,t)},useCallback:function(e,t){return nm="useCallback",sm(),lm(t),Nm(e,t)},useContext:function(e,t){return nm="useContext",sm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",sm(),lm(t),Tm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",sm(),lm(o),Vm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",sm(),lm(t),qm(e,t)},useMemo:function(e,t){nm="useMemo",sm(),lm(t);var o=Yu.current;Yu.current=td;try{return Fm(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",sm();var n=Yu.current;Yu.current=td;try{return vm(e,t,o)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",sm(),Em(e)},useState:function(e){nm="useState",sm();var t=Yu.current;Yu.current=td;try{return km(e)}finally{Yu.current=t}},useDebugValue:function(e,t){nm="useDebugValue",sm()},useResponder:function(e,t){return nm="useResponder",sm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",sm(),Hm(e,t)},useTransition:function(e){return nm="useTransition",sm(),Wm(e)}},Zm={readContext:function(e,t){return Sl(e,t)},useCallback:function(e,t){return nm="useCallback",cm(),Nm(e,t)},useContext:function(e,t){return nm="useContext",cm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",cm(),Tm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",cm(),Vm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",cm(),qm(e,t)},useMemo:function(e,t){nm="useMemo",cm();var o=Yu.current;Yu.current=td;try{return Fm(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",cm();var n=Yu.current;Yu.current=td;try{return vm(e,t,o)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",cm(),Em(e)},useState:function(e){nm="useState",cm();var t=Yu.current;Yu.current=td;try{return km(e)}finally{Yu.current=t}},useDebugValue:function(e,t){nm="useDebugValue",cm()},useResponder:function(e,t){return nm="useResponder",cm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",cm(),Hm(e,t)},useTransition:function(e){return nm="useTransition",cm(),Wm(e)}},Xm={readContext:function(e,t){return Sl(e,t)},useCallback:function(e,t){return nm="useCallback",cm(),jm(e,t)},useContext:function(e,t){return nm="useContext",cm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",cm(),Sm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",cm(),Bm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",cm(),Rm(e,t)},useMemo:function(e,t){nm="useMemo",cm();var o=Yu.current;Yu.current=od;try{return Im(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",cm();var n=Yu.current;Yu.current=od;try{return ym(e)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",cm(),_m()},useState:function(e){nm="useState",cm();var t=Yu.current;Yu.current=od;try{return Cm()}finally{Yu.current=t}},useDebugValue:function(e,t){return nm="useDebugValue",cm(),Pm()},useResponder:function(e,t){return nm="useResponder",cm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",cm(),Om(e,t)},useTransition:function(e){return nm="useTransition",cm(),$m(e)}},ed={readContext:function(e,t){return Sl(e,t)},useCallback:function(e,t){return nm="useCallback",cm(),jm(e,t)},useContext:function(e,t){return nm="useContext",cm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",cm(),Sm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",cm(),Bm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",cm(),Rm(e,t)},useMemo:function(e,t){nm="useMemo",cm();var o=Yu.current;Yu.current=nd;try{return Im(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",cm();var n=Yu.current;Yu.current=nd;try{return wm(e)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",cm(),_m()},useState:function(e){nm="useState",cm();var t=Yu.current;Yu.current=nd;try{return Am()}finally{Yu.current=t}},useDebugValue:function(e,t){return nm="useDebugValue",cm(),Pm()},useResponder:function(e,t){return nm="useResponder",cm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",cm(),Lm(e,t)},useTransition:function(e){return nm="useTransition",cm(),Qm(e)}},td={readContext:function(e,t){return rd(),Sl(e,t)},useCallback:function(e,t){return nm="useCallback",ad(),sm(),Nm(e,t)},useContext:function(e,t){return nm="useContext",ad(),sm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",ad(),sm(),Tm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",ad(),sm(),Vm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",ad(),sm(),qm(e,t)},useMemo:function(e,t){nm="useMemo",ad(),sm();var o=Yu.current;Yu.current=td;try{return Fm(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",ad(),sm();var n=Yu.current;Yu.current=td;try{return vm(e,t,o)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",ad(),sm(),Em(e)},useState:function(e){nm="useState",ad(),sm();var t=Yu.current;Yu.current=td;try{return km(e)}finally{Yu.current=t}},useDebugValue:function(e,t){nm="useDebugValue",ad(),sm()},useResponder:function(e,t){return nm="useResponder",ad(),sm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",ad(),sm(),Hm(e,t)},useTransition:function(e){return nm="useTransition",ad(),sm(),Wm(e)}},od={readContext:function(e,t){return rd(),Sl(e,t)},useCallback:function(e,t){return nm="useCallback",ad(),cm(),jm(e,t)},useContext:function(e,t){return nm="useContext",ad(),cm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",ad(),cm(),Sm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",ad(),cm(),Bm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",ad(),cm(),Rm(e,t)},useMemo:function(e,t){nm="useMemo",ad(),cm();var o=Yu.current;Yu.current=od;try{return Im(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",ad(),cm();var n=Yu.current;Yu.current=od;try{return ym(e)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",ad(),cm(),_m()},useState:function(e){nm="useState",ad(),cm();var t=Yu.current;Yu.current=od;try{return Cm()}finally{Yu.current=t}},useDebugValue:function(e,t){return nm="useDebugValue",ad(),cm(),Pm()},useResponder:function(e,t){return nm="useResponder",ad(),cm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",ad(),cm(),Om(e,t)},useTransition:function(e){return nm="useTransition",ad(),cm(),$m(e)}},nd={readContext:function(e,t){return rd(),Sl(e,t)},useCallback:function(e,t){return nm="useCallback",ad(),cm(),jm(e,t)},useContext:function(e,t){return nm="useContext",ad(),cm(),Sl(e,t)},useEffect:function(e,t){return nm="useEffect",ad(),cm(),Sm(e,t)},useImperativeHandle:function(e,t,o){return nm="useImperativeHandle",ad(),cm(),Bm(e,t,o)},useLayoutEffect:function(e,t){return nm="useLayoutEffect",ad(),cm(),Rm(e,t)},useMemo:function(e,t){nm="useMemo",ad(),cm();var o=Yu.current;Yu.current=od;try{return Im(e,t)}finally{Yu.current=o}},useReducer:function(e,t,o){nm="useReducer",ad(),cm();var n=Yu.current;Yu.current=od;try{return wm(e)}finally{Yu.current=n}},useRef:function(e){return nm="useRef",ad(),cm(),_m()},useState:function(e){nm="useState",ad(),cm();var t=Yu.current;Yu.current=od;try{return Am()}finally{Yu.current=t}},useDebugValue:function(e,t){return nm="useDebugValue",ad(),cm(),Pm()},useResponder:function(e,t){return nm="useResponder",ad(),cm(),Qu(e,t)},useDeferredValue:function(e,t){return nm="useDeferredValue",ad(),cm(),Lm(e,t)},useTransition:function(e){return nm="useTransition",ad(),cm(),Qm(e)}};var id=r.unstable_now,sd=0,cd=-1;function ld(){sd=id()}function ud(e){cd=id(),e.actualStartTime<0&&(e.actualStartTime=id())}function md(e){cd=-1}function dd(e,t){if(cd>=0){var o=id()-cd;e.actualDuration+=o,t&&(e.selfBaseDuration=o),cd=-1}}var hd=null,pd=null,fd=!1;function gd(e,t){switch(e.tag){case 3:!function(e,t){1===t.nodeType?Cr(e,t):8===t.nodeType||Ar(e,t)}(e.stateNode.containerInfo,t);break;case 5:!function(e,t,o,n){!0!==t.suppressHydrationWarning&&(1===n.nodeType?Cr(o,n):8===n.nodeType||Ar(o,n))}(e.type,e.memoizedProps,e.stateNode,t)}var o,n=((o=Bf(5,null,null,0)).elementType="DELETED",o.type="DELETED",o);n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function bd(e,t){switch(t.effectTag=-1025&t.effectTag|2,e.tag){case 3:var o=e.stateNode.containerInfo;switch(t.tag){case 5:var n=t.type;t.pendingProps;!function(e,t,o){xr(e,t)}(o,n);break;case 6:!function(e,t){Er(e,t)}(o,t.pendingProps)}break;case 5:e.type;var r=e.memoizedProps,a=e.stateNode;switch(t.tag){case 5:var i=t.type;t.pendingProps;!function(e,t,o,n,r){!0!==t.suppressHydrationWarning&&xr(o,n)}(0,r,a,i);break;case 6:!function(e,t,o,n){!0!==t.suppressHydrationWarning&&Er(o,n)}(0,r,a,t.pendingProps);break;case 13:!function(e,t,o){t.suppressHydrationWarning}(0,r)}break;default:return}}function vd(e,t){switch(e.tag){case 5:var o=e.type,n=(e.pendingProps,function(e,t,o){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e}(t,o));return null!==n&&(e.stateNode=n,!0);case 6:var r=function(e,t){return""===t||3!==e.nodeType?null:e}(t,e.pendingProps);return null!==r&&(e.stateNode=r,!0);case 13:default:return!1}}function yd(e){if(fd){var t=pd;if(!t)return bd(hd,e),fd=!1,void(hd=e);var o=t;if(!vd(e,t)){if(!(t=ca(o))||!vd(e,t))return bd(hd,e),fd=!1,void(hd=e);gd(hd,o)}hd=e,pd=la(t)}}function wd(e){var t=e.stateNode,o=e.memoizedProps,n=function(e,t,o){return ga(o,e),function(e,t){return e.nodeValue!==t}(e,t)}(t,o,e);if(n){var r=hd;if(null!==r)switch(r.tag){case 3:r.stateNode.containerInfo;!function(e,t,o){kr(t,o)}(0,t,o);break;case 5:r.type;var a=r.memoizedProps;r.stateNode;!function(e,t,o,n,r){!0!==t.suppressHydrationWarning&&kr(n,r)}(0,a,0,t,o)}}return n}function kd(e){var t=e.memoizedState,o=null!==t?t.dehydrated:null;if(!o)throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");return function(e){for(var t=e.nextSibling,o=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===o)return ca(t);o--}else"$"!==n&&"$!"!==n&&"$?"!==n||o++}t=t.nextSibling}return null}(o)}function Cd(e){for(var t=e.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;hd=t}function Ad(e){if(e!==hd)return!1;if(!fd)return Cd(e),fd=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Yr(t,e.memoizedProps))for(var o=pd;o;)gd(e,o),o=ca(o);return Cd(e),pd=13===e.tag?kd(e):hd?ca(e.stateNode):null,!0}function xd(){hd=null,pd=null,fd=!1}var Ed,_d,Md,Dd,Td,Sd,qd,Rd,zd,Vd=s.ReactCurrentOwner,Bd=!1;function Gd(e,t,o,n){t.child=null===e?Mu(t,null,o,n):_u(t,e.child,o,n)}function Pd(e,t,o,n,r){if(t.type!==t.elementType){var i=o.propTypes;i&&a(i,n,"prop",W(o),X)}var s,c=o.render,l=t.ref;return Tl(t,r),Vd.current=t,oe("render"),s=dm(e,t,c,n,l,r),1&t.mode&&null!==t.memoizedState&&(s=dm(e,t,c,n,l,r)),oe(null),null===e||Bd?(t.effectTag|=1,Gd(e,t,s,r),t.child):(hm(e,t,r),ih(e,t,r))}function Nd(e,t,o,n,r,i){if(null===e){var s=o.type;if(function(e){return"function"==typeof e&&!Gf(e)&&void 0===e.defaultProps}(s)&&null===o.compare&&void 0===o.defaultProps){var c;return c=sl(s),t.tag=15,t.type=c,$d(t,s),jd(e,t,c,n,r,i)}var l=s.propTypes;l&&a(l,n,"prop",W(s),X);var u=jf(o.type,null,n,null,t.mode,i);return u.ref=t.ref,u.return=t,t.child=u,u}var m=o.type,d=m.propTypes;d&&a(d,n,"prop",W(m),X);var h=e.child;if(r<i){var p=h.memoizedProps,f=o.compare;if((f=null!==f?f:Ii)(p,n)&&e.ref===t.ref)return ih(e,t,i)}t.effectTag|=1;var g=Pf(h,n);return g.ref=t.ref,g.return=t,t.child=g,g}function jd(e,t,o,n,r,i){if(t.type!==t.elementType){var s=t.elementType;s.$$typeof===I&&(s=U(s));var c=s&&s.propTypes;c&&a(c,n,"prop",W(s),X)}if(null!==e&&(Ii(e.memoizedProps,n)&&e.ref===t.ref&&t.type===e.type&&(Bd=!1,r<i)))return t.expirationTime=e.expirationTime,ih(e,t,i);return Id(e,t,o,n,i)}function Fd(e,t){var o=t.ref;(null===e&&null!==o||null!==e&&e.ref!==o)&&(t.effectTag|=128)}function Id(e,t,o,n,r){if(t.type!==t.elementType){var i=o.propTypes;i&&a(i,n,"prop",W(o),X)}var s,c;return s=rc(t,oc(0,o,!0)),Tl(t,r),Vd.current=t,oe("render"),c=dm(e,t,o,n,s,r),1&t.mode&&null!==t.memoizedState&&(c=dm(e,t,o,n,s,r)),oe(null),null===e||Bd?(t.effectTag|=1,Gd(e,t,c,r),t.child):(hm(e,t,r),ih(e,t,r))}function Hd(e,t,o,n,r){if(t.type!==t.elementType){var i=o.propTypes;i&&a(i,n,"prop",W(o),X)}var s,c;ic(o)?(s=!0,mc(t)):s=!1,Tl(t,r),null===t.stateNode?(null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),bu(t,o,n),yu(t,o,n,r),c=!0):c=null===e?function(e,t,o,n){var r=e.stateNode,a=e.memoizedProps;r.props=a;var i=r.context,s=t.contextType,c=Zs;c="object"==typeof s&&null!==s?Sl(s):rc(e,oc(0,t,!0));var l=t.getDerivedStateFromProps,u="function"==typeof l||"function"==typeof r.getSnapshotBeforeUpdate;u||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||a===o&&i===c||vu(e,r,o,c),Ol();var m=e.memoizedState,d=r.state=m;if(Il(e,o,r,n),d=e.memoizedState,a===o&&m===d&&!ac()&&!Ll())return"function"==typeof r.componentDidMount&&(e.effectTag|=4),!1;"function"==typeof l&&(cu(e,t,l,o),d=e.memoizedState);var h=Ll()||fu(e,t,a,o,m,d,c);return h?(u||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(Bs(e,"componentWillMount"),"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),Gs()),"function"==typeof r.componentDidMount&&(e.effectTag|=4)):("function"==typeof r.componentDidMount&&(e.effectTag|=4),e.memoizedProps=o,e.memoizedState=d),r.props=o,r.state=d,r.context=c,h}(t,o,n,r):function(e,t,o,n,r){var a=t.stateNode;Gl(e,t);var i=t.memoizedProps;a.props=t.type===t.elementType?i:fl(t.type,i);var s=a.context,c=o.contextType,l=Zs;l="object"==typeof c&&null!==c?Sl(c):rc(t,oc(0,o,!0));var u=o.getDerivedStateFromProps,m="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;m||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||i===n&&s===l||vu(t,a,n,l),Ol();var d=t.memoizedState,h=a.state=d;if(Il(t,n,a,r),h=t.memoizedState,i===n&&d===h&&!ac()&&!Ll())return"function"==typeof a.componentDidUpdate&&(i===e.memoizedProps&&d===e.memoizedState||(t.effectTag|=4)),"function"==typeof a.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&d===e.memoizedState||(t.effectTag|=256)),!1;"function"==typeof u&&(cu(t,o,u,n),h=t.memoizedState);var p=Ll()||fu(t,o,i,n,d,h,l);return p?(m||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||(Bs(t,"componentWillUpdate"),"function"==typeof a.componentWillUpdate&&a.componentWillUpdate(n,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(n,h,l),Gs()),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"==typeof a.componentDidUpdate&&(i===e.memoizedProps&&d===e.memoizedState||(t.effectTag|=4)),"function"==typeof a.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&d===e.memoizedState||(t.effectTag|=256)),t.memoizedProps=n,t.memoizedState=h),a.props=n,a.state=h,a.context=l,p}(e,t,o,n,r);var u=Od(e,t,o,c,s,r);return t.stateNode.props!==n&&(Sd||l("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",W(t.type)||"a component"),Sd=!0),u}function Od(e,t,o,n,r,a){Fd(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&dc(t,o,!1),ih(e,t,a);var s,c=t.stateNode;return Vd.current=t,i&&"function"!=typeof o.getDerivedStateFromError?(s=null,md()):(oe("render"),s=c.render(),1&t.mode&&c.render(),oe(null)),t.effectTag|=1,null!==e&&i?function(e,t,o,n){t.child=_u(t,e.child,null,n),t.child=_u(t,null,o,n)}(e,t,s,a):Gd(e,t,s,a),t.memoizedState=c.state,r&&dc(t,o,!0),t.child}function Ld(e){var t=e.stateNode;t.pendingContext?lc(e,t.pendingContext,t.pendingContext!==t.context):t.context&&lc(e,t.context,!1),Bu(e,t.containerInfo)}function Ud(e,t,o){Ld(t);var n=t.updateQueue;if(null===e||null===n)throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");var r=t.pendingProps,a=t.memoizedState,i=null!==a?a.element:null;Gl(e,t),Il(t,r,null,o);var s,c,l=t.memoizedState.element;if(l===i)return xd(),ih(e,t,o);if(t.stateNode.hydrate&&(c=(s=t).stateNode.containerInfo,pd=la(c),hd=s,fd=!0,1)){var u=Mu(t,null,l,o);t.child=u;for(var m=u;m;)m.effectTag=-3&m.effectTag|1024,m=m.sibling}else Gd(e,t,l,o),xd();return t.child}function Wd(e,t,o,n,r){null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2);var i=t.pendingProps;Rs(t);var s=gl(o);t.type=s;var c=t.tag=function(e){if("function"==typeof e)return Gf(e)?1:0;if(null!=e){var t=e.$$typeof;if(t===P)return 11;if(t===F)return 14}return 2}(s);qs(t);var l=fl(s,i);switch(c){case 0:return $d(t,s),t.type=s=sl(s),Id(null,t,s,l,r);case 1:return t.type=s=cl(s),Hd(null,t,s,l,r);case 11:return t.type=s=ll(s),Pd(null,t,s,l,r);case 14:if(t.type!==t.elementType){var u=s.propTypes;u&&a(u,l,"prop",W(s),X)}return Nd(null,t,s,fl(s.type,l),n,r)}var m="";throw null!==s&&"object"==typeof s&&s.$$typeof===I&&(m=" Did you wrap a component in React.lazy() more than once?"),Error("Element type is invalid. Received a promise that resolves to: "+s+". Lazy element type must resolve to a class or function."+m)}function $d(e,t){if(t&&t.childContextTypes&&l("%s(...): childContextTypes cannot be defined on a function component.",t.displayName||t.name||"Component"),null!==e.ref){var o="",n=Z();n&&(o+="\n\nCheck the render method of `"+n+"`.");var r=n||e._debugID||"",a=e._debugSource;a&&(r=a.fileName+":"+a.lineNumber),Td[r]||(Td[r]=!0,l("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s",o))}if("function"==typeof t.getDerivedStateFromProps){var i=W(t)||"Unknown";Dd[i]||(l("%s: Function components do not support getDerivedStateFromProps.",i),Dd[i]=!0)}if("object"==typeof t.contextType&&null!==t.contextType){var s=W(t)||"Unknown";Md[s]||(l("%s: Function components do not support contextType.",s),Md[s]=!0)}}Ed={},_d={},Md={},Dd={},Td={},Sd=!1,qd=!1,Rd={},zd={};var Qd={dehydrated:null,retryTime:0};function Kd(e,t,o){var n=t.mode,r=t.pendingProps;og(t)&&(t.effectTag|=64);var a=Fu.current,i=!1;if(0!=(64&t.effectTag)||function(e,t,o){return Iu(e,2)&&(null===t||null!==t.memoizedState)}(a,e)?(i=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0!==r.fallback&&!0!==r.unstable_avoidThisFallback&&(a=a|1),Lu(t,a=Hu(a)),"maxDuration"in r&&(qd||(qd=!0,l("maxDuration has been removed from React. Remove the maxDuration prop."))),null===e){if(void 0!==r.fallback&&yd(t),i){var s=r.fallback,c=If(null,n,0,null);if(c.return=t,0==(2&t.mode)){var u=null!==t.memoizedState?t.child.child:t.child;c.child=u;for(var m=u;null!==m;)m.return=c,m=m.sibling}var d=If(s,n,o,null);return d.return=t,c.sibling=d,t.memoizedState=Qd,t.child=c,d}var h=r.children;return t.memoizedState=null,t.child=Mu(t,null,h,o)}if(null!==e.memoizedState){var p=e.child,f=p.sibling;if(i){var g=r.fallback,b=Pf(p,p.pendingProps);if(b.return=t,0==(2&t.mode)){var v=null!==t.memoizedState?t.child.child:t.child;if(v!==p.child){b.child=v;for(var y=v;null!==y;)y.return=b,y=y.sibling}}if(8&t.mode){for(var w=0,k=b.child;null!==k;)w+=k.treeBaseDuration,k=k.sibling;b.treeBaseDuration=w}var C=Pf(f,g);return C.return=t,b.sibling=C,b.childExpirationTime=0,t.memoizedState=Qd,t.child=b,C}var A=r.children,x=p.child,E=_u(t,x,A,o);return t.memoizedState=null,t.child=E}var _=e.child;if(i){var M=r.fallback,D=If(null,n,0,null);if(D.return=t,D.child=_,null!==_&&(_.return=D),0==(2&t.mode)){var T=null!==t.memoizedState?t.child.child:t.child;D.child=T;for(var S=T;null!==S;)S.return=D,S=S.sibling}if(8&t.mode){for(var q=0,R=D.child;null!==R;)q+=R.treeBaseDuration,R=R.sibling;D.treeBaseDuration=q}var z=If(M,n,o,null);return z.return=t,D.sibling=z,z.effectTag|=2,D.childExpirationTime=0,t.memoizedState=Qd,t.child=D,z}t.memoizedState=null;var V=r.children;return t.child=_u(t,_,V,o)}function Yd(e,t){e.expirationTime<t&&(e.expirationTime=t);var o=e.alternate;null!==o&&o.expirationTime<t&&(o.expirationTime=t),Dl(e.return,t)}function Jd(e,t){var o=Array.isArray(e),n=!o&&"function"==typeof L(e);if(o||n){var r=o?"array":"iterable";return l("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",r,t,r),!1}return!0}function Zd(e,t,o,n,r,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:o,tailExpiration:0,tailMode:r,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=o,i.tailExpiration=0,i.tailMode=r,i.lastEffect=a)}function Xd(e,t,o){var n=t.pendingProps,r=n.revealOrder,a=n.tail,i=n.children;!function(e){if(void 0!==e&&"forwards"!==e&&"backwards"!==e&&"together"!==e&&!Rd[e])if(Rd[e]=!0,"string"==typeof e)switch(e.toLowerCase()){case"together":case"forwards":case"backwards":l('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',e,e.toLowerCase());break;case"forward":case"backward":l('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',e,e.toLowerCase());break;default:l('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}else l('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}(r),function(e,t){void 0===e||zd[e]||("collapsed"!==e&&"hidden"!==e?(zd[e]=!0,l('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',e)):"forwards"!==t&&"backwards"!==t&&(zd[e]=!0,l('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',e)))}(a,r),function(e,t){if(("forwards"===t||"backwards"===t)&&null!=e&&!1!==e)if(Array.isArray(e)){for(var o=0;o<e.length;o++)if(!Jd(e[o],o))return}else{var n=L(e);if("function"==typeof n){var r=n.call(e);if(r)for(var a=r.next(),i=0;!a.done;a=r.next()){if(!Jd(a.value,i))return;i++}}else l('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',t)}}(i,r),Gd(e,t,i,o);var s=Fu.current;Iu(s,2)?(s=Ou(s,2),t.effectTag|=64):(null!==e&&0!=(64&e.effectTag)&&function(e,t,o){for(var n=t;null!==n;){if(13===n.tag)null!==n.memoizedState&&Yd(n,o);else if(19===n.tag)Yd(n,o);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)return;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(t,t.child,o),s=Hu(s));if(Lu(t,s),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":var c,u=function(e){for(var t=e,o=null;null!==t;){var n=t.alternate;null!==n&&null===$u(n)&&(o=t),t=t.sibling}return o}(t.child);null===u?(c=t.child,t.child=null):(c=u.sibling,u.sibling=null),Zd(t,!1,c,u,a,t.lastEffect);break;case"backwards":var m=null,d=t.child;for(t.child=null;null!==d;){var h=d.alternate;if(null!==h&&null===$u(h)){t.child=d;break}var p=d.sibling;d.sibling=m,m=d,d=p}Zd(t,!0,m,null,a,t.lastEffect);break;case"together":Zd(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function eh(e,t,o){var n=t.type._context,r=t.pendingProps,i=t.memoizedProps,s=r.value,c=t.type.propTypes;if(c&&a(c,r,"prop","Context.Provider",X),_l(t,s),null!==i){var u=function(e,t,o){if(ji(o,t))return 0;var n="function"==typeof e._calculateChangedBits?e._calculateChangedBits(o,t):1073741823;return(1073741823&n)!==n&&l("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s",n),0|n}(n,s,i.value);if(0===u){if(i.children===r.children&&!ac())return ih(e,t,o)}else!function(e,t,o,n){var r=e.child;for(null!==r&&(r.return=e);null!==r;){var a=void 0,i=r.dependencies;if(null!==i){a=r.child;for(var s=i.firstContext;null!==s;){if(s.context===t&&0!=(s.observedBits&o)){if(1===r.tag){var c=Pl(n,null);c.tag=zl,Nl(r,c)}r.expirationTime<n&&(r.expirationTime=n);var l=r.alternate;null!==l&&l.expirationTime<n&&(l.expirationTime=n),Dl(r.return,n),i.expirationTime<n&&(i.expirationTime=n);break}s=s.next}}else a=10===r.tag&&r.type===e.type?null:r.child;if(null!==a)a.return=r;else for(a=r;null!==a;){if(a===e){a=null;break}var u=a.sibling;if(null!==u){u.return=a.return,a=u;break}a=a.return}r=a}}(t,n,u,o)}return Gd(e,t,r.children,o),t.child}var th,oh,nh,rh=!1;function ah(){Bd=!0}function ih(e,t,o){Rs(t),null!==e&&(t.dependencies=e.dependencies),md();var n=t.expirationTime;return 0!==n&&Pp(n),t.childExpirationTime<o?null:(function(e,t){if(null!==e&&t.child!==e.child)throw Error("Resuming work not yet implemented.");if(null!==t.child){var o=t.child,n=Pf(o,o.pendingProps);for(t.child=n,n.return=t;null!==o.sibling;)o=o.sibling,(n=n.sibling=Pf(o,o.pendingProps)).return=t;n.sibling=null}}(e,t),t.child)}function sh(e,t,o){var n=t.expirationTime;if(t._debugNeedsRemount&&null!==e)return function(e,t,o){var n=t.return;if(null===n)throw new Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,o.index=t.index,o.sibling=t.sibling,o.return=t.return,o.ref=t.ref,t===n.child)n.child=o;else{var r=n.child;if(null===r)throw new Error("Expected parent to have a child.");for(;r.sibling!==t;)if(null===(r=r.sibling))throw new Error("Expected to find the previous sibling.");r.sibling=o}var a=n.lastEffect;return null!==a?(a.nextEffect=e,n.lastEffect=e):n.firstEffect=n.lastEffect=e,e.nextEffect=null,e.effectTag=8,o.effectTag|=2,o}(e,t,jf(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.expirationTime));if(null!==e){var r=e.memoizedProps,i=t.pendingProps;if(r!==i||ac()||t.type!==e.type)Bd=!0;else{if(n<o){switch(Bd=!1,t.tag){case 3:Ld(t),xd();break;case 5:if(Nu(t),4&t.mode&&1!==o&&Jr(t.type,i))return gf(1),t.expirationTime=t.childExpirationTime=1,null;break;case 1:ic(t.type)&&mc(t);break;case 4:Bu(t,t.stateNode.containerInfo);break;case 10:_l(t,t.memoizedProps.value);break;case 12:t.childExpirationTime>=o&&(t.effectTag|=4);break;case 13:if(null!==t.memoizedState){var s=t.child.childExpirationTime;if(0!==s&&s>=o)return Kd(e,t,o);Lu(t,Hu(Fu.current));var c=ih(e,t,o);return null!==c?c.sibling:null}Lu(t,Hu(Fu.current));break;case 19:var u=0!=(64&e.effectTag),m=t.childExpirationTime>=o;if(u){if(m)return Xd(e,t,o);t.effectTag|=64}var d=t.memoizedState;if(null!==d&&(d.rendering=null,d.tail=null),Lu(t,Fu.current),m)break;return null}return ih(e,t,o)}Bd=!1}}else Bd=!1;switch(t.expirationTime=0,t.tag){case 2:return function(e,t,o,n){null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2);var r,a,i=t.pendingProps;if(r=rc(t,oc(0,o,!1)),Tl(t,n),o.prototype&&"function"==typeof o.prototype.render){var s=W(o)||"Unknown";Ed[s]||(l("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",s,s),Ed[s]=!0)}if(1&t.mode&&$c.recordLegacyContextWarning(t,null),Vd.current=t,a=dm(null,t,o,i,r,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){var c=W(o)||"Unknown";_d[c]||(l("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",c,c,c),_d[c]=!0),t.tag=1,t.memoizedState=null,t.updateQueue=null;var u=!1;ic(o)?(u=!0,mc(t)):u=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Bl(t);var m=o.getDerivedStateFromProps;return"function"==typeof m&&cu(t,o,m,i),gu(t,a),yu(t,o,i,n),Od(null,t,o,!0,u,n)}return t.tag=0,1&t.mode&&null!==t.memoizedState&&(a=dm(null,t,o,i,r,n)),Gd(null,t,a,n),$d(t,o),t.child}(e,t,t.type,o);case 16:return Wd(e,t,t.elementType,n,o);case 0:var h=t.type,p=t.pendingProps;return Id(e,t,h,t.elementType===h?p:fl(h,p),o);case 1:var f=t.type,g=t.pendingProps;return Hd(e,t,f,t.elementType===f?g:fl(f,g),o);case 3:return Ud(e,t,o);case 5:return function(e,t,o){Nu(t),null===e&&yd(t);var n=t.type,r=t.pendingProps,a=null!==e?e.memoizedProps:null,i=r.children;return Yr(n,r)?i=null:null!==a&&Yr(n,a)&&(t.effectTag|=16),Fd(e,t),4&t.mode&&1!==o&&Jr(0,r)?(gf(1),t.expirationTime=t.childExpirationTime=1,null):(Gd(e,t,i,o),t.child)}(e,t,o);case 6:return function(e,t){return null===e&&yd(t),null}(e,t);case 13:return Kd(e,t,o);case 4:return function(e,t,o){Bu(t,t.stateNode.containerInfo);var n=t.pendingProps;return null===e?t.child=_u(t,null,n,o):Gd(e,t,n,o),t.child}(e,t,o);case 11:var b=t.type,v=t.pendingProps;return Pd(e,t,b,t.elementType===b?v:fl(b,v),o);case 7:return function(e,t,o){return Gd(e,t,t.pendingProps,o),t.child}(e,t,o);case 8:return function(e,t,o){return Gd(e,t,t.pendingProps.children,o),t.child}(e,t,o);case 12:return function(e,t,o){return t.effectTag|=4,Gd(e,t,t.pendingProps.children,o),t.child}(e,t,o);case 10:return eh(e,t,o);case 9:return function(e,t,o){var n=t.type;void 0===n._context?n!==n.Consumer&&(rh||(rh=!0,l("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))):n=n._context;var r=t.pendingProps,a=r.children;"function"!=typeof a&&l("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),Tl(t,o);var i,s=Sl(n,r.unstable_observedBits);return Vd.current=t,oe("render"),i=a(s),oe(null),t.effectTag|=1,Gd(e,t,i,o),t.child}(e,t,o);case 14:var y=t.type,w=fl(y,t.pendingProps);if(t.type!==t.elementType){var k=y.propTypes;k&&a(k,w,"prop",W(y),X)}return Nd(e,t,y,w=fl(y.type,w),n,o);case 15:return jd(e,t,t.type,t.pendingProps,n,o);case 17:var C=t.type,A=t.pendingProps;return function(e,t,o,n,r){var a;return null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ic(o)?(a=!0,mc(t)):a=!1,Tl(t,r),bu(t,o,n),yu(t,o,n,r),Od(null,t,o,!0,a,r)}(e,t,C,t.elementType===C?A:fl(C,A),o);case 19:return Xd(e,t,o)}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function ch(e){e.effectTag|=4}function lh(e){e.effectTag|=128}function uh(e,t){switch(e.tailMode){case"hidden":for(var o=e.tail,n=null;null!==o;)null!==o.alternate&&(n=o),o=o.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":for(var r=e.tail,a=null;null!==r;)null!==r.alternate&&(a=r),r=r.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function mh(e,t,o){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ic(t.type)&&sc(t),null;case 3:Gu(t),cc(t);var r=t.stateNode;if(r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null===e||null===e.child)Ad(t)&&ch(t);return null;case 5:ju(t);var a=Vu(),i=t.type;if(null!==e&&null!=t.stateNode)oh(e,t,i,n,a),e.ref!==t.ref&&lh(t);else{if(!n){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return null}var s=Pu();if(Ad(t))(function(e,t,o){var n=ua(e.stateNode,e.type,e.memoizedProps,t,o,e);return e.updateQueue=n,null!==n})(t,a,s)&&ch(t);else{var c=Kr(i,n,a,s,t);th(c,t),t.stateNode=c,function(e,t,o,n,r){return vr(e,t,o,n),$r(t,o)}(c,i,n,a)&&ch(t)}null!==t.ref&&lh(t)}return null;case 6:var l=n;if(e&&null!=t.stateNode){var u=e.memoizedProps;nh(0,t,u,l)}else{if("string"!=typeof l&&null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");var m=Vu(),d=Pu();Ad(t)?wd(t)&&ch(t):t.stateNode=Zr(l,m,d,t)}return null;case 13:Uu(t);var h=t.memoizedState;if(0!=(64&t.effectTag))return t.expirationTime=o,t;var p=null!==h,f=!1;if(null===e)void 0!==t.memoizedProps.fallback&&Ad(t);else{var g=e.memoizedState;if(f=null!==g,!p&&null!==g){var b=e.child.sibling;if(null!==b){var v=t.firstEffect;null!==v?(t.firstEffect=b,b.nextEffect=v):(t.firstEffect=t.lastEffect=b,b.nextEffect=null),b.effectTag=8}}}if(p&&!f)if(0!=(2&t.mode))null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||Iu(Fu.current,1)?0===Yh&&(Yh=3):function(){0!==Yh&&3!==Yh||(Yh=4);0!==tp&&null!==$h&&(Qf($h,Kh),Kf($h,tp))}();return(p||f)&&(t.effectTag|=4),null;case 4:return Gu(t),null;case 10:return Ml(t),null;case 17:return ic(t.type)&&sc(t),null;case 19:Uu(t);var y=t.memoizedState;if(null===y)return null;var w=0!=(64&t.effectTag),k=y.rendering;if(null===k){if(w)uh(y,!1);else if(!(0===Yh&&(null===e||0==(64&e.effectTag))))for(var C=t.child;null!==C;){var A=$u(C);if(null!==A){w=!0,t.effectTag|=64,uh(y,!1);var x=A.updateQueue;return null!==x&&(t.updateQueue=x,t.effectTag|=4),null===y.lastEffect&&(t.firstEffect=null),t.lastEffect=y.lastEffect,Du(t,o),Lu(t,Ou(Fu.current,2)),t.child}C=C.sibling}}else{if(!w){var E=$u(k);if(null!==E){t.effectTag|=64,w=!0;var _=E.updateQueue;if(null!==_&&(t.updateQueue=_,t.effectTag|=4),uh(y,!0),null===y.tail&&"hidden"===y.tailMode&&!k.alternate){var M=t.lastEffect=y.lastEffect;return null!==M&&(M.nextEffect=null),null}}else if(2*zc()-y.renderingStartTime>y.tailExpiration&&o>1){t.effectTag|=64,w=!0,uh(y,!1);var D=o-1;t.expirationTime=t.childExpirationTime=D,gf(D)}}if(y.isBackwards)k.sibling=t.child,t.child=k;else{var T=y.last;null!==T?T.sibling=k:t.child=k,y.last=k}}if(null!==y.tail){if(0===y.tailExpiration){y.tailExpiration=zc()+500}var S=y.tail;y.rendering=S,y.tail=S.sibling,y.lastEffect=t.lastEffect,y.renderingStartTime=zc(),S.sibling=null;var q=Fu.current;return Lu(t,q=w?Ou(q,2):Hu(q)),S}return null}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function dh(e,t){switch(e.tag){case 1:ic(e.type)&&sc(e);var o=e.effectTag;return 4096&o?(e.effectTag=-4097&o|64,e):null;case 3:Gu(e),cc(e);var n=e.effectTag;if(0!=(64&n))throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");return e.effectTag=-4097&n|64,e;case 5:return ju(e),null;case 13:Uu(e);var r=e.effectTag;return 4096&r?(e.effectTag=-4097&r|64,e):null;case 19:return Uu(e),null;case 4:return Gu(e),null;case 10:return Ml(e),null;default:return null}}function hh(e){switch(e.tag){case 1:var t=e.type.childContextTypes;null!=t&&sc(e);break;case 3:Gu(e),cc(e);break;case 5:ju(e);break;case 4:Gu(e);break;case 13:case 19:Uu(e);break;case 10:Ml(e)}}function ph(e,t){return{value:e,source:t,stack:K(t)}}th=function(e,t,o,n){for(var r,a,i=t.child;null!==i;){if(5===i.tag||6===i.tag)r=e,a=i.stateNode,r.appendChild(a);else if(4===i.tag);else if(null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},oh=function(e,t,o,n,r){var a=e.memoizedProps;if(a!==n){var i=function(e,t,o,n,r,a){var i=a;if(typeof n.children!=typeof o.children&&("string"==typeof n.children||"number"==typeof n.children)){var s=""+n.children,c=Nr(i.ancestorInfo,t);Pr(null,s,c)}return yr(e,t,o,n,r)}(t.stateNode,o,a,n,r,Pu());t.updateQueue=i,i&&ch(t)}},nh=function(e,t,o,n){o!==n&&ch(t)};var fh;fh=new Set;var gh="function"==typeof WeakSet?WeakSet:Set;function bh(e,t){var o=t.source,n=t.stack;null===n&&null!==o&&(n=K(o));var r={componentName:null!==o?W(o.type):null,componentStack:null!==n?n:"",error:t.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:!1,willRetry:!1};null!==e&&1===e.tag&&(r.errorBoundary=e.stateNode,r.errorBoundaryName=W(e.type),r.errorBoundaryFound=!0,r.willRetry=!0);try{!function(e){var t=e.error,o=e.componentName,n=e.componentStack,r=e.errorBoundaryName,a=e.errorBoundaryFound,i=e.willRetry;if(null!=t&&t._suppressLogging){if(a&&i)return;console.error(t)}var s=""+(o?"The above error occurred in the <"+o+"> component:":"The above error occurred in one of your React components:")+n+"\n\n"+(a&&r?i?"React will try to recreate this component tree from scratch using the error boundary you provided, "+r+".":"This error was initially handled by the error boundary "+r+".\nRecreating the tree from scratch failed so React will unmount the tree.":"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.");console.error(s)}(r)}catch(e){setTimeout((function(){throw e}))}}var vh=function(e,t){Bs(e,"componentWillUnmount"),t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount(),Gs()};function yh(e){var t=e.ref;null!==t&&("function"==typeof t?(y(null,t,null,null),w()&&ef(e,k())):t.current=null)}function wh(e,t){(y(null,t,null),w())&&ef(e,k())}function kh(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var o=e.memoizedProps,n=e.memoizedState;Bs(t,"getSnapshotBeforeUpdate");var r=t.stateNode;t.type!==t.elementType||Sd||(r.props!==t.memoizedProps&&l("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(t.type)||"instance"),r.state!==t.memoizedState&&l("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(t.type)||"instance"));var a=r.getSnapshotBeforeUpdate(t.elementType===t.type?o:fl(t.type,o),n),i=fh;void 0!==a||i.has(t.type)||(i.add(t.type),l("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",W(t.type))),r.__reactInternalSnapshotBeforeUpdate=a,Gs()}return;case 3:case 5:case 6:case 4:case 17:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function Ch(e,t){var o=t.updateQueue,n=null!==o?o.lastEffect:null;if(null!==n){var r=n.next,a=r;do{if((a.tag&e)===e){var i=a.destroy;a.destroy=void 0,void 0!==i&&i()}a=a.next}while(a!==r)}}function Ah(e,t){var o=t.updateQueue,n=null!==o?o.lastEffect:null;if(null!==n){var r=n.next,a=r;do{if((a.tag&e)===e){var i=a.create;a.destroy=i();var s=a.destroy;if(void 0!==s&&"function"!=typeof s){l("An effect function must not return anything besides a function, which is used for clean-up.%s%s",null===s?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof s.then?"\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching":" You returned: "+s,K(t))}}a=a.next}while(a!==r)}}function xh(e){if(0!=(512&e.effectTag))switch(e.tag){case 0:case 11:case 15:case 22:Ch(5,e),Ah(5,e)}}function Eh(e,t,o,n){switch(o.tag){case 0:case 11:case 15:case 22:return void Ah(3,o);case 1:var r=o.stateNode;if(4&o.effectTag)if(null===t)Bs(o,"componentDidMount"),o.type!==o.elementType||Sd||(r.props!==o.memoizedProps&&l("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(o.type)||"instance"),r.state!==o.memoizedState&&l("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(o.type)||"instance")),r.componentDidMount(),Gs();else{var a=o.elementType===o.type?t.memoizedProps:fl(o.type,t.memoizedProps),i=t.memoizedState;Bs(o,"componentDidUpdate"),o.type!==o.elementType||Sd||(r.props!==o.memoizedProps&&l("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(o.type)||"instance"),r.state!==o.memoizedState&&l("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(o.type)||"instance")),r.componentDidUpdate(a,i,r.__reactInternalSnapshotBeforeUpdate),Gs()}var s=o.updateQueue;return void(null!==s&&(o.type!==o.elementType||Sd||(r.props!==o.memoizedProps&&l("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(o.type)||"instance"),r.state!==o.memoizedState&&l("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",W(o.type)||"instance")),Ul(0,s,r)));case 3:var c=o.updateQueue;if(null!==c){var u=null;if(null!==o.child)switch(o.child.tag){case 5:case 1:u=o.child.stateNode}Ul(0,c,u)}return;case 5:var m=o.stateNode;if(null===t&&4&o.effectTag)!function(e,t,o,n){$r(t,o)&&e.focus()}(m,o.type,o.memoizedProps);return;case 6:case 4:return;case 12:var d=o.memoizedProps.onRender;return void("function"==typeof d&&d(o.memoizedProps.id,null===t?"mount":"update",o.actualDuration,o.treeBaseDuration,o.actualStartTime,sd,e.memoizedInteractions));case 13:return void function(e,t){if(null===t.memoizedState){var o=t.alternate;if(null!==o){var n=o.memoizedState;if(null!==n){var r=n.dehydrated;null!==r&&function(e){$o(e)}(r)}}}}(0,o);case 19:case 17:case 20:case 21:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function _h(e){var t=e.ref;if(null!==t){var o,n=e.stateNode;switch(e.tag){case 5:o=n;break;default:o=n}"function"==typeof t?t(o):(t.hasOwnProperty("current")||l("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s",W(e.type),K(e)),t.current=o)}}function Mh(e){var t=e.ref;null!==t&&("function"==typeof t?t(null):t.current=null)}function Dh(e,t,o){var n;switch(n=t,"function"==typeof xf&&xf(n),t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==r){var a=r.lastEffect;if(null!==a){var i=a.next;Gc(o>97?97:o,(function(){var e=i;do{var o=e.destroy;void 0!==o&&wh(t,o),e=e.next}while(e!==i)}))}}return;case 1:yh(t);var s=t.stateNode;return void("function"==typeof s.componentWillUnmount&&function(e,t){y(null,vh,null,e,t),w()&&ef(e,k())}(t,s));case 5:return void yh(t);case 4:return void Rh(e,t,o);case 20:case 18:case 21:return}}function Th(e,t,o){for(var n=t;;)if(Dh(e,n,o),null===n.child||4===n.tag){if(n===t)return;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}else n.child.return=n,n=n.child}function Sh(e){return 5===e.tag||3===e.tag||4===e.tag}function qh(e){var t,o,n=function(e){for(var t=e.return;null!==t;){if(Sh(t))return t;t=t.return}throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}(e),r=n.stateNode;switch(n.tag){case 5:t=r,o=!1;break;case 3:case 4:t=r.containerInfo,o=!0;break;case 20:default:throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}16&n.effectTag&&(ta(t),n.effectTag&=-17);var a=function(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||Sh(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.effectTag)continue e;if(null===t.child||4===t.tag)continue e;t.child.return=t,t=t.child}if(!(2&t.effectTag))return t.stateNode}}(e);o?function e(t,o,n){var r=t.tag,a=5===r||6===r;if(a){var i=a?t.stateNode:t.stateNode.instance;o?function(e,t,o){8===e.nodeType?e.parentNode.insertBefore(t,o):e.insertBefore(t,o)}(n,i,o):function(e,t){var o;8===e.nodeType?(o=e.parentNode).insertBefore(t,e):(o=e).appendChild(t);var n=e._reactRootContainer;null==n&&null===o.onclick&&br(o)}(n,i)}else if(4===r);else{var s=t.child;if(null!==s){e(s,o,n);for(var c=s.sibling;null!==c;)e(c,o,n),c=c.sibling}}}(e,a,t):function e(t,o,n){var r=t.tag,a=5===r||6===r;if(a){var i=a?t.stateNode:t.stateNode.instance;o?function(e,t,o){e.insertBefore(t,o)}(n,i,o):function(e,t){e.appendChild(t)}(n,i)}else if(4===r);else{var s=t.child;if(null!==s){e(s,o,n);for(var c=s.sibling;null!==c;)e(c,o,n),c=c.sibling}}}(e,a,t)}function Rh(e,t,o){for(var n,r,a,i,s=t,c=!1;;){if(!c){var l=s.return;e:for(;;){if(null===l)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");var u=l.stateNode;switch(l.tag){case 5:n=u,r=!1;break e;case 3:case 4:n=u.containerInfo,r=!0;break e}l=l.return}c=!0}if(5===s.tag||6===s.tag)Th(e,s,o),r?(a=n,i=s.stateNode,8===a.nodeType?a.parentNode.removeChild(i):a.removeChild(i)):oa(n,s.stateNode);else if(4===s.tag){if(null!==s.child){n=s.stateNode.containerInfo,r=!0,s.child.return=s,s=s.child;continue}}else if(Dh(e,s,o),null!==s.child){s.child.return=s,s=s.child;continue}if(s===t)return;for(;null===s.sibling;){if(null===s.return||s.return===t)return;4===(s=s.return).tag&&(c=!1)}s.sibling.return=s.return,s=s.sibling}}function zh(e,t,o){Rh(e,t,o),function e(t){var o=t.alternate;t.return=null,t.child=null,t.memoizedState=null,t.updateQueue=null,t.dependencies=null,t.alternate=null,t.firstEffect=null,t.lastEffect=null,t.pendingProps=null,t.memoizedProps=null,t.stateNode=null,null!==o&&e(o)}(t)}function Vh(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void Ch(3,t);case 1:return;case 5:var o=t.stateNode;if(null!=o){var n=t.memoizedProps,r=null!==e?e.memoizedProps:n,a=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,o,n,r,a){Aa(e,r),wr(e,t,o,n,r)}(o,i,a,r,n)}return;case 6:if(null===t.stateNode)throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");var s=t.stateNode,c=t.memoizedProps;null!==e&&e.memoizedProps;return void function(e,t,o){e.nodeValue=o}(s,0,c);case 3:var l=t.stateNode;return void(l.hydrate&&(l.hydrate=!1,$o(l.containerInfo)));case 12:return;case 13:return function(e){var t,o=e.memoizedState,n=e;null===o?t=!1:(t=!0,n=e.child,np=zc());null!==n&&function(e,t){for(var o=e;;){if(5===o.tag){var n=o.stateNode;t?na(n):ra(o.stateNode,o.memoizedProps)}else if(6===o.tag){var r=o.stateNode;t?r.nodeValue="":aa(r,o.memoizedProps)}else{if(13===o.tag&&null!==o.memoizedState&&null===o.memoizedState.dehydrated){var a=o.child.sibling;a.return=o,o=a;continue}if(null!==o.child){o.child.return=o,o=o.child;continue}}if(o===e)return;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}(n,t)}(t),void Bh(t);case 19:return void Bh(t);case 17:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function Bh(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var o=e.stateNode;null===o&&(o=e.stateNode=new gh),t.forEach((function(t){var n=of.bind(null,e,t);o.has(t)||(!0!==t.__reactDoNotTraceInteractions&&(n=i.unstable_wrap(n)),o.add(t),t.then(n,n))}))}}function Gh(e){ta(e.stateNode)}var Ph="function"==typeof WeakMap?WeakMap:Map;function Nh(e,t,o){var n=Pl(o,null);n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Zp(r),bh(e,t)},n}function jh(e,t,o){var n=Pl(o,null);n.tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return bh(e,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch?n.callback=function(){var o;ml(e),"function"!=typeof r&&(o=this,null===sp?sp=new Set([o]):sp.add(o),bh(e,t));var n=t.value,a=t.stack;this.componentDidCatch(n,{componentStack:null!==a?a:""}),"function"!=typeof r&&e.expirationTime!==Ic&&l("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",W(e.type)||"Unknown")}:n.callback=function(){ml(e)},n}function Fh(e,t,o){var n,r=e.pingCache;if(null===r?(r=e.pingCache=new Ph,n=new Set,r.set(o,n)):void 0===(n=r.get(o))&&(n=new Set,r.set(o,n)),!n.has(t)){n.add(t);var a=tf.bind(null,e,o,t);o.then(a,a)}}function Ih(e,t,o,n,r){if(o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==n&&"object"==typeof n&&"function"==typeof n.then){var a=n;if(0==(2&o.mode)){var i=o.alternate;i?(o.memoizedState=i.memoizedState,o.expirationTime=i.expirationTime):o.memoizedState=null}var s=Iu(Fu.current,1),c=t;do{if(13===c.tag&&Wu(c,s)){var l=c.updateQueue;if(null===l){var u=new Set;u.add(a),c.updateQueue=u}else l.add(a);if(0==(2&c.mode)){if(c.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var m=Pl(Ic,null);m.tag=zl,Nl(o,m)}return void(o.expirationTime=Ic)}return Fh(e,r,a),c.effectTag|=4096,void(c.expirationTime=r)}c=c.return}while(null!==c);n=new Error((W(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+K(o))}5!==Yh&&(Yh=2),n=ph(n,o);var d=t;do{switch(d.tag){case 3:var h=n;return d.effectTag|=4096,d.expirationTime=r,void jl(d,Nh(d,h,r));case 1:var p=n,f=d.type,g=d.stateNode;if(0==(64&d.effectTag)&&("function"==typeof f.getDerivedStateFromError||null!==g&&"function"==typeof g.componentDidCatch&&!Jp(g)))return d.effectTag|=4096,d.expirationTime=r,void jl(d,jh(d,p,r))}d=d.return}while(null!==d)}var Hh=Math.ceil,Oh=s.ReactCurrentDispatcher,Lh=s.ReactCurrentOwner,Uh=s.IsSomeRendererActing,Wh=0,$h=null,Qh=null,Kh=0,Yh=0,Jh=null,Zh=Ic,Xh=Ic,ep=null,tp=0,op=!1,np=0,rp=null,ap=!1,ip=null,sp=null,cp=!1,lp=null,up=90,mp=0,dp=null,hp=0,pp=null,fp=0,gp=null,bp=null,vp=0;function yp(){return 0!=(48&Wh)?Hc(zc()):0!==vp?vp:vp=Hc(zc())}function wp(e,t,o){var n=t.mode;if(0==(2&n))return Ic;var r,a=Vc();if(0==(4&n))return 99===a?Ic:1073741822;if(0!=(16&Wh))return Kh;if(null!==o)r=function(e,t){return Lc(e,t,250)}(e,0|o.timeoutMs||5e3);else switch(a){case 99:r=Ic;break;case 98:r=Uc(e);break;case 97:case 96:r=function(e){return Lc(e,5e3,250)}(e);break;case 95:r=2;break;default:throw Error("Expected a valid priority level")}return null!==$h&&r===Kh&&(r-=1),r}var kp=function(e,t){!function(){if(hp>50)throw hp=0,pp=null,Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");fp>50&&(fp=0,l("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."))}(),function(e){if(0!=(16&Wh))switch(e.tag){case 0:case 11:case 15:l("Cannot update a component from inside the function body of a different component.");break;case 1:switch(J){case"getChildContext":if(lf)return;l("setState(...): Cannot call setState() inside getChildContext()"),lf=!0;break;case"render":if(cf)return;l("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),cf=!0}}}(e);var o=Cp(e,t);if(null!==o){var n,r;n=e,r=t,null!==$h&&r>Kh&&(gp=n),ps&&(fs=!0),null!==ds&&"componentWillMount"!==ds&&"componentWillReceiveProps"!==ds&&(gs=!0);var a=Vc();if(t===Ic?0!=(8&Wh)&&0==(48&Wh)?(vf(o,t),_p(o)):(xp(o),vf(o,t),0===Wh&&jc()):(xp(o),vf(o,t)),0!=(4&Wh)&&(98===a||99===a))if(null===dp)dp=new Map([[o,t]]);else{var i=dp.get(o);(void 0===i||i>t)&&dp.set(o,t)}}else!function(e){var t=e.tag;if(3!==t&&1!==t&&0!==t&&11!==t&&14!==t&&15!==t&&22!==t)return;var o=W(e.type)||"ReactComponent";if(null!==sf){if(sf.has(o))return;sf.add(o)}else sf=new Set([o]);l("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s",1===t?"the componentWillUnmount method":"a useEffect cleanup function",K(e))}(e)};function Cp(e,t){e.expirationTime<t&&(e.expirationTime=t);var o=e.alternate;null!==o&&o.expirationTime<t&&(o.expirationTime=t);var n=e.return,r=null;if(null===n&&3===e.tag)r=e.stateNode;else for(;null!==n;){if(o=n.alternate,n.childExpirationTime<t?(n.childExpirationTime=t,null!==o&&o.childExpirationTime<t&&(o.childExpirationTime=t)):null!==o&&o.childExpirationTime<t&&(o.childExpirationTime=t),null===n.return&&3===n.tag){r=n.stateNode;break}n=n.return}return null!==r&&($h===r&&(Pp(t),4===Yh&&Qf(r,Kh)),Kf(r,t)),r}function Ap(e){var t=e.lastExpiredTime;if(0!==t)return t;var o=e.firstPendingTime;if(!$f(e,o))return o;var n=e.lastPingedTime,r=e.nextKnownPendingLevel,a=n>r?n:r;return a<=2&&o!==a?0:a}function xp(e){if(0!==e.lastExpiredTime)return e.callbackExpirationTime=Ic,e.callbackPriority=99,void(e.callbackNode=Nc(_p.bind(null,e)));var t=Ap(e),o=e.callbackNode;if(0!==t){var n,r=Wc(yp(),t);if(null!==o){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;!function(e){e!==_c&&gc(e)}(o)}e.callbackExpirationTime=t,e.callbackPriority=r,n=t===Ic?Nc(_p.bind(null,e)):Pc(r,Ep.bind(null,e),{timeout:Oc(t)-zc()}),e.callbackNode=n}else null!==o&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90)}function Ep(e,t){if(vp=0,t)return Yf(e,yp()),xp(e),null;var o=Ap(e);if(0!==o){var n=e.callbackNode;if(0!=(48&Wh))throw Error("Should not already be working.");if(Kp(),e===$h&&o===Kh||(Sp(e,o),yf(e,o)),null!==Qh){var r=Wh;Wh|=16;var a=Rp(),i=Vp(e);for(Ps(Qh);;)try{jp();break}catch(t){qp(e,t)}if(Al(),Wh=r,zp(a),Bp(i),1===Yh){var s=Jh;throw rf(),Sp(e,o),Qf(e,o),xp(e),s}if(null!==Qh)rf();else{nf();var c=e.finishedWork=e.current.alternate;e.finishedExpirationTime=o,function(e,t,o,n){switch($h=null,o){case 0:case 1:throw Error("Root did not complete. This is a bug in React.");case 2:Yf(e,n>2?2:n);break;case 3:Qf(e,n);var r=e.lastSuspendedTime;if(n===r&&(e.nextKnownPendingLevel=Hp(t)),Zh===Ic&&!uf.current){var a=np+500-zc();if(a>10){if(op){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,Sp(e,n);break}}var s=Ap(e);if(0!==s&&s!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=Xr(Lp.bind(null,e),a);break}}Lp(e);break;case 4:Qf(e,n);var c=e.lastSuspendedTime;if(n===c&&(e.nextKnownPendingLevel=Hp(t)),!uf.current){if(op){var l=e.lastPingedTime;if(0===l||l>=n){e.lastPingedTime=n,Sp(e,n);break}}var u,m=Ap(e);if(0!==m&&m!==n)break;if(0!==c&&c!==n){e.lastPingedTime=c;break}if(Xh!==Ic)u=Oc(Xh)-zc();else if(Zh===Ic)u=0;else{var d=function(e){return Oc(e)-5e3}(Zh),h=zc(),p=Oc(n)-h,f=h-d;f<0&&(f=0),u=function(e){return e<120?120:e<480?480:e<1080?1080:e<1920?1920:e<3e3?3e3:e<4320?4320:1960*Hh(e/1960)}(f)-f,p<u&&(u=p)}if(u>10){e.timeoutHandle=Xr(Lp.bind(null,e),u);break}}Lp(e);break;case 5:if(!uf.current&&Zh!==Ic&&null!==ep){var g=function(e,t,o){var n=0|o.busyMinDurationMs;if(n<=0)return 0;var r=0|o.busyDelayMs,a=zc(),i=function(e,t){return Oc(e)-(0|t.timeoutMs||5e3)}(e,o),s=a-i;if(s<=r)return 0;return r+n-s}(Zh,0,ep);if(g>10){Qf(e,n),e.timeoutHandle=Xr(Lp.bind(null,e),g);break}}Lp(e);break;default:throw Error("Unknown root exit status.")}}(e,c,Yh,o)}if(xp(e),e.callbackNode===n)return Ep.bind(null,e)}}return null}function _p(e){var t=e.lastExpiredTime,o=0!==t?t:Ic;if(0!=(48&Wh))throw Error("Should not already be working.");if(Kp(),e===$h&&o===Kh||(Sp(e,o),yf(e,o)),null!==Qh){var n=Wh;Wh|=16;var r=Rp(),a=Vp(e);for(Ps(Qh);;)try{Np();break}catch(t){qp(e,t)}if(Al(),Wh=n,zp(r),Bp(a),1===Yh){var i=Jh;throw rf(),Sp(e,o),Qf(e,o),xp(e),i}if(null!==Qh)throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");nf(),e.finishedWork=e.current.alternate,e.finishedExpirationTime=o,function(e){$h=null,Lp(e)}(e),xp(e)}return null}function Mp(e,t){var o=Wh;Wh|=1;try{return e(t)}finally{0===(Wh=o)&&jc()}}function Dp(e,t){var o=Wh;Wh&=-2,Wh|=8;try{return e(t)}finally{0===(Wh=o)&&jc()}}function Tp(e,t){if(0!=(48&Wh))throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");var o=Wh;Wh|=1;try{return Gc(99,e.bind(null,t))}finally{Wh=o,jc()}}function Sp(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var o=e.timeoutHandle;if(-1!==o&&(e.timeoutHandle=-1,ea(o)),null!==Qh)for(var n=Qh.return;null!==n;)hh(n),n=n.return;$h=e,Qh=Pf(e.current,null),Kh=t,Yh=0,Jh=null,Zh=Ic,Xh=Ic,ep=null,tp=0,op=!1,bp=null,$c.discardPendingWarnings()}function qp(e,t){for(;;){try{if(Al(),pm(),ee(),null===Qh||null===Qh.return)return Yh=1,Jh=t,Qh=null,null;8&Qh.mode&&dd(Qh,!0),Ih(e,Qh.return,Qh,t,Kh),Qh=Ip(Qh)}catch(e){t=e;continue}return}}function Rp(e){var t=Oh.current;return Oh.current=Ym,null===t?Ym:t}function zp(e){Oh.current=e}function Vp(e){var t=i.__interactionsRef.current;return i.__interactionsRef.current=e.memoizedInteractions,t}function Bp(e){i.__interactionsRef.current=e}function Gp(e,t){e<Zh&&e>2&&(Zh=e),null!==t&&e<Xh&&e>2&&(Xh=e,ep=t)}function Pp(e){e>tp&&(tp=e)}function Np(){for(;null!==Qh;)Qh=Fp(Qh)}function jp(){for(;null!==Qh&&!Mc();)Qh=Fp(Qh)}function Fp(e){var t,o=e.alternate;return qs(e),te(e),0!=(8&e.mode)?(ud(e),t=af(o,e,Kh),dd(e,!0)):t=af(o,e,Kh),ee(),e.memoizedProps=e.pendingProps,null===t&&(t=Ip(e)),Lh.current=null,t}function Ip(e){Qh=e;do{var t=Qh.alternate,o=Qh.return;if(0==(2048&Qh.effectTag)){te(Qh);var n=void 0;if(0==(8&Qh.mode)?n=mh(t,Qh,Kh):(ud(Qh),n=mh(t,Qh,Kh),dd(Qh,!1)),zs(Qh),ee(),Op(Qh),null!==n)return n;if(null!==o&&0==(2048&o.effectTag))null===o.firstEffect&&(o.firstEffect=Qh.firstEffect),null!==Qh.lastEffect&&(null!==o.lastEffect&&(o.lastEffect.nextEffect=Qh.firstEffect),o.lastEffect=Qh.lastEffect),Qh.effectTag>1&&(null!==o.lastEffect?o.lastEffect.nextEffect=Qh:o.firstEffect=Qh,o.lastEffect=Qh)}else{var r=dh(Qh);if(0!=(8&Qh.mode)){dd(Qh,!1);for(var a=Qh.actualDuration,i=Qh.child;null!==i;)a+=i.actualDuration,i=i.sibling;Qh.actualDuration=a}if(null!==r)return Vs(Qh),r.effectTag&=2047,r;zs(Qh),null!==o&&(o.firstEffect=o.lastEffect=null,o.effectTag|=2048)}var s=Qh.sibling;if(null!==s)return s;Qh=o}while(null!==Qh);return 0===Yh&&(Yh=5),null}function Hp(e){var t=e.expirationTime,o=e.childExpirationTime;return t>o?t:o}function Op(e){if(1===Kh||1!==e.childExpirationTime){var t=0;if(0!=(8&e.mode)){for(var o=e.actualDuration,n=e.selfBaseDuration,r=null===e.alternate||e.child!==e.alternate.child,a=e.child;null!==a;){var i=a.expirationTime,s=a.childExpirationTime;i>t&&(t=i),s>t&&(t=s),r&&(o+=a.actualDuration),n+=a.treeBaseDuration,a=a.sibling}e.actualDuration=o,e.treeBaseDuration=n}else for(var c=e.child;null!==c;){var l=c.expirationTime,u=c.childExpirationTime;l>t&&(t=l),u>t&&(t=u),c=c.sibling}e.childExpirationTime=t}}function Lp(e){var t=Vc();return Gc(99,Up.bind(null,e,t)),null}function Up(e,t){do{Kp()}while(null!==lp);if($c.flushLegacyContextWarning(),$c.flushPendingUnsafeLifecycleWarnings(),0!=(48&Wh))throw Error("Should not already be working.");var o,n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");if(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0,us&&(ps=!0,fs=!1,ys.clear(),ks("(Committing Changes)")),function(e,t,o){e.firstPendingTime=o,t<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t<=e.firstSuspendedTime&&(e.firstSuspendedTime=t-1);t<=e.lastPingedTime&&(e.lastPingedTime=0);t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}(e,r,Hp(n)),e===$h&&($h=null,Qh=null,Kh=0),n.effectTag>1?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=Wh;Wh|=32;var i=Vp(e);Lh.current=null,js(),Qr(e.containerInfo),rp=o;do{if(y(null,Wp,null),w()){if(null===rp)throw Error("Should be working on an effect.");var s=k();ef(rp,s),rp=rp.nextEffect}}while(null!==rp);Fs(),ld(),Is(),rp=o;do{if(y(null,$p,null,e,t),w()){if(null===rp)throw Error("Should be working on an effect.");var c=k();ef(rp,c),rp=rp.nextEffect}}while(null!==rp);Hs(),e.containerInfo,Gr(Wr),rn(Ur),Ur=null,Wr=null,e.current=n,Os(),rp=o;do{if(y(null,Qp,null,e,r),w()){if(null===rp)throw Error("Should be working on an effect.");var l=k();ef(rp,l),rp=rp.nextEffect}}while(null!==rp);Ls(),rp=null,Dc(),Bp(i),Wh=a}else e.current=n,js(),Fs(),ld(),Is(),Hs(),Os(),Ls();!function(){if(us){var e=null;fs?e="Lifecycle hook scheduled a cascading update":bs>0&&(e="Caused by a cascading update in earlier commit"),fs=!1,bs++,ps=!1,ys.clear(),Cs("(Committing Changes)","(Committing Changes)",e)}}();var u=cp;if(cp)cp=!1,lp=e,mp=r,up=t;else for(rp=o;null!==rp;){var m=rp.nextEffect;rp.nextEffect=null,rp=m}var d=e.firstPendingTime;if(0!==d){if(null!==bp){var h=bp;bp=null;for(var p=0;p<h.length;p++)bf(e,h[p],e.memoizedInteractions)}vf(e,d)}else sp=null;if(u||wf(e,r),d===Ic?e===pp?hp++:(hp=0,pp=e):hp=0,function(e,t){"function"==typeof Af&&Af(e,t)}(n.stateNode,r),xp(e),ap){ap=!1;var f=ip;throw ip=null,f}return 0!=(8&Wh)||jc(),null}function Wp(){for(;null!==rp;){var e=rp.effectTag;if(0!=(256&e))te(rp),Ss(),kh(rp.alternate,rp),ee();0!=(512&e)&&(cp||(cp=!0,Pc(97,(function(){return Kp(),null})))),rp=rp.nextEffect}}function $p(e,t){for(;null!==rp;){te(rp);var o=rp.effectTag;if(16&o&&Gh(rp),128&o){var n=rp.alternate;null!==n&&Mh(n)}switch(1038&o){case 2:qh(rp),rp.effectTag&=-3;break;case 6:qh(rp),rp.effectTag&=-3,Vh(rp.alternate,rp);break;case 1024:rp.effectTag&=-1025;break;case 1028:rp.effectTag&=-1025,Vh(rp.alternate,rp);break;case 4:Vh(rp.alternate,rp);break;case 8:zh(e,rp,t)}Ss(),ee(),rp=rp.nextEffect}}function Qp(e,t){for(;null!==rp;){te(rp);var o=rp.effectTag;if(36&o)Ss(),Eh(e,rp.alternate,rp);128&o&&(Ss(),_h(rp)),ee(),rp=rp.nextEffect}}function Kp(){if(90!==up){var e=up>97?97:up;return up=90,Gc(e,Yp)}}function Yp(){if(null===lp)return!1;var e=lp,t=mp;if(lp=null,mp=0,0!=(48&Wh))throw Error("Cannot flush passive effects while already rendering.");var o=Wh;Wh|=32;for(var n=Vp(e),r=e.current.firstEffect;null!==r;){if(te(r),y(null,xh,null,r),w()){if(null===r)throw Error("Should be working on an effect.");ef(r,k())}ee();var a=r.nextEffect;r.nextEffect=null,r=a}return Bp(n),wf(e,t),Wh=o,jc(),fp=null===lp?0:fp+1,!0}function Jp(e){return null!==sp&&sp.has(e)}var Zp=function(e){ap||(ap=!0,ip=e)};function Xp(e,t,o){Nl(e,Nh(e,ph(o,t),Ic));var n=Cp(e,Ic);null!==n&&(xp(n),vf(n,Ic))}function ef(e,t){if(3!==e.tag)for(var o=e.return;null!==o;){if(3===o.tag)return void Xp(o,e,t);if(1===o.tag){var n=o.type,r=o.stateNode;if("function"==typeof n.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&!Jp(r)){Nl(o,jh(o,ph(t,e),Ic));var a=Cp(o,Ic);return void(null!==a&&(xp(a),vf(a,Ic)))}}o=o.return}else Xp(e,e,t)}function tf(e,t,o){var n=e.pingCache;if(null!==n&&n.delete(t),$h!==e||Kh!==o){if($f(e,o)){var r=e.lastPingedTime;0!==r&&r<o||(e.lastPingedTime=o,xp(e),vf(e,o))}}else 4===Yh||3===Yh&&Zh===Ic&&zc()-np<500?Sp(e,Kh):op=!0}function of(e,t){var o;null!==(o=e.stateNode)&&o.delete(t),function(e,t){if(0===t){t=wp(yp(),e,null)}var o=Cp(e,t);null!==o&&(xp(o),vf(o,t))}(e,0)}function nf(){Ns(gp,!0),gp=null}function rf(){Ns(gp,!1),gp=null}var af,sf=null;af=function(e,t,o){var n=Lf(null,t);try{return sh(e,t,o)}catch(r){if(null!==r&&"object"==typeof r&&"function"==typeof r.then)throw r;if(Al(),pm(),hh(t),Lf(t,n),8&t.mode&&ud(t),y(null,sh,null,e,t,o),w())throw k();throw r}};var cf=!1,lf=!1;var uf={current:!1};function mf(e){!0===Uh.current&&!0!==uf.current&&l("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s",K(e))}function df(e){0!=(1&e.mode)&&!1===Uh.current&&!1===uf.current&&l("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s",W(e.type),K(e))}var hf=function(e){0===Wh&&!1===Uh.current&&!1===uf.current&&l("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s",W(e.type),K(e))},pf=!1;function ff(e,t){return 1e3*t+e.interactionThreadID}function gf(e){null===bp?bp=[e]:bp.push(e)}function bf(e,t,o){if(o.size>0){var n=e.pendingInteractionMap,r=n.get(t);null!=r?o.forEach((function(e){r.has(e)||e.__count++,r.add(e)})):(n.set(t,new Set(o)),o.forEach((function(e){e.__count++})));var a=i.__subscriberRef.current;if(null!==a){var s=ff(e,t);a.onWorkScheduled(o,s)}}}function vf(e,t){bf(e,t,i.__interactionsRef.current)}function yf(e,t){var o=new Set;if(e.pendingInteractionMap.forEach((function(e,n){n>=t&&e.forEach((function(e){return o.add(e)}))})),e.memoizedInteractions=o,o.size>0){var n=i.__subscriberRef.current;if(null!==n){var r=ff(e,t);try{n.onWorkStarted(o,r)}catch(e){Pc(99,(function(){throw e}))}}}}function wf(e,t){var o,n=e.firstPendingTime;try{if(null!==(o=i.__subscriberRef.current)&&e.memoizedInteractions.size>0){var r=ff(e,t);o.onWorkStopped(e.memoizedInteractions,r)}}catch(e){Pc(99,(function(){throw e}))}finally{var a=e.pendingInteractionMap;a.forEach((function(e,t){t>n&&(a.delete(t),e.forEach((function(e){if(e.__count--,null!==o&&0===e.__count)try{o.onInteractionScheduledWorkCompleted(e)}catch(e){Pc(99,(function(){throw e}))}})))}))}}var kf,Cf=null,Af=null,xf=null,Ef=!1,_f="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__;function Mf(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return l("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools"),!0;try{var o=t.inject(e);"function"==typeof t.onScheduleFiberRoot&&(Cf=function(e,n){try{t.onScheduleFiberRoot(o,e,n)}catch(e){Ef||(Ef=!0,l("React instrumentation encountered an error: %s",e))}}),Af=function(e,n){try{var r=64==(64&e.current.effectTag),a=Wc(Hc(zc()),n);t.onCommitFiberRoot(o,e,a,r)}catch(e){Ef||(Ef=!0,l("React instrumentation encountered an error: %s",e))}},xf=function(e){try{t.onCommitFiberUnmount(o,e)}catch(e){Ef||(Ef=!0,l("React instrumentation encountered an error: %s",e))}}}catch(e){l("React instrumentation encountered an error: %s.",e)}return!0}kf=!1;try{var Df=Object.preventExtensions({}),Tf=new Map([[Df,null]]),Sf=new Set([Df]);Tf.set(0,0),Sf.add(0)}catch(e){kf=!0}var qf=1;function Rf(e,t,o,n){this.tag=e,this.key=o,this.elementType=null,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.dependencies=null,this.mode=n,this.effectTag=0,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.expirationTime=0,this.childExpirationTime=0,this.alternate=null,this.actualDuration=Number.NaN,this.actualStartTime=Number.NaN,this.selfBaseDuration=Number.NaN,this.treeBaseDuration=Number.NaN,this.actualDuration=0,this.actualStartTime=-1,this.selfBaseDuration=0,this.treeBaseDuration=0,this._debugID=qf++,this._debugIsCurrentlyTiming=!1,this._debugSource=null,this._debugOwner=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,kf||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}var zf,Vf,Bf=function(e,t,o,n){return new Rf(e,t,o,n)};function Gf(e){var t=e.prototype;return!(!t||!t.isReactComponent)}function Pf(e,t){var o=e.alternate;null===o?((o=Bf(e.tag,t,e.key,e.mode)).elementType=e.elementType,o.type=e.type,o.stateNode=e.stateNode,o._debugID=e._debugID,o._debugSource=e._debugSource,o._debugOwner=e._debugOwner,o._debugHookTypes=e._debugHookTypes,o.alternate=e,e.alternate=o):(o.pendingProps=t,o.effectTag=0,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,o.actualDuration=0,o.actualStartTime=-1),o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue;var n=e.dependencies;switch(o.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders},o.sibling=e.sibling,o.index=e.index,o.ref=e.ref,o.selfBaseDuration=e.selfBaseDuration,o.treeBaseDuration=e.treeBaseDuration,o._debugNeedsRemount=e._debugNeedsRemount,o.tag){case 2:case 0:case 15:o.type=sl(e.type);break;case 1:o.type=cl(e.type);break;case 11:o.type=ll(e.type)}return o}function Nf(e,t){e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null;var o=e.alternate;if(null===o)e.childExpirationTime=0,e.expirationTime=t,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.selfBaseDuration=0,e.treeBaseDuration=0;else{e.childExpirationTime=o.childExpirationTime,e.expirationTime=o.expirationTime,e.child=o.child,e.memoizedProps=o.memoizedProps,e.memoizedState=o.memoizedState,e.updateQueue=o.updateQueue;var n=o.dependencies;e.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders},e.selfBaseDuration=o.selfBaseDuration,e.treeBaseDuration=o.treeBaseDuration}return e}function jf(e,t,o,n,r,a){var i,s=2,c=e;if("function"==typeof e)Gf(e)?(s=1,c=cl(c)):c=sl(c);else if("string"==typeof e)s=5;else e:switch(e){case q:return If(o.children,r,a,t);case G:s=8,r|=7;break;case R:s=8,r|=1;break;case z:return function(e,t,o,n){"string"==typeof e.id&&"function"==typeof e.onRender||l('Profiler must specify an "id" string and "onRender" function as props');var r=Bf(12,e,n,8|t);return r.elementType=z,r.type=z,r.expirationTime=o,r}(o,r,a,t);case N:return function(e,t,o,n){var r=Bf(13,e,n,t);return r.type=N,r.elementType=N,r.expirationTime=o,r}(o,r,a,t);case j:return function(e,t,o,n){var r=Bf(19,e,n,t);return r.type=j,r.elementType=j,r.expirationTime=o,r}(o,r,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case V:s=10;break e;case B:s=9;break e;case P:s=11,c=ll(c);break e;case F:s=14;break e;case I:s=16,c=null;break e;case H:s=22;break e}var u="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(u+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var m=n?W(n.type):null;throw m&&(u+="\n\nCheck the render method of `"+m+"`."),Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+(null==e?e:typeof e)+"."+u)}return(i=Bf(s,o,t,r)).elementType=e,i.type=c,i.expirationTime=a,i}function Ff(e,t,o){var n;n=e._owner;var r=jf(e.type,e.key,e.props,n,t,o);return r._debugSource=e._source,r._debugOwner=e._owner,r}function If(e,t,o,n){var r=Bf(7,e,n,t);return r.expirationTime=o,r}function Hf(e,t,o){var n=Bf(6,e,null,t);return n.expirationTime=o,n}function Of(e,t,o){var n=null!==e.children?e.children:[],r=Bf(4,n,e.key,t);return r.expirationTime=o,r.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},r}function Lf(e,t){return null===e&&(e=Bf(2,null,null,0)),e.tag=t.tag,e.key=t.key,e.elementType=t.elementType,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.dependencies=t.dependencies,e.mode=t.mode,e.effectTag=t.effectTag,e.nextEffect=t.nextEffect,e.firstEffect=t.firstEffect,e.lastEffect=t.lastEffect,e.expirationTime=t.expirationTime,e.childExpirationTime=t.childExpirationTime,e.alternate=t.alternate,e.actualDuration=t.actualDuration,e.actualStartTime=t.actualStartTime,e.selfBaseDuration=t.selfBaseDuration,e.treeBaseDuration=t.treeBaseDuration,e._debugID=t._debugID,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugIsCurrentlyTiming=t._debugIsCurrentlyTiming,e._debugNeedsRemount=t._debugNeedsRemount,e._debugHookTypes=t._debugHookTypes,e}function Uf(e,t,o){this.tag=t,this.current=null,this.containerInfo=e,this.pendingChildren=null,this.pingCache=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.context=null,this.pendingContext=null,this.hydrate=o,this.callbackNode=null,this.callbackPriority=90,this.firstPendingTime=0,this.firstSuspendedTime=0,this.lastSuspendedTime=0,this.nextKnownPendingLevel=0,this.lastPingedTime=0,this.lastExpiredTime=0,this.interactionThreadID=i.unstable_getThreadID(),this.memoizedInteractions=new Set,this.pendingInteractionMap=new Map}function Wf(e,t,o,n){var r=new Uf(e,t,o),a=function(e){var t;return t=2===e?7:1===e?3:0,_f&&(t|=8),Bf(3,null,null,t)}(t);return r.current=a,a.stateNode=r,Bl(a),r}function $f(e,t){var o=e.firstSuspendedTime,n=e.lastSuspendedTime;return 0!==o&&o>=t&&n<=t}function Qf(e,t){var o=e.firstSuspendedTime,n=e.lastSuspendedTime;o<t&&(e.firstSuspendedTime=t),(n>t||0===o)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Kf(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var o=e.firstSuspendedTime;0!==o&&(t>=o?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Yf(e,t){var o=e.lastExpiredTime;(0===o||o>t)&&(e.lastExpiredTime=t)}function Jf(e,t,o,n){!function(e,t){"function"==typeof Cf&&Cf(e,t)}(t,e);var a,i=t.current,s=yp();"undefined"!=typeof jest&&(a=i,!1===pf&&void 0===r.unstable_flushAllWithoutAsserting&&(2&a.mode||4&a.mode)&&(pf=!0,l("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://fb.me/react-mock-scheduler")),mf(i));var c=$l(),u=wp(s,i,c),m=function(e){if(!e)return Zs;var t=eo(e),o=hc(t);if(1===t.tag){var n=t.type;if(ic(n))return uc(t,n,o)}return o}(o);null===t.context?t.context=m:t.pendingContext=m,"render"!==J||null===Y||zf||(zf=!0,l("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",W(Y.type)||"Unknown"));var d=Pl(u,c);return d.payload={element:e},null!==(n=void 0===n?null:n)&&("function"!=typeof n&&l("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",n),d.callback=n),Nl(i,d),kp(i,u),u}function Zf(e){var t=e.current;if(!t.child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function Xf(e,t){var o=e.memoizedState;null!==o&&null!==o.dehydrated&&o.retryTime<t&&(o.retryTime=t)}function eg(e,t){Xf(e,t);var o=e.alternate;o&&Xf(o,t)}function tg(e){var t=function(e){var t=io(e);if(!t)return null;for(var o=t;;){if(5===o.tag||6===o.tag)return o;if(o.child&&4!==o.tag)o.child.return=o,o=o.child;else{if(o===t)return null;for(;!o.sibling;){if(!o.return||o.return===t)return null;o=o.return}o.sibling.return=o.return,o=o.sibling}}return null}(e);return null===t?null:20===t.tag?t.stateNode.instance:t.stateNode}zf=!1,Vf={};var og=function(e){return!1};var ng,rg,ag,ig,sg=function(e,t,o,r){if(o>=t.length)return r;var a=t[o],i=Array.isArray(e)?e.slice():n({},e);return i[a]=sg(e[a],t,o+1,r),i},cg=function(e,t,o){return sg(e,t,0,o)};ng=function(e,t,o,r){for(var a=e.memoizedState;null!==a&&t>0;)a=a.next,t--;if(null!==a){var i=cg(a.memoizedState,o,r);a.memoizedState=i,a.baseState=i,e.memoizedProps=n({},e.memoizedProps),kp(e,Ic)}},rg=function(e,t,o){e.pendingProps=cg(e.memoizedProps,t,o),e.alternate&&(e.alternate.pendingProps=e.pendingProps),kp(e,Ic)},ag=function(e){kp(e,Ic)},ig=function(e){og=e};s.IsSomeRendererActing;function lg(e,t){this._internalRoot=mg(e,2,t)}function ug(e,t,o){this._internalRoot=mg(e,t,o)}function mg(e,t,o){var n,r=null!=o&&!0===o.hydrate,a=(null!=o&&o.hydrationOptions,function(e,t,o,n){return Wf(e,t,o)}(e,t,r));(n=a.current,e[fa]=n,r&&0!==t)&&function(e,t){var o=Xt(t);Vo.forEach((function(e){Po(e,t,o)})),Bo.forEach((function(e){Po(e,t,o)}))}(0,9===e.nodeType?e:e.ownerDocument);return a}function dg(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}lg.prototype.render=ug.prototype.render=function(e){var t=this._internalRoot;"function"==typeof arguments[1]&&l("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");var o=t.containerInfo;if(8!==o.nodeType){var n=tg(t.current);n&&n.parentNode!==o&&l("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.")}Jf(e,t,null,null)},lg.prototype.unmount=ug.prototype.unmount=function(){"function"==typeof arguments[0]&&l("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");var e=this._internalRoot,t=e.containerInfo;Jf(null,e,null,(function(){ba(t)}))};var hg,pg=s.ReactCurrentOwner,fg=!1;function gg(e){return e?9===e.nodeType?e.documentElement:e.firstChild:null}function bg(e,t){var o=t||function(e){var t=gg(e);return!(!t||1!==t.nodeType||!t.hasAttribute("data-reactroot"))}(e);if(!o)for(var n,r=!1;n=e.lastChild;)!r&&1===n.nodeType&&n.hasAttribute("data-reactroot")&&(r=!0,l("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.")),e.removeChild(n);return!o||t||fg||(fg=!0,c("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.")),function(e,t){return new ug(e,0,t)}(e,o?{hydrate:!0}:void 0)}function vg(e,t,o,n,r){hg(o),function(e,t){null!==e&&"function"!=typeof e&&l("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e)}(void 0===r?null:r,"render");var a,i=o._reactRootContainer;if(i){if(a=i._internalRoot,"function"==typeof r){var s=r;r=function(){var e=Zf(a);s.call(e)}}Jf(t,a,e,r)}else{if(i=o._reactRootContainer=bg(o,n),a=i._internalRoot,"function"==typeof r){var c=r;r=function(){var e=Zf(a);c.call(e)}}Dp((function(){Jf(t,a,e,r)}))}return Zf(a)}function yg(e,t,o){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==n?null:""+n,children:e,containerInfo:t,implementation:o}}hg=function(e){if(e._reactRootContainer&&8!==e.nodeType){var t=tg(e._reactRootContainer._internalRoot.current);t&&t.parentNode!==e&&l("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.")}var o=!!e._reactRootContainer,n=gg(e);!(!n||!wa(n))&&!o&&l("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."),1===e.nodeType&&e.tagName&&"BODY"===e.tagName.toUpperCase()&&l("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.")};bo=function(e){if(13===e.tag){var t=Uc(yp());kp(e,t),eg(e,t)}},function(e){vo=e}((function(e){13===e.tag&&(kp(e,3),eg(e,3))})),function(e){yo=e}((function(e){if(13===e.tag){var t=wp(yp(),e,null);kp(e,t),eg(e,t)}}));var wg=!1;function kg(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!dg(t))throw Error("Target container is not a DOM element.");return yg(e,t,null,o)}"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||l("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),fe=function(e,t,o){switch(t){case"input":return void ft(e,o);case"textarea":return void function(e,t){St(e,t)}(e,o);case"select":return void function(e,t){var o=e,n=t.value;null!=n&&xt(o,!!t.multiple,n,!1)}(e,o)}},ke=Mp,Ce=function(e,t,o,n,r){var a=Wh;Wh|=4;try{return Gc(98,e.bind(null,t,o,n,r))}finally{0===(Wh=a)&&jc()}},Ae=function(){0==(49&Wh)?(function(){if(null!==dp){var e=dp;dp=null,e.forEach((function(e,t){Yf(t,e),xp(t)})),jc()}}(),Kp()):0!=(16&Wh)&&l("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.")},xe=function(e,t){var o=Wh;Wh|=2;try{return e(t)}finally{0===(Wh=o)&&jc()}};var Cg={Events:[wa,ka,Ca,he,le,qa,function(e){lo(e,Sa)},ye,we,mn,po,Kp,uf]};if(!function(e){var t=e.findFiberByHostInstance,o=s.ReactCurrentDispatcher;return Mf(n({},e,{overrideHookState:ng,overrideProps:rg,setSuspenseHandler:ig,scheduleUpdate:ag,currentDispatcherRef:o,findHostInstanceByFiber:function(e){var t=so(e);return null===t?null:t.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:pl,scheduleRefresh:dl,scheduleRoot:hl,setRefreshHandler:il,getCurrentFiber:function(){return Y}}))}({findFiberByHostInstance:ya,bundleType:1,version:"16.13.0",rendererPackageName:"react-dom"})&&pe&&window.top===window.self&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)){var Ag=window.location.protocol;/^(https?|file):$/.test(Ag)&&console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools"+("file:"===Ag?"\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq":""),"font-weight:bold")}o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Cg,o.createPortal=kg,o.findDOMNode=function(e){var t=pg.current;return null!==t&&null!==t.stateNode&&(t.stateNode._warnedAboutRefsInRender||l("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",W(t.type)||"A component"),t.stateNode._warnedAboutRefsInRender=!0),null==e?null:1===e.nodeType?e:function(e,t){var o=eo(e);if(void 0===o)throw"function"==typeof e.render?Error("Unable to find node on an unmounted component."):Error("Argument appears to not be a ReactComponent. Keys: "+Object.keys(e));var n=so(o);if(null===n)return null;if(1&n.mode){var r=W(o.type)||"Component";Vf[r]||(Vf[r]=!0,1&o.mode?l("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s",t,t,r,K(n)):l("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s",t,t,r,K(n)))}return n.stateNode}(e,"findDOMNode")},o.flushSync=Tp,o.hydrate=function(e,t,o){if(!dg(t))throw Error("Target container is not a DOM element.");return va(t)&&void 0===t._reactRootContainer&&l("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?"),vg(null,e,t,!0,o)},o.render=function(e,t,o){if(!dg(t))throw Error("Target container is not a DOM element.");return va(t)&&void 0===t._reactRootContainer&&l("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?"),vg(null,e,t,!1,o)},o.unmountComponentAtNode=function(e){if(!dg(e))throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");if(va(e)&&void 0===e._reactRootContainer&&l("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?"),e._reactRootContainer){var t=gg(e);return t&&!wa(t)&&l("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."),Dp((function(){vg(null,null,e,!1,(function(){e._reactRootContainer=null,ba(e)}))})),!0}var o=gg(e),n=!(!o||!wa(o)),r=1===e.nodeType&&dg(e.parentNode)&&!!e.parentNode._reactRootContainer;return n&&l("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",r?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."),!1},o.unstable_batchedUpdates=Mp,o.unstable_createPortal=function(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return wg||(wg=!0,c('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.')),kg(e,t,o)},o.unstable_renderSubtreeIntoContainer=function(e,t,o,n){return function(e,t,o,n){if(!dg(o))throw Error("Target container is not a DOM element.");if(null==e||void 0===e._reactInternalFiber)throw Error("parentComponent must be a valid React Component");return vg(e,t,o,!1,n)}(e,t,o,n)},o.version="16.13.0"}()}).call(this,e("_process"))},{_process:15,"object-assign":13,"prop-types/checkPropTypes":16,react:30,scheduler:35,"scheduler/tracing":36}],23:[function(e,t,o){
/** @license React v16.13.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";var n=e("react"),r=e("object-assign"),a=e("scheduler");function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=1;o<arguments.length;o++)t+="&args[]="+encodeURIComponent(arguments[o]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));function s(e,t,o,n,r,a,i,s,c){var l=Array.prototype.slice.call(arguments,3);try{t.apply(o,l)}catch(e){this.onError(e)}}var c=!1,l=null,u=!1,m=null,d={onError:function(e){c=!0,l=e}};function h(e,t,o,n,r,a,i,u,m){c=!1,l=null,s.apply(d,arguments)}var p=null,f=null,g=null;function b(e,t,o){var n=e.type||"unknown-event";e.currentTarget=g(o),function(e,t,o,n,r,a,s,d,p){if(h.apply(this,arguments),c){if(!c)throw Error(i(198));var f=l;c=!1,l=null,u||(u=!0,m=f)}}(n,t,void 0,e),e.currentTarget=null}var v=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;v.hasOwnProperty("ReactCurrentDispatcher")||(v.ReactCurrentDispatcher={current:null}),v.hasOwnProperty("ReactCurrentBatchConfig")||(v.ReactCurrentBatchConfig={suspense:null});var y=/^(.*)[\\\/]/,w="function"==typeof Symbol&&Symbol.for,k=w?Symbol.for("react.element"):60103,C=w?Symbol.for("react.portal"):60106,A=w?Symbol.for("react.fragment"):60107,x=w?Symbol.for("react.strict_mode"):60108,E=w?Symbol.for("react.profiler"):60114,_=w?Symbol.for("react.provider"):60109,M=w?Symbol.for("react.context"):60110,D=w?Symbol.for("react.concurrent_mode"):60111,T=w?Symbol.for("react.forward_ref"):60112,S=w?Symbol.for("react.suspense"):60113,q=w?Symbol.for("react.suspense_list"):60120,R=w?Symbol.for("react.memo"):60115,z=w?Symbol.for("react.lazy"):60116,V=w?Symbol.for("react.block"):60121,B="function"==typeof Symbol&&Symbol.iterator;function G(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function P(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case C:return"Portal";case E:return"Profiler";case x:return"StrictMode";case S:return"Suspense";case q:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case M:return"Context.Consumer";case _:return"Context.Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return P(e.type);case V:return P(e.render);case z:if(e=1===e._status?e._result:null)return P(e)}return null}function N(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var o="";break e;default:var n=e._debugOwner,r=e._debugSource,a=P(e.type);o=null,n&&(o=P(n.type)),n=a,a="",r?a=" (at "+r.fileName.replace(y,"")+":"+r.lineNumber+")":o&&(a=" (created by "+o+")"),o="\n    in "+(n||"Unknown")+a}t+=o,e=e.return}while(e);return t}var j=null,F={};function I(){if(j)for(var e in F){var t=F[e],o=j.indexOf(e);if(!(-1<o))throw Error(i(96,e));if(!O[o]){if(!t.extractEvents)throw Error(i(97,e));for(var n in O[o]=t,o=t.eventTypes){var r=void 0,a=o[n],s=t,c=n;if(L.hasOwnProperty(c))throw Error(i(99,c));L[c]=a;var l=a.phasedRegistrationNames;if(l){for(r in l)l.hasOwnProperty(r)&&H(l[r],s,c);r=!0}else a.registrationName?(H(a.registrationName,s,c),r=!0):r=!1;if(!r)throw Error(i(98,n,e))}}}}function H(e,t,o){if(U[e])throw Error(i(100,e));U[e]=t,W[e]=t.eventTypes[o].dependencies}var O=[],L={},U={},W={};function $(e){var t,o=!1;for(t in e)if(e.hasOwnProperty(t)){var n=e[t];if(!F.hasOwnProperty(t)||F[t]!==n){if(F[t])throw Error(i(102,t));F[t]=n,o=!0}}o&&I()}var Q=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),K=null,Y=null,J=null;function Z(e){if(e=f(e)){if("function"!=typeof K)throw Error(i(280));var t=e.stateNode;t&&(t=p(t),K(e.stateNode,e.type,t))}}function X(e){Y?J?J.push(e):J=[e]:Y=e}function ee(){if(Y){var e=Y,t=J;if(J=Y=null,Z(e),t)for(e=0;e<t.length;e++)Z(t[e])}}function te(e,t){return e(t)}function oe(e,t,o,n,r){return e(t,o,n,r)}function ne(){}var re=te,ae=!1,ie=!1;function se(){null===Y&&null===J||(ne(),ee())}function ce(e,t,o){if(ie)return e(t,o);ie=!0;try{return re(e,t,o)}finally{ie=!1,se()}}var le=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ue=Object.prototype.hasOwnProperty,me={},de={};function he(e,t,o,n,r,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=r,this.mustUseProperty=o,this.propertyName=e,this.type=t,this.sanitizeURL=a}var pe={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){pe[e]=new he(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];pe[t]=new he(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){pe[e]=new he(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){pe[e]=new he(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){pe[e]=new he(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){pe[e]=new he(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){pe[e]=new he(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){pe[e]=new he(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){pe[e]=new he(e,5,!1,e.toLowerCase(),null,!1)}));var fe=/[\-:]([a-z])/g;function ge(e){return e[1].toUpperCase()}function be(e,t,o,n){var r=pe.hasOwnProperty(t)?pe[t]:null;(null!==r?0===r.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,o,n){if(null==t||function(e,t,o,n){if(null!==o&&0===o.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==o?!o.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,o,n))return!0;if(n)return!1;if(null!==o)switch(o.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,o,r,n)&&(o=null),n||null===r?function(e){return!!ue.call(de,e)||!ue.call(me,e)&&(le.test(e)?de[e]=!0:(me[e]=!0,!1))}(t)&&(null===o?e.removeAttribute(t):e.setAttribute(t,""+o)):r.mustUseProperty?e[r.propertyName]=null===o?3!==r.type&&"":o:(t=r.attributeName,n=r.attributeNamespace,null===o?e.removeAttribute(t):(o=3===(r=r.type)||4===r&&!0===o?"":""+o,n?e.setAttributeNS(n,t,o):e.setAttribute(t,o))))}function ve(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",o=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==o&&"function"==typeof o.get&&"function"==typeof o.set){var r=o.get,a=o.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:o.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var o=t.getValue(),n="";return e&&(n=ye(e)?e.checked?"true":"false":e.value),(e=n)!==o&&(t.setValue(e),!0)}function Ce(e,t){var o=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=o?o:e._wrapperState.initialChecked})}function Ae(e,t){var o=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;o=ve(null!=t.value?t.value:o),e._wrapperState={initialChecked:n,initialValue:o,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xe(e,t){null!=(t=t.checked)&&be(e,"checked",t,!1)}function Ee(e,t){xe(e,t);var o=ve(t.value),n=t.type;if(null!=o)"number"===n?(0===o&&""===e.value||e.value!=o)&&(e.value=""+o):e.value!==""+o&&(e.value=""+o);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?Me(e,t.type,o):t.hasOwnProperty("defaultValue")&&Me(e,t.type,ve(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function _e(e,t,o){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,o||t===e.value||(e.value=t),e.defaultValue=t}""!==(o=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==o&&(e.name=o)}function Me(e,t,o){"number"===t&&e.ownerDocument.activeElement===e||(null==o?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+o&&(e.defaultValue=""+o))}function De(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Te(e,t,o,n){if(e=e.options,t){t={};for(var r=0;r<o.length;r++)t["$"+o[r]]=!0;for(o=0;o<e.length;o++)r=t.hasOwnProperty("$"+e[o].value),e[o].selected!==r&&(e[o].selected=r),r&&n&&(e[o].defaultSelected=!0)}else{for(o=""+ve(o),t=null,r=0;r<e.length;r++){if(e[r].value===o)return e[r].selected=!0,void(n&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function Se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function qe(e,t){var o=t.value;if(null==o){if(o=t.children,t=t.defaultValue,null!=o){if(null!=t)throw Error(i(92));if(Array.isArray(o)){if(!(1>=o.length))throw Error(i(93));o=o[0]}t=o}null==t&&(t=""),o=t}e._wrapperState={initialValue:ve(o)}}function Re(e,t){var o=ve(t.value),n=ve(t.defaultValue);null!=o&&((o=""+o)!==e.value&&(e.value=o),null==t.defaultValue&&e.defaultValue!==o&&(e.defaultValue=o)),null!=n&&(e.defaultValue=""+n)}function ze(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(fe,ge);pe[t]=new he(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(fe,ge);pe[t]=new he(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(fe,ge);pe[t]=new he(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){pe[e]=new he(e,1,!1,e.toLowerCase(),null,!1)})),pe.xlinkHref=new he("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){pe[e]=new he(e,1,!1,e.toLowerCase(),null,!0)}));var Ve="http://www.w3.org/1999/xhtml",Be="http://www.w3.org/2000/svg";function Ge(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ge(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ne,je=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,o,n,r){MSApp.execUnsafeLocalFunction((function(){return e(t,o)}))}:e}((function(e,t){if(e.namespaceURI!==Be||"innerHTML"in e)e.innerHTML=t;else{for((Ne=Ne||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ne.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Fe(e,t){if(t){var o=e.firstChild;if(o&&o===e.lastChild&&3===o.nodeType)return void(o.nodeValue=t)}e.textContent=t}function Ie(e,t){var o={};return o[e.toLowerCase()]=t.toLowerCase(),o["Webkit"+e]="webkit"+t,o["Moz"+e]="moz"+t,o}var He={animationend:Ie("Animation","AnimationEnd"),animationiteration:Ie("Animation","AnimationIteration"),animationstart:Ie("Animation","AnimationStart"),transitionend:Ie("Transition","TransitionEnd")},Oe={},Le={};function Ue(e){if(Oe[e])return Oe[e];if(!He[e])return e;var t,o=He[e];for(t in o)if(o.hasOwnProperty(t)&&t in Le)return Oe[e]=o[t];return e}Q&&(Le=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var We=Ue("animationend"),$e=Ue("animationiteration"),Qe=Ue("animationstart"),Ke=Ue("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Je=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Je.get(e);return void 0===t&&(t=new Map,Je.set(e,t)),t}function Xe(e){var t=e,o=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(o=t.return),e=t.return}while(e)}return 3===t.tag?o:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Xe(e)!==e)throw Error(i(188))}function ot(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(i(188));return t!==e?null:e}for(var o=e,n=t;;){var r=o.return;if(null===r)break;var a=r.alternate;if(null===a){if(null!==(n=r.return)){o=n;continue}break}if(r.child===a.child){for(a=r.child;a;){if(a===o)return tt(r),e;if(a===n)return tt(r),t;a=a.sibling}throw Error(i(188))}if(o.return!==n.return)o=r,n=a;else{for(var s=!1,c=r.child;c;){if(c===o){s=!0,o=r,n=a;break}if(c===n){s=!0,n=r,o=a;break}c=c.sibling}if(!s){for(c=a.child;c;){if(c===o){s=!0,o=a,n=r;break}if(c===n){s=!0,n=a,o=r;break}c=c.sibling}if(!s)throw Error(i(189))}}if(o.alternate!==n)throw Error(i(190))}if(3!==o.tag)throw Error(i(188));return o.stateNode.current===o?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function rt(e,t,o){Array.isArray(e)?e.forEach(t,o):e&&t.call(o,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,o=e._dispatchInstances;if(Array.isArray(t))for(var n=0;n<t.length&&!e.isPropagationStopped();n++)b(e,t[n],o[n]);else t&&b(e,t,o);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(at=nt(at,e)),e=at,at=null,e){if(rt(e,it),at)throw Error(i(95));if(u)throw e=m,u=!1,m=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!Q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ut=[];function mt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ut.length&&ut.push(e)}function dt(e,t,o,n){if(ut.length){var r=ut.pop();return r.topLevelType=e,r.eventSystemFlags=n,r.nativeEvent=t,r.targetInst=o,r}return{topLevelType:e,eventSystemFlags:n,nativeEvent:t,targetInst:o,ancestors:[]}}function ht(e){var t=e.targetInst,o=t;do{if(!o){e.ancestors.push(o);break}var n=o;if(3===n.tag)n=n.stateNode.containerInfo;else{for(;n.return;)n=n.return;n=3!==n.tag?null:n.stateNode.containerInfo}if(!n)break;5!==(t=o.tag)&&6!==t||e.ancestors.push(o),o=Mo(n)}while(o);for(o=0;o<e.ancestors.length;o++){t=e.ancestors[o];var r=ct(e.nativeEvent);n=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===o&&(i|=64);for(var s=null,c=0;c<O.length;c++){var l=O[c];l&&(l=l.extractEvents(n,t,a,r,i))&&(s=nt(s,l))}st(s)}}function pt(e,t,o){if(!o.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),o.set("blur",null),o.set("focus",null);break;case"cancel":case"close":lt(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&$t(e,t)}o.set(e,null)}}var ft,gt,bt,vt=!1,yt=[],wt=null,kt=null,Ct=null,At=new Map,xt=new Map,Et=[],_t="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Mt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Dt(e,t,o,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|o,nativeEvent:r,container:n}}function Tt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":kt=null;break;case"mouseover":case"mouseout":Ct=null;break;case"pointerover":case"pointerout":At.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":xt.delete(t.pointerId)}}function St(e,t,o,n,r,a){return null===e||e.nativeEvent!==a?(e=Dt(t,o,n,r,a),null!==t&&(null!==(t=Do(t))&&gt(t)),e):(e.eventSystemFlags|=n,e)}function qt(e){var t=Mo(e.target);if(null!==t){var o=Xe(t);if(null!==o)if(13===(t=o.tag)){if(null!==(t=et(o)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){bt(o)}))}else if(3===t&&o.stateNode.hydrate)return void(e.blockedOn=3===o.tag?o.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var o=Do(t);return null!==o&&gt(o),e.blockedOn=t,!1}return!0}function zt(e,t,o){Rt(e)&&o.delete(t)}function Vt(){for(vt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Do(e.blockedOn))&&ft(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==wt&&Rt(wt)&&(wt=null),null!==kt&&Rt(kt)&&(kt=null),null!==Ct&&Rt(Ct)&&(Ct=null),At.forEach(zt),xt.forEach(zt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,vt||(vt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Vt)))}function Gt(e){function t(t){return Bt(t,e)}if(0<yt.length){Bt(yt[0],e);for(var o=1;o<yt.length;o++){var n=yt[o];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==wt&&Bt(wt,e),null!==kt&&Bt(kt,e),null!==Ct&&Bt(Ct,e),At.forEach(t),xt.forEach(t),o=0;o<Et.length;o++)(n=Et[o]).blockedOn===e&&(n.blockedOn=null);for(;0<Et.length&&null===(o=Et[0]).blockedOn;)qt(o),null===o.blockedOn&&Et.shift()}var Pt={},Nt=new Map,jt=new Map,Ft=["abort","abort",We,"animationEnd",$e,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function It(e,t){for(var o=0;o<e.length;o+=2){var n=e[o],r=e[o+1],a="on"+(r[0].toUpperCase()+r.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[n],eventPriority:t},jt.set(n,t),Nt.set(n,a),Pt[r]=a}}It("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Ft,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ot=0;Ot<Ht.length;Ot++)jt.set(Ht[Ot],0);var Lt=a.unstable_UserBlockingPriority,Ut=a.unstable_runWithPriority,Wt=!0;function $t(e,t){Qt(t,e,!1)}function Qt(e,t,o){var n=jt.get(t);switch(void 0===n?2:n){case 0:n=Kt.bind(null,t,1,e);break;case 1:n=Yt.bind(null,t,1,e);break;default:n=Jt.bind(null,t,1,e)}o?e.addEventListener(t,n,!0):e.addEventListener(t,n,!1)}function Kt(e,t,o,n){ae||ne();var r=Jt,a=ae;ae=!0;try{oe(r,e,t,o,n)}finally{(ae=a)||se()}}function Yt(e,t,o,n){Ut(Lt,Jt.bind(null,e,t,o,n))}function Jt(e,t,o,n){if(Wt)if(0<yt.length&&-1<_t.indexOf(e))e=Dt(null,e,t,o,n),yt.push(e);else{var r=Zt(e,t,o,n);if(null===r)Tt(e,n);else if(-1<_t.indexOf(e))e=Dt(r,e,t,o,n),yt.push(e);else if(!function(e,t,o,n,r){switch(t){case"focus":return wt=St(wt,e,t,o,n,r),!0;case"dragenter":return kt=St(kt,e,t,o,n,r),!0;case"mouseover":return Ct=St(Ct,e,t,o,n,r),!0;case"pointerover":var a=r.pointerId;return At.set(a,St(At.get(a)||null,e,t,o,n,r)),!0;case"gotpointercapture":return a=r.pointerId,xt.set(a,St(xt.get(a)||null,e,t,o,n,r)),!0}return!1}(r,e,t,o,n)){Tt(e,n),e=dt(e,n,null,t);try{ce(ht,e)}finally{mt(e)}}}}function Zt(e,t,o,n){if(null!==(o=Mo(o=ct(n)))){var r=Xe(o);if(null===r)o=null;else{var a=r.tag;if(13===a){if(null!==(o=et(r)))return o;o=null}else if(3===a){if(r.stateNode.hydrate)return 3===r.tag?r.stateNode.containerInfo:null;o=null}else r!==o&&(o=null)}}e=dt(e,n,o,t);try{ce(ht,e)}finally{mt(e)}return null}var Xt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eo=["Webkit","ms","Moz","O"];function to(e,t,o){return null==t||"boolean"==typeof t||""===t?"":o||"number"!=typeof t||0===t||Xt.hasOwnProperty(e)&&Xt[e]?(""+t).trim():t+"px"}function oo(e,t){for(var o in e=e.style,t)if(t.hasOwnProperty(o)){var n=0===o.indexOf("--"),r=to(o,t[o],n);"float"===o&&(o="cssFloat"),n?e.setProperty(o,r):e[o]=r}}Object.keys(Xt).forEach((function(e){eo.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Xt[t]=Xt[e]}))}));var no=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ro(e,t){if(t){if(no[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var io=Ve;function so(e,t){var o=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=W[t];for(var n=0;n<t.length;n++)pt(t[n],e,o)}function co(){}function lo(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function uo(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function mo(e,t){var o,n=uo(e);for(e=0;n;){if(3===n.nodeType){if(o=e+n.textContent.length,e<=t&&o>=t)return{node:n,offset:t-e};e=o}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=uo(n)}}function ho(){for(var e=window,t=lo();t instanceof e.HTMLIFrameElement;){try{var o="string"==typeof t.contentWindow.location.href}catch(e){o=!1}if(!o)break;t=lo((e=t.contentWindow).document)}return t}function po(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var fo=null,go=null;function bo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vo(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yo="function"==typeof setTimeout?setTimeout:void 0,wo="function"==typeof clearTimeout?clearTimeout:void 0;function ko(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var o=e.data;if("$"===o||"$!"===o||"$?"===o){if(0===t)return e;t--}else"/$"===o&&t++}e=e.previousSibling}return null}var Ao=Math.random().toString(36).slice(2),xo="__reactInternalInstance$"+Ao,Eo="__reactEventHandlers$"+Ao,_o="__reactContainere$"+Ao;function Mo(e){var t=e[xo];if(t)return t;for(var o=e.parentNode;o;){if(t=o[_o]||o[xo]){if(o=t.alternate,null!==t.child||null!==o&&null!==o.child)for(e=Co(e);null!==e;){if(o=e[xo])return o;e=Co(e)}return t}o=(e=o).parentNode}return null}function Do(e){return!(e=e[xo]||e[_o])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function To(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function So(e){return e[Eo]||null}function qo(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ro(e,t){var o=e.stateNode;if(!o)return null;var n=p(o);if(!n)return null;o=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(o&&"function"!=typeof o)throw Error(i(231,t,typeof o));return o}function zo(e,t,o){(t=Ro(e,o.dispatchConfig.phasedRegistrationNames[t]))&&(o._dispatchListeners=nt(o._dispatchListeners,t),o._dispatchInstances=nt(o._dispatchInstances,e))}function Vo(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,o=[];t;)o.push(t),t=qo(t);for(t=o.length;0<t--;)zo(o[t],"captured",e);for(t=0;t<o.length;t++)zo(o[t],"bubbled",e)}}function Bo(e,t,o){e&&o&&o.dispatchConfig.registrationName&&(t=Ro(e,o.dispatchConfig.registrationName))&&(o._dispatchListeners=nt(o._dispatchListeners,t),o._dispatchInstances=nt(o._dispatchInstances,e))}function Go(e){e&&e.dispatchConfig.registrationName&&Bo(e._targetInst,null,e)}function Po(e){rt(e,Vo)}var No=null,jo=null,Fo=null;function Io(){if(Fo)return Fo;var e,t,o=jo,n=o.length,r="value"in No?No.value:No.textContent,a=r.length;for(e=0;e<n&&o[e]===r[e];e++);var i=n-e;for(t=1;t<=i&&o[n-t]===r[a-t];t++);return Fo=r.slice(e,1<t?1-t:void 0)}function Ho(){return!0}function Oo(){return!1}function Lo(e,t,o,n){for(var r in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=o,e=this.constructor.Interface)e.hasOwnProperty(r)&&((t=e[r])?this[r]=t(o):"target"===r?this.target=n:this[r]=o[r]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Ho:Oo,this.isPropagationStopped=Oo,this}function Uo(e,t,o,n){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,o,n),r}return new this(e,t,o,n)}function Wo(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function $o(e){e.eventPool=[],e.getPooled=Uo,e.release=Wo}r(Lo.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Ho)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Ho)},persist:function(){this.isPersistent=Ho},isPersistent:Oo,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Oo,this._dispatchInstances=this._dispatchListeners=null}}),Lo.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Lo.extend=function(e){function t(){}function o(){return n.apply(this,arguments)}var n=this;t.prototype=n.prototype;var a=new t;return r(a,o.prototype),o.prototype=a,o.prototype.constructor=o,o.Interface=r({},n.Interface,e),o.extend=n.extend,$o(o),o},$o(Lo);var Qo=Lo.extend({data:null}),Ko=Lo.extend({data:null}),Yo=[9,13,27,32],Jo=Q&&"CompositionEvent"in window,Zo=null;Q&&"documentMode"in document&&(Zo=document.documentMode);var Xo=Q&&"TextEvent"in window&&!Zo,en=Q&&(!Jo||Zo&&8<Zo&&11>=Zo),tn=String.fromCharCode(32),on={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},nn=!1;function rn(e,t){switch(e){case"keyup":return-1!==Yo.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function an(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var sn=!1;var cn={eventTypes:on,extractEvents:function(e,t,o,n){var r;if(Jo)e:{switch(e){case"compositionstart":var a=on.compositionStart;break e;case"compositionend":a=on.compositionEnd;break e;case"compositionupdate":a=on.compositionUpdate;break e}a=void 0}else sn?rn(e,o)&&(a=on.compositionEnd):"keydown"===e&&229===o.keyCode&&(a=on.compositionStart);return a?(en&&"ko"!==o.locale&&(sn||a!==on.compositionStart?a===on.compositionEnd&&sn&&(r=Io()):(jo="value"in(No=n)?No.value:No.textContent,sn=!0)),a=Qo.getPooled(a,t,o,n),r?a.data=r:null!==(r=an(o))&&(a.data=r),Po(a),r=a):r=null,(e=Xo?function(e,t){switch(e){case"compositionend":return an(t);case"keypress":return 32!==t.which?null:(nn=!0,tn);case"textInput":return(e=t.data)===tn&&nn?null:e;default:return null}}(e,o):function(e,t){if(sn)return"compositionend"===e||!Jo&&rn(e,t)?(e=Io(),Fo=jo=No=null,sn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return en&&"ko"!==t.locale?null:t.data;default:return null}}(e,o))?((t=Ko.getPooled(on.beforeInput,t,o,n)).data=e,Po(t)):t=null,null===r?t:null===t?r:[r,t]}},ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ln[e.type]:"textarea"===t}var mn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dn(e,t,o){return(e=Lo.getPooled(mn.change,e,t,o)).type="change",X(o),Po(e),e}var hn=null,pn=null;function fn(e){st(e)}function gn(e){if(ke(To(e)))return e}function bn(e,t){if("change"===e)return t}var vn=!1;function yn(){hn&&(hn.detachEvent("onpropertychange",wn),pn=hn=null)}function wn(e){if("value"===e.propertyName&&gn(pn))if(e=dn(pn,e,ct(e)),ae)st(e);else{ae=!0;try{te(fn,e)}finally{ae=!1,se()}}}function kn(e,t,o){"focus"===e?(yn(),pn=o,(hn=t).attachEvent("onpropertychange",wn)):"blur"===e&&yn()}function Cn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return gn(pn)}function An(e,t){if("click"===e)return gn(t)}function xn(e,t){if("input"===e||"change"===e)return gn(t)}Q&&(vn=lt("input")&&(!document.documentMode||9<document.documentMode));var En={eventTypes:mn,_isInputEventSupported:vn,extractEvents:function(e,t,o,n){var r=t?To(t):window,a=r.nodeName&&r.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===r.type)var i=bn;else if(un(r))if(vn)i=xn;else{i=Cn;var s=kn}else(a=r.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(i=An);if(i&&(i=i(e,t)))return dn(i,o,n);s&&s(e,r,t),"blur"===e&&(e=r._wrapperState)&&e.controlled&&"number"===r.type&&Me(r,"number",r.value)}},_n=Lo.extend({view:null,detail:null}),Mn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Mn[e])&&!!t[e]}function Tn(){return Dn}var Sn=0,qn=0,Rn=!1,zn=!1,Vn=_n.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Tn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Sn;return Sn=e.screenX,Rn?"mousemove"===e.type?e.screenX-t:0:(Rn=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qn;return qn=e.screenY,zn?"mousemove"===e.type?e.screenY-t:0:(zn=!0,0)}}),Bn=Vn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Gn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Pn={eventTypes:Gn,extractEvents:function(e,t,o,n,r){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&r)&&(o.relatedTarget||o.fromElement)||!i&&!a)return null;(a=n.window===n?n:(a=n.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=o.relatedTarget||o.toElement)?Mo(t):null)&&(t!==Xe(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var s=Vn,c=Gn.mouseLeave,l=Gn.mouseEnter,u="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=Bn,c=Gn.pointerLeave,l=Gn.pointerEnter,u="pointer");if(e=null==i?a:To(i),a=null==t?a:To(t),(c=s.getPooled(c,i,o,n)).type=u+"leave",c.target=e,c.relatedTarget=a,(o=s.getPooled(l,t,o,n)).type=u+"enter",o.target=a,o.relatedTarget=e,u=t,(n=i)&&u)e:{for(l=u,i=0,e=s=n;e;e=qo(e))i++;for(e=0,t=l;t;t=qo(t))e++;for(;0<i-e;)s=qo(s),i--;for(;0<e-i;)l=qo(l),e--;for(;i--;){if(s===l||s===l.alternate)break e;s=qo(s),l=qo(l)}s=null}else s=null;for(l=s,s=[];n&&n!==l&&(null===(i=n.alternate)||i!==l);)s.push(n),n=qo(n);for(n=[];u&&u!==l&&(null===(i=u.alternate)||i!==l);)n.push(u),u=qo(u);for(u=0;u<s.length;u++)Bo(s[u],"bubbled",c);for(u=n.length;0<u--;)Bo(n[u],"captured",o);return 0==(64&r)?[c]:[c,o]}};var Nn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},jn=Object.prototype.hasOwnProperty;function Fn(e,t){if(Nn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var o=Object.keys(e),n=Object.keys(t);if(o.length!==n.length)return!1;for(n=0;n<o.length;n++)if(!jn.call(t,o[n])||!Nn(e[o[n]],t[o[n]]))return!1;return!0}var In=Q&&"documentMode"in document&&11>=document.documentMode,Hn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},On=null,Ln=null,Un=null,Wn=!1;function $n(e,t){var o=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wn||null==On||On!==lo(o)?null:("selectionStart"in(o=On)&&po(o)?o={start:o.selectionStart,end:o.selectionEnd}:o={anchorNode:(o=(o.ownerDocument&&o.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:o.anchorOffset,focusNode:o.focusNode,focusOffset:o.focusOffset},Un&&Fn(Un,o)?null:(Un=o,(e=Lo.getPooled(Hn.select,Ln,e,t)).type="select",e.target=On,Po(e),e))}var Qn={eventTypes:Hn,extractEvents:function(e,t,o,n,r,a){if(!(a=!(r=a||(n.window===n?n.document:9===n.nodeType?n:n.ownerDocument)))){e:{r=Ze(r),a=W.onSelect;for(var i=0;i<a.length;i++)if(!r.has(a[i])){r=!1;break e}r=!0}a=!r}if(a)return null;switch(r=t?To(t):window,e){case"focus":(un(r)||"true"===r.contentEditable)&&(On=r,Ln=t,Un=null);break;case"blur":Un=Ln=On=null;break;case"mousedown":Wn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wn=!1,$n(o,n);case"selectionchange":if(In)break;case"keydown":case"keyup":return $n(o,n)}return null}},Kn=Lo.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yn=Lo.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jn=_n.extend({relatedTarget:null});function Zn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},er={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},tr=_n.extend({key:function(e){if(e.key){var t=Xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?er[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Tn,charCode:function(e){return"keypress"===e.type?Zn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),or=Vn.extend({dataTransfer:null}),nr=_n.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Tn}),rr=Lo.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ar=Vn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ir={eventTypes:Pt,extractEvents:function(e,t,o,n){var r=Nt.get(e);if(!r)return null;switch(e){case"keypress":if(0===Zn(o))return null;case"keydown":case"keyup":e=tr;break;case"blur":case"focus":e=Jn;break;case"click":if(2===o.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=or;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=nr;break;case We:case $e:case Qe:e=Kn;break;case Ke:e=rr;break;case"scroll":e=_n;break;case"wheel":e=ar;break;case"copy":case"cut":case"paste":e=Yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Bn;break;default:e=Lo}return Po(t=e.getPooled(r,t,o,n)),t}};if(j)throw Error(i(101));j=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),I(),p=So,f=Do,g=To,$({SimpleEventPlugin:ir,EnterLeaveEventPlugin:Pn,ChangeEventPlugin:En,SelectEventPlugin:Qn,BeforeInputEventPlugin:cn});var sr=[],cr=-1;function lr(e){0>cr||(e.current=sr[cr],sr[cr]=null,cr--)}function ur(e,t){cr++,sr[cr]=e.current,e.current=t}var mr={},dr={current:mr},hr={current:!1},pr=mr;function fr(e,t){var o=e.type.contextTypes;if(!o)return mr;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var r,a={};for(r in o)a[r]=t[r];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function gr(e){return null!=(e=e.childContextTypes)}function br(){lr(hr),lr(dr)}function vr(e,t,o){if(dr.current!==mr)throw Error(i(168));ur(dr,t),ur(hr,o)}function yr(e,t,o){var n=e.stateNode;if(e=t.childContextTypes,"function"!=typeof n.getChildContext)return o;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,P(t)||"Unknown",a));return r({},o,{},n)}function wr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||mr,pr=dr.current,ur(dr,e),ur(hr,hr.current),!0}function kr(e,t,o){var n=e.stateNode;if(!n)throw Error(i(169));o?(e=yr(e,t,pr),n.__reactInternalMemoizedMergedChildContext=e,lr(hr),lr(dr),ur(dr,e)):lr(hr),ur(hr,o)}var Cr=a.unstable_runWithPriority,Ar=a.unstable_scheduleCallback,xr=a.unstable_cancelCallback,Er=a.unstable_requestPaint,_r=a.unstable_now,Mr=a.unstable_getCurrentPriorityLevel,Dr=a.unstable_ImmediatePriority,Tr=a.unstable_UserBlockingPriority,Sr=a.unstable_NormalPriority,qr=a.unstable_LowPriority,Rr=a.unstable_IdlePriority,zr={},Vr=a.unstable_shouldYield,Br=void 0!==Er?Er:function(){},Gr=null,Pr=null,Nr=!1,jr=_r(),Fr=1e4>jr?_r:function(){return _r()-jr};function Ir(){switch(Mr()){case Dr:return 99;case Tr:return 98;case Sr:return 97;case qr:return 96;case Rr:return 95;default:throw Error(i(332))}}function Hr(e){switch(e){case 99:return Dr;case 98:return Tr;case 97:return Sr;case 96:return qr;case 95:return Rr;default:throw Error(i(332))}}function Or(e,t){return e=Hr(e),Cr(e,t)}function Lr(e,t,o){return e=Hr(e),Ar(e,t,o)}function Ur(e){return null===Gr?(Gr=[e],Pr=Ar(Dr,$r)):Gr.push(e),zr}function Wr(){if(null!==Pr){var e=Pr;Pr=null,xr(e)}$r()}function $r(){if(!Nr&&null!==Gr){Nr=!0;var e=0;try{var t=Gr;Or(99,(function(){for(;e<t.length;e++){var o=t[e];do{o=o(!0)}while(null!==o)}})),Gr=null}catch(t){throw null!==Gr&&(Gr=Gr.slice(e+1)),Ar(Dr,Wr),t}finally{Nr=!1}}}function Qr(e,t,o){return 1073741821-(1+((1073741821-e+t/10)/(o/=10)|0))*o}function Kr(e,t){if(e&&e.defaultProps)for(var o in t=r({},t),e=e.defaultProps)void 0===t[o]&&(t[o]=e[o]);return t}var Yr={current:null},Jr=null,Zr=null,Xr=null;function ea(){Xr=Zr=Jr=null}function ta(e){var t=Yr.current;lr(Yr),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var o=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==o&&o.childExpirationTime<t&&(o.childExpirationTime=t);else{if(!(null!==o&&o.childExpirationTime<t))break;o.childExpirationTime=t}e=e.return}}function na(e,t){Jr=e,Xr=Zr=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Si=!0),e.firstContext=null)}function ra(e,t){if(Xr!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xr=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zr){if(null===Jr)throw Error(i(308));Zr=t,Jr.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zr=Zr.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function sa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ca(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function la(e,t){if(null!==(e=e.updateQueue)){var o=(e=e.shared).pending;null===o?t.next=t:(t.next=o.next,o.next=t),e.pending=t}}function ua(e,t){var o=e.alternate;null!==o&&sa(o,e),null===(o=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=o.next,o.next=t)}function ma(e,t,o,n){var a=e.updateQueue;aa=!1;var i=a.baseQueue,s=a.shared.pending;if(null!==s){if(null!==i){var c=i.next;i.next=s.next,s.next=c}i=s,a.shared.pending=null,null!==(c=e.alternate)&&(null!==(c=c.updateQueue)&&(c.baseQueue=s))}if(null!==i){c=i.next;var l=a.baseState,u=0,m=null,d=null,h=null;if(null!==c)for(var p=c;;){if((s=p.expirationTime)<n){var f={expirationTime:p.expirationTime,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null};null===h?(d=h=f,m=l):h=h.next=f,s>u&&(u=s)}else{null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:p.suspenseConfig,tag:p.tag,payload:p.payload,callback:p.callback,next:null}),ac(s,p.suspenseConfig);e:{var g=e,b=p;switch(s=t,f=o,b.tag){case 1:if("function"==typeof(g=b.payload)){l=g.call(f,l,s);break e}l=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(s="function"==typeof(g=b.payload)?g.call(f,l,s):g))break e;l=r({},l,s);break e;case 2:aa=!0}}null!==p.callback&&(e.effectTag|=32,null===(s=a.effects)?a.effects=[p]:s.push(p))}if(null===(p=p.next)||p===c){if(null===(s=a.shared.pending))break;p=i.next=s.next,s.next=c,a.baseQueue=i=s,a.shared.pending=null}}null===h?m=l:h.next=d,a.baseState=m,a.baseQueue=h,ic(u),e.expirationTime=u,e.memoizedState=l}}function da(e,t,o){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],r=n.callback;if(null!==r){if(n.callback=null,n=r,r=o,"function"!=typeof n)throw Error(i(191,n));n.call(r)}}}var ha=v.ReactCurrentBatchConfig,pa=(new n.Component).refs;function fa(e,t,o,n){o=null==(o=o(n,t=e.memoizedState))?t:r({},t,o),e.memoizedState=o,0===e.expirationTime&&(e.updateQueue.baseState=o)}var ga={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Xe(e)===e},enqueueSetState:function(e,t,o){e=e._reactInternalFiber;var n=Ws(),r=ha.suspense;(r=ca(n=$s(n,e,r),r)).payload=t,null!=o&&(r.callback=o),la(e,r),Qs(e,n)},enqueueReplaceState:function(e,t,o){e=e._reactInternalFiber;var n=Ws(),r=ha.suspense;(r=ca(n=$s(n,e,r),r)).tag=1,r.payload=t,null!=o&&(r.callback=o),la(e,r),Qs(e,n)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var o=Ws(),n=ha.suspense;(n=ca(o=$s(o,e,n),n)).tag=2,null!=t&&(n.callback=t),la(e,n),Qs(e,o)}};function ba(e,t,o,n,r,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Fn(o,n)||!Fn(r,a))}function va(e,t,o){var n=!1,r=mr,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(r=gr(t)?pr:dr.current,a=(n=null!=(n=t.contextTypes))?fr(e,r):mr),t=new t(o,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternalFiber=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,o,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(o,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(o,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function wa(e,t,o,n){var r=e.stateNode;r.props=o,r.state=e.memoizedState,r.refs=pa,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?r.context=ra(a):(a=gr(t)?pr:dr.current,r.context=fr(e,a)),ma(e,o,r,n),r.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(fa(e,t,a,o),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&ga.enqueueReplaceState(r,r.state,null),ma(e,o,r,n),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var ka=Array.isArray;function Ca(e,t,o){if(null!==(e=o.ref)&&"function"!=typeof e&&"object"!=typeof e){if(o._owner){if(o=o._owner){if(1!==o.tag)throw Error(i(309));var n=o.stateNode}if(!n)throw Error(i(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=n.refs;t===pa&&(t=n.refs={}),null===e?delete t[r]:t[r]=e})._stringRef=r,t)}if("string"!=typeof e)throw Error(i(284));if(!o._owner)throw Error(i(290,e))}return e}function Aa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function xa(e){function t(t,o){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=o,t.lastEffect=o):t.firstEffect=t.lastEffect=o,o.nextEffect=null,o.effectTag=8}}function o(o,n){if(!e)return null;for(;null!==n;)t(o,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=_c(e,t)).index=0,e.sibling=null,e}function a(t,o,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<o?(t.effectTag=2,o):n:(t.effectTag=2,o):o}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function c(e,t,o,n){return null===t||6!==t.tag?((t=Tc(o,e.mode,n)).return=e,t):((t=r(t,o)).return=e,t)}function l(e,t,o,n){return null!==t&&t.elementType===o.type?((n=r(t,o.props)).ref=Ca(e,t,o),n.return=e,n):((n=Mc(o.type,o.key,o.props,null,e.mode,n)).ref=Ca(e,t,o),n.return=e,n)}function u(e,t,o,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==o.containerInfo||t.stateNode.implementation!==o.implementation?((t=Sc(o,e.mode,n)).return=e,t):((t=r(t,o.children||[])).return=e,t)}function m(e,t,o,n,a){return null===t||7!==t.tag?((t=Dc(o,e.mode,n,a)).return=e,t):((t=r(t,o)).return=e,t)}function d(e,t,o){if("string"==typeof t||"number"==typeof t)return(t=Tc(""+t,e.mode,o)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(o=Mc(t.type,t.key,t.props,null,e.mode,o)).ref=Ca(e,null,t),o.return=e,o;case C:return(t=Sc(t,e.mode,o)).return=e,t}if(ka(t)||G(t))return(t=Dc(t,e.mode,o,null)).return=e,t;Aa(e,t)}return null}function h(e,t,o,n){var r=null!==t?t.key:null;if("string"==typeof o||"number"==typeof o)return null!==r?null:c(e,t,""+o,n);if("object"==typeof o&&null!==o){switch(o.$$typeof){case k:return o.key===r?o.type===A?m(e,t,o.props.children,n,r):l(e,t,o,n):null;case C:return o.key===r?u(e,t,o,n):null}if(ka(o)||G(o))return null!==r?null:m(e,t,o,n,null);Aa(e,o)}return null}function p(e,t,o,n,r){if("string"==typeof n||"number"==typeof n)return c(t,e=e.get(o)||null,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return e=e.get(null===n.key?o:n.key)||null,n.type===A?m(t,e,n.props.children,r,n.key):l(t,e,n,r);case C:return u(t,e=e.get(null===n.key?o:n.key)||null,n,r)}if(ka(n)||G(n))return m(t,e=e.get(o)||null,n,r,null);Aa(t,n)}return null}function f(r,i,s,c){for(var l=null,u=null,m=i,f=i=0,g=null;null!==m&&f<s.length;f++){m.index>f?(g=m,m=null):g=m.sibling;var b=h(r,m,s[f],c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(r,m),i=a(b,i,f),null===u?l=b:u.sibling=b,u=b,m=g}if(f===s.length)return o(r,m),l;if(null===m){for(;f<s.length;f++)null!==(m=d(r,s[f],c))&&(i=a(m,i,f),null===u?l=m:u.sibling=m,u=m);return l}for(m=n(r,m);f<s.length;f++)null!==(g=p(m,r,f,s[f],c))&&(e&&null!==g.alternate&&m.delete(null===g.key?f:g.key),i=a(g,i,f),null===u?l=g:u.sibling=g,u=g);return e&&m.forEach((function(e){return t(r,e)})),l}function g(r,s,c,l){var u=G(c);if("function"!=typeof u)throw Error(i(150));if(null==(c=u.call(c)))throw Error(i(151));for(var m=u=null,f=s,g=s=0,b=null,v=c.next();null!==f&&!v.done;g++,v=c.next()){f.index>g?(b=f,f=null):b=f.sibling;var y=h(r,f,v.value,l);if(null===y){null===f&&(f=b);break}e&&f&&null===y.alternate&&t(r,f),s=a(y,s,g),null===m?u=y:m.sibling=y,m=y,f=b}if(v.done)return o(r,f),u;if(null===f){for(;!v.done;g++,v=c.next())null!==(v=d(r,v.value,l))&&(s=a(v,s,g),null===m?u=v:m.sibling=v,m=v);return u}for(f=n(r,f);!v.done;g++,v=c.next())null!==(v=p(f,r,g,v.value,l))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),s=a(v,s,g),null===m?u=v:m.sibling=v,m=v);return e&&f.forEach((function(e){return t(r,e)})),u}return function(e,n,a,c){var l="object"==typeof a&&null!==a&&a.type===A&&null===a.key;l&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case k:e:{for(u=a.key,l=n;null!==l;){if(l.key===u){switch(l.tag){case 7:if(a.type===A){o(e,l.sibling),(n=r(l,a.props.children)).return=e,e=n;break e}break;default:if(l.elementType===a.type){o(e,l.sibling),(n=r(l,a.props)).ref=Ca(e,l,a),n.return=e,e=n;break e}}o(e,l);break}t(e,l),l=l.sibling}a.type===A?((n=Dc(a.props.children,e.mode,c,a.key)).return=e,e=n):((c=Mc(a.type,a.key,a.props,null,e.mode,c)).ref=Ca(e,n,a),c.return=e,e=c)}return s(e);case C:e:{for(l=a.key;null!==n;){if(n.key===l){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){o(e,n.sibling),(n=r(n,a.children||[])).return=e,e=n;break e}o(e,n);break}t(e,n),n=n.sibling}(n=Sc(a,e.mode,c)).return=e,e=n}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==n&&6===n.tag?(o(e,n.sibling),(n=r(n,a)).return=e,e=n):(o(e,n),(n=Tc(a,e.mode,c)).return=e,e=n),s(e);if(ka(a))return f(e,n,a,c);if(G(a))return g(e,n,a,c);if(u&&Aa(e,a),void 0===a&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return o(e,n)}}var Ea=xa(!0),_a=xa(!1),Ma={},Da={current:Ma},Ta={current:Ma},Sa={current:Ma};function qa(e){if(e===Ma)throw Error(i(174));return e}function Ra(e,t){switch(ur(Sa,t),ur(Ta,e),ur(Da,Ma),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Pe(null,"");break;default:t=Pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lr(Da),ur(Da,t)}function za(){lr(Da),lr(Ta),lr(Sa)}function Va(e){qa(Sa.current);var t=qa(Da.current),o=Pe(t,e.type);t!==o&&(ur(Ta,e),ur(Da,o))}function Ba(e){Ta.current===e&&(lr(Da),lr(Ta))}var Ga={current:0};function Pa(e){for(var t=e;null!==t;){if(13===t.tag){var o=t.memoizedState;if(null!==o&&(null===(o=o.dehydrated)||"$?"===o.data||"$!"===o.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Na(e,t){return{responder:e,props:t}}var ja=v.ReactCurrentDispatcher,Fa=v.ReactCurrentBatchConfig,Ia=0,Ha=null,Oa=null,La=null,Ua=!1;function Wa(){throw Error(i(321))}function $a(e,t){if(null===t)return!1;for(var o=0;o<t.length&&o<e.length;o++)if(!Nn(e[o],t[o]))return!1;return!0}function Qa(e,t,o,n,r,a){if(Ia=a,Ha=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,ja.current=null===e||null===e.memoizedState?bi:vi,e=o(n,r),t.expirationTime===Ia){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,La=Oa=null,t.updateQueue=null,ja.current=yi,e=o(n,r)}while(t.expirationTime===Ia)}if(ja.current=gi,t=null!==Oa&&null!==Oa.next,Ia=0,La=Oa=Ha=null,Ua=!1,t)throw Error(i(300));return e}function Ka(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===La?Ha.memoizedState=La=e:La=La.next=e,La}function Ya(){if(null===Oa){var e=Ha.alternate;e=null!==e?e.memoizedState:null}else e=Oa.next;var t=null===La?Ha.memoizedState:La.next;if(null!==t)La=t,Oa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Oa=e).memoizedState,baseState:Oa.baseState,baseQueue:Oa.baseQueue,queue:Oa.queue,next:null},null===La?Ha.memoizedState=La=e:La=La.next=e}return La}function Ja(e,t){return"function"==typeof t?t(e):t}function Za(e){var t=Ya(),o=t.queue;if(null===o)throw Error(i(311));o.lastRenderedReducer=e;var n=Oa,r=n.baseQueue,a=o.pending;if(null!==a){if(null!==r){var s=r.next;r.next=a.next,a.next=s}n.baseQueue=r=a,o.pending=null}if(null!==r){r=r.next,n=n.baseState;var c=s=a=null,l=r;do{var u=l.expirationTime;if(u<Ia){var m={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===c?(s=c=m,a=n):c=c.next=m,u>Ha.expirationTime&&(Ha.expirationTime=u,ic(u))}else null!==c&&(c=c.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),ac(u,l.suspenseConfig),n=l.eagerReducer===e?l.eagerState:e(n,l.action);l=l.next}while(null!==l&&l!==r);null===c?a=n:c.next=s,Nn(n,t.memoizedState)||(Si=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=c,o.lastRenderedState=n}return[t.memoizedState,o.dispatch]}function Xa(e){var t=Ya(),o=t.queue;if(null===o)throw Error(i(311));o.lastRenderedReducer=e;var n=o.dispatch,r=o.pending,a=t.memoizedState;if(null!==r){o.pending=null;var s=r=r.next;do{a=e(a,s.action),s=s.next}while(s!==r);Nn(a,t.memoizedState)||(Si=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),o.lastRenderedState=a}return[a,n]}function ei(e){var t=Ka();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ja,lastRenderedState:e}).dispatch=fi.bind(null,Ha,e),[t.memoizedState,e]}function ti(e,t,o,n){return e={tag:e,create:t,destroy:o,deps:n,next:null},null===(t=Ha.updateQueue)?(t={lastEffect:null},Ha.updateQueue=t,t.lastEffect=e.next=e):null===(o=t.lastEffect)?t.lastEffect=e.next=e:(n=o.next,o.next=e,e.next=n,t.lastEffect=e),e}function oi(){return Ya().memoizedState}function ni(e,t,o,n){var r=Ka();Ha.effectTag|=e,r.memoizedState=ti(1|t,o,void 0,void 0===n?null:n)}function ri(e,t,o,n){var r=Ya();n=void 0===n?null:n;var a=void 0;if(null!==Oa){var i=Oa.memoizedState;if(a=i.destroy,null!==n&&$a(n,i.deps))return void ti(t,o,a,n)}Ha.effectTag|=e,r.memoizedState=ti(1|t,o,a,n)}function ai(e,t){return ni(516,4,e,t)}function ii(e,t){return ri(516,4,e,t)}function si(e,t){return ri(4,2,e,t)}function ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function li(e,t,o){return o=null!=o?o.concat([e]):null,ri(4,2,ci.bind(null,t,e),o)}function ui(){}function mi(e,t){return Ka().memoizedState=[e,void 0===t?null:t],e}function di(e,t){var o=Ya();t=void 0===t?null:t;var n=o.memoizedState;return null!==n&&null!==t&&$a(t,n[1])?n[0]:(o.memoizedState=[e,t],e)}function hi(e,t){var o=Ya();t=void 0===t?null:t;var n=o.memoizedState;return null!==n&&null!==t&&$a(t,n[1])?n[0]:(e=e(),o.memoizedState=[e,t],e)}function pi(e,t,o){var n=Ir();Or(98>n?98:n,(function(){e(!0)})),Or(97<n?97:n,(function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{e(!1),o()}finally{Fa.suspense=n}}))}function fi(e,t,o){var n=Ws(),r=ha.suspense;r={expirationTime:n=$s(n,e,r),suspenseConfig:r,action:o,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?r.next=r:(r.next=a.next,a.next=r),t.pending=r,a=e.alternate,e===Ha||null!==a&&a===Ha)Ua=!0,r.expirationTime=Ia,Ha.expirationTime=Ia;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=a(i,o);if(r.eagerReducer=a,r.eagerState=s,Nn(s,i))return}catch(e){}Qs(e,n)}}var gi={readContext:ra,useCallback:Wa,useContext:Wa,useEffect:Wa,useImperativeHandle:Wa,useLayoutEffect:Wa,useMemo:Wa,useReducer:Wa,useRef:Wa,useState:Wa,useDebugValue:Wa,useResponder:Wa,useDeferredValue:Wa,useTransition:Wa},bi={readContext:ra,useCallback:mi,useContext:ra,useEffect:ai,useImperativeHandle:function(e,t,o){return o=null!=o?o.concat([e]):null,ni(4,2,ci.bind(null,t,e),o)},useLayoutEffect:function(e,t){return ni(4,2,e,t)},useMemo:function(e,t){var o=Ka();return t=void 0===t?null:t,e=e(),o.memoizedState=[e,t],e},useReducer:function(e,t,o){var n=Ka();return t=void 0!==o?o(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=fi.bind(null,Ha,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Ka().memoizedState=e},useState:ei,useDebugValue:ui,useResponder:Na,useDeferredValue:function(e,t){var o=ei(e),n=o[0],r=o[1];return ai((function(){var o=Fa.suspense;Fa.suspense=void 0===t?null:t;try{r(e)}finally{Fa.suspense=o}}),[e,t]),n},useTransition:function(e){var t=ei(!1),o=t[0];return t=t[1],[mi(pi.bind(null,t,e),[t,e]),o]}},vi={readContext:ra,useCallback:di,useContext:ra,useEffect:ii,useImperativeHandle:li,useLayoutEffect:si,useMemo:hi,useReducer:Za,useRef:oi,useState:function(){return Za(Ja)},useDebugValue:ui,useResponder:Na,useDeferredValue:function(e,t){var o=Za(Ja),n=o[0],r=o[1];return ii((function(){var o=Fa.suspense;Fa.suspense=void 0===t?null:t;try{r(e)}finally{Fa.suspense=o}}),[e,t]),n},useTransition:function(e){var t=Za(Ja),o=t[0];return t=t[1],[di(pi.bind(null,t,e),[t,e]),o]}},yi={readContext:ra,useCallback:di,useContext:ra,useEffect:ii,useImperativeHandle:li,useLayoutEffect:si,useMemo:hi,useReducer:Xa,useRef:oi,useState:function(){return Xa(Ja)},useDebugValue:ui,useResponder:Na,useDeferredValue:function(e,t){var o=Xa(Ja),n=o[0],r=o[1];return ii((function(){var o=Fa.suspense;Fa.suspense=void 0===t?null:t;try{r(e)}finally{Fa.suspense=o}}),[e,t]),n},useTransition:function(e){var t=Xa(Ja),o=t[0];return t=t[1],[di(pi.bind(null,t,e),[t,e]),o]}},wi=null,ki=null,Ci=!1;function Ai(e,t){var o=xc(5,null,null,0);o.elementType="DELETED",o.type="DELETED",o.stateNode=t,o.return=e,o.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=o,e.lastEffect=o):e.firstEffect=e.lastEffect=o}function xi(e,t){switch(e.tag){case 5:var o=e.type;return null!==(t=1!==t.nodeType||o.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ei(e){if(Ci){var t=ki;if(t){var o=t;if(!xi(e,t)){if(!(t=ko(o.nextSibling))||!xi(e,t))return e.effectTag=-1025&e.effectTag|2,Ci=!1,void(wi=e);Ai(wi,o)}wi=e,ki=ko(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ci=!1,wi=e}}function _i(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wi=e}function Mi(e){if(e!==wi)return!1;if(!Ci)return _i(e),Ci=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!vo(t,e.memoizedProps))for(t=ki;t;)Ai(e,t),t=ko(t.nextSibling);if(_i(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var o=e.data;if("/$"===o){if(0===t){ki=ko(e.nextSibling);break e}t--}else"$"!==o&&"$!"!==o&&"$?"!==o||t++}e=e.nextSibling}ki=null}}else ki=wi?ko(e.stateNode.nextSibling):null;return!0}function Di(){ki=wi=null,Ci=!1}var Ti=v.ReactCurrentOwner,Si=!1;function qi(e,t,o,n){t.child=null===e?_a(t,null,o,n):Ea(t,e.child,o,n)}function Ri(e,t,o,n,r){o=o.render;var a=t.ref;return na(t,r),n=Qa(e,t,o,n,a,r),null===e||Si?(t.effectTag|=1,qi(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=r&&(e.expirationTime=0),Qi(e,t,r))}function zi(e,t,o,n,r,a){if(null===e){var i=o.type;return"function"!=typeof i||Ec(i)||void 0!==i.defaultProps||null!==o.compare||void 0!==o.defaultProps?((e=Mc(o.type,null,n,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Vi(e,t,i,n,r,a))}return i=e.child,r<a&&(r=i.memoizedProps,(o=null!==(o=o.compare)?o:Fn)(r,n)&&e.ref===t.ref)?Qi(e,t,a):(t.effectTag|=1,(e=_c(i,n)).ref=t.ref,e.return=t,t.child=e)}function Vi(e,t,o,n,r,a){return null!==e&&Fn(e.memoizedProps,n)&&e.ref===t.ref&&(Si=!1,r<a)?(t.expirationTime=e.expirationTime,Qi(e,t,a)):Gi(e,t,o,n,a)}function Bi(e,t){var o=t.ref;(null===e&&null!==o||null!==e&&e.ref!==o)&&(t.effectTag|=128)}function Gi(e,t,o,n,r){var a=gr(o)?pr:dr.current;return a=fr(t,a),na(t,r),o=Qa(e,t,o,n,a,r),null===e||Si?(t.effectTag|=1,qi(e,t,o,r),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=r&&(e.expirationTime=0),Qi(e,t,r))}function Pi(e,t,o,n,r){if(gr(o)){var a=!0;wr(t)}else a=!1;if(na(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),va(t,o,n),wa(t,o,n,r),n=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var c=i.context,l=o.contextType;"object"==typeof l&&null!==l?l=ra(l):l=fr(t,l=gr(o)?pr:dr.current);var u=o.getDerivedStateFromProps,m="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;m||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==n||c!==l)&&ya(t,i,n,l),aa=!1;var d=t.memoizedState;i.state=d,ma(t,n,i,r),c=t.memoizedState,s!==n||d!==c||hr.current||aa?("function"==typeof u&&(fa(t,o,u,n),c=t.memoizedState),(s=aa||ba(t,o,s,n,d,c,l))?(m||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=n,t.memoizedState=c),i.props=n,i.state=c,i.context=l,n=s):("function"==typeof i.componentDidMount&&(t.effectTag|=4),n=!1)}else i=t.stateNode,sa(e,t),s=t.memoizedProps,i.props=t.type===t.elementType?s:Kr(t.type,s),c=i.context,"object"==typeof(l=o.contextType)&&null!==l?l=ra(l):l=fr(t,l=gr(o)?pr:dr.current),(m="function"==typeof(u=o.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==n||c!==l)&&ya(t,i,n,l),aa=!1,c=t.memoizedState,i.state=c,ma(t,n,i,r),d=t.memoizedState,s!==n||c!==d||hr.current||aa?("function"==typeof u&&(fa(t,o,u,n),d=t.memoizedState),(u=aa||ba(t,o,s,n,c,d,l))?(m||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(n,d,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,d,l)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=n,t.memoizedState=d),i.props=n,i.state=d,i.context=l,n=u):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),n=!1);return Ni(e,t,o,n,a,r)}function Ni(e,t,o,n,r,a){Bi(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&kr(t,o,!1),Qi(e,t,a);n=t.stateNode,Ti.current=t;var s=i&&"function"!=typeof o.getDerivedStateFromError?null:n.render();return t.effectTag|=1,null!==e&&i?(t.child=Ea(t,e.child,null,a),t.child=Ea(t,null,s,a)):qi(e,t,s,a),t.memoizedState=n.state,r&&kr(t,o,!0),t.child}function ji(e){var t=e.stateNode;t.pendingContext?vr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vr(0,t.context,!1),Ra(e,t.containerInfo)}var Fi,Ii,Hi,Oi={dehydrated:null,retryTime:0};function Li(e,t,o){var n,r=t.mode,a=t.pendingProps,i=Ga.current,s=!1;if((n=0!=(64&t.effectTag))||(n=0!=(2&i)&&(null===e||null!==e.memoizedState)),n?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),ur(Ga,1&i),null===e){if(void 0!==a.fallback&&Ei(t),s){if(s=a.fallback,(a=Dc(null,r,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(o=Dc(s,r,o,null)).return=t,a.sibling=o,t.memoizedState=Oi,t.child=a,o}return r=a.children,t.memoizedState=null,t.child=_a(t,null,r,o)}if(null!==e.memoizedState){if(r=(e=e.child).sibling,s){if(a=a.fallback,(o=_c(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(o.child=s;null!==s;)s.return=o,s=s.sibling;return(r=_c(r,a)).return=t,o.sibling=r,o.childExpirationTime=0,t.memoizedState=Oi,t.child=o,r}return o=Ea(t,e.child,a.children,o),t.memoizedState=null,t.child=o}if(e=e.child,s){if(s=a.fallback,(a=Dc(null,r,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(o=Dc(s,r,o,null)).return=t,a.sibling=o,o.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Oi,t.child=a,o}return t.memoizedState=null,t.child=Ea(t,e,a.children,o)}function Ui(e,t){e.expirationTime<t&&(e.expirationTime=t);var o=e.alternate;null!==o&&o.expirationTime<t&&(o.expirationTime=t),oa(e.return,t)}function Wi(e,t,o,n,r,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:o,tailExpiration:0,tailMode:r,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=o,i.tailExpiration=0,i.tailMode=r,i.lastEffect=a)}function $i(e,t,o){var n=t.pendingProps,r=n.revealOrder,a=n.tail;if(qi(e,t,n.children,o),0!=(2&(n=Ga.current)))n=1&n|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ui(e,o);else if(19===e.tag)Ui(e,o);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(ur(Ga,n),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(o=t.child,r=null;null!==o;)null!==(e=o.alternate)&&null===Pa(e)&&(r=o),o=o.sibling;null===(o=r)?(r=t.child,t.child=null):(r=o.sibling,o.sibling=null),Wi(t,!1,r,o,a,t.lastEffect);break;case"backwards":for(o=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Pa(e)){t.child=r;break}e=r.sibling,r.sibling=o,o=r,r=e}Wi(t,!0,o,null,a,t.lastEffect);break;case"together":Wi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qi(e,t,o){null!==e&&(t.dependencies=e.dependencies);var n=t.expirationTime;if(0!==n&&ic(n),t.childExpirationTime<o)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(o=_c(e=t.child,e.pendingProps),t.child=o,o.return=t;null!==e.sibling;)e=e.sibling,(o=o.sibling=_c(e,e.pendingProps)).return=t;o.sibling=null}return t.child}function Ki(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var o=null;null!==t;)null!==t.alternate&&(o=t),t=t.sibling;null===o?e.tail=null:o.sibling=null;break;case"collapsed":o=e.tail;for(var n=null;null!==o;)null!==o.alternate&&(n=o),o=o.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Yi(e,t,o){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return gr(t.type)&&br(),null;case 3:return za(),lr(hr),lr(dr),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||!Mi(t)||(t.effectTag|=4),null;case 5:Ba(t),o=qa(Sa.current);var a=t.type;if(null!==e&&null!=t.stateNode)Ii(e,t,a,n,o),e.ref!==t.ref&&(t.effectTag|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=qa(Da.current),Mi(t)){n=t.stateNode,a=t.type;var s=t.memoizedProps;switch(n[xo]=t,n[Eo]=s,a){case"iframe":case"object":case"embed":$t("load",n);break;case"video":case"audio":for(e=0;e<Ye.length;e++)$t(Ye[e],n);break;case"source":$t("error",n);break;case"img":case"image":case"link":$t("error",n),$t("load",n);break;case"form":$t("reset",n),$t("submit",n);break;case"details":$t("toggle",n);break;case"input":Ae(n,s),$t("invalid",n),so(o,"onChange");break;case"select":n._wrapperState={wasMultiple:!!s.multiple},$t("invalid",n),so(o,"onChange");break;case"textarea":qe(n,s),$t("invalid",n),so(o,"onChange")}for(var c in ro(a,s),e=null,s)if(s.hasOwnProperty(c)){var l=s[c];"children"===c?"string"==typeof l?n.textContent!==l&&(e=["children",l]):"number"==typeof l&&n.textContent!==""+l&&(e=["children",""+l]):U.hasOwnProperty(c)&&null!=l&&so(o,c)}switch(a){case"input":we(n),_e(n,s,!0);break;case"textarea":we(n),ze(n);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(n.onclick=co)}o=e,t.updateQueue=o,null!==o&&(t.effectTag|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,e===io&&(e=Ge(a)),e===io?"script"===a?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=c.createElement(a,{is:n.is}):(e=c.createElement(a),"select"===a&&(c=e,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):e=c.createElementNS(e,a),e[xo]=t,e[Eo]=n,Fi(e,t),t.stateNode=e,c=ao(a,n),a){case"iframe":case"object":case"embed":$t("load",e),l=n;break;case"video":case"audio":for(l=0;l<Ye.length;l++)$t(Ye[l],e);l=n;break;case"source":$t("error",e),l=n;break;case"img":case"image":case"link":$t("error",e),$t("load",e),l=n;break;case"form":$t("reset",e),$t("submit",e),l=n;break;case"details":$t("toggle",e),l=n;break;case"input":Ae(e,n),l=Ce(e,n),$t("invalid",e),so(o,"onChange");break;case"option":l=De(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},l=r({},n,{value:void 0}),$t("invalid",e),so(o,"onChange");break;case"textarea":qe(e,n),l=Se(e,n),$t("invalid",e),so(o,"onChange");break;default:l=n}ro(a,l);var u=l;for(s in u)if(u.hasOwnProperty(s)){var m=u[s];"style"===s?oo(e,m):"dangerouslySetInnerHTML"===s?null!=(m=m?m.__html:void 0)&&je(e,m):"children"===s?"string"==typeof m?("textarea"!==a||""!==m)&&Fe(e,m):"number"==typeof m&&Fe(e,""+m):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(U.hasOwnProperty(s)?null!=m&&so(o,s):null!=m&&be(e,s,m,c))}switch(a){case"input":we(e),_e(e,n,!1);break;case"textarea":we(e),ze(e);break;case"option":null!=n.value&&e.setAttribute("value",""+ve(n.value));break;case"select":e.multiple=!!n.multiple,null!=(o=n.value)?Te(e,!!n.multiple,o,!1):null!=n.defaultValue&&Te(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=co)}bo(a,n)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Hi(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(i(166));o=qa(Sa.current),qa(Da.current),Mi(t)?(o=t.stateNode,n=t.memoizedProps,o[xo]=t,o.nodeValue!==n&&(t.effectTag|=4)):((o=(9===o.nodeType?o:o.ownerDocument).createTextNode(n))[xo]=t,t.stateNode=o)}return null;case 13:return lr(Ga),n=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=o,t):(o=null!==n,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Mi(t):(n=null!==(a=e.memoizedState),o||null===a||null!==(a=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=a,a.nextEffect=s):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),o&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ga.current)?Ms===ws&&(Ms=ks):(Ms!==ws&&Ms!==ks||(Ms=Cs),0!==Rs&&null!==xs&&(zc(xs,_s),Vc(xs,Rs)))),(o||n)&&(t.effectTag|=4),null);case 4:return za(),null;case 10:return ta(t),null;case 17:return gr(t.type)&&br(),null;case 19:if(lr(Ga),null===(n=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(s=n.rendering)){if(a)Ki(n,!1);else if(Ms!==ws||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=Pa(s))){for(t.effectTag|=64,Ki(n,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=t.child;null!==n;)s=o,(a=n).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=s,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,s=e.dependencies,a.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),n=n.sibling;return ur(Ga,1&Ga.current|2),t.child}s=s.sibling}}else{if(!a)if(null!==(e=Pa(s))){if(t.effectTag|=64,a=!0,null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),Ki(n,!0),null===n.tail&&"hidden"===n.tailMode&&!s.alternate)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Fr()-n.renderingStartTime>n.tailExpiration&&1<o&&(t.effectTag|=64,a=!0,Ki(n,!1),t.expirationTime=t.childExpirationTime=o-1);n.isBackwards?(s.sibling=t.child,t.child=s):(null!==(o=n.last)?o.sibling=s:t.child=s,n.last=s)}return null!==n.tail?(0===n.tailExpiration&&(n.tailExpiration=Fr()+500),o=n.tail,n.rendering=o,n.tail=o.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Fr(),o.sibling=null,t=Ga.current,ur(Ga,a?1&t|2:1&t),o):null}throw Error(i(156,t.tag))}function Ji(e){switch(e.tag){case 1:gr(e.type)&&br();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(za(),lr(hr),lr(dr),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ba(e),null;case 13:return lr(Ga),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return lr(Ga),null;case 4:return za(),null;case 10:return ta(e),null;default:return null}}function Zi(e,t){return{value:e,source:t,stack:N(t)}}Fi=function(e,t){for(var o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},Ii=function(e,t,o,n,a){var i=e.memoizedProps;if(i!==n){var s,c,l=t.stateNode;switch(qa(Da.current),e=null,o){case"input":i=Ce(l,i),n=Ce(l,n),e=[];break;case"option":i=De(l,i),n=De(l,n),e=[];break;case"select":i=r({},i,{value:void 0}),n=r({},n,{value:void 0}),e=[];break;case"textarea":i=Se(l,i),n=Se(l,n),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof n.onClick&&(l.onclick=co)}for(s in ro(o,n),o=null,i)if(!n.hasOwnProperty(s)&&i.hasOwnProperty(s)&&null!=i[s])if("style"===s)for(c in l=i[s])l.hasOwnProperty(c)&&(o||(o={}),o[c]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(U.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in n){var u=n[s];if(l=null!=i?i[s]:void 0,n.hasOwnProperty(s)&&u!==l&&(null!=u||null!=l))if("style"===s)if(l){for(c in l)!l.hasOwnProperty(c)||u&&u.hasOwnProperty(c)||(o||(o={}),o[c]="");for(c in u)u.hasOwnProperty(c)&&l[c]!==u[c]&&(o||(o={}),o[c]=u[c])}else o||(e||(e=[]),e.push(s,o)),o=u;else"dangerouslySetInnerHTML"===s?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(e=e||[]).push(s,u)):"children"===s?l===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(s,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(U.hasOwnProperty(s)?(null!=u&&so(a,s),e||l===u||(e=[])):(e=e||[]).push(s,u))}o&&(e=e||[]).push("style",o),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},Hi=function(e,t,o,n){o!==n&&(t.effectTag|=4)};var Xi="function"==typeof WeakSet?WeakSet:Set;function es(e,t){var o=t.source,n=t.stack;null===n&&null!==o&&(n=N(o)),null!==o&&P(o.type),t=t.value,null!==e&&1===e.tag&&P(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ts(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){vc(e,t)}else t.current=null}function os(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var o=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?o:Kr(t.type,o),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function ns(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var o=t=t.next;do{if((o.tag&e)===e){var n=o.destroy;o.destroy=void 0,void 0!==n&&n()}o=o.next}while(o!==t)}}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var o=t=t.next;do{if((o.tag&e)===e){var n=o.create;o.destroy=n()}o=o.next}while(o!==t)}}function as(e,t,o){switch(o.tag){case 0:case 11:case 15:case 22:return void rs(3,o);case 1:if(e=o.stateNode,4&o.effectTag)if(null===t)e.componentDidMount();else{var n=o.elementType===o.type?t.memoizedProps:Kr(o.type,t.memoizedProps);e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=o.updateQueue)&&da(o,t,e));case 3:if(null!==(t=o.updateQueue)){if(e=null,null!==o.child)switch(o.child.tag){case 5:e=o.child.stateNode;break;case 1:e=o.child.stateNode}da(o,t,e)}return;case 5:return e=o.stateNode,void(null===t&&4&o.effectTag&&bo(o.type,o.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===o.memoizedState&&(o=o.alternate,null!==o&&(o=o.memoizedState,null!==o&&(o=o.dehydrated,null!==o&&Gt(o)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function is(e,t,o){switch("function"==typeof Cc&&Cc(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e.next;Or(97<o?97:o,(function(){var e=n;do{var o=e.destroy;if(void 0!==o){var r=t;try{o()}catch(e){vc(r,e)}}e=e.next}while(e!==n)}))}break;case 1:ts(t),"function"==typeof(o=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){vc(e,t)}}(t,o);break;case 5:ts(t);break;case 4:us(e,t,o)}}function ss(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ss(t)}function cs(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:{for(var t=e.return;null!==t;){if(cs(t)){var o=t;break e}t=t.return}throw Error(i(160))}switch(t=o.stateNode,o.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&o.effectTag&&(Fe(t,""),o.effectTag&=-17);e:t:for(o=e;;){for(;null===o.sibling;){if(null===o.return||cs(o.return)){o=null;break e}o=o.return}for(o.sibling.return=o.return,o=o.sibling;5!==o.tag&&6!==o.tag&&18!==o.tag;){if(2&o.effectTag)continue t;if(null===o.child||4===o.tag)continue t;o.child.return=o,o=o.child}if(!(2&o.effectTag)){o=o.stateNode;break e}}n?function e(t,o,n){var r=t.tag,a=5===r||6===r;if(a)t=a?t.stateNode:t.stateNode.instance,o?8===n.nodeType?n.parentNode.insertBefore(t,o):n.insertBefore(t,o):(8===n.nodeType?(o=n.parentNode).insertBefore(t,n):(o=n).appendChild(t),null!==(n=n._reactRootContainer)&&void 0!==n||null!==o.onclick||(o.onclick=co));else if(4!==r&&null!==(t=t.child))for(e(t,o,n),t=t.sibling;null!==t;)e(t,o,n),t=t.sibling}(e,o,t):function e(t,o,n){var r=t.tag,a=5===r||6===r;if(a)t=a?t.stateNode:t.stateNode.instance,o?n.insertBefore(t,o):n.appendChild(t);else if(4!==r&&null!==(t=t.child))for(e(t,o,n),t=t.sibling;null!==t;)e(t,o,n),t=t.sibling}(e,o,t)}function us(e,t,o){for(var n,r,a=t,s=!1;;){if(!s){s=a.return;e:for(;;){if(null===s)throw Error(i(160));switch(n=s.stateNode,s.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}s=s.return}s=!0}if(5===a.tag||6===a.tag){e:for(var c=e,l=a,u=o,m=l;;)if(is(c,m,u),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===l)break e;for(;null===m.sibling;){if(null===m.return||m.return===l)break e;m=m.return}m.sibling.return=m.return,m=m.sibling}r?(c=n,l=a.stateNode,8===c.nodeType?c.parentNode.removeChild(l):c.removeChild(l)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(is(e,a,o),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(s=!1)}a.sibling.return=a.return,a=a.sibling}}function ms(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ns(3,t);case 1:return;case 5:var o=t.stateNode;if(null!=o){var n=t.memoizedProps,r=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(o[Eo]=n,"input"===e&&"radio"===n.type&&null!=n.name&&xe(o,n),ao(e,r),t=ao(e,n),r=0;r<a.length;r+=2){var s=a[r],c=a[r+1];"style"===s?oo(o,c):"dangerouslySetInnerHTML"===s?je(o,c):"children"===s?Fe(o,c):be(o,s,c,t)}switch(e){case"input":Ee(o,n);break;case"textarea":Re(o,n);break;case"select":t=o._wrapperState.wasMultiple,o._wrapperState.wasMultiple=!!n.multiple,null!=(e=n.value)?Te(o,!!n.multiple,e,!1):t!==!!n.multiple&&(null!=n.defaultValue?Te(o,!!n.multiple,n.defaultValue,!0):Te(o,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Gt(t.containerInfo)));case 12:return;case 13:if(o=t,null===t.memoizedState?n=!1:(n=!0,o=t.child,Vs=Fr()),null!==o)e:for(e=o;;){if(5===e.tag)a=e.stateNode,n?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,r=null!=(r=e.memoizedProps.style)&&r.hasOwnProperty("display")?r.display:null,a.style.display=to("display",r));else if(6===e.tag)e.stateNode.nodeValue=n?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===o)break;for(;null===e.sibling;){if(null===e.return||e.return===o)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void ds(t);case 19:return void ds(t);case 17:return}throw Error(i(163))}function ds(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var o=e.stateNode;null===o&&(o=e.stateNode=new Xi),t.forEach((function(t){var n=wc.bind(null,e,t);o.has(t)||(o.add(t),t.then(n,n))}))}}var hs="function"==typeof WeakMap?WeakMap:Map;function ps(e,t,o){(o=ca(o,null)).tag=3,o.payload={element:null};var n=t.value;return o.callback=function(){Gs||(Gs=!0,Ps=n),es(e,t)},o}function fs(e,t,o){(o=ca(o,null)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var r=t.value;o.payload=function(){return es(e,t),n(r)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(o.callback=function(){"function"!=typeof n&&(null===Ns?Ns=new Set([this]):Ns.add(this),es(e,t));var o=t.stack;this.componentDidCatch(t.value,{componentStack:null!==o?o:""})}),o}var gs,bs=Math.ceil,vs=v.ReactCurrentDispatcher,ys=v.ReactCurrentOwner,ws=0,ks=3,Cs=4,As=0,xs=null,Es=null,_s=0,Ms=ws,Ds=null,Ts=1073741823,Ss=1073741823,qs=null,Rs=0,zs=!1,Vs=0,Bs=null,Gs=!1,Ps=null,Ns=null,js=!1,Fs=null,Is=90,Hs=null,Os=0,Ls=null,Us=0;function Ws(){return 0!=(48&As)?1073741821-(Fr()/10|0):0!==Us?Us:Us=1073741821-(Fr()/10|0)}function $s(e,t,o){if(0==(2&(t=t.mode)))return 1073741823;var n=Ir();if(0==(4&t))return 99===n?1073741823:1073741822;if(0!=(16&As))return _s;if(null!==o)e=Qr(e,0|o.timeoutMs||5e3,250);else switch(n){case 99:e=1073741823;break;case 98:e=Qr(e,150,100);break;case 97:case 96:e=Qr(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==xs&&e===_s&&--e,e}function Qs(e,t){if(50<Os)throw Os=0,Ls=null,Error(i(185));if(null!==(e=Ks(e,t))){var o=Ir();1073741823===t?0!=(8&As)&&0==(48&As)?Xs(e):(Js(e),0===As&&Wr()):Js(e),0==(4&As)||98!==o&&99!==o||(null===Hs?Hs=new Map([[e,t]]):(void 0===(o=Hs.get(e))||o>t)&&Hs.set(e,t))}}function Ks(e,t){e.expirationTime<t&&(e.expirationTime=t);var o=e.alternate;null!==o&&o.expirationTime<t&&(o.expirationTime=t);var n=e.return,r=null;if(null===n&&3===e.tag)r=e.stateNode;else for(;null!==n;){if(o=n.alternate,n.childExpirationTime<t&&(n.childExpirationTime=t),null!==o&&o.childExpirationTime<t&&(o.childExpirationTime=t),null===n.return&&3===n.tag){r=n.stateNode;break}n=n.return}return null!==r&&(xs===r&&(ic(t),Ms===Cs&&zc(r,_s)),Vc(r,t)),r}function Ys(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Rc(e,t=e.firstPendingTime))return t;var o=e.lastPingedTime;return 2>=(e=o>(e=e.nextKnownPendingLevel)?o:e)&&t!==e?0:e}function Js(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ur(Xs.bind(null,e));else{var t=Ys(e),o=e.callbackNode;if(0===t)null!==o&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var n=Ws();if(1073741823===t?n=99:1===t||2===t?n=95:n=0>=(n=10*(1073741821-t)-10*(1073741821-n))?99:250>=n?98:5250>=n?97:95,null!==o){var r=e.callbackPriority;if(e.callbackExpirationTime===t&&r>=n)return;o!==zr&&xr(o)}e.callbackExpirationTime=t,e.callbackPriority=n,t=1073741823===t?Ur(Xs.bind(null,e)):Lr(n,Zs.bind(null,e),{timeout:10*(1073741821-t)-Fr()}),e.callbackNode=t}}}function Zs(e,t){if(Us=0,t)return Bc(e,t=Ws()),Js(e),null;var o=Ys(e);if(0!==o){if(t=e.callbackNode,0!=(48&As))throw Error(i(327));if(fc(),e===xs&&o===_s||oc(e,o),null!==Es){var n=As;As|=16;for(var r=rc();;)try{cc();break}catch(t){nc(e,t)}if(ea(),As=n,vs.current=r,1===Ms)throw t=Ds,oc(e,o),zc(e,o),Js(e),t;if(null===Es)switch(r=e.finishedWork=e.current.alternate,e.finishedExpirationTime=o,n=Ms,xs=null,n){case ws:case 1:throw Error(i(345));case 2:Bc(e,2<o?2:o);break;case ks:if(zc(e,o),o===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=mc(r)),1073741823===Ts&&10<(r=Vs+500-Fr())){if(zs){var a=e.lastPingedTime;if(0===a||a>=o){e.lastPingedTime=o,oc(e,o);break}}if(0!==(a=Ys(e))&&a!==o)break;if(0!==n&&n!==o){e.lastPingedTime=n;break}e.timeoutHandle=yo(dc.bind(null,e),r);break}dc(e);break;case Cs:if(zc(e,o),o===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=mc(r)),zs&&(0===(r=e.lastPingedTime)||r>=o)){e.lastPingedTime=o,oc(e,o);break}if(0!==(r=Ys(e))&&r!==o)break;if(0!==n&&n!==o){e.lastPingedTime=n;break}if(1073741823!==Ss?n=10*(1073741821-Ss)-Fr():1073741823===Ts?n=0:(n=10*(1073741821-Ts)-5e3,0>(n=(r=Fr())-n)&&(n=0),(o=10*(1073741821-o)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*bs(n/1960))-n)&&(n=o)),10<n){e.timeoutHandle=yo(dc.bind(null,e),n);break}dc(e);break;case 5:if(1073741823!==Ts&&null!==qs){a=Ts;var s=qs;if(0>=(n=0|s.busyMinDurationMs)?n=0:(r=0|s.busyDelayMs,n=(a=Fr()-(10*(1073741821-a)-(0|s.timeoutMs||5e3)))<=r?0:r+n-a),10<n){zc(e,o),e.timeoutHandle=yo(dc.bind(null,e),n);break}}dc(e);break;default:throw Error(i(329))}if(Js(e),e.callbackNode===t)return Zs.bind(null,e)}}return null}function Xs(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&As))throw Error(i(327));if(fc(),e===xs&&t===_s||oc(e,t),null!==Es){var o=As;As|=16;for(var n=rc();;)try{sc();break}catch(t){nc(e,t)}if(ea(),As=o,vs.current=n,1===Ms)throw o=Ds,oc(e,t),zc(e,t),Js(e),o;if(null!==Es)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,xs=null,dc(e),Js(e)}return null}function ec(e,t){var o=As;As|=1;try{return e(t)}finally{0===(As=o)&&Wr()}}function tc(e,t){var o=As;As&=-2,As|=8;try{return e(t)}finally{0===(As=o)&&Wr()}}function oc(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var o=e.timeoutHandle;if(-1!==o&&(e.timeoutHandle=-1,wo(o)),null!==Es)for(o=Es.return;null!==o;){var n=o;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&br();break;case 3:za(),lr(hr),lr(dr);break;case 5:Ba(n);break;case 4:za();break;case 13:case 19:lr(Ga);break;case 10:ta(n)}o=o.return}xs=e,Es=_c(e.current,null),_s=t,Ms=ws,Ds=null,Ss=Ts=1073741823,qs=null,Rs=0,zs=!1}function nc(e,t){for(;;){try{if(ea(),ja.current=gi,Ua)for(var o=Ha.memoizedState;null!==o;){var n=o.queue;null!==n&&(n.pending=null),o=o.next}if(Ia=0,La=Oa=Ha=null,Ua=!1,null===Es||null===Es.return)return Ms=1,Ds=t,Es=null;e:{var r=e,a=Es.return,i=Es,s=t;if(t=_s,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s;if(0==(2&i.mode)){var l=i.alternate;l?(i.memoizedState=l.memoizedState,i.expirationTime=l.expirationTime):i.memoizedState=null}var u=0!=(1&Ga.current),m=a;do{var d;if(d=13===m.tag){var h=m.memoizedState;if(null!==h)d=null!==h.dehydrated;else{var p=m.memoizedProps;d=void 0!==p.fallback&&(!0!==p.unstable_avoidThisFallback||!u)}}if(d){var f=m.updateQueue;if(null===f){var g=new Set;g.add(c),m.updateQueue=g}else f.add(c);if(0==(2&m.mode)){if(m.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var b=ca(1073741823,null);b.tag=2,la(i,b)}i.expirationTime=1073741823;break e}s=void 0,i=t;var v=r.pingCache;if(null===v?(v=r.pingCache=new hs,s=new Set,v.set(c,s)):void 0===(s=v.get(c))&&(s=new Set,v.set(c,s)),!s.has(i)){s.add(i);var y=yc.bind(null,r,c,i);c.then(y,y)}m.effectTag|=4096,m.expirationTime=t;break e}m=m.return}while(null!==m);s=Error((P(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+N(i))}5!==Ms&&(Ms=2),s=Zi(s,i),m=a;do{switch(m.tag){case 3:c=s,m.effectTag|=4096,m.expirationTime=t,ua(m,ps(m,c,t));break e;case 1:c=s;var w=m.type,k=m.stateNode;if(0==(64&m.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Ns||!Ns.has(k)))){m.effectTag|=4096,m.expirationTime=t,ua(m,fs(m,c,t));break e}}m=m.return}while(null!==m)}Es=uc(Es)}catch(e){t=e;continue}break}}function rc(){var e=vs.current;return vs.current=gi,null===e?gi:e}function ac(e,t){e<Ts&&2<e&&(Ts=e),null!==t&&e<Ss&&2<e&&(Ss=e,qs=t)}function ic(e){e>Rs&&(Rs=e)}function sc(){for(;null!==Es;)Es=lc(Es)}function cc(){for(;null!==Es&&!Vr();)Es=lc(Es)}function lc(e){var t=gs(e.alternate,e,_s);return e.memoizedProps=e.pendingProps,null===t&&(t=uc(e)),ys.current=null,t}function uc(e){Es=e;do{var t=Es.alternate;if(e=Es.return,0==(2048&Es.effectTag)){if(t=Yi(t,Es,_s),1===_s||1!==Es.childExpirationTime){for(var o=0,n=Es.child;null!==n;){var r=n.expirationTime,a=n.childExpirationTime;r>o&&(o=r),a>o&&(o=a),n=n.sibling}Es.childExpirationTime=o}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Es.firstEffect),null!==Es.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Es.firstEffect),e.lastEffect=Es.lastEffect),1<Es.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Es:e.firstEffect=Es,e.lastEffect=Es))}else{if(null!==(t=Ji(Es)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Es.sibling))return t;Es=e}while(null!==Es);return Ms===ws&&(Ms=5),null}function mc(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dc(e){var t=Ir();return Or(99,hc.bind(null,e,t)),null}function hc(e,t){do{fc()}while(null!==Fs);if(0!=(48&As))throw Error(i(327));var o=e.finishedWork,n=e.finishedExpirationTime;if(null===o)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,o===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var r=mc(o);if(e.firstPendingTime=r,n<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:n<=e.firstSuspendedTime&&(e.firstSuspendedTime=n-1),n<=e.lastPingedTime&&(e.lastPingedTime=0),n<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===xs&&(Es=xs=null,_s=0),1<o.effectTag?null!==o.lastEffect?(o.lastEffect.nextEffect=o,r=o.firstEffect):r=o:r=o.firstEffect,null!==r){var a=As;As|=32,ys.current=null,fo=Wt;var s=ho();if(po(s)){if("selectionStart"in s)var c={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(c=(c=s.ownerDocument)&&c.defaultView||window).getSelection&&c.getSelection();if(l&&0!==l.rangeCount){c=l.anchorNode;var u=l.anchorOffset,m=l.focusNode;l=l.focusOffset;try{c.nodeType,m.nodeType}catch(e){c=null;break e}var d=0,h=-1,p=-1,f=0,g=0,b=s,v=null;t:for(;;){for(var y;b!==c||0!==u&&3!==b.nodeType||(h=d+u),b!==m||0!==l&&3!==b.nodeType||(p=d+l),3===b.nodeType&&(d+=b.nodeValue.length),null!==(y=b.firstChild);)v=b,b=y;for(;;){if(b===s)break t;if(v===c&&++f===u&&(h=d),v===m&&++g===l&&(p=d),null!==(y=b.nextSibling))break;v=(b=v).parentNode}b=y}c=-1===h||-1===p?null:{start:h,end:p}}else c=null}c=c||{start:0,end:0}}else c=null;go={activeElementDetached:null,focusedElem:s,selectionRange:c},Wt=!1,Bs=r;do{try{pc()}catch(e){if(null===Bs)throw Error(i(330));vc(Bs,e),Bs=Bs.nextEffect}}while(null!==Bs);Bs=r;do{try{for(s=e,c=t;null!==Bs;){var w=Bs.effectTag;if(16&w&&Fe(Bs.stateNode,""),128&w){var k=Bs.alternate;if(null!==k){var C=k.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&w){case 2:ls(Bs),Bs.effectTag&=-3;break;case 6:ls(Bs),Bs.effectTag&=-3,ms(Bs.alternate,Bs);break;case 1024:Bs.effectTag&=-1025;break;case 1028:Bs.effectTag&=-1025,ms(Bs.alternate,Bs);break;case 4:ms(Bs.alternate,Bs);break;case 8:us(s,u=Bs,c),ss(u)}Bs=Bs.nextEffect}}catch(e){if(null===Bs)throw Error(i(330));vc(Bs,e),Bs=Bs.nextEffect}}while(null!==Bs);if(C=go,k=ho(),w=C.focusedElem,c=C.selectionRange,k!==w&&w&&w.ownerDocument&&function e(t,o){return!(!t||!o)&&(t===o||(!t||3!==t.nodeType)&&(o&&3===o.nodeType?e(t,o.parentNode):"contains"in t?t.contains(o):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(o))))}(w.ownerDocument.documentElement,w)){null!==c&&po(w)&&(k=c.start,void 0===(C=c.end)&&(C=k),"selectionStart"in w?(w.selectionStart=k,w.selectionEnd=Math.min(C,w.value.length)):(C=(k=w.ownerDocument||document)&&k.defaultView||window).getSelection&&(C=C.getSelection(),u=w.textContent.length,s=Math.min(c.start,u),c=void 0===c.end?s:Math.min(c.end,u),!C.extend&&s>c&&(u=c,c=s,s=u),u=mo(w,s),m=mo(w,c),u&&m&&(1!==C.rangeCount||C.anchorNode!==u.node||C.anchorOffset!==u.offset||C.focusNode!==m.node||C.focusOffset!==m.offset)&&((k=k.createRange()).setStart(u.node,u.offset),C.removeAllRanges(),s>c?(C.addRange(k),C.extend(m.node,m.offset)):(k.setEnd(m.node,m.offset),C.addRange(k))))),k=[];for(C=w;C=C.parentNode;)1===C.nodeType&&k.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<k.length;w++)(C=k[w]).element.scrollLeft=C.left,C.element.scrollTop=C.top}Wt=!!fo,go=fo=null,e.current=o,Bs=r;do{try{for(w=e;null!==Bs;){var A=Bs.effectTag;if(36&A&&as(w,Bs.alternate,Bs),128&A){k=void 0;var x=Bs.ref;if(null!==x){var E=Bs.stateNode;switch(Bs.tag){case 5:k=E;break;default:k=E}"function"==typeof x?x(k):x.current=k}}Bs=Bs.nextEffect}}catch(e){if(null===Bs)throw Error(i(330));vc(Bs,e),Bs=Bs.nextEffect}}while(null!==Bs);Bs=null,Br(),As=a}else e.current=o;if(js)js=!1,Fs=e,Is=t;else for(Bs=r;null!==Bs;)t=Bs.nextEffect,Bs.nextEffect=null,Bs=t;if(0===(t=e.firstPendingTime)&&(Ns=null),1073741823===t?e===Ls?Os++:(Os=0,Ls=e):Os=0,"function"==typeof kc&&kc(o.stateNode,n),Js(e),Gs)throw Gs=!1,e=Ps,Ps=null,e;return 0!=(8&As)||Wr(),null}function pc(){for(;null!==Bs;){var e=Bs.effectTag;0!=(256&e)&&os(Bs.alternate,Bs),0==(512&e)||js||(js=!0,Lr(97,(function(){return fc(),null}))),Bs=Bs.nextEffect}}function fc(){if(90!==Is){var e=97<Is?97:Is;return Is=90,Or(e,gc)}}function gc(){if(null===Fs)return!1;var e=Fs;if(Fs=null,0!=(48&As))throw Error(i(331));var t=As;for(As|=32,e=e.current.firstEffect;null!==e;){try{var o=e;if(0!=(512&o.effectTag))switch(o.tag){case 0:case 11:case 15:case 22:ns(5,o),rs(5,o)}}catch(t){if(null===e)throw Error(i(330));vc(e,t)}o=e.nextEffect,e.nextEffect=null,e=o}return As=t,Wr(),!0}function bc(e,t,o){la(e,t=ps(e,t=Zi(o,t),1073741823)),null!==(e=Ks(e,1073741823))&&Js(e)}function vc(e,t){if(3===e.tag)bc(e,e,t);else for(var o=e.return;null!==o;){if(3===o.tag){bc(o,e,t);break}if(1===o.tag){var n=o.stateNode;if("function"==typeof o.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Ns||!Ns.has(n))){la(o,e=fs(o,e=Zi(t,e),1073741823)),null!==(o=Ks(o,1073741823))&&Js(o);break}}o=o.return}}function yc(e,t,o){var n=e.pingCache;null!==n&&n.delete(t),xs===e&&_s===o?Ms===Cs||Ms===ks&&1073741823===Ts&&Fr()-Vs<500?oc(e,_s):zs=!0:Rc(e,o)&&(0!==(t=e.lastPingedTime)&&t<o||(e.lastPingedTime=o,Js(e)))}function wc(e,t){var o=e.stateNode;null!==o&&o.delete(t),0===(t=0)&&(t=$s(t=Ws(),e,null)),null!==(e=Ks(e,t))&&Js(e)}gs=function(e,t,o){var n=t.expirationTime;if(null!==e){var r=t.pendingProps;if(e.memoizedProps!==r||hr.current)Si=!0;else{if(n<o){switch(Si=!1,t.tag){case 3:ji(t),Di();break;case 5:if(Va(t),4&t.mode&&1!==o&&r.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:gr(t.type)&&wr(t);break;case 4:Ra(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value,r=t.type._context,ur(Yr,r._currentValue),r._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(n=t.child.childExpirationTime)&&n>=o?Li(e,t,o):(ur(Ga,1&Ga.current),null!==(t=Qi(e,t,o))?t.sibling:null);ur(Ga,1&Ga.current);break;case 19:if(n=t.childExpirationTime>=o,0!=(64&e.effectTag)){if(n)return $i(e,t,o);t.effectTag|=64}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null),ur(Ga,Ga.current),!n)return null}return Qi(e,t,o)}Si=!1}}else Si=!1;switch(t.expirationTime=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,r=fr(t,dr.current),na(t,o),r=Qa(null,t,n,e,r,o),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,gr(n)){var a=!0;wr(t)}else a=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,ia(t);var s=n.getDerivedStateFromProps;"function"==typeof s&&fa(t,n,s,e),r.updater=ga,t.stateNode=r,r._reactInternalFiber=t,wa(t,n,e,o),t=Ni(null,t,n,!0,a,o)}else t.tag=0,qi(null,t,r,o),t=t.child;return t;case 16:e:{if(r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(r),1!==r._status)throw r._result;switch(r=r._result,t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ec(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===R)return 14}return 2}(r),e=Kr(r,e),a){case 0:t=Gi(null,t,r,e,o);break e;case 1:t=Pi(null,t,r,e,o);break e;case 11:t=Ri(null,t,r,e,o);break e;case 14:t=zi(null,t,r,Kr(r.type,e),n,o);break e}throw Error(i(306,r,""))}return t;case 0:return n=t.type,r=t.pendingProps,Gi(e,t,n,r=t.elementType===n?r:Kr(n,r),o);case 1:return n=t.type,r=t.pendingProps,Pi(e,t,n,r=t.elementType===n?r:Kr(n,r),o);case 3:if(ji(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,sa(e,t),ma(t,n,null,o),(n=t.memoizedState.element)===r)Di(),t=Qi(e,t,o);else{if((r=t.stateNode.hydrate)&&(ki=ko(t.stateNode.containerInfo.firstChild),wi=t,r=Ci=!0),r)for(o=_a(t,null,n,o),t.child=o;o;)o.effectTag=-3&o.effectTag|1024,o=o.sibling;else qi(e,t,n,o),Di();t=t.child}return t;case 5:return Va(t),null===e&&Ei(t),n=t.type,r=t.pendingProps,a=null!==e?e.memoizedProps:null,s=r.children,vo(n,r)?s=null:null!==a&&vo(n,a)&&(t.effectTag|=16),Bi(e,t),4&t.mode&&1!==o&&r.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(qi(e,t,s,o),t=t.child),t;case 6:return null===e&&Ei(t),null;case 13:return Li(e,t,o);case 4:return Ra(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Ea(t,null,n,o):qi(e,t,n,o),t.child;case 11:return n=t.type,r=t.pendingProps,Ri(e,t,n,r=t.elementType===n?r:Kr(n,r),o);case 7:return qi(e,t,t.pendingProps,o),t.child;case 8:case 12:return qi(e,t,t.pendingProps.children,o),t.child;case 10:e:{n=t.type._context,r=t.pendingProps,s=t.memoizedProps,a=r.value;var c=t.type._context;if(ur(Yr,c._currentValue),c._currentValue=a,null!==s)if(c=s.value,0===(a=Nn(c,a)?0:0|("function"==typeof n._calculateChangedBits?n._calculateChangedBits(c,a):1073741823))){if(s.children===r.children&&!hr.current){t=Qi(e,t,o);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var l=c.dependencies;if(null!==l){s=c.child;for(var u=l.firstContext;null!==u;){if(u.context===n&&0!=(u.observedBits&a)){1===c.tag&&((u=ca(o,null)).tag=2,la(c,u)),c.expirationTime<o&&(c.expirationTime=o),null!==(u=c.alternate)&&u.expirationTime<o&&(u.expirationTime=o),oa(c.return,o),l.expirationTime<o&&(l.expirationTime=o);break}u=u.next}}else s=10===c.tag&&c.type===t.type?null:c.child;if(null!==s)s.return=c;else for(s=c;null!==s;){if(s===t){s=null;break}if(null!==(c=s.sibling)){c.return=s.return,s=c;break}s=s.return}c=s}qi(e,t,r.children,o),t=t.child}return t;case 9:return r=t.type,n=(a=t.pendingProps).children,na(t,o),n=n(r=ra(r,a.unstable_observedBits)),t.effectTag|=1,qi(e,t,n,o),t.child;case 14:return a=Kr(r=t.type,t.pendingProps),zi(e,t,r,a=Kr(r.type,a),n,o);case 15:return Vi(e,t,t.type,t.pendingProps,n,o);case 17:return n=t.type,r=t.pendingProps,r=t.elementType===n?r:Kr(n,r),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,gr(n)?(e=!0,wr(t)):e=!1,na(t,o),va(t,n,r),wa(t,n,r,o),Ni(null,t,n,!0,e,o);case 19:return $i(e,t,o)}throw Error(i(156,t.tag))};var kc=null,Cc=null;function Ac(e,t,o,n){this.tag=e,this.key=o,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function xc(e,t,o,n){return new Ac(e,t,o,n)}function Ec(e){return!(!(e=e.prototype)||!e.isReactComponent)}function _c(e,t){var o=e.alternate;return null===o?((o=xc(e.tag,t,e.key,e.mode)).elementType=e.elementType,o.type=e.type,o.stateNode=e.stateNode,o.alternate=e,e.alternate=o):(o.pendingProps=t,o.effectTag=0,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null),o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,t=e.dependencies,o.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},o.sibling=e.sibling,o.index=e.index,o.ref=e.ref,o}function Mc(e,t,o,n,r,a){var s=2;if(n=e,"function"==typeof e)Ec(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case A:return Dc(o.children,r,a,t);case D:s=8,r|=7;break;case x:s=8,r|=1;break;case E:return(e=xc(12,o,t,8|r)).elementType=E,e.type=E,e.expirationTime=a,e;case S:return(e=xc(13,o,t,r)).type=S,e.elementType=S,e.expirationTime=a,e;case q:return(e=xc(19,o,t,r)).elementType=q,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:s=10;break e;case M:s=9;break e;case T:s=11;break e;case R:s=14;break e;case z:s=16,n=null;break e;case V:s=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=xc(s,o,t,r)).elementType=e,t.type=n,t.expirationTime=a,t}function Dc(e,t,o,n){return(e=xc(7,e,n,t)).expirationTime=o,e}function Tc(e,t,o){return(e=xc(6,e,null,t)).expirationTime=o,e}function Sc(e,t,o){return(t=xc(4,null!==e.children?e.children:[],e.key,t)).expirationTime=o,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qc(e,t,o){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=o,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Rc(e,t){var o=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==o&&o>=t&&e<=t}function zc(e,t){var o=e.firstSuspendedTime,n=e.lastSuspendedTime;o<t&&(e.firstSuspendedTime=t),(n>t||0===o)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Vc(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var o=e.firstSuspendedTime;0!==o&&(t>=o?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bc(e,t){var o=e.lastExpiredTime;(0===o||o>t)&&(e.lastExpiredTime=t)}function Gc(e,t,o,n){var r=t.current,a=Ws(),s=ha.suspense;a=$s(a,r,s);e:if(o){t:{if(Xe(o=o._reactInternalFiber)!==o||1!==o.tag)throw Error(i(170));var c=o;do{switch(c.tag){case 3:c=c.stateNode.context;break t;case 1:if(gr(c.type)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break t}}c=c.return}while(null!==c);throw Error(i(171))}if(1===o.tag){var l=o.type;if(gr(l)){o=yr(o,l,c);break e}}o=c}else o=mr;return null===t.context?t.context=o:t.pendingContext=o,(t=ca(a,s)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),la(r,t),Qs(r,a),a}function Pc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Nc(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function jc(e,t){Nc(e,t),(e=e.alternate)&&Nc(e,t)}function Fc(e,t,o){var n=new qc(e,t,o=null!=o&&!0===o.hydrate),r=xc(3,null,null,2===t?7:1===t?3:0);n.current=r,r.stateNode=n,ia(r),e[_o]=n.current,o&&0!==t&&function(e,t){var o=Ze(t);_t.forEach((function(e){pt(e,t,o)})),Mt.forEach((function(e){pt(e,t,o)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=n}function Ic(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hc(e,t,o,n,r){var a=o._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof r){var s=r;r=function(){var e=Pc(i);s.call(e)}}Gc(t,i,e,r)}else{if(a=o._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var o;o=e.lastChild;)e.removeChild(o);return new Fc(e,0,t?{hydrate:!0}:void 0)}(o,n),i=a._internalRoot,"function"==typeof r){var c=r;r=function(){var e=Pc(i);c.call(e)}}tc((function(){Gc(t,i,e,r)}))}return Pc(i)}function Oc(e,t,o){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==n?null:""+n,children:e,containerInfo:t,implementation:o}}function Lc(e,t){var o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ic(t))throw Error(i(200));return Oc(e,t,null,o)}Fc.prototype.render=function(e){Gc(e,this._internalRoot,null,null)},Fc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gc(null,e,null,(function(){t[_o]=null}))},ft=function(e){if(13===e.tag){var t=Qr(Ws(),150,100);Qs(e,t),jc(e,t)}},gt=function(e){13===e.tag&&(Qs(e,3),jc(e,3))},bt=function(e){if(13===e.tag){var t=Ws();Qs(e,t=$s(t,e,null)),jc(e,t)}},K=function(e,t,o){switch(t){case"input":if(Ee(e,o),t=o.name,"radio"===o.type&&null!=t){for(o=e;o.parentNode;)o=o.parentNode;for(o=o.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<o.length;t++){var n=o[t];if(n!==e&&n.form===e.form){var r=So(n);if(!r)throw Error(i(90));ke(n),Ee(n,r)}}}break;case"textarea":Re(e,o);break;case"select":null!=(t=o.value)&&Te(e,!!o.multiple,t,!1)}},te=ec,oe=function(e,t,o,n,r){var a=As;As|=4;try{return Or(98,e.bind(null,t,o,n,r))}finally{0===(As=a)&&Wr()}},ne=function(){0==(49&As)&&(function(){if(null!==Hs){var e=Hs;Hs=null,e.forEach((function(e,t){Bc(t,e),Js(t)})),Wr()}}(),fc())},re=function(e,t){var o=As;As|=2;try{return e(t)}finally{0===(As=o)&&Wr()}};var Uc={Events:[Do,To,So,$,L,Po,function(e){rt(e,Go)},X,ee,Jt,st,fc,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var o=t.inject(e);kc=function(e){try{t.onCommitFiberRoot(o,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Cc=function(e){try{t.onCommitFiberUnmount(o,e)}catch(e){}}}catch(e){}})(r({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ot(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Mo,bundleType:0,version:"16.13.0",rendererPackageName:"react-dom"}),o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Uc,o.createPortal=Lc,o.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=ot(t))?null:e.stateNode},o.flushSync=function(e,t){if(0!=(48&As))throw Error(i(187));var o=As;As|=1;try{return Or(99,e.bind(null,t))}finally{As=o,Wr()}},o.hydrate=function(e,t,o){if(!Ic(t))throw Error(i(200));return Hc(null,e,t,!0,o)},o.render=function(e,t,o){if(!Ic(t))throw Error(i(200));return Hc(null,e,t,!1,o)},o.unmountComponentAtNode=function(e){if(!Ic(e))throw Error(i(40));return!!e._reactRootContainer&&(tc((function(){Hc(null,null,e,!1,(function(){e._reactRootContainer=null,e[_o]=null}))})),!0)},o.unstable_batchedUpdates=ec,o.unstable_createPortal=function(e,t){return Lc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},o.unstable_renderSubtreeIntoContainer=function(e,t,o,n){if(!Ic(o))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return Hc(e,t,o,!1,n)},o.version="16.13.0"},{"object-assign":13,react:30,scheduler:35}],24:[function(e,t,o){(function(o){"use strict";"production"===o.env.NODE_ENV?(!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){if("production"!==o.env.NODE_ENV)throw new Error("^_^");try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),t.exports=e("./cjs/react-dom.production.min.js")):t.exports=e("./cjs/react-dom.development.js")}).call(this,e("_process"))},{"./cjs/react-dom.development.js":22,"./cjs/react-dom.production.min.js":23,_process:15}],25:[function(e,t,o){(function(e){
/** @license React v16.13.0
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";"production"!==e.env.NODE_ENV&&function(){var e="function"==typeof Symbol&&Symbol.for,t=e?Symbol.for("react.element"):60103,n=e?Symbol.for("react.portal"):60106,r=e?Symbol.for("react.fragment"):60107,a=e?Symbol.for("react.strict_mode"):60108,i=e?Symbol.for("react.profiler"):60114,s=e?Symbol.for("react.provider"):60109,c=e?Symbol.for("react.context"):60110,l=e?Symbol.for("react.async_mode"):60111,u=e?Symbol.for("react.concurrent_mode"):60111,m=e?Symbol.for("react.forward_ref"):60112,d=e?Symbol.for("react.suspense"):60113,h=e?Symbol.for("react.suspense_list"):60120,p=e?Symbol.for("react.memo"):60115,f=e?Symbol.for("react.lazy"):60116,g=e?Symbol.for("react.block"):60121,b=e?Symbol.for("react.fundamental"):60117,v=e?Symbol.for("react.responder"):60118,y=e?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var o=e.$$typeof;switch(o){case t:var h=e.type;switch(h){case l:case u:case r:case i:case a:case d:return h;default:var g=h&&h.$$typeof;switch(g){case c:case m:case f:case p:case s:return g;default:return o}}case n:return o}}}var k=l,C=u,A=c,x=s,E=t,_=m,M=r,D=f,T=p,S=n,q=i,R=a,z=d,V=!1;function B(e){return w(e)===u}o.AsyncMode=k,o.ConcurrentMode=C,o.ContextConsumer=A,o.ContextProvider=x,o.Element=E,o.ForwardRef=_,o.Fragment=M,o.Lazy=D,o.Memo=T,o.Portal=S,o.Profiler=q,o.StrictMode=R,o.Suspense=z,o.isAsyncMode=function(e){return V||(V=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),B(e)||w(e)===l},o.isConcurrentMode=B,o.isContextConsumer=function(e){return w(e)===c},o.isContextProvider=function(e){return w(e)===s},o.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===t},o.isForwardRef=function(e){return w(e)===m},o.isFragment=function(e){return w(e)===r},o.isLazy=function(e){return w(e)===f},o.isMemo=function(e){return w(e)===p},o.isPortal=function(e){return w(e)===n},o.isProfiler=function(e){return w(e)===i},o.isStrictMode=function(e){return w(e)===a},o.isSuspense=function(e){return w(e)===d},o.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===r||e===u||e===i||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===f||e.$$typeof===p||e.$$typeof===s||e.$$typeof===c||e.$$typeof===m||e.$$typeof===b||e.$$typeof===v||e.$$typeof===y||e.$$typeof===g)},o.typeOf=w}()}).call(this,e("_process"))},{_process:15}],26:[function(e,t,o){
/** @license React v16.13.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,s=n?Symbol.for("react.strict_mode"):60108,c=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,m=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,h=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,f=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,b=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,w=n?Symbol.for("react.responder"):60118,k=n?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case m:case d:case i:case c:case s:case p:return e;default:switch(e=e&&e.$$typeof){case u:case h:case b:case g:case l:return e;default:return t}}case a:return t}}}function A(e){return C(e)===d}o.AsyncMode=m,o.ConcurrentMode=d,o.ContextConsumer=u,o.ContextProvider=l,o.Element=r,o.ForwardRef=h,o.Fragment=i,o.Lazy=b,o.Memo=g,o.Portal=a,o.Profiler=c,o.StrictMode=s,o.Suspense=p,o.isAsyncMode=function(e){return A(e)||C(e)===m},o.isConcurrentMode=A,o.isContextConsumer=function(e){return C(e)===u},o.isContextProvider=function(e){return C(e)===l},o.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},o.isForwardRef=function(e){return C(e)===h},o.isFragment=function(e){return C(e)===i},o.isLazy=function(e){return C(e)===b},o.isMemo=function(e){return C(e)===g},o.isPortal=function(e){return C(e)===a},o.isProfiler=function(e){return C(e)===c},o.isStrictMode=function(e){return C(e)===s},o.isSuspense=function(e){return C(e)===p},o.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===c||e===s||e===p||e===f||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===g||e.$$typeof===l||e.$$typeof===u||e.$$typeof===h||e.$$typeof===y||e.$$typeof===w||e.$$typeof===k||e.$$typeof===v)},o.typeOf=C},{}],27:[function(e,t,o){(function(o){"use strict";"production"===o.env.NODE_ENV?t.exports=e("./cjs/react-is.production.min.js"):t.exports=e("./cjs/react-is.development.js")}).call(this,e("_process"))},{"./cjs/react-is.development.js":25,"./cjs/react-is.production.min.js":26,_process:15}],28:[function(e,t,o){(function(t){
/** @license React v16.13.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";"production"!==t.env.NODE_ENV&&function(){var t=e("object-assign"),n=e("prop-types/checkPropTypes"),r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,s=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,m=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,p=r?Symbol.for("react.suspense"):60113,f=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,b=r?Symbol.for("react.lazy"):60116,v=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,k=r?Symbol.for("react.scope"):60119,C="function"==typeof Symbol&&Symbol.iterator;function A(e){if(null===e||"object"!=typeof e)return null;var t=C&&e[C]||e["@@iterator"];return"function"==typeof t?t:null}var x={current:null},E={current:null},_=/^(.*)[\\\/]/;function M(e){if(null==e)return null;if("number"==typeof e.tag&&z("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case s:return"Fragment";case i:return"Portal";case l:return"Profiler";case c:return"StrictMode";case p:return"Suspense";case f:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case m:return"Context.Consumer";case u:return"Context.Provider";case h:return n=e,r=e.render,a="ForwardRef",d=r.displayName||r.name||"",n.displayName||(""!==d?a+"("+d+")":a);case g:return M(e.type);case v:return M(e.render);case b:var t=1===(o=e)._status?o._result:null;if(t)return M(t)}var o,n,r,a,d;return null}var D={},T=null;function S(e){T=e}D.getCurrentStack=null,D.getStackAddendum=function(){var e="";if(T){var t=M(T.type),o=T._owner;e+=function(e,t,o){var n="";if(t){var r=t.fileName,a=r.replace(_,"");if(/^index\./.test(a)){var i=r.match(_);if(i){var s=i[1];if(s)a=s.replace(_,"")+"/"+a}}n=" (at "+a+":"+t.lineNumber+")"}else o&&(n=" (created by "+o+")");return"\n    in "+(e||"Unknown")+n}(t,T._source,o&&M(o.type))}var n=D.getCurrentStack;return n&&(e+=n()||""),e};var q={ReactCurrentDispatcher:x,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:t};function R(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];V("warn",e,o)}function z(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];V("error",e,o)}function V(e,t,o){if(!(o.length>0&&"string"==typeof o[o.length-1]&&0===o[o.length-1].indexOf("\n    in"))){var n=q.ReactDebugCurrentFrame.getStackAddendum();""!==n&&(t+="%s",o=o.concat([n]))}var r=o.map((function(e){return""+e}));r.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,r);try{var a=0,i="Warning: "+t.replace(/%s/g,(function(){return o[a++]}));throw new Error(i)}catch(e){}}t(q,{ReactDebugCurrentFrame:D,ReactComponentTreeHook:{}});var B={};function G(e,t){var o=e.constructor,n=o&&(o.displayName||o.name)||"ReactClass",r=n+"."+t;B[r]||(z("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,n),B[r]=!0)}var P={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,o){G(e,"forceUpdate")},enqueueReplaceState:function(e,t,o,n){G(e,"replaceState")},enqueueSetState:function(e,t,o,n){G(e,"setState")}},N={};function j(e,t,o){this.props=e,this.context=t,this.refs=N,this.updater=o||P}Object.freeze(N),j.prototype.isReactComponent={},j.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},j.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var F={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},I=function(e,t){Object.defineProperty(j.prototype,e,{get:function(){R("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var H in F)F.hasOwnProperty(H)&&I(H,F[H]);function O(){}function L(e,t,o){this.props=e,this.context=t,this.refs=N,this.updater=o||P}O.prototype=j.prototype;var U=L.prototype=new O;U.constructor=L,t(U,j.prototype),U.isPureReactComponent=!0;var W,$,Q,K=Object.prototype.hasOwnProperty,Y={key:!0,ref:!0,__self:!0,__source:!0};function J(e){if(K.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function Z(e){if(K.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function X(e,t){var o=function(){W||(W=!0,z("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",t))};o.isReactWarning=!0,Object.defineProperty(e,"key",{get:o,configurable:!0})}function ee(e,t){var o=function(){$||($=!0,z("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",t))};o.isReactWarning=!0,Object.defineProperty(e,"ref",{get:o,configurable:!0})}function te(e){if("string"==typeof e.ref&&E.current&&e.__self&&E.current.stateNode!==e.__self){var t=M(E.current.type);Q[t]||(z('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref',M(E.current.type),e.ref),Q[t]=!0)}}Q={};var oe=function(e,t,o,n,r,i,s){var c={$$typeof:a,type:e,key:t,ref:o,props:s,_owner:i,_store:{}};return Object.defineProperty(c._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(c,"_self",{configurable:!1,enumerable:!1,writable:!1,value:n}),Object.defineProperty(c,"_source",{configurable:!1,enumerable:!1,writable:!1,value:r}),Object.freeze&&(Object.freeze(c.props),Object.freeze(c)),c};function ne(e,t,o){var n,r={},a=null,i=null,s=null,c=null;if(null!=t)for(n in J(t)&&(i=t.ref,te(t)),Z(t)&&(a=""+t.key),s=void 0===t.__self?null:t.__self,c=void 0===t.__source?null:t.__source,t)K.call(t,n)&&!Y.hasOwnProperty(n)&&(r[n]=t[n]);var l=arguments.length-2;if(1===l)r.children=o;else if(l>1){for(var u=Array(l),m=0;m<l;m++)u[m]=arguments[m+2];Object.freeze&&Object.freeze(u),r.children=u}if(e&&e.defaultProps){var d=e.defaultProps;for(n in d)void 0===r[n]&&(r[n]=d[n])}if(a||i){var h="function"==typeof e?e.displayName||e.name||"Unknown":e;a&&X(r,h),i&&ee(r,h)}return oe(e,a,i,s,c,E.current,r)}function re(e,o,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r,a,i=t({},e.props),s=e.key,c=e.ref,l=e._self,u=e._source,m=e._owner;if(null!=o)for(r in J(o)&&(c=o.ref,m=E.current),Z(o)&&(s=""+o.key),e.type&&e.type.defaultProps&&(a=e.type.defaultProps),o)K.call(o,r)&&!Y.hasOwnProperty(r)&&(void 0===o[r]&&void 0!==a?i[r]=a[r]:i[r]=o[r]);var d=arguments.length-2;if(1===d)i.children=n;else if(d>1){for(var h=Array(d),p=0;p<d;p++)h[p]=arguments[p+2];i.children=h}return oe(e.type,s,c,l,u,m,i)}function ae(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var ie=!1,se=/\/+/g;function ce(e){return(""+e).replace(se,"$&/")}var le,ue=[];function me(e,t,o,n){if(ue.length){var r=ue.pop();return r.result=e,r.keyPrefix=t,r.func=o,r.context=n,r.count=0,r}return{result:e,keyPrefix:t,func:o,context:n,count:0}}function de(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,ue.length<10&&ue.push(e)}function he(e,t,o){return null==e?0:function e(t,o,n,r){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var c,l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case i:l=!0}}if(l)return n(r,t,""===o?"."+pe(t,0):o),1;var u=0,m=""===o?".":o+":";if(Array.isArray(t))for(var d=0;d<t.length;d++)u+=e(c=t[d],m+pe(c,d),n,r);else{var h=A(t);if("function"==typeof h){h===t.entries&&(ie||R("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead."),ie=!0);for(var p,f=h.call(t),g=0;!(p=f.next()).done;)u+=e(c=p.value,m+pe(c,g++),n,r)}else if("object"===s){var b;b=" If you meant to render a collection of children, use an array instead."+D.getStackAddendum();var v=""+t;throw Error("Objects are not valid as a React child (found: "+("[object Object]"===v?"object with keys {"+Object.keys(t).join(", ")+"}":v)+")."+b)}}return u}(e,"",t,o)}function pe(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(o=e.key,n={"=":"=0",":":"=2"},"$"+(""+o).replace(/[=:]/g,(function(e){return n[e]}))):t.toString(36);var o,n}function fe(e,t,o){var n=e.func,r=e.context;n.call(r,t,e.count++)}function ge(e,t,o){var n,r,a=e.result,i=e.keyPrefix,s=e.func,c=e.context,l=s.call(c,t,e.count++);Array.isArray(l)?be(l,a,o,(function(e){return e})):null!=l&&(ae(l)&&(n=l,r=i+(!l.key||t&&t.key===l.key?"":ce(l.key)+"/")+o,l=oe(n.type,r,n.ref,n._self,n._source,n._owner,n.props)),a.push(l))}function be(e,t,o,n,r){var a="";null!=o&&(a=ce(o)+"/");var i=me(t,a,n,r);he(e,ge,i),de(i)}function ve(e){return"string"==typeof e||"function"==typeof e||e===s||e===d||e===l||e===c||e===p||e===f||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===g||e.$$typeof===u||e.$$typeof===m||e.$$typeof===h||e.$$typeof===y||e.$$typeof===w||e.$$typeof===k||e.$$typeof===v)}function ye(){var e=x.current;if(null===e)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");return e}function we(){if(E.current){var e=M(E.current.type);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}function ke(e){return null!=e&&void 0!==(t=e.__source)?"\n\nCheck your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+".":"";var t}le=!1;var Ce={};function Ae(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var o=function(e){var t=we();if(!t){var o="string"==typeof e?e:e.displayName||e.name;o&&(t="\n\nCheck the top-level render call using <"+o+">.")}return t}(t);if(!Ce[o]){Ce[o]=!0;var n="";e&&e._owner&&e._owner!==E.current&&(n=" It was passed a child from "+M(e._owner.type)+"."),S(e),z('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.',o,n),S(null)}}}function xe(e,t){if("object"==typeof e)if(Array.isArray(e))for(var o=0;o<e.length;o++){var n=e[o];ae(n)&&Ae(n,t)}else if(ae(e))e._store&&(e._store.validated=!0);else if(e){var r=A(e);if("function"==typeof r&&r!==e.entries)for(var a,i=r.call(e);!(a=i.next()).done;)ae(a.value)&&Ae(a.value,t)}}function Ee(e){var t=e.type;if(null!=t&&"string"!=typeof t){var o,r=M(t);if("function"==typeof t)o=t.propTypes;else{if("object"!=typeof t||t.$$typeof!==h&&t.$$typeof!==g)return;o=t.propTypes}o?(S(e),n(o,e.props,"prop",r,D.getStackAddendum),S(null)):void 0===t.PropTypes||le||(le=!0,z("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",r||"Unknown")),"function"!=typeof t.getDefaultProps||t.getDefaultProps.isReactClassApproved||z("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function _e(e){S(e);for(var t=Object.keys(e.props),o=0;o<t.length;o++){var n=t[o];if("children"!==n&&"key"!==n){z("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",n);break}}null!==e.ref&&z("Invalid attribute `ref` supplied to `React.Fragment`."),S(null)}function Me(e,t,o){var n=ve(e);if(!n){var r="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(r+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var i,c=ke(t);r+=c||we(),null===e?i="null":Array.isArray(e)?i="array":void 0!==e&&e.$$typeof===a?(i="<"+(M(e.type)||"Unknown")+" />",r=" Did you accidentally export a JSX literal instead of a component?"):i=typeof e,z("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",i,r)}var l=ne.apply(this,arguments);if(null==l)return l;if(n)for(var u=2;u<arguments.length;u++)xe(arguments[u],e);return e===s?_e(l):Ee(l),l}var De=!1;try{var Te=Object.freeze({}),Se=new Map([[Te,null]]),qe=new Set([Te]);Se.set(0,0),qe.add(0)}catch(e){}var Re=Me,ze=function(e,t,o){for(var n=re.apply(this,arguments),r=2;r<arguments.length;r++)xe(arguments[r],n.type);return Ee(n),n},Ve=function(e){var t=Me.bind(null,e);return t.type=e,De||(De=!0,R("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(t,"type",{enumerable:!1,get:function(){return R("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},Be={map:function(e,t,o){if(null==e)return e;var n=[];return be(e,n,null,t,o),n},forEach:function(e,t,o){if(null==e)return e;var n=me(null,null,t,o);he(e,fe,n),de(n)},count:function(e){return he(e,(function(){return null}),null)},toArray:function(e){var t=[];return be(e,t,null,(function(e){return e})),t},only:function(e){if(!ae(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};o.Children=Be,o.Component=j,o.Fragment=s,o.Profiler=l,o.PureComponent=L,o.StrictMode=c,o.Suspense=p,o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=q,o.cloneElement=ze,o.createContext=function(e,t){void 0===t?t=null:null!==t&&"function"!=typeof t&&z("createContext: Expected the optional second argument to be a function. Instead received: %s",t);var o={$$typeof:m,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null};o.Provider={$$typeof:u,_context:o};var n=!1,r=!1,a={$$typeof:m,_context:o,_calculateChangedBits:o._calculateChangedBits};return Object.defineProperties(a,{Provider:{get:function(){return r||(r=!0,z("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),o.Provider},set:function(e){o.Provider=e}},_currentValue:{get:function(){return o._currentValue},set:function(e){o._currentValue=e}},_currentValue2:{get:function(){return o._currentValue2},set:function(e){o._currentValue2=e}},_threadCount:{get:function(){return o._threadCount},set:function(e){o._threadCount=e}},Consumer:{get:function(){return n||(n=!0,z("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),o.Consumer}}}),o.Consumer=a,o._currentRenderer=null,o._currentRenderer2=null,o},o.createElement=Re,o.createFactory=Ve,o.createRef=function(){var e={current:null};return Object.seal(e),e},o.forwardRef=function(e){return null!=e&&e.$$typeof===g?z("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?z("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&z("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&(null==e.defaultProps&&null==e.propTypes||z("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?")),{$$typeof:h,render:e}},o.isValidElement=ae,o.lazy=function(e){var t,o,n={$$typeof:b,_ctor:e,_status:-1,_result:null};return Object.defineProperties(n,{defaultProps:{configurable:!0,get:function(){return t},set:function(e){z("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),t=e,Object.defineProperty(n,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return o},set:function(e){z("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),o=e,Object.defineProperty(n,"propTypes",{enumerable:!0})}}}),n},o.memo=function(e,t){return ve(e)||z("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e),{$$typeof:g,type:e,compare:void 0===t?null:t}},o.useCallback=function(e,t){return ye().useCallback(e,t)},o.useContext=function(e,t){var o=ye();if(void 0!==t&&z("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s",t,"number"==typeof t&&Array.isArray(arguments[2])?"\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks":""),void 0!==e._context){var n=e._context;n.Consumer===e?z("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):n.Provider===e&&z("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return o.useContext(e,t)},o.useDebugValue=function(e,t){return ye().useDebugValue(e,t)},o.useEffect=function(e,t){return ye().useEffect(e,t)},o.useImperativeHandle=function(e,t,o){return ye().useImperativeHandle(e,t,o)},o.useLayoutEffect=function(e,t){return ye().useLayoutEffect(e,t)},o.useMemo=function(e,t){return ye().useMemo(e,t)},o.useReducer=function(e,t,o){return ye().useReducer(e,t,o)},o.useRef=function(e){return ye().useRef(e)},o.useState=function(e){return ye().useState(e)},o.version="16.13.0"}()}).call(this,e("_process"))},{_process:15,"object-assign":13,"prop-types/checkPropTypes":16}],29:[function(e,t,o){
/** @license React v16.13.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";var n=e("object-assign"),r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,s=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,m=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.memo"):60115,f=r?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=1;o<arguments.length;o++)t+="&args[]="+encodeURIComponent(arguments[o]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function w(e,t,o){this.props=e,this.context=t,this.refs=y,this.updater=o||v}function k(){}function C(e,t,o){this.props=e,this.context=t,this.refs=y,this.updater=o||v}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=w.prototype;var A=C.prototype=new k;A.constructor=C,n(A,w.prototype),A.isPureReactComponent=!0;var x={current:null},E=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function M(e,t,o){var n,r={},i=null,s=null;if(null!=t)for(n in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,n)&&!_.hasOwnProperty(n)&&(r[n]=t[n]);var c=arguments.length-2;if(1===c)r.children=o;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];r.children=l}if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===r[n]&&(r[n]=c[n]);return{$$typeof:a,type:e,key:i,ref:s,props:r,_owner:x.current}}function D(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var T=/\/+/g,S=[];function q(e,t,o,n){if(S.length){var r=S.pop();return r.result=e,r.keyPrefix=t,r.func=o,r.context=n,r.count=0,r}return{result:e,keyPrefix:t,func:o,context:n,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>S.length&&S.push(e)}function z(e,t,o){return null==e?0:function e(t,o,n,r){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var c=!1;if(null===t)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case a:case i:c=!0}}if(c)return n(r,t,""===o?"."+V(t,0):o),1;if(c=0,o=""===o?".":o+":",Array.isArray(t))for(var l=0;l<t.length;l++){var u=o+V(s=t[l],l);c+=e(s,u,n,r)}else if(null===t||"object"!=typeof t?u=null:u="function"==typeof(u=g&&t[g]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),l=0;!(s=t.next()).done;)c+=e(s=s.value,u=o+V(s,l++),n,r);else if("object"===s)throw n=""+t,Error(b(31,"[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n,""));return c}(e,"",t,o)}function V(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function G(e,t,o){var n=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?P(e,n,o,(function(e){return e})):null!=e&&(D(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+o)),n.push(e))}function P(e,t,o,n,r){var a="";null!=o&&(a=(""+o).replace(T,"$&/")+"/"),z(e,G,t=q(t,a,n,r)),R(t)}var N={current:null};function j(){var e=N.current;if(null===e)throw Error(b(321));return e}var F={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:n};o.Children={map:function(e,t,o){if(null==e)return e;var n=[];return P(e,n,null,t,o),n},forEach:function(e,t,o){if(null==e)return e;z(e,B,t=q(null,null,t,o)),R(t)},count:function(e){return z(e,(function(){return null}),null)},toArray:function(e){var t=[];return P(e,t,null,(function(e){return e})),t},only:function(e){if(!D(e))throw Error(b(143));return e}},o.Component=w,o.Fragment=s,o.Profiler=l,o.PureComponent=C,o.StrictMode=c,o.Suspense=h,o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,o.cloneElement=function(e,t,o){if(null==e)throw Error(b(267,e));var r=n({},e.props),i=e.key,s=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,c=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)E.call(t,u)&&!_.hasOwnProperty(u)&&(r[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)r.children=o;else if(1<u){l=Array(u);for(var m=0;m<u;m++)l[m]=arguments[m+2];r.children=l}return{$$typeof:a,type:e.type,key:i,ref:s,props:r,_owner:c}},o.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:m,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},o.createElement=M,o.createFactory=function(e){var t=M.bind(null,e);return t.type=e,t},o.createRef=function(){return{current:null}},o.forwardRef=function(e){return{$$typeof:d,render:e}},o.isValidElement=D,o.lazy=function(e){return{$$typeof:f,_ctor:e,_status:-1,_result:null}},o.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},o.useCallback=function(e,t){return j().useCallback(e,t)},o.useContext=function(e,t){return j().useContext(e,t)},o.useDebugValue=function(){},o.useEffect=function(e,t){return j().useEffect(e,t)},o.useImperativeHandle=function(e,t,o){return j().useImperativeHandle(e,t,o)},o.useLayoutEffect=function(e,t){return j().useLayoutEffect(e,t)},o.useMemo=function(e,t){return j().useMemo(e,t)},o.useReducer=function(e,t,o){return j().useReducer(e,t,o)},o.useRef=function(e){return j().useRef(e)},o.useState=function(e){return j().useState(e)},o.version="16.13.0"},{"object-assign":13}],30:[function(e,t,o){(function(o){"use strict";"production"===o.env.NODE_ENV?t.exports=e("./cjs/react.production.min.js"):t.exports=e("./cjs/react.development.js")}).call(this,e("_process"))},{"./cjs/react.development.js":28,"./cjs/react.production.min.js":29,_process:15}],31:[function(e,t,o){(function(e){
/** @license React v0.19.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";"production"!==e.env.NODE_ENV&&function(){var e=0,t=0;o.__interactionsRef=null,o.__subscriberRef=null,o.__interactionsRef={current:new Set},o.__subscriberRef={current:null};var n=null;function r(e){var t=!1,o=null;if(n.forEach((function(n){try{n.onInteractionTraced(e)}catch(e){t||(t=!0,o=e)}})),t)throw o}function a(e){var t=!1,o=null;if(n.forEach((function(n){try{n.onInteractionScheduledWorkCompleted(e)}catch(e){t||(t=!0,o=e)}})),t)throw o}function i(e,t){var o=!1,r=null;if(n.forEach((function(n){try{n.onWorkScheduled(e,t)}catch(e){o||(o=!0,r=e)}})),o)throw r}function s(e,t){var o=!1,r=null;if(n.forEach((function(n){try{n.onWorkStarted(e,t)}catch(e){o||(o=!0,r=e)}})),o)throw r}function c(e,t){var o=!1,r=null;if(n.forEach((function(n){try{n.onWorkStopped(e,t)}catch(e){o||(o=!0,r=e)}})),o)throw r}function l(e,t){var o=!1,r=null;if(n.forEach((function(n){try{n.onWorkCanceled(e,t)}catch(e){o||(o=!0,r=e)}})),o)throw r}n=new Set,o.unstable_clear=function(e){var t=o.__interactionsRef.current;o.__interactionsRef.current=new Set;try{return e()}finally{o.__interactionsRef.current=t}},o.unstable_getCurrent=function(){return o.__interactionsRef.current},o.unstable_getThreadID=function(){return++t},o.unstable_subscribe=function(e){n.add(e),1===n.size&&(o.__subscriberRef.current={onInteractionScheduledWorkCompleted:a,onInteractionTraced:r,onWorkCanceled:l,onWorkScheduled:i,onWorkStarted:s,onWorkStopped:c})},o.unstable_trace=function(t,n,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i={__count:1,id:e++,name:t,timestamp:n},s=o.__interactionsRef.current,c=new Set(s);c.add(i),o.__interactionsRef.current=c;var l,u=o.__subscriberRef.current;try{null!==u&&u.onInteractionTraced(i)}finally{try{null!==u&&u.onWorkStarted(c,a)}finally{try{l=r()}finally{o.__interactionsRef.current=s;try{null!==u&&u.onWorkStopped(c,a)}finally{i.__count--,null!==u&&0===i.__count&&u.onInteractionScheduledWorkCompleted(i)}}}}return l},o.unstable_unsubscribe=function(e){n.delete(e),0===n.size&&(o.__subscriberRef.current=null)},o.unstable_wrap=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=o.__interactionsRef.current,r=o.__subscriberRef.current;null!==r&&r.onWorkScheduled(n,t),n.forEach((function(e){e.__count++}));var a=!1;function i(){var i=o.__interactionsRef.current;o.__interactionsRef.current=n,r=o.__subscriberRef.current;try{var s;try{null!==r&&r.onWorkStarted(n,t)}finally{try{s=e.apply(void 0,arguments)}finally{o.__interactionsRef.current=i,null!==r&&r.onWorkStopped(n,t)}}return s}finally{a||(a=!0,n.forEach((function(e){e.__count--,null!==r&&0===e.__count&&r.onInteractionScheduledWorkCompleted(e)})))}}return i.cancel=function(){r=o.__subscriberRef.current;try{null!==r&&r.onWorkCanceled(n,t)}finally{n.forEach((function(e){e.__count--,r&&0===e.__count&&r.onInteractionScheduledWorkCompleted(e)}))}},i}}()}).call(this,e("_process"))},{_process:15}],32:[function(e,t,o){
/** @license React v0.19.0
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";var n=0;o.__interactionsRef=null,o.__subscriberRef=null,o.unstable_clear=function(e){return e()},o.unstable_getCurrent=function(){return null},o.unstable_getThreadID=function(){return++n},o.unstable_subscribe=function(){},o.unstable_trace=function(e,t,o){return o()},o.unstable_unsubscribe=function(){},o.unstable_wrap=function(e){return e}},{}],33:[function(e,t,o){(function(e){
/** @license React v0.19.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";"production"!==e.env.NODE_ENV&&function(){var e,t,n,r,a;if("undefined"==typeof window||"function"!=typeof MessageChannel){var i=null,s=null,c=function(){if(null!==i)try{var e=o.unstable_now();i(!0,e),i=null}catch(e){throw setTimeout(c,0),e}},l=Date.now();o.unstable_now=function(){return Date.now()-l},e=function(t){null!==i?setTimeout(e,0,t):(i=t,setTimeout(c,0))},t=function(e,t){s=setTimeout(e,t)},n=function(){clearTimeout(s)},r=function(){return!1},a=o.unstable_forceFrameRate=function(){}}else{var u=window.performance,m=window.Date,d=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.requestAnimationFrame,f=window.cancelAnimationFrame;"function"!=typeof p&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof f&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof u&&"function"==typeof u.now)o.unstable_now=function(){return u.now()};else{var g=m.now();o.unstable_now=function(){return m.now()-g}}var b=!1,v=null,y=-1,w=5,k=0;r=function(){return o.unstable_now()>=k},a=function(){},o.unstable_forceFrameRate=function(e){e<0||e>125?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=e>0?Math.floor(1e3/e):5};var C=new MessageChannel,A=C.port2;C.port1.onmessage=function(){if(null!==v){var e=o.unstable_now();k=e+w;try{v(!0,e)?A.postMessage(null):(b=!1,v=null)}catch(e){throw A.postMessage(null),e}}else b=!1},e=function(e){v=e,b||(b=!0,A.postMessage(null))},t=function(e,t){y=d((function(){e(o.unstable_now())}),t)},n=function(){h(y),y=-1}}function x(e,t){var o=e.length;e.push(t),function(e,t,o){var n=o;for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&M(a,t)>0))return;e[r]=t,e[n]=a,n=r}}(e,t,o)}function E(e){var t=e[0];return void 0===t?null:t}function _(e){var t=e[0];if(void 0!==t){var o=e.pop();return o!==t&&(e[0]=o,function(e,t,o){var n=o,r=e.length;for(;n<r;){var a=2*(n+1)-1,i=e[a],s=a+1,c=e[s];if(void 0!==i&&M(i,t)<0)void 0!==c&&M(c,i)<0?(e[n]=c,e[s]=t,n=s):(e[n]=i,e[a]=t,n=a);else{if(!(void 0!==c&&M(c,t)<0))return;e[n]=c,e[s]=t,n=s}}}(e,o,0)),t}return null}function M(e,t){var o=e.sortIndex-t.sortIndex;return 0!==o?o:e.id-t.id}var D=0,T=0,S="function"==typeof SharedArrayBuffer?new SharedArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT):"function"==typeof ArrayBuffer?new ArrayBuffer(4*Int32Array.BYTES_PER_ELEMENT):null,q=null!==S?new Int32Array(S):[];q[0]=0,q[3]=0,q[1]=0;var R=0,z=null,V=null,B=0;function G(e){if(null!==V){var t=B;if((B+=e.length)+1>R){if((R*=2)>524288)return console.error("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`."),void P();var o=new Int32Array(4*R);o.set(V),z=o.buffer,V=o}V.set(e,t)}}function P(){var e=z;return R=0,z=null,V=null,B=0,e}function N(e,t){q[3]++,null!==V&&G([1,1e3*t,e.id,e.priorityLevel])}function j(e,t){q[0]=0,q[1]=0,q[3]--,null!==V&&G([2,1e3*t,e.id])}function F(e,t){q[0]=0,q[1]=0,q[2]=0,null!==V&&G([6,1e3*t,e.id,D])}var I=[],H=[],O=1,L=null,U=3,W=!1,$=!1,Q=!1;function K(e){for(var t=E(H);null!==t;){if(null===t.callback)_(H);else{if(!(t.startTime<=e))return;_(H),t.sortIndex=t.expirationTime,x(I,t),N(t,e),t.isQueued=!0}t=E(H)}}function Y(o){if(Q=!1,K(o),!$)if(null!==E(I))$=!0,e(J);else{var n=E(H);null!==n&&t(Y,n.startTime-o)}}function J(e,t){var r;r=t,null!==V&&G([8,1e3*r,T]),$=!1,Q&&(Q=!1,n()),W=!0;var a=U;try{try{return Z(e,t)}catch(e){if(null!==L){var i=o.unstable_now();!function(e,t){q[0]=0,q[1]=0,q[3]--,null!==V&&G([3,1e3*t,e.id])}(L,i),L.isQueued=!1}throw e}}finally{L=null,U=a,W=!1,function(e){T++,null!==V&&G([7,1e3*e,T])}(o.unstable_now())}}function Z(e,n){var a,i,s=n;for(K(s),L=E(I);null!==L&&(!(L.expirationTime>s)||e&&!r());){var c=L.callback;if(null!==c){L.callback=null,U=L.priorityLevel;var l=L.expirationTime<=s;a=L,i=s,D++,q[0]=a.priorityLevel,q[1]=a.id,q[2]=D,null!==V&&G([5,1e3*i,a.id,D]);var u=c(l);s=o.unstable_now(),"function"==typeof u?(L.callback=u,F(L,s)):(j(L,s),L.isQueued=!1,L===E(I)&&_(I)),K(s)}else _(I);L=E(I)}if(null!==L)return!0;var m=E(H);return null!==m&&t(Y,m.startTime-s),!1}function X(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;case 3:default:return 5e3}}var ee=a,te={startLoggingProfilingEvents:function(){R=131072,z=new ArrayBuffer(4*R),V=new Int32Array(z),B=0},stopLoggingProfilingEvents:P,sharedProfilingBuffer:S};o.unstable_IdlePriority=5,o.unstable_ImmediatePriority=1,o.unstable_LowPriority=4,o.unstable_NormalPriority=3,o.unstable_Profiling=te,o.unstable_UserBlockingPriority=2,o.unstable_cancelCallback=function(e){e.isQueued&&(!function(e,t){q[3]--,null!==V&&G([4,1e3*t,e.id])}(e,o.unstable_now()),e.isQueued=!1),e.callback=null},o.unstable_continueExecution=function(){$||W||($=!0,e(J))},o.unstable_getCurrentPriorityLevel=function(){return U},o.unstable_getFirstCallbackNode=function(){return E(I)},o.unstable_next=function(e){var t;switch(U){case 1:case 2:case 3:t=3;break;default:t=U}var o=U;U=t;try{return e()}finally{U=o}},o.unstable_pauseExecution=function(){},o.unstable_requestPaint=ee,o.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var o=U;U=e;try{return t()}finally{U=o}},o.unstable_scheduleCallback=function(r,a,i){var s,c,l=o.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;s="number"==typeof u&&u>0?l+u:l,c="number"==typeof i.timeout?i.timeout:X(r)}else c=X(r),s=l;var m=s+c,d={id:O++,callback:a,priorityLevel:r,startTime:s,expirationTime:m,sortIndex:-1,isQueued:!1};return s>l?(d.sortIndex=s,x(H,d),null===E(I)&&d===E(H)&&(Q?n():Q=!0,t(Y,s-l))):(d.sortIndex=m,x(I,d),N(d,l),d.isQueued=!0,$||W||($=!0,e(J))),d},o.unstable_shouldYield=function(){var e=o.unstable_now();K(e);var t=E(I);return t!==L&&null!==L&&null!==t&&null!==t.callback&&t.startTime<=e&&t.expirationTime<L.expirationTime||r()},o.unstable_wrapCallback=function(e){var t=U;return function(){var o=U;U=t;try{return e.apply(this,arguments)}finally{U=o}}}}()}).call(this,e("_process"))},{_process:15}],34:[function(e,t,o){
/** @license React v0.19.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";var n,r,a,i,s;if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,l=null,u=function(){if(null!==c)try{var e=o.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(u,0),e}},m=Date.now();o.unstable_now=function(){return Date.now()-m},n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(u,0))},r=function(e,t){l=setTimeout(e,t)},a=function(){clearTimeout(l)},i=function(){return!1},s=o.unstable_forceFrameRate=function(){}}else{var d=window.performance,h=window.Date,p=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)o.unstable_now=function(){return d.now()};else{var b=h.now();o.unstable_now=function(){return h.now()-b}}var v=!1,y=null,w=-1,k=5,C=0;i=function(){return o.unstable_now()>=C},s=function(){},o.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):k=0<e?Math.floor(1e3/e):5};var A=new MessageChannel,x=A.port2;A.port1.onmessage=function(){if(null!==y){var e=o.unstable_now();C=e+k;try{y(!0,e)?x.postMessage(null):(v=!1,y=null)}catch(e){throw x.postMessage(null),e}}else v=!1},n=function(e){y=e,v||(v=!0,x.postMessage(null))},r=function(e,t){w=p((function(){e(o.unstable_now())}),t)},a=function(){f(w),w=-1}}function E(e,t){var o=e.length;e.push(t);e:for(;;){var n=o-1>>>1,r=e[n];if(!(void 0!==r&&0<D(r,t)))break e;e[n]=t,e[o]=r,o=n}}function _(e){return void 0===(e=e[0])?null:e}function M(e){var t=e[0];if(void 0!==t){var o=e.pop();if(o!==t){e[0]=o;e:for(var n=0,r=e.length;n<r;){var a=2*(n+1)-1,i=e[a],s=a+1,c=e[s];if(void 0!==i&&0>D(i,o))void 0!==c&&0>D(c,i)?(e[n]=c,e[s]=o,n=s):(e[n]=i,e[a]=o,n=a);else{if(!(void 0!==c&&0>D(c,o)))break e;e[n]=c,e[s]=o,n=s}}}return t}return null}function D(e,t){var o=e.sortIndex-t.sortIndex;return 0!==o?o:e.id-t.id}var T=[],S=[],q=1,R=null,z=3,V=!1,B=!1,G=!1;function P(e){for(var t=_(S);null!==t;){if(null===t.callback)M(S);else{if(!(t.startTime<=e))break;M(S),t.sortIndex=t.expirationTime,E(T,t)}t=_(S)}}function N(e){if(G=!1,P(e),!B)if(null!==_(T))B=!0,n(j);else{var t=_(S);null!==t&&r(N,t.startTime-e)}}function j(e,t){B=!1,G&&(G=!1,a()),V=!0;var n=z;try{for(P(t),R=_(T);null!==R&&(!(R.expirationTime>t)||e&&!i());){var s=R.callback;if(null!==s){R.callback=null,z=R.priorityLevel;var c=s(R.expirationTime<=t);t=o.unstable_now(),"function"==typeof c?R.callback=c:R===_(T)&&M(T),P(t)}else M(T);R=_(T)}if(null!==R)var l=!0;else{var u=_(S);null!==u&&r(N,u.startTime-t),l=!1}return l}finally{R=null,z=n,V=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var I=s;o.unstable_IdlePriority=5,o.unstable_ImmediatePriority=1,o.unstable_LowPriority=4,o.unstable_NormalPriority=3,o.unstable_Profiling=null,o.unstable_UserBlockingPriority=2,o.unstable_cancelCallback=function(e){e.callback=null},o.unstable_continueExecution=function(){B||V||(B=!0,n(j))},o.unstable_getCurrentPriorityLevel=function(){return z},o.unstable_getFirstCallbackNode=function(){return _(T)},o.unstable_next=function(e){switch(z){case 1:case 2:case 3:var t=3;break;default:t=z}var o=z;z=t;try{return e()}finally{z=o}},o.unstable_pauseExecution=function(){},o.unstable_requestPaint=I,o.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var o=z;z=e;try{return t()}finally{z=o}},o.unstable_scheduleCallback=function(e,t,i){var s=o.unstable_now();if("object"==typeof i&&null!==i){var c=i.delay;c="number"==typeof c&&0<c?s+c:s,i="number"==typeof i.timeout?i.timeout:F(e)}else i=F(e),c=s;return e={id:q++,callback:t,priorityLevel:e,startTime:c,expirationTime:i=c+i,sortIndex:-1},c>s?(e.sortIndex=c,E(S,e),null===_(T)&&e===_(S)&&(G?a():G=!0,r(N,c-s))):(e.sortIndex=i,E(T,e),B||V||(B=!0,n(j))),e},o.unstable_shouldYield=function(){var e=o.unstable_now();P(e);var t=_(T);return t!==R&&null!==R&&null!==t&&null!==t.callback&&t.startTime<=e&&t.expirationTime<R.expirationTime||i()},o.unstable_wrapCallback=function(e){var t=z;return function(){var o=z;z=t;try{return e.apply(this,arguments)}finally{z=o}}}},{}],35:[function(e,t,o){(function(o){"use strict";"production"===o.env.NODE_ENV?t.exports=e("./cjs/scheduler.production.min.js"):t.exports=e("./cjs/scheduler.development.js")}).call(this,e("_process"))},{"./cjs/scheduler.development.js":33,"./cjs/scheduler.production.min.js":34,_process:15}],36:[function(e,t,o){(function(o){"use strict";"production"===o.env.NODE_ENV?t.exports=e("./cjs/scheduler-tracing.production.min.js"):t.exports=e("./cjs/scheduler-tracing.development.js")}).call(this,e("_process"))},{"./cjs/scheduler-tracing.development.js":31,"./cjs/scheduler-tracing.production.min.js":32,_process:15}],37:[function(e,t,o){(function(t,n){var r=e("process/browser.js").nextTick,a=Function.prototype.apply,i=Array.prototype.slice,s={},c=0;function l(e,t){this._id=e,this._clearFn=t}o.setTimeout=function(){return new l(a.call(setTimeout,window,arguments),clearTimeout)},o.setInterval=function(){return new l(a.call(setInterval,window,arguments),clearInterval)},o.clearTimeout=o.clearInterval=function(e){e.close()},l.prototype.unref=l.prototype.ref=function(){},l.prototype.close=function(){this._clearFn.call(window,this._id)},o.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},o.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},o._unrefActive=o.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},o.setImmediate="function"==typeof t?t:function(e){var t=c++,n=!(arguments.length<2)&&i.call(arguments,1);return s[t]=!0,r((function(){s[t]&&(n?e.apply(null,n):e.call(null),o.clearImmediate(t))})),t},o.clearImmediate="function"==typeof n?n:function(e){delete s[e]}}).call(this,e("timers").setImmediate,e("timers").clearImmediate)},{"process/browser.js":15,timers:37}],38:[function(e,t,o){(function(){var e=this,n=e._,r={},a=Array.prototype,i=Object.prototype,s=Function.prototype,c=a.push,l=a.slice,u=a.concat,m=i.toString,d=i.hasOwnProperty,h=a.forEach,p=a.map,f=a.reduce,g=a.reduceRight,b=a.filter,v=a.every,y=a.some,w=a.indexOf,k=a.lastIndexOf,C=Array.isArray,A=Object.keys,x=s.bind,E=function(e){return e instanceof E?e:this instanceof E?void(this._wrapped=e):new E(e)};void 0!==o?(void 0!==t&&t.exports&&(o=t.exports=E),o._=E):e._=E,E.VERSION="1.4.4";var _=E.each=E.forEach=function(e,t,o){if(null!=e)if(h&&e.forEach===h)e.forEach(t,o);else if(e.length===+e.length){for(var n=0,a=e.length;n<a;n++)if(t.call(o,e[n],n,e)===r)return}else for(var i in e)if(E.has(e,i)&&t.call(o,e[i],i,e)===r)return};E.map=E.collect=function(e,t,o){var n=[];return null==e?n:p&&e.map===p?e.map(t,o):(_(e,(function(e,r,a){n[n.length]=t.call(o,e,r,a)})),n)};var M="Reduce of empty array with no initial value";E.reduce=E.foldl=E.inject=function(e,t,o,n){var r=arguments.length>2;if(null==e&&(e=[]),f&&e.reduce===f)return n&&(t=E.bind(t,n)),r?e.reduce(t,o):e.reduce(t);if(_(e,(function(e,a,i){r?o=t.call(n,o,e,a,i):(o=e,r=!0)})),!r)throw new TypeError(M);return o},E.reduceRight=E.foldr=function(e,t,o,n){var r=arguments.length>2;if(null==e&&(e=[]),g&&e.reduceRight===g)return n&&(t=E.bind(t,n)),r?e.reduceRight(t,o):e.reduceRight(t);var a=e.length;if(a!==+a){var i=E.keys(e);a=i.length}if(_(e,(function(s,c,l){c=i?i[--a]:--a,r?o=t.call(n,o,e[c],c,l):(o=e[c],r=!0)})),!r)throw new TypeError(M);return o},E.find=E.detect=function(e,t,o){var n;return D(e,(function(e,r,a){if(t.call(o,e,r,a))return n=e,!0})),n},E.filter=E.select=function(e,t,o){var n=[];return null==e?n:b&&e.filter===b?e.filter(t,o):(_(e,(function(e,r,a){t.call(o,e,r,a)&&(n[n.length]=e)})),n)},E.reject=function(e,t,o){return E.filter(e,(function(e,n,r){return!t.call(o,e,n,r)}),o)},E.every=E.all=function(e,t,o){t||(t=E.identity);var n=!0;return null==e?n:v&&e.every===v?e.every(t,o):(_(e,(function(e,a,i){if(!(n=n&&t.call(o,e,a,i)))return r})),!!n)};var D=E.some=E.any=function(e,t,o){t||(t=E.identity);var n=!1;return null==e?n:y&&e.some===y?e.some(t,o):(_(e,(function(e,a,i){if(n||(n=t.call(o,e,a,i)))return r})),!!n)};E.contains=E.include=function(e,t){return null!=e&&(w&&e.indexOf===w?-1!=e.indexOf(t):D(e,(function(e){return e===t})))},E.invoke=function(e,t){var o=l.call(arguments,2),n=E.isFunction(t);return E.map(e,(function(e){return(n?t:e[t]).apply(e,o)}))},E.pluck=function(e,t){return E.map(e,(function(e){return e[t]}))},E.where=function(e,t,o){return E.isEmpty(t)?o?null:[]:E[o?"find":"filter"](e,(function(e){for(var o in t)if(t[o]!==e[o])return!1;return!0}))},E.findWhere=function(e,t){return E.where(e,t,!0)},E.max=function(e,t,o){if(!t&&E.isArray(e)&&e[0]===+e[0]&&e.length<65535)return Math.max.apply(Math,e);if(!t&&E.isEmpty(e))return-1/0;var n={computed:-1/0,value:-1/0};return _(e,(function(e,r,a){var i=t?t.call(o,e,r,a):e;i>=n.computed&&(n={value:e,computed:i})})),n.value},E.min=function(e,t,o){if(!t&&E.isArray(e)&&e[0]===+e[0]&&e.length<65535)return Math.min.apply(Math,e);if(!t&&E.isEmpty(e))return 1/0;var n={computed:1/0,value:1/0};return _(e,(function(e,r,a){var i=t?t.call(o,e,r,a):e;i<n.computed&&(n={value:e,computed:i})})),n.value},E.shuffle=function(e){var t,o=0,n=[];return _(e,(function(e){t=E.random(o++),n[o-1]=n[t],n[t]=e})),n};var T=function(e){return E.isFunction(e)?e:function(t){return t[e]}};E.sortBy=function(e,t,o){var n=T(t);return E.pluck(E.map(e,(function(e,t,r){return{value:e,index:t,criteria:n.call(o,e,t,r)}})).sort((function(e,t){var o=e.criteria,n=t.criteria;if(o!==n){if(o>n||void 0===o)return 1;if(o<n||void 0===n)return-1}return e.index<t.index?-1:1})),"value")};var S=function(e,t,o,n){var r={},a=T(t||E.identity);return _(e,(function(t,i){var s=a.call(o,t,i,e);n(r,s,t)})),r};E.groupBy=function(e,t,o){return S(e,t,o,(function(e,t,o){(E.has(e,t)?e[t]:e[t]=[]).push(o)}))},E.countBy=function(e,t,o){return S(e,t,o,(function(e,t){E.has(e,t)||(e[t]=0),e[t]++}))},E.sortedIndex=function(e,t,o,n){for(var r=(o=null==o?E.identity:T(o)).call(n,t),a=0,i=e.length;a<i;){var s=a+i>>>1;o.call(n,e[s])<r?a=s+1:i=s}return a},E.toArray=function(e){return e?E.isArray(e)?l.call(e):e.length===+e.length?E.map(e,E.identity):E.values(e):[]},E.size=function(e){return null==e?0:e.length===+e.length?e.length:E.keys(e).length},E.first=E.head=E.take=function(e,t,o){if(null!=e)return null==t||o?e[0]:l.call(e,0,t)},E.initial=function(e,t,o){return l.call(e,0,e.length-(null==t||o?1:t))},E.last=function(e,t,o){if(null!=e)return null==t||o?e[e.length-1]:l.call(e,Math.max(e.length-t,0))},E.rest=E.tail=E.drop=function(e,t,o){return l.call(e,null==t||o?1:t)},E.compact=function(e){return E.filter(e,E.identity)};var q=function(e,t,o){return _(e,(function(e){E.isArray(e)?t?c.apply(o,e):q(e,t,o):o.push(e)})),o};E.flatten=function(e,t){return q(e,t,[])},E.without=function(e){return E.difference(e,l.call(arguments,1))},E.uniq=E.unique=function(e,t,o,n){E.isFunction(t)&&(n=o,o=t,t=!1);var r=o?E.map(e,o,n):e,a=[],i=[];return _(r,(function(o,n){(t?n&&i[i.length-1]===o:E.contains(i,o))||(i.push(o),a.push(e[n]))})),a},E.union=function(){return E.uniq(u.apply(a,arguments))},E.intersection=function(e){var t=l.call(arguments,1);return E.filter(E.uniq(e),(function(e){return E.every(t,(function(t){return E.indexOf(t,e)>=0}))}))},E.difference=function(e){var t=u.apply(a,l.call(arguments,1));return E.filter(e,(function(e){return!E.contains(t,e)}))},E.zip=function(){for(var e=l.call(arguments),t=E.max(E.pluck(e,"length")),o=new Array(t),n=0;n<t;n++)o[n]=E.pluck(e,""+n);return o},E.object=function(e,t){if(null==e)return{};for(var o={},n=0,r=e.length;n<r;n++)t?o[e[n]]=t[n]:o[e[n][0]]=e[n][1];return o},E.indexOf=function(e,t,o){if(null==e)return-1;var n=0,r=e.length;if(o){if("number"!=typeof o)return e[n=E.sortedIndex(e,t)]===t?n:-1;n=o<0?Math.max(0,r+o):o}if(w&&e.indexOf===w)return e.indexOf(t,o);for(;n<r;n++)if(e[n]===t)return n;return-1},E.lastIndexOf=function(e,t,o){if(null==e)return-1;var n=null!=o;if(k&&e.lastIndexOf===k)return n?e.lastIndexOf(t,o):e.lastIndexOf(t);for(var r=n?o:e.length;r--;)if(e[r]===t)return r;return-1},E.range=function(e,t,o){arguments.length<=1&&(t=e||0,e=0),o=arguments[2]||1;for(var n=Math.max(Math.ceil((t-e)/o),0),r=0,a=new Array(n);r<n;)a[r++]=e,e+=o;return a},E.bind=function(e,t){if(e.bind===x&&x)return x.apply(e,l.call(arguments,1));var o=l.call(arguments,2);return function(){return e.apply(t,o.concat(l.call(arguments)))}},E.partial=function(e){var t=l.call(arguments,1);return function(){return e.apply(this,t.concat(l.call(arguments)))}},E.bindAll=function(e){var t=l.call(arguments,1);return 0===t.length&&(t=E.functions(e)),_(t,(function(t){e[t]=E.bind(e[t],e)})),e},E.memoize=function(e,t){var o={};return t||(t=E.identity),function(){var n=t.apply(this,arguments);return E.has(o,n)?o[n]:o[n]=e.apply(this,arguments)}},E.delay=function(e,t){var o=l.call(arguments,2);return setTimeout((function(){return e.apply(null,o)}),t)},E.defer=function(e){return E.delay.apply(E,[e,1].concat(l.call(arguments,1)))},E.throttle=function(e,t){var o,n,r,a,i=0,s=function(){i=new Date,r=null,a=e.apply(o,n)};return function(){var c=new Date,l=t-(c-i);return o=this,n=arguments,l<=0?(clearTimeout(r),r=null,i=c,a=e.apply(o,n)):r||(r=setTimeout(s,l)),a}},E.debounce=function(e,t,o){var n,r;return function(){var a=this,i=arguments,s=function(){n=null,o||(r=e.apply(a,i))},c=o&&!n;return clearTimeout(n),n=setTimeout(s,t),c&&(r=e.apply(a,i)),r}},E.once=function(e){var t,o=!1;return function(){return o||(o=!0,t=e.apply(this,arguments),e=null),t}},E.wrap=function(e,t){return function(){var o=[e];return c.apply(o,arguments),t.apply(this,o)}},E.compose=function(){var e=arguments;return function(){for(var t=arguments,o=e.length-1;o>=0;o--)t=[e[o].apply(this,t)];return t[0]}},E.after=function(e,t){return e<=0?t():function(){if(--e<1)return t.apply(this,arguments)}},E.keys=A||function(e){if(e!==Object(e))throw new TypeError("Invalid object");var t=[];for(var o in e)E.has(e,o)&&(t[t.length]=o);return t},E.values=function(e){var t=[];for(var o in e)E.has(e,o)&&t.push(e[o]);return t},E.pairs=function(e){var t=[];for(var o in e)E.has(e,o)&&t.push([o,e[o]]);return t},E.invert=function(e){var t={};for(var o in e)E.has(e,o)&&(t[e[o]]=o);return t},E.functions=E.methods=function(e){var t=[];for(var o in e)E.isFunction(e[o])&&t.push(o);return t.sort()},E.extend=function(e){return _(l.call(arguments,1),(function(t){if(t)for(var o in t)e[o]=t[o]})),e},E.pick=function(e){var t={},o=u.apply(a,l.call(arguments,1));return _(o,(function(o){o in e&&(t[o]=e[o])})),t},E.omit=function(e){var t={},o=u.apply(a,l.call(arguments,1));for(var n in e)E.contains(o,n)||(t[n]=e[n]);return t},E.defaults=function(e){return _(l.call(arguments,1),(function(t){if(t)for(var o in t)null==e[o]&&(e[o]=t[o])})),e},E.clone=function(e){return E.isObject(e)?E.isArray(e)?e.slice():E.extend({},e):e},E.tap=function(e,t){return t(e),e};var R=function(e,t,o,n){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return e===t;e instanceof E&&(e=e._wrapped),t instanceof E&&(t=t._wrapped);var r=m.call(e);if(r!=m.call(t))return!1;switch(r){case"[object String]":return e==String(t);case"[object Number]":return e!=+e?t!=+t:0==e?1/e==1/t:e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object RegExp]":return e.source==t.source&&e.global==t.global&&e.multiline==t.multiline&&e.ignoreCase==t.ignoreCase}if("object"!=typeof e||"object"!=typeof t)return!1;for(var a=o.length;a--;)if(o[a]==e)return n[a]==t;o.push(e),n.push(t);var i=0,s=!0;if("[object Array]"==r){if(s=(i=e.length)==t.length)for(;i--&&(s=R(e[i],t[i],o,n)););}else{var c=e.constructor,l=t.constructor;if(c!==l&&!(E.isFunction(c)&&c instanceof c&&E.isFunction(l)&&l instanceof l))return!1;for(var u in e)if(E.has(e,u)&&(i++,!(s=E.has(t,u)&&R(e[u],t[u],o,n))))break;if(s){for(u in t)if(E.has(t,u)&&!i--)break;s=!i}}return o.pop(),n.pop(),s};E.isEqual=function(e,t){return R(e,t,[],[])},E.isEmpty=function(e){if(null==e)return!0;if(E.isArray(e)||E.isString(e))return 0===e.length;for(var t in e)if(E.has(e,t))return!1;return!0},E.isElement=function(e){return!(!e||1!==e.nodeType)},E.isArray=C||function(e){return"[object Array]"==m.call(e)},E.isObject=function(e){return e===Object(e)},_(["Arguments","Function","String","Number","Date","RegExp"],(function(e){E["is"+e]=function(t){return m.call(t)=="[object "+e+"]"}})),E.isArguments(arguments)||(E.isArguments=function(e){return!(!e||!E.has(e,"callee"))}),"function"!=typeof/./&&(E.isFunction=function(e){return"function"==typeof e}),E.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},E.isNaN=function(e){return E.isNumber(e)&&e!=+e},E.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"==m.call(e)},E.isNull=function(e){return null===e},E.isUndefined=function(e){return void 0===e},E.has=function(e,t){return d.call(e,t)},E.noConflict=function(){return e._=n,this},E.identity=function(e){return e},E.times=function(e,t,o){for(var n=Array(e),r=0;r<e;r++)n[r]=t.call(o,r);return n},E.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))};var z={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};z.unescape=E.invert(z.escape);var V={escape:new RegExp("["+E.keys(z.escape).join("")+"]","g"),unescape:new RegExp("("+E.keys(z.unescape).join("|")+")","g")};E.each(["escape","unescape"],(function(e){E[e]=function(t){return null==t?"":(""+t).replace(V[e],(function(t){return z[e][t]}))}})),E.result=function(e,t){if(null==e)return null;var o=e[t];return E.isFunction(o)?o.call(e):o},E.mixin=function(e){_(E.functions(e),(function(t){var o=E[t]=e[t];E.prototype[t]=function(){var e=[this._wrapped];return c.apply(e,arguments),j.call(this,o.apply(E,e))}}))};var B=0;E.uniqueId=function(e){var t=++B+"";return e?e+t:t},E.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var G=/(.)^/,P={"'":"'","\\":"\\","\r":"r","\n":"n","\t":"t","\u2028":"u2028","\u2029":"u2029"},N=/\\|'|\r|\n|\t|\u2028|\u2029/g;E.template=function(e,t,o){var n;o=E.defaults({},o,E.templateSettings);var r=new RegExp([(o.escape||G).source,(o.interpolate||G).source,(o.evaluate||G).source].join("|")+"|$","g"),a=0,i="__p+='";e.replace(r,(function(t,o,n,r,s){return i+=e.slice(a,s).replace(N,(function(e){return"\\"+P[e]})),o&&(i+="'+\n((__t=("+o+"))==null?'':_.escape(__t))+\n'"),n&&(i+="'+\n((__t=("+n+"))==null?'':__t)+\n'"),r&&(i+="';\n"+r+"\n__p+='"),a=s+t.length,t})),i+="';\n",o.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{n=new Function(o.variable||"obj","_",i)}catch(e){throw e.source=i,e}if(t)return n(t,E);var s=function(e){return n.call(this,e,E)};return s.source="function("+(o.variable||"obj")+"){\n"+i+"}",s},E.chain=function(e){return E(e).chain()};var j=function(e){return this._chain?E(e).chain():e};E.mixin(E),_(["pop","push","reverse","shift","sort","splice","unshift"],(function(e){var t=a[e];E.prototype[e]=function(){var o=this._wrapped;return t.apply(o,arguments),"shift"!=e&&"splice"!=e||0!==o.length||delete o[0],j.call(this,o)}})),_(["concat","join","slice"],(function(e){var t=a[e];E.prototype[e]=function(){return j.call(this,t.apply(this._wrapped,arguments))}})),E.extend(E.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this)},{}],39:[function(e,t,o){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var o=function(){};o.prototype=t.prototype,e.prototype=new o,e.prototype.constructor=e}},{}],40:[function(e,t,o){t.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},{}],41:[function(e,t,o){(function(t,n){var r=/%[sdj%]/g;o.format=function(e){if(!b(e)){for(var t=[],o=0;o<arguments.length;o++)t.push(s(arguments[o]));return t.join(" ")}o=1;for(var n=arguments,a=n.length,i=String(e).replace(r,(function(e){if("%%"===e)return"%";if(o>=a)return e;switch(e){case"%s":return String(n[o++]);case"%d":return Number(n[o++]);case"%j":try{return JSON.stringify(n[o++])}catch(e){return"[Circular]"}default:return e}})),c=n[o];o<a;c=n[++o])f(c)||!w(c)?i+=" "+c:i+=" "+s(c);return i},o.deprecate=function(e,r){if(v(n.process))return function(){return o.deprecate(e,r).apply(this,arguments)};if(!0===t.noDeprecation)return e;var a=!1;return function(){if(!a){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),a=!0}return e.apply(this,arguments)}};var a,i={};function s(e,t){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(t)?n.showHidden=t:t&&o._extend(n,t),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=c),u(n,e,n.depth)}function c(e,t){var o=s.styles[t];return o?"["+s.colors[o][0]+"m"+e+"["+s.colors[o][1]+"m":e}function l(e,t){return e}function u(e,t,n){if(e.customInspect&&t&&A(t.inspect)&&t.inspect!==o.inspect&&(!t.constructor||t.constructor.prototype!==t)){var r=t.inspect(n,e);return b(r)||(r=u(e,r,n)),r}var a=function(e,t){if(v(t))return e.stylize("undefined","undefined");if(b(t)){var o="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(o,"string")}if(g(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(f(t))return e.stylize("null","null")}(e,t);if(a)return a;var i=Object.keys(t),s=function(e){var t={};return e.forEach((function(e,o){t[e]=!0})),t}(i);if(e.showHidden&&(i=Object.getOwnPropertyNames(t)),C(t)&&(i.indexOf("message")>=0||i.indexOf("description")>=0))return m(t);if(0===i.length){if(A(t)){var c=t.name?": "+t.name:"";return e.stylize("[Function"+c+"]","special")}if(y(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(k(t))return e.stylize(Date.prototype.toString.call(t),"date");if(C(t))return m(t)}var l,w="",x=!1,E=["{","}"];(h(t)&&(x=!0,E=["[","]"]),A(t))&&(w=" [Function"+(t.name?": "+t.name:"")+"]");return y(t)&&(w=" "+RegExp.prototype.toString.call(t)),k(t)&&(w=" "+Date.prototype.toUTCString.call(t)),C(t)&&(w=" "+m(t)),0!==i.length||x&&0!=t.length?n<0?y(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),l=x?function(e,t,o,n,r){for(var a=[],i=0,s=t.length;i<s;++i)D(t,String(i))?a.push(d(e,t,o,n,String(i),!0)):a.push("");return r.forEach((function(r){r.match(/^\d+$/)||a.push(d(e,t,o,n,r,!0))})),a}(e,t,n,s,i):i.map((function(o){return d(e,t,n,s,o,x)})),e.seen.pop(),function(e,t,o){if(e.reduce((function(e,t){return t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return o[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+o[1];return o[0]+t+" "+e.join(", ")+" "+o[1]}(l,w,E)):E[0]+w+E[1]}function m(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,o,n,r,a){var i,s,c;if((c=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?s=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(s=e.stylize("[Setter]","special")),D(n,r)||(i="["+r+"]"),s||(e.seen.indexOf(c.value)<0?(s=f(o)?u(e,c.value,null):u(e,c.value,o-1)).indexOf("\n")>-1&&(s=a?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),v(i)){if(a&&r.match(/^\d+$/))return s;(i=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(i=i.substr(1,i.length-2),i=e.stylize(i,"name")):(i=i.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),i=e.stylize(i,"string"))}return i+": "+s}function h(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function f(e){return null===e}function g(e){return"number"==typeof e}function b(e){return"string"==typeof e}function v(e){return void 0===e}function y(e){return w(e)&&"[object RegExp]"===x(e)}function w(e){return"object"==typeof e&&null!==e}function k(e){return w(e)&&"[object Date]"===x(e)}function C(e){return w(e)&&("[object Error]"===x(e)||e instanceof Error)}function A(e){return"function"==typeof e}function x(e){return Object.prototype.toString.call(e)}function E(e){return e<10?"0"+e.toString(10):e.toString(10)}o.debuglog=function(e){if(v(a)&&(a=t.env.NODE_DEBUG||""),e=e.toUpperCase(),!i[e])if(new RegExp("\\b"+e+"\\b","i").test(a)){var n=t.pid;i[e]=function(){var t=o.format.apply(o,arguments);console.error("%s %d: %s",e,n,t)}}else i[e]=function(){};return i[e]},o.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},o.isArray=h,o.isBoolean=p,o.isNull=f,o.isNullOrUndefined=function(e){return null==e},o.isNumber=g,o.isString=b,o.isSymbol=function(e){return"symbol"==typeof e},o.isUndefined=v,o.isRegExp=y,o.isObject=w,o.isDate=k,o.isError=C,o.isFunction=A,o.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},o.isBuffer=e("./support/isBuffer");var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function M(){var e=new Date,t=[E(e.getHours()),E(e.getMinutes()),E(e.getSeconds())].join(":");return[e.getDate(),_[e.getMonth()],t].join(" ")}function D(e,t){return Object.prototype.hasOwnProperty.call(e,t)}o.log=function(){console.log("%s - %s",M(),o.format.apply(o,arguments))},o.inherits=e("inherits"),o._extend=function(e,t){if(!t||!w(t))return e;for(var o=Object.keys(t),n=o.length;n--;)e[o[n]]=t[o[n]];return e}}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":40,_process:15,inherits:39}],42:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=n.ActionTypes,i={submitCommand:function(e){r.handleViewAction({type:a.SUBMIT_COMMAND,text:e})}};t.exports=i},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53}],43:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=n.ActionTypes,i={changeIsAnimating:function(e){r.handleViewAction({type:a.CHANGE_IS_ANIMATING,isAnimating:e})},levelSolved:function(){r.handleViewAction({type:a.LEVEL_SOLVED})},changeFlipTreeY:function(e){r.handleViewAction({type:a.CHANGE_FLIP_TREE_Y,flipTreeY:e})}};t.exports=i},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53}],44:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=n.ActionTypes,i={setLevelSolved:function(e){r.handleViewAction({type:a.SET_LEVEL_SOLVED,levelID:e})},resetLevelsSolved:function(){r.handleViewAction({type:a.RESET_LEVELS_SOLVED})}};t.exports=i},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53}],45:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=n.ActionTypes,i={changeLocale:function(e){r.handleViewAction({type:a.CHANGE_LOCALE,locale:e})},changeLocaleFromURI:function(e){r.handleURIAction({type:a.CHANGE_LOCALE,locale:e})},changeLocaleFromHeader:function(e){r.handleViewAction({type:a.CHANGE_LOCALE_FROM_HEADER,header:e})}};t.exports=i},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53}],46:[function(e,t,o){var n,r,a,i,s=e("backbone"),c=e("events").EventEmitter,l=e("react"),u=e("react-dom"),m=e("../util"),d=e("../intl"),h=e("../stores/LocaleStore"),p=e("../actions/LocaleActions"),f=Object.assign({},c.prototype,{trigger:function(){this.emit.apply(this,arguments)}});f.setMaxListeners(0);var g=function(){var t=e("../sandbox/").Sandbox,o=e("../util/eventBaton").EventBaton,s=e("../views/levelDropdownView").LevelDropdownView;a=new o,n=new k,r=new t,i=new s({wait:!0}),h.subscribe((function(){h.getLocale()!==h.getDefaultLocale()&&v()})),f.on("vcsModeChange",b),y(a),w(r),window.LocaleStore=h,window.LocaleActions=p,window.intl=d},b=function(e){if(window.$){var t=e.mode,o="git"===e.mode,n=t.slice(0,1).toUpperCase()+t.slice(1),r=new RegExp("Git"===n?"Hg":"Git","g");document.title=d.str("learn-git-branching").replace(r,n),$("span.vcs-mode-aware").each((function(e,t){var o=$(t).text().replace(r,n);$(t).text(o)})),$("body").toggleClass("gitMode",o),$("body").toggleClass("hgMode",!o)}},v=function(){if(window.$){var t=h.getLocale().split("_")[0];$("html").attr("lang",t),$("meta[http-equiv='content-language']").attr("content",t),$("span.intl-aware").each((function(t,o){var n=e("../intl"),r=$(o).attr("data-intl");$(o).text(n.str(r))}))}},y=function(e){var t=function(){$("#commandTextField").focus()};t(),$(window).focus((function(t){e.trigger("windowFocus",t)})),$(document).click((function(t){e.trigger("documentClick",t)})),$(document).bind("keydown",(function(t){e.trigger("docKeydown",t)})),$(document).bind("keyup",(function(t){e.trigger("docKeyup",t)})),$(window).on("resize",(function(e){f.trigger("resize",e)})),e.stealBaton("docKeydown",(function(){})),e.stealBaton("docKeyup",(function(){})),e.stealBaton("windowFocus",t),e.stealBaton("documentClick",t);var o=function(t){return function(){var o=[t];Array.prototype.slice.apply(arguments).forEach((function(e){o.push(e)})),e.trigger.apply(e,o)}};$("#commandTextField").on("keydown",o("keydown")),$("#commandTextField").on("keyup",o("keyup")),$(window).trigger("resize")},w=function(e){var t,o,n,r,i=m.parseQueryString(window.location.href);if((/(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent)||/android/i.test(navigator.userAgent))&&e.mainVis.customEvents.on("gitEngineReady",(function(){a.trigger("commandSubmitted","mobile alert")})),i.hasOwnProperty("demo")?t=["git commit; git checkout -b bugFix C1; git commit; git merge master; git checkout master; git commit; git rebase bugFix;","delay 1000; reset;","level advanced1 --noFinishDialog --noStartCommand --noIntroDialog;","delay 2000; show goal; delay 1000; hide goal;","git checkout bugFix; git rebase master; git checkout side; git rebase bugFix;","git checkout another; git rebase side; git rebase another master;","help; levels"]:i.hasOwnProperty("hgdemo")?t=(t=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"feature","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg book","delay 1000","hg rebase -d master"]).join(";#").split("#"):i.hasOwnProperty("hgdemo2")?t=(t=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"debug","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg sum","delay 1000","hg rebase -d master"]).join(";#").split("#"):i.hasOwnProperty("remoteDemo")?t=(t=["git clone","git commit","git fakeTeamwork","git pull","git push","git commit","git fakeTeamwork","git pull --rebase","git push","levels"]).join(";#").split("#"):i.gist_level_id?$.ajax({url:"https://api.github.com/gists/"+i.gist_level_id,type:"GET",dataType:"jsonp",success:function(e){var t=(e.data||{}).files||{};if(Object.keys(t).length){var o=t[Object.keys(t)[0]];o.content||console.warn("file empty"),a.trigger("commandSubmitted","importLevelNow "+escape(o.content)+"; clear")}else console.warn("no files found")}}):i.hasOwnProperty("NODEMO")||(t=["help;","levels"]),i.hasOwnProperty("STARTREACT"),t&&e.mainVis.customEvents.on("gitEngineReady",(function(){a.trigger("commandSubmitted",t.join(""))})),void 0!==i.locale&&i.locale.length?p.changeLocaleFromURI(i.locale):(o=navigator.language||navigator.browserLanguage,p.changeLocaleFromHeader(o)),n=h.getSupportedLocales().map((function(e){return'<link rel="alternate" hreflang="'+e+'" href="https://learngitbranching.js.org/?locale='+e+'" />'})),r="https://learngitbranching.js.org/?locale="+h.getDefaultLocale(),n.push('<link rel="alternate" hreflang="x-default" href="'+r+'" />'),$("head").prepend(n),i.command){var s=unescape(i.command);e.mainVis.customEvents.on("gitEngineReady",(function(){a.trigger("commandSubmitted",s)}))}};function k(){s.$=$;e("../views");var t=e("../models/collections"),o=e("../views/commandViews"),n=e("../react_views/CommandHistoryView.jsx"),r=e("../react_views/MainHelperBarView.jsx");this.commandCollection=new t.CommandCollection,this.commandBuffer=new t.CommandBuffer({collection:this.commandCollection}),this.commandPromptView=new o.CommandPromptView({el:$("#commandLineBar")}),u.render(l.createElement(r),document.getElementById("helperBarMount")),u.render(l.createElement(n,{commandCollection:this.commandCollection}),document.getElementById("commandDisplay"))}e("../util").isBrowser()&&$(document).ready(g),o.getEvents=function(){return f},o.getSandbox=function(){return r},o.getEventBaton=function(){return a},o.getCommandUI=function(){return n},o.getLevelDropdown=function(){return i},o.init=g},{"../actions/LocaleActions":45,"../intl":61,"../models/collections":69,"../react_views/CommandHistoryView.jsx":71,"../react_views/MainHelperBarView.jsx":77,"../sandbox/":79,"../stores/LocaleStore":83,"../util":90,"../util/eventBaton":89,"../views":100,"../views/commandViews":98,"../views/levelDropdownView":101,backbone:1,events:4,react:30,"react-dom":24}],47:[function(e,t,o){var n=e("../intl"),r=e("../util/errors"),a=e("../git/commands"),i=e("../mercurial/commands"),s=r.CommandProcessError,c=(r.CommandResult,{git:a.commandConfig,hg:i.commandConfig}),l={execute:function(e,t,o,n){if(!c[e][t])throw new Error("i don't have a command for "+t);var r=c[e][t];if(r.delegate)return this.delegateExecute(r,o,n);r.execute.call(this,o,n)},delegateExecute:function(e,t,o){var n=e.delegate.call(this,t,o);n.multiDelegate?n.multiDelegate.forEach((function(e){o.setOptionsMap(e.options||{}),o.setGeneralArgs(e.args||[]),c[e.vcs][e.name].execute.call(this,t,o)}),this):(e=c[n.vcs][n.name],c[n.vcs][n.name].execute.call(this,t,o))},blankMap:function(){return{git:{},hg:{}}},getShortcutMap:function(){var e=this.blankMap();return this.loop((function(t,o,n){t.sc&&(e[n][o]=t.sc)}),this),e},getOptionMap:function(){var e=this.blankMap();return this.loop((function(t,o,n){var r=t.displayName||o,a={};(t.options||[]).forEach((function(e){a[e]=!1})),e[n][r]=a})),e},getRegexMap:function(){var e=this.blankMap();return this.loop((function(t,o,n){var r=t.displayName||o;e[n][r]=t.regex})),e},getCommandsThatCount:function(){var e=this.blankMap();return this.loop((function(t,o,n){t.dontCountForGolf||(e[n][o]=t.regex)})),e},loop:function(e,t){Object.keys(c).forEach((function(t){var o=c[t];Object.keys(o).forEach((function(n){var r=o[n];e(r,n,t)}))}))}};function u(e,t,o){if(this.vcs=e,this.method=t,this.rawOptions=o,this.supportedMap=l.getOptionMap()[e][t],void 0===this.supportedMap)throw new Error("No option map for "+t);this.generalArgs=[]}u.prototype.explodeAndSet=function(){for(var e=0;e<this.rawOptions.length;e++){var t=this.rawOptions[e];if("-"==t.slice(0,1)){if(void 0===this.supportedMap[t])return new s({msg:n.str("option-not-supported",{option:t})});var o=this.rawOptions[e+1],r=[];o&&"-"!==o.slice(0,1)&&(e++,r=[o]),this.supportedMap[t]=r}else this.generalArgs.push(t)}},o.commands=l,o.parse=function(e){var t,o,n,r=l.getRegexMap();if(Object.keys(r).forEach((function(a){var i=r[a];Object.keys(i).forEach((function(r){i[r].exec(e)&&(t=a,o=r,n=e.match(/('.*?'|".*?"|\S+)/g).slice(2))}))})),!o)return!1;var a=new u(t,o,n),i=a.explodeAndSet();return{toSet:{generalArgs:a.generalArgs,supportedMap:a.supportedMap,error:i,vcs:t,method:o,options:n,eventName:"processGitCommand"}}}},{"../git/commands":54,"../intl":61,"../mercurial/commands":68,"../util/errors":87}],48:[function(e,t,o){"use strict";var n=e("../util/keyMirror");t.exports={CHANGE_EVENT:"change",StoreSubscribePrototype:{subscribe:function(e){this.on("change",e)},unsubscribe:function(e){this.removeListener("change",e)}},ActionTypes:n({SET_LEVEL_SOLVED:null,RESET_LEVELS_SOLVED:null,CHANGE_IS_ANIMATING:null,CHANGE_FLIP_TREE_Y:null,SUBMIT_COMMAND:null,CHANGE_LOCALE:null,CHANGE_LOCALE_FROM_HEADER:null,SOLVE_LEVEL:null}),PayloadSources:n({VIEW_ACTION:null,URI_ACTION:null})}},{"../util/keyMirror":91}],49:[function(e,t,o){o.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Are you sure you want to see the solution?","","I believe in you! You can do it"]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Bist du sicher, dass du die Auflösung sehen willst?","","Ich glaube an dich! Du schaffst das!"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 确定要看答案吗？","","相信自己，你可以的！"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 確定偷看解答嗎？","","我相信你！你可以的"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¿Estás seguro de que querés ver la solución?","","¡Creo en vos! ¡Dale que podés!"]}}],es_ES:[{type:"ModalAlert",options:{markdowns:["## ¿Estás seguro de que quieres ver la solución?","","¡Creo en ti! ¡Ánimo!"]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Tem certeza que quer ver a solução?","","Vamos lá, acredito que você consegue!"]}}],gl:[{type:"ModalAlert",options:{markdowns:["## ¿Queres ver a solución?","","Seguro que podes, ¡inténtao unha vez máis!"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Êtes-vous sûr de vouloir voir la solution ?","","Je crois en vous ! Vous pouvez le faire !"]}}],ja:[{type:"ModalAlert",options:{markdowns:["## どうしても正解がみたいですか?","","頑張れ頑張れできるできる絶対できる頑張れもっとやれるって","","やれる気持ちの問題だ頑張れ頑張れそこだ！","","そこで諦めるな絶対に頑張れ積極的にポジティブに頑張る頑張る","","北京だって頑張ってるんだから！"]}}],ru_RU:[{type:"ModalAlert",options:{markdowns:["## Уверен, что хочешь посмотреть решение?","","Мы верим в тебя! Не прыгай! Ты сможешь!"]}}],uk:[{type:"ModalAlert",options:{markdowns:["## Впевнений, що хочеш побачити розв’язок?","","Я вірю в тебе! Ти впораєшся!"]}}],vi:[{type:"ModalAlert",options:{markdowns:["## Bạn chắc là muốn xem đáp án chứ?","","Tôi tin ở bạn! Bạn có thể làm được!"]}}]}},{}],50:[function(e,t,o){o.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to the level builder!","","Here are the main steps:","","  * Set up the initial environment with git commands","  * Define the starting tree with ```define start```","  * Enter the series of git commands that compose the (optimal) solution","  * Define the goal tree with ```define goal```. Defining the goal also defines the solution","  * Optionally define a hint with ```define hint```","  * Edit the name with ```define name```","  * Optionally define a nice start dialog with ```edit dialog```","  * Enter the command ```finish``` to output your level JSON!"]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Willkommen zum Level-Editor!","","So funktioniert's:","","  * Stelle mit Git-Befehlen die Ausganssituation her","  * Leg den Startpunkt mit ```define start``` fest","  * Gib eine Abfolge von Git-Befehlen ein, welche die (optimale) Lösung darstellen","  * Leg den Ziel-Baum mit ```define goal``` fest. Damit markierst du den Endpunkt der Lösung","  * Gib einen Hinweis mittels ```define hint``` an, wenn du willst","  * Änder den Namen mittels ```define name```","  * Wenn du magst, erstelle einen schönene Einführungsdialog mit ```edit dialog```","  * Gib das Kommando ```finish``` ein um deinen Level als JSON auszugeben"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎使用关卡生成器！","","关键步骤如下：","","  * 用 Git 命令建立初始环境","  * 用 ```define start``` 命令定义初始提交树","  * 输入一系列 Git 命令作为（最佳）答案","  * 用 ```define goal``` 命令定义目标提交树。定义目标的同时也定义了答案","  * （选做）还可以用 ```define hint``` 命令定义提示","  * 用 ```define name``` 命令设置关卡名称","  * （选做）还可以用 ```edit dialog``` 定义一个漂亮的开始对话框","  * 用 ```finish``` 命令就可以输出你的关卡的JSON数据了！"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 歡迎使用關卡編輯器！","","主要步驟如下：","","  * 使用 git 指令建立初始環境","  * 使用 ```define start``` 指令定義起始樹","  * 輸入一系列 git 命令，編好答案","  * 使用 ```define goal``` 指令定義目標樹。定義目標的同時定義答案","  * 還可以用 ```define hint``` 指令定義一個提示","  * 用 ```define name``` 修改名稱","  * 還可以用 ```edit dialog``` 定義一個漂亮的開始對話視窗","  * 輸入 ```finish``` 即可將您的關卡輸出為 JSON！"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¡Bienvenido al constructor de niveles!","","Estos son los pasos principales:","","  * Prepará el entorno inicial usando comandos de Git","  * Definí el árbol inicial con ```define start```","  * Ingresá la serie de comandos de git que representan la solución óptima","  * Definí el árbol objetivo con ```define goal```. El objetivo también determina la solución","  * Opcionalmente, definí pistas con ```define hint```","  * Dale un nombre con ```define name```","  * Opcionalmente, definí un mensaje inicial con ```edit dialog```","  * ¡Ingresá el comando ```finish``` para obtener tu nivel en formato JSON!"]}}],es_ES:[{type:"ModalAlert",options:{markdowns:["## ¡Bienvenido al constructor de niveles!","","Estos son los pasos principales:","","  * Prepara el entorno inicial usando comandos de Git","  * Define el árbol inicial con ```define start```","  * Introduce la serie de comandos de git que representan la solución óptima","  * Crea el árbol objetivo con ```define goal```. El objetivo también determina la solución","  * Opcionalmente, crea pistas con ```define hint```","  * Dale un nombre con ```define name```","  * Opcionalmente, crea un mensaje inicial con ```edit dialog```","  * ¡Introduce el comando ```finish``` para obtener tu nivel en formato JSON!"]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Bem-vindo ao construtor de níveis!","","Estes são os passos principais:","","  * Prepare o ambiente inicial usando comandos do Git","  * Define a árvore inicial com ```define start```","  * Insira a série de comandos do git que representam a solução ótima","  * Defina a árvore objetivo com ```define goal```. O objetivo também determina a solução","  * Opcionalmente, defina dicas com ```define hint```","  * Dê um nome com ```define name```","  * Opcionalmente, defina uma mensagem inicial com ```edit dialog```","  * Digite o comando ```finish``` para obter seu nível em formato JSON!"]}}],gl:[{type:"ModalAlert",options:{markdowns:["## Benvido ó constructor de niveis!","","Estes son os pasos principais:","","  * Prepara o eido inicial usando comandos de Git","  * Define a árbore inicial con ```define start```","  * Inserta a secuencia de comandos de git que representan a mellor solución","  * Define a árbore obxectivo con ```define goal```. O obxectivo tamén determina a solución","  * Opcionalmente, define axudas con ```define hint```","  * Dalle un nome con ```define name```","  * Opcionalmente, define unha mensaxe inicial con ```edit dialog```","  * Escribe o comando ```finish``` para obter seu nivel en formato JSON!"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue dans l'éditeur niveaux !","","Voici les étapes principales :","","  * Mettez en place l'environnement initial avec des commandes git","  * Définissez l'arbre de départ avec ```define start```","  * Saisissez la série de commandes git qui composent la solution (optimale)","  * Définissez l'arbre cible avec ```define goal```. Cela définit aussi la solution","  * Optionnellement, définissez un indice avec ```define hint```","  * Changez le nom avec ```define name```","  * Optionellement, definissez un joli dialogue de départ avec ```edit dialog```","  * Entrez la commande ```finish``` pour délivrer votre niveau JSON!"]}}],ja:[{type:"ModalAlert",options:{markdowns:["## Levelエディタへようこそ!","","ここでは、以下の主にステップを踏みます:","","  * Gitコマンドで初期設定をします","  * ```define start```で開始時のコミットツリーを定義します","  * 一連のGitコマンドの（最適な）解答を入力します","  * ```define goal```でゴールのコミットツリーを定義します（ゴールを定義するということは、解答を定義するということでもあります）","  * オプションで```define hint```でヒントを定義します","  * ```define name```で名前を編集します","  * オプションで```edit dialog```で良い感じに開始時のダイアログを定義します","  * ```finish```コマンドを打つことであなたのlevelがJSONで出力されます","","*Note: このダイアログは`help builder`で何回でも表示できます！活用してください！*"]}}],ru_RU:[{type:"ModalAlert",options:{markdowns:["## Добро пожаловать в конструктор уровней!","","Вот основные шаги:","","  * Настроить стартовое дерево при помощи команд git","  * Обозначить старовое дерево при помощи ```define start```",'  * Ввести команды "оптимального" решения уровня',"  * Обозначить цель уровня при помощи ```define goal```. Одновременно обозначится решение.","  * По желанию, можно указать подсказку при помощи ```define hint```","  * Указать название уровня при помощи ```define name```","  * По желанию, указать стартовое сообщение при помощи ```edit dialog```","  * Ввести ```finish``` и получить JSON с описанием уровня!"]}}],uk:[{type:"ModalAlert",options:{markdowns:["## Ласкаво просимо до конструктора рівнів!","","Ось основні кроки:","","  * Налаштувати початкове середовище за допомогою команд git","  * Визначити стартове дерево за допомогою ```define start```","  * Ввести набір команд, що описують (оптимальний) розв’язок","  * Визначити кінцеве дерево за допомогою ```define goal```. Одночасно це визначить розв’язок","  * Додатково можна задати підказку за допомогою ```define hint```","  * Редагувати назву рівня за допомогою ```define name```","  * Додатково можна вказати файний початковий діалог за допомогою ```edit dialog```","  * Ввести команду ```finish``` й отримати JSON з описом рівня!"]}}],ko:[{type:"ModalAlert",options:{markdowns:["## 레벨 생성기 입니다. 환영합니다!","","Here are the main steps:","","  * git 명령어로 초기 환경을 만들어주세요","  * 시작 트리를 ```define start```로 정의하세요","  * (최적화된)정답을 만드는 git 명령어들을 입력하세요","  * 골 트리를 ```define goal```로 정의해주세요. 골을 정의하면 정답도 같이 정의됩니다","  * ```define hint```로 원하면 힌트도 정의해줄수 있습니다","  * 문제의 이름을 ```define name```로 수정하세요","  * 시작 글이 필요하다면 ```edit dialog```로 쓸 수 있습니다","  * ```finish```로 여러분의 레벨을 JSON결과로 받을 수 있습니다!"]}}],vi:[{type:"ModalAlert",options:{markdowns:["## Chào mừng đến trình tạo cấp độ!","","Có những bước chính sau:","","  * Khởi tạo môi trường với các lệnh git","  * Định nghĩa cây để bắt đầu với ```define start```","  * Nhập chuỗi lệnh git để tạo đáp án (tốt nhất) của bạn","  * Định nghĩa cây mục tiêu với ```define goal```. Định nghĩa mục tiêu đồng thời cũng xác định đáp án","  * Có thể định nghĩa gợi ý với ```define hint```","  * Chỉnh sửa tên với ```define name```","  * Có thể định nghĩa hội thoại bắt đầu với ```edit dialog```","  * Nhập lệnh ```finish``` xuất cấp độ của bạn dưới dạng JSON!"]}}]}},{}],51:[function(e,t,o){o.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Great Job!!","","You solved the level in *{numCommands}* command(s); ","our solution uses {best}."]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Super gemacht","","Du hast den Level in *{numCommands}* Befehl(en) gelöst;","meine Lösung besteht aus {best}."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## 完成!","","あなたは*{numCommands}*回のコマンドでこの課題をクリアしました; ","模範解答では{best}回です。","","模範解答は、右下の`?`メニューの`Solution`から見ることができます。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 好样的！","","你用 *{numCommands}* 条命令通过了这一关；","我们的答案要用 {best} 条命令。"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 太棒了！","","您用了 *{numCommands}* 個指令完成這一關，","我們的解答用了 {best} 個。"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¡Buen trabajo!","","Resolviste el nivel en *{numCommands}* comandos; ","nuestra mejor solución usa {best}."]}}],es_ES:[{type:"ModalAlert",options:{markdowns:["## ¡Buen trabajo!","","Resolviste el nivel en *{numCommands}* comandos; ","nuestra mejor solución usa {best}."]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Bom trabalho!!","","Você resolveu o nível usando *{numCommands}* comandos; ","nossa melhor solução usa {best}."]}}],gl:[{type:"ModalAlert",options:{markdowns:["## Bo traballo!!","","Resolviches o nivel empregando *{numCommands}* comandos; ","a nosa mellor solución é en {best}."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Beau Travail!!","","Vous avez résolu le niveau en *{numCommands}* commande(s); ","notre solution le fait en {best}."]}}],ru_RU:[{type:"ModalAlert",options:{markdowns:["## Супер!","","Ты прошёл уровень. Количество использованных команд - *{numCommands}* ; ","а наше решение состоит из {best}."]}}],uk:[{type:"ModalAlert",options:{markdowns:["## Молодець!","","Ти пройшов рівень. Кількість використаних команд — *{numCommands}*; ","наш розв’язок складається з {best}."]}}],ko:[{type:"ModalAlert",options:{markdowns:["## 훌륭합니다!!","","*{numCommands}*개의 명렁으로 레벨을 통과했습니다; ","모범 답안은 {best}개를 사용합니다."]}}],vi:[{type:"ModalAlert",options:{markdowns:["## Làm tốt lắm!!","","Bạn hoàn thành cấp độ này với *{numCommands}* câu lệnh; ","Đáp án của chúng tôi sử dụng {best}."]}}]}},{}],52:[function(e,t,o){o.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to Learn Git Branching","","Interested in learning Git? Well you've come to the right place! ",'"Learn Git Branching" is the most visual and interactive way to learn Git ',"on the web; you'll be challenged with exciting levels, given step-by-step ","demonstrations of powerful features, and maybe even have a bit of fun along the way.","","After this dialog you'll see the variety of levels we have to offer. If you're a ","beginner, just go ahead and start with the first. If you already know some Git basics, ","try some of our later more challenging levels.","","You can see all the commands available with `show commands` at the terminal.","","PS: Want to go straight to a sandbox next time?","Try out ","[this special link](https://pcottle.github.io/learnGitBranching/?NODEMO)"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¡Bienvenid@ a Learn Git Branching!","","Esta aplicación está diseñada para ayudar a los principantes ","a manejar los poderosos conceptos que hay detrás del trabajo ","con ramas (branches) en Git. Esperamos que disfrutes la aplicación ","y tal vez incluso ¡que aprendas algo! ","","# ¡Demo!","","Si no viste la demo, mirala en esta dirección:","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","¿Harto de este mensaje? Agregale `?NODEMO` a la URL para dejar de verlo, como en este link:","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Comandos de Git","","Tenés una gran variedad de comandos de git en este sandbox. Estos incluyen: ",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## ¡Compartí!","","Compartí tus árboles con tus amigos usando `export tree` e `import tree`","","¿Tenés una buena lección que compartir? Probá construyendo un nivel con `build level` o probá el nivel de un amigo con `import level`","","Para ver todos los comandos disponibles, probá `show commands`. Hay algunas joyitas como `undo` y `reset`","","Por ahora, arranquemos con los `levels`..."]}}],es_ES:[{type:"ModalAlert",options:{markdowns:["## ¡Bienvenid@ a Learn Git Branching!","","Esta aplicación está diseñada para ayudar a los principantes ","a manejar los poderosos conceptos que hay detrás del trabajo ","con ramas (branches) en Git. Esperamos que disfrutes la aplicación ","y tal vez incluso ¡que aprendas algo! ","","# ¡Demo!","","Si no viste la demo, mírala en esta dirección:","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","¿Harto de este mensaje? Agrégale `?NODEMO` a la URL para dejar de verlo, como en este link:","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Comandos de Git","","Tienes una gran variedad de comandos de git en este sandbox. Estos incluyen: ",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## ¡Comparte!","","Comparte tus árboles con tus amigos usando `export tree` e `import tree`","","¿Tienes una buena lección que compartir? Prueba construyendo un nivel con `build level` o prueba el nivel de un amigo con `import level`","","Para ver todos los comandos disponibles, escribe `show commands`. Hay algunas joyitas como `undo` y `reset`","","Por ahora, empecemos con los `levels`..."]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Bem-vindo ao Learn Git Branching!","","Este aplicativo foi desenvolvido para ajudar os iniciantes a ","aprender os poderosos conceitos por trás do branching com ","o git. Esperamos que você goste deste aplicativo e talvez ","até aprenda alguma coisa!","","# Demo!","","Se você ainda não viu o demo, veja aqui:","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","Farto desta mensagem? Acrescente `?NODEMO` ao endereço para se livrar dela, como no link abaixo:","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Comandos do git","","Você tem à sua disposição no sandbox uma variedade de comandos do git:",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Compartilhar é se importar!","","Compartilhe árvores com seus amigos usando `export tree` e `import tree`","","Tem uma grande lição para compartilhar? Tente construir um nível com `build level` ou experimente o nível de um amigo com `import level`","","Para ver todos os comandos, use `show commands`. Há algumas jóias como `undo` e `reset`","","Por hora, vamos começar com o `levels`..."]}}],gl:[{type:"ModalAlert",options:{markdowns:["## Benvido a Learn Git Branching!","","Esta aplicación foi desenvolvida para axudar os iniciados en git a ","aprender os poderosos conceptos que hai por detrás do branching con "," git. Agardamos que disfrutes desta aplicación, e tal vez, ","ata aprendas algunha cousa!","","# Demostracións!","","Se aínda non viches a demo, olla aquí:","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","¿Farto destas mensaxes? Engade `?NODEMO` á dirección para librarte dela, como no link de abaixo:","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Comandos de git","","Tes a túa disposición unha caixa de área con unha variedade de comandos de git:",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Compartir e importar!","","Comparte árbores cos seus amigas con `export tree` e `import tree`","","¿Tes un enlace moi grande para compartir? Intenta construír un nivel con `build level` ou importe o nivel dun amigo con `import level`","","Para ver tódolos comandos, usa `show commands`. Hai algunha xoia como `undo` e `reset`","","Por agora, imos comezar cos `levels`..."]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Willkommen bei Learn Git Branching!","","Der Sinn dieser Anwendung ist, die umfangreichen und komplexen Zusammenhänge der Prozesse, die bei der Arbeit mit Git ablaufen, zu verdeutlichen. Ich hoffe du hast Spaß dabei und lernst vielleicht sogar etwas!","","# Demo!","","Falls du die Demonstration noch nicht gesehen hast, schau sie dir hier an:","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","Genervt von diesem Fenster? Häng `?NODEMO` an die URL um es los zu werden, so wie hier:","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git-Kommandos","","Dir steht eine große Zahl von Git-Befehlen im Sandkasten-Modus zur Verfügung. Unter anderem",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Teilen macht Spaß!","","Teile diese Git-Bäume mit deinen Freunden mittels `export tree` und `import tree`.","","Hast du Wissenswertes zu Git zu vermitteln? Versuch einen Level mit `build level` zu bauen oder probier den Level eines Freundes mit `import level` aus.","","Um alle Kommandos zu sehen, gib `show commands` ein. Darunter gibt's kleine Schätze wie `undo` und `reset`.","","Für's Erste lass uns mit `levels` anfangen ..."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## Learn Git Branchingへようこそ","","gitのパワフルなブランチ機能のコンセプトが ","学びやすくなるようにこのアプリケーションを作りました。 ","このアプリケーションを楽しんで使って頂いて、 ","何かを学習して頂けたなら嬉しいです。","","# とりあえず触ってみたい方へ：","","簡単なデモを用意してあるので、もしよければこちらもご覧ください：","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo&locale=ja)","","このダイアログ自体を省略するには、以下のようにURLの末尾にクエリストリング`?NODEMO`を付加してアクセスしてください。","","[https://pcottle.github.io/learnGitBranching/?NODEMO](https://pcottle.github.io/learnGitBranching/?NODEMO&locale=ja)"]}},{type:"ModalAlert",options:{markdowns:["## ここで学べるGitのオペレーション","","ここでは、下記の種類のgitコマンドを学ぶことができます。",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 学習した内容を共有できます","","画面左のコマンドプロンプトから`export tree`や`import tree`とタイプすることで、gitのツリー構造を友達に送ることができます","","何か教材になるようなケースはご存知ないでしょうか。`build level`で課題を作成したり、`import level`で他の人の課題に挑戦してみてください。","","何か詰まったことがあったら、右下メニューの?ボタンを押してみてください","","それから、不自然な記号が出てきたときは顔を左方向に傾けてみるといいかもしれません :P（ペロッ）","","それでは教材の選択画面に進んでみることにします。","","（なお、日本語版製作者のフォークサイトは[こちら](https://remore.github.io/learnGitBranching-ja/)になります。）"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎光临 Learn Git Branching","","你对 Git 感兴趣吗？那么算是来对地方了！","“Learning Git Branching” 可以说是目前为止最好的教程了，在沙盒里你能执行相应的命令，还能看到每个命令的执行情况；","通过一系列刺激的关卡挑战，逐步深入的学习 Git 的强大功能，在这个过程中你可能还会发现一些有意思的事情。","","关闭这个对话框以后，你会看到我们提供的许多关卡。如果你是初学者，从第一关开始逐个向后挑战就是了。","而如果你已经入门了，可以略过前面，直接挑战后面更有难度的关卡。","","### 演示","","如果你还没看过演示，请[到此](?demo)查看。","","PS：想直接进入沙盒？ 在 URL 后头加上 `?NODEMO` 就可以了，试一下[这个链接](?NODEMO)："]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 歡迎光臨 Learn Git Branching!","","本應用旨在幫助初學者領會 git 分支背後的強大概念。","希望你能喜歡這個應用，並學到知識！","","# 演示！","","如果你還沒看過演示，請到此查看：","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","厭煩這個對話視窗嗎？在 URL 後頭加上 `?NODEMO` 就看不到它了，也可以直接點下邊這個連結：","","[https://pcottle.github.io/learnGitBranching/?NODEMO](https://pcottle.github.io/learnGitBranching/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git 命令","","在沙盒模式中，你有很多指令可用。包括：",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 分享即關懷","","使用 `export tree` 和 `import tree` 與朋友分享 Git 樹","","有個好課程可以分享？試試用 `build level` 創建一個關卡，或者 `import level` 試試朋友的。","","言歸正傳，讓我們先從 `levels` 開始……"]}}],ko:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치 배우기를 시작합니다!","","이 애플리케이션은 git을 쓸 때 필요한 브랜치에 대한 개념을","탄탄히 잡게끔 도와드리기 위해 만들었습니다. 재밌게 사용해주시기를","바라며, 무언가를 배워가신다면 더 기쁘겠습니다!","","이 애플리케이션은 [Peter Cottle](https://github.io/pcottle)님의 [LearnGitBranching](https://pcottle.github.io/learnGitBranching/)를 번역한 것입니다.","아래 데모를 먼저 보셔도 좋습니다.","","<https://pcottle.github.io/learnGitBranching/?demo&locale=ko>"]}},{type:"ModalAlert",options:{markdowns:["## Git 명령어","","연습 모드에서 쓸 수 있는 다양한 git명령어는 다음과 같습니다",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 공유해주세요!","","`export tree` 와 `import tree`로 여러분의 친구들에게 트리를 공유해주세요","","훌륭한 학습 자료가 있으신가요? `build level`로 레벨을 만들어 보시거나, 친구의 레벨을 `import level`로 가져와서 실험해보세요","","이제 레슨을 시작해봅시다..."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue sur Learn Git Branching !","","Cette application a été conçue pour aider les débutants à saisir ","les puissants concepts derrière les branches en travaillant ","avec git. Nous espérons que vous apprécierez cette application et ","que vous apprendrez peut-être quelque chose d'intéressant !","","# Démo !","","Si vous n'avez pas vu la démo, vous pouvez le faire là :","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","Agacé par ce dialogue ? Ajoutez `?NODEMO` à l'URL pour le supprimer, en lien ci-dessous pour votre commodité :","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Commandes Git","","Il existe une large variété de commandes git disponibles dans le mode bac à sable. Sont inclues :",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Partager, c'est se soucier !","","Partagez des arbres avec vos amis via `export tree` et `import tree`","","Vous avez une grande leçon à partager ? Essayez de construire un niveau avec `build level` ou essayez le niveau d'un ami avec `import level`","","Pour voir la gamme complète des commandes, tapez `show commands`. Il y a quelques perles telles que `undo` et `reset`","","Mais tout de suite commencez sur les `levels`…"]}}],ru_RU:[{type:"ModalAlert",options:{markdowns:["## Добро пожаловать в LearnGitBranching!","","Это приложение создано, чтобы помочь новичкам постичь ","мощные возможности ветвления и работы ","с git. Мы надеемся, что вам понравится эта игра ","и может вы что-то усвоите!","","# Демо!","","Если ты не видел демонстрацию – посмотри её тут:","","[https://pcottle.github.io/learnGitBranching/?demo](https://pcottle.github.io/learnGitBranching/?demo)","","Достало это сообщение? Добавь `?NODEMO` к адресу и навсегда забудь о нём, ниже ссылка для удобства:","","[https://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Команды Git","","В нашей песочнице можно использовать множество команд:",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Бог велел – делись!","","Ты можешь делиться результатами с друзьями при помощи `export tree` и `import tree`","","Хочешь создать классный уровень? Сделай это при помощи `build level` или добавь уровень друга при помощи `import level`","","Команда `show commands` покажет все доступные инструкции. Там есть очень полезные, например `undo` и `reset`","","А пока просто начни игру при помощи `levels`..."]}}],uk:[{type:"ModalAlert",options:{markdowns:["## Ласкаво просимо до Learn Git Branching","","Хочеш вивчити Git? Тоді ти знайшов те, що шукав!",'"Learn Git Branching" — це найбільш візуальний та інтерактивний спосіб вивчення Git в Інтернеті. ',"Ти зможеш проходити захопливі рівні, дивитися ","покрокові інструкції з використання потужних функцій Git, навіть трохи ","розважитись в процесі навчання.","","Після цього діалогу побачиш список доступних рівнів. Якщо ти новачок, ","просто почни з першого рівня. Якщо вже знаєш основи Git, ","спробуй більш складні рівні в кінці.","","P.S. Хочеш перейти одразу до пісочниці наступного разу?","Спробуй ","[це спеціальне посилання.](https://pcottle.github.io/learnGitBranching/?NODEMO)"]}}],vi:[{type:"ModalAlert",options:{markdowns:["## Chào mừng đến với Học Nhánh Git","","Bạn có hứng thú học Git? Bạn đến đúng nơi rồi đấy! ",'"Học Nhánh Git" là cách trực quan và hiệu quả nhất để học Git trên web; ',"thông qua một loạt các thử thách cấp độ thú vị, bạn sẽ từng bước tìm hiểu sức mạnh của git","","Sau khi hội thoại này đóng lại, bạn sẽ thấy nhiều cấp độ mà chúng tôi cung cấp. ","Nếu bạn là người mới thì hãy bắt đầu từ bài đầu tiên. Nếu bạn đã có hiểu biết cơ bản về git, ","hãy thử những bài mang tính thách thức hơn phía sau.","","Bạn có thể dùng lệnh `show commands` để xem tất cả các lệnh hiện hữu.","","Ghi chú: Nếu muốn trực tiếp vào hộp cát ở lần sau?","Hãy dùng","[đường link đặc biệt này của chúng tôi](https://pcottle.github.io/learnGitBranching/?NODEMO)"]}}]}},{}],53:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("flux").Dispatcher,a=n.PayloadSources,i=new r;i.handleViewAction=function(e){this.dispatch({source:a.VIEW_ACTION,action:e})},i.handleURIAction=function(e){this.dispatch({source:a.URI_ACTION,action:e})},t.exports=i},{"../constants/AppConstants":48,flux:7}],54:[function(e,t,o){var n=e("../util/escapeString"),r=e("../intl"),a=e("../graph"),i=e("../util/errors"),s=(i.CommandProcessError,i.GitError),c=(i.Warning,i.CommandResult),l=function(e){return e.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")};function u(e){return-1!==e.indexOf(":")&&2===e.split(":").length}var m=function(e,t){e.resolveID(t)},d=function(e,t){return e.validateBranchName(t)},h=function(e,t){return e.origin.validateBranchName(t)},p=function(e,t){return e.refs[t]?t:d(e,t)},f=function(e,t){if(e.refs[t]&&e.HEAD.get("target")===e.refs[t])throw new s({msg:r.todo("cannot fetch to "+t+" when checked out on "+t)})},g=function(e,t){m(e,t);var o=e.resolveID(t);if(!o||"branch"!==o.get("type"))throw new s({msg:r.todo(t+" is not a branch")})},b=function(e){if(e.length&&"origin"!==e[0])throw new s({msg:r.todo(e[0]+" is not a remote in your repository! try adding origin to that argument")})},v=function(e,t){if(t=l(t),!e.resolveID(t))throw new s({msg:r.todo(t+" is not a branch!")});var o=e.resolveID(t);if("branch"!==o.get("type"))throw new s({msg:r.todo(t+" is not a branch!")});var n=o.getRemoteTrackingBranchID();if(!n)throw new s({msg:r.todo(t+" is not a remote tracking branch! I don't know where to push")});return n},y={commit:{sc:/^(gc|git ci)($|\s)/,regex:/^git +commit($|\s)/,options:["--amend","-a","--all","-am","-m"],execute:function(e,t){var o=t.getOptionsMap();if(t.acceptNoGeneralArgs(),o["-am"]&&(o["-a"]||o["--all"]||o["-m"]))throw new s({msg:r.str("git-error-options")});var n=null,a=null;(o["-a"]||o["--all"])&&t.addWarning(r.str("git-warning-add")),o["-am"]&&(a=o["-am"],t.validateArgBounds(a,1,1,"-am"),n=a[0]),o["-m"]&&(a=o["-m"],t.validateArgBounds(a,1,1,"-m"),n=a[0]),o["--amend"]&&(a=o["--amend"],t.validateArgBounds(a,0,0,"--amend"));var i=e.commit({isAmend:!!o["--amend"]});n&&(n=n.replace(/&quot;/g,'"').replace(/^"/g,"").replace(/"$/g,""),i.set("commitMessage",n));var c=e.animationFactory.playCommitBirthPromiseAnimation(i,e.gitVisuals);e.animationQueue.thenFinish(c)}},cherrypick:{displayName:"cherry-pick",regex:/^git +cherry-pick($|\s)/,execute:function(e,t){t.getOptionsMap();var o=t.getGeneralArgs();t.validateArgBounds(o,1,Number.MAX_VALUE);var n=a.getUpstreamSet(e,"HEAD"),i=o.map((function(t){var o=e.getCommitFromRef(t);if(n[o.get("id")])throw new s({msg:r.str("git-error-already-exists",{commit:o.get("id")})});return o}),this);e.setupCherrypickChain(i)}},pull:{regex:/^git +pull($|\s)/,options:["--rebase"],execute:function(e,t){if(!e.hasOrigin())throw new s({msg:r.str("git-error-origin-required")});var o,n,a=t.getOptionsMap(),i=t.getGeneralArgs();t.twoArgsForOrigin(i),b(i);var c=i[1];if(c&&u(c)){var m=c.split(":");o=m[0],n=p(e,l(m[1])),f(e,n)}else if(c)o=c,g(e.origin,o),n=e.origin.refs[o].getPrefixedID();else{if(e.getDetachedHead())throw new s({msg:r.todo("Git pull can not be executed in detached HEAD mode if no remote branch specified!")});var d=e.getOneBeforeCommit("HEAD"),h=d.get("id");v(e,h),o=(n=d.getRemoteTrackingBranchID()).replace("o/","")}e.pull({source:o,destination:n,isRebase:!!a["--rebase"]})}},fakeTeamwork:{regex:/^git +fakeTeamwork($|\s)/,execute:function(e,t){var o,n,a=t.getGeneralArgs();if(!e.hasOrigin())throw new s({msg:r.str("git-error-origin-required")});switch(t.validateArgBounds(a,0,2),a.length){case 0:o="master",n=1;break;case 1:isNaN(parseInt(a[0],10))?(o=h(e,a[0]),n=1):(n=parseInt(a[0],10),o="master");break;case 2:if(o=h(e,a[0]),isNaN(parseInt(a[1],10)))throw new s({msg:"Bad numeric argument: "+a[1]});n=parseInt(a[1],10)}if("branch"!==e.origin.resolveID(o).get("type"))throw new s({msg:r.str("git-error-options")});e.fakeTeamwork(n,o)}},clone:{regex:/^git +clone *?$/,execute:function(e,t){t.acceptNoGeneralArgs(),e.makeOrigin(e.printTree())}},remote:{regex:/^git +remote($|\s)/,options:["-v"],execute:function(e,t){if(t.acceptNoGeneralArgs(),!e.hasOrigin())throw new c({msg:""});e.printRemotes({verbose:!!t.getOptionsMap()["-v"]})}},fetch:{regex:/^git +fetch($|\s)/,execute:function(e,t){if(!e.hasOrigin())throw new s({msg:r.str("git-error-origin-required")});var o,n,a=t.getGeneralArgs();t.twoArgsForOrigin(a),b(a);var i=a[1];if(i&&u(i)){var c=i.split(":");o=c[0],n=p(e,l(c[1])),f(e,n)}else i&&(o=i,g(e.origin,o),n=e.origin.refs[o].getPrefixedID());o&&m(e.origin,o),e.fetch({source:o,destination:n})}},branch:{sc:/^(gb|git br)($|\s)/,regex:/^git +branch($|\s)/,options:["-d","-D","-f","--force","-a","-r","-u","--contains"],execute:function(e,t){var o,n=t.getOptionsMap(),a=t.getGeneralArgs(),i=null;if(n["-d"]||n["-D"]){var c=n["-d"]||n["-D"];return c=c.concat(a),t.validateArgBounds(c,1,Number.MAX_VALUE,"-d"),void c.forEach((function(t){e.validateAndDeleteBranch(t)}))}if(n["-u"]){i=n["-u"].concat(a),t.validateArgBounds(i,1,2,"-u");var u=l(i[0]),d=i[1]||e.getOneBeforeCommit("HEAD").get("id");return function(e,t){m(e,t);var o=e.resolveID(t);if("branch"!==o.get("type")||!o.getIsRemote())throw new s({msg:r.todo(t+" is not a remote branch")})}(e,u),g(e,d),void e.setLocalToTrackRemote(e.refs[d],e.refs[u])}return n["--contains"]?(i=n["--contains"],t.validateArgBounds(i,1,1,"--contains"),void e.printBranchesWithout(i[0])):n["-f"]||n["--force"]?(i=(i=n["-f"]||n["--force"]).concat(a),t.twoArgsImpliedHead(i,"-f"),void e.forceBranch(i[0],i[1])):0===a.length?(o=n["-a"]?e.getBranches():n["-r"]?e.getRemoteBranches():e.getLocalBranches(),void e.printBranches(o)):(t.twoArgsImpliedHead(a),void e.branch(a[0],a[1]))}},add:{dontCountForGolf:!0,sc:/^ga($|\s)/,regex:/^git +add($|\s)/,execute:function(){throw new c({msg:r.str("git-error-staging")})}},reset:{regex:/^git +reset($|\s)/,options:["--hard","--soft"],execute:function(e,t){var o=t.getOptionsMap(),n=t.getGeneralArgs();if(o["--soft"])throw new s({msg:r.str("git-error-staging")});if(o["--hard"]&&(t.addWarning(r.str("git-warning-hard")),n=n.concat(o["--hard"])),t.validateArgBounds(n,1,1),e.getDetachedHead())throw new s({msg:r.str("git-error-reset-detached")});e.reset(n[0])}},revert:{regex:/^git +revert($|\s)/,execute:function(e,t){var o=t.getGeneralArgs();t.validateArgBounds(o,1,Number.MAX_VALUE),e.revert(o)}},merge:{regex:/^git +merge($|\s)/,options:["--no-ff"],execute:function(e,t){var o=t.getOptionsMap(),n=t.getGeneralArgs().concat(o["--no-ff"]||[]);t.validateArgBounds(n,1,1);var r=e.merge(n[0],{noFF:!!o["--no-ff"]});void 0!==r?e.animationFactory.genCommitBirthAnimation(e.animationQueue,r,e.gitVisuals):e.animationFactory.refreshTree(e.animationQueue,e.gitVisuals)}},revlist:{dontCountForGolf:!0,displayName:"rev-list",regex:/^git +rev-list($|\s)/,execute:function(e,t){var o=t.getGeneralArgs();t.validateArgBounds(o,1),e.revlist(o)}},log:{dontCountForGolf:!0,regex:/^git +log($|\s)/,execute:function(e,t){var o=t.getGeneralArgs();t.impliedHead(o,0),e.log(o)}},show:{dontCountForGolf:!0,regex:/^git +show($|\s)/,execute:function(e,t){var o=t.getGeneralArgs();t.oneArgImpliedHead(o),e.show(o[0])}},rebase:{sc:/^gr($|\s)/,options:["-i","--solution-ordering","--interactive-test","--aboveAll","-p","--preserve-merges"],regex:/^git +rebase($|\s)/,execute:function(e,t){var o=t.getOptionsMap(),n=t.getGeneralArgs();if(o["-i"]){var r=o["-i"].concat(n);return t.twoArgsImpliedHead(r," -i"),void(o["--interactive-test"]?e.rebaseInteractiveTest(r[0],r[1],{interactiveTest:o["--interactive-test"]}):e.rebaseInteractive(r[0],r[1],{aboveAll:!!o["--aboveAll"],initialCommitOrdering:o["--solution-ordering"]}))}t.twoArgsImpliedHead(n),e.rebase(n[0],n[1],{preserveMerges:o["-p"]||o["--preserve-merges"]})}},status:{dontCountForGolf:!0,sc:/^(gst|gs|git st)($|\s)/,regex:/^git +status($|\s)/,execute:function(e){e.status()}},checkout:{sc:/^(go|git co)($|\s)/,regex:/^git +checkout($|\s)/,options:["-b","-B","-"],execute:function(e,t){var o=t.getOptionsMap(),n=t.getGeneralArgs(),a=null;if(o["-b"]){a=o["-b"].concat(n),t.twoArgsImpliedHead(a,"-b");var i=e.validateBranchName(a[0]);return e.branch(i,a[1]),void e.checkout(i)}if(o["-"]){var c=e.HEAD.get("lastLastTarget");if(!c)throw new s({msg:r.str("git-result-nothing")});e.HEAD.set("target",c)}else{if(o["-B"])return a=o["-B"].concat(n),t.twoArgsImpliedHead(a,"-B"),e.forceBranch(a[0],a[1]),void e.checkout(a[0]);t.validateArgBounds(n,1,1),e.checkout(e.crappyUnescape(n[0]))}}},push:{regex:/^git +push($|\s)/,options:["--force"],execute:function(e,t){if(!e.hasOrigin())throw new s({msg:r.str("git-error-origin-required")});var o,n,a,i=t.getOptionsMap(),c=t.getGeneralArgs();t.twoArgsForOrigin(c),b(c);var l=c[1];if(l&&u(l)){var h=l.split(":");if(n=h[0],o=d(e,h[1]),""===n&&!e.origin.refs[o])throw new s({msg:r.todo("cannot delete branch "+{}.destination+" which doesnt exist")})}else if(l?(m(e,l),a=e.resolveID(l)):a=e.getOneBeforeCommit("HEAD"),n=a.get("id"),a.getRemoteTrackingBranchID&&a.getRemoteTrackingBranchID()){v(e,n);var p=a.getRemoteTrackingBranchID();o=e.refs[p].getBaseID()}else o=d(e,n);n&&m(e,n),e.push({destination:o,source:n,force:!!i["--force"]})}},describe:{regex:/^git +describe($|\s)/,execute:function(e,t){if(0===e.tagCollection.toArray().length)throw new s({msg:r.todo("fatal: No tags found, cannot describe anything.")});var o=t.getGeneralArgs();t.oneArgImpliedHead(o),m(e,o[0]),e.describe(o[0])}},tag:{regex:/^git +tag($|\s)/,options:["-d"],execute:function(e,t){var o=t.getGeneralArgs(),n=t.getOptionsMap();if(n["-d"]){var a,i=n["-d"];if(m(e,i),t.oneArgImpliedHead(i),e.tagCollection.each((function(e){e.get("id")==i&&(a=e)}),!0),null==a)throw new s({msg:r.todo("No tag found, nothing to remove")});return e.tagCollection.remove(a),delete e.refs[i],void e.gitVisuals.refreshTree()}if(0!==o.length)t.twoArgsImpliedHead(o),e.tag(o[0],o[1]);else{var c=e.getTags();e.printTags(c)}}}},w=[[/^(git help($|\s)|git$)/,function(){var t=[r.str("git-version"),"<br/>",r.str("git-usage"),n(r.str("git-usage-command")),"<br/>",r.str("git-supported-commands"),"<br/>"],o=e("../commands").commands.getOptionMap().git;Object.keys(o).forEach((function(e){var n=o[e];t.push("git "+e),Object.keys(n).forEach((function(e){t.push("\t "+e)}),this)}),this);var a=t.join("\n");throw a=a.replace(/\t/g,"&nbsp;&nbsp;&nbsp;"),new c({msg:a})}]];o.commandConfig=y,o.instantCommands=w},{"../commands":47,"../graph":58,"../intl":61,"../util/errors":87,"../util/escapeString":88}],55:[function(e,t,o){var n=e("q"),r=e("../app");e("../views/multiView").MultiView;function a(e){e=e||{},this.beforeCB=e.beforeCB||function(){},this.afterCB=e.afterCB||function(){};var t=function(e){e.resolve()};this.beforeDeferHandler=e.beforeDeferHandler||t,this.afterDeferHandler=e.afterDeferHandler||t,this.eventBaton=e.eventBaton||r.getEventBaton()}a.prototype.insertShim=function(){this.eventBaton.stealBaton("processGitCommand",this.processGitCommand,this)},a.prototype.removeShim=function(){this.eventBaton.releaseBaton("processGitCommand",this.processGitCommand,this)},a.prototype.processGitCommand=function(e,t){this.beforeCB(e);var o=n.defer();o.promise.then(function(){this.afterGitCommandProcessed(e,t)}.bind(this)).done();var r=function(){this.eventBaton.passBatonBack("processGitCommand",this.processGitCommand,this,[e,o])}.bind(this),a=n.defer();a.promise.then(r).done(),this.beforeDeferHandler(a,e)},a.prototype.afterGitCommandProcessed=function(e,t){this.afterCB(e);var o=n.defer();o.promise.then((function(){t.resolve()})).done(),this.afterDeferHandler(o,e)},o.GitShim=a},{"../app":46,"../views/multiView":102,q:21}],56:[function(e,t,o){e("backbone");var n=e("q"),r=e("../git").GitEngine,a=e("../visuals/animation/animationFactory").AnimationFactory,i=e("../visuals").GitVisuals,s=(e("../graph/treeCompare"),e("../util/eventBaton").EventBaton),c=e("../models/collections"),l=c.CommitCollection,u=c.BranchCollection,m=c.TagCollection,d=e("../models/commandModel").Command,h=e("../util/mock").mock,p=e("../util");var f=function(){this.init()};f.prototype.init=function(){this.commitCollection=new l,this.branchCollection=new u,this.tagCollection=new m;var e=function(){var e={},t=function(){var e=n.defer();return e.resolve(),e.promise};for(var o in a)e[o]=t;return e.playRefreshAnimationAndFinish=function(e,t){t.finish()},e.refreshTree=function(e,t){e.finish()},e.highlightEachWithPromise=function(e,t,o){return e},e}(),t=h(i),o={makeOrigin:function(e){e.localRepo;var t=e.treeString,o=new f;return o.gitEngine.loadTreeFromString(t),{customEvents:{on:function(e,t,o){t.apply(o,[])}},gitEngine:o.gitEngine}}};t.getVisualization=function(){return o},this.gitEngine=new r({collection:this.commitCollection,branches:this.branchCollection,tags:this.tagCollection,gitVisuals:t,animationFactory:e,eventBaton:new s}),this.gitEngine.init()};f.prototype.sendCommand=function(e,t){var o=n.defer(),r=o.promise,a=((new Date).getTime(),[]);return p.splitTextCommand(e,(function(e){r=r.then(function(){var t=new d({rawStr:e}),o=n.defer();return this.gitEngine.dispatch(t,o),a.push(t),o.promise}.bind(this))}),this),r.then((function(){(new Date).getTime();t&&t.resolve(a)})),r.fail((function(e){console.log("!!!!!!!! error !!!!!!!"),console.log(e),console.log(e.stack),console.log("!!!!!!!!!!!!!!!!!!!!!!")})),o.resolve(),r},o.HeadlessGit=f,o.getTreeQuick=function(e,t){var o=n.defer(),r=new f;r.sendCommand(e,o),o.promise.then((function(){t.resolve(r.gitEngine.exportTree())}))}},{"../git":57,"../graph/treeCompare":59,"../models/collections":69,"../models/commandModel":70,"../util":90,"../util/eventBaton":89,"../util/mock":93,"../visuals":106,"../visuals/animation/animationFactory":104,backbone:1,q:21}],57:[function(e,t,o){var n=e("backbone"),r=e("q"),a=e("../intl"),i=e("../visuals/animation/animationFactory").AnimationFactory,s=e("../visuals/animation").AnimationQueue,c=e("../graph/treeCompare"),l=e("../graph"),u=e("../util/errors"),m=e("../app"),d=e("../commands"),h=u.GitError,p=u.CommandResult,f="&nbsp;&nbsp;&nbsp;";function g(e){if("STAPH"!==e)throw e}function b(e){this.rootCommit=null,this.refs={},this.HEAD=null,this.origin=null,this.mode="git",this.localRepo=null,this.branchCollection=e.branches,this.tagCollection=e.tags,this.commitCollection=e.collection,this.gitVisuals=e.gitVisuals,this.eventBaton=e.eventBaton,this.eventBaton.stealBaton("processGitCommand",this.dispatch,this),this.animationFactory=e.animationFactory?e.animationFactory:i,this.initUniqueID()}b.prototype.initUniqueID=function(){var e;this.uniqueId=(e=0,function(t){return t?t+e++:e++})},b.prototype.handleModeChange=function(e,t){if(this.mode!==e){m.getEvents().trigger("vcsModeChange",{mode:e});var o=this.setMode(e);this.origin&&this.origin.setMode(e,(function(){})),o?o.then(t):t()}else t()},b.prototype.getIsHg=function(){return"hg"===this.mode},b.prototype.setMode=function(e){var t="git"===this.mode&&"hg"===e;if(this.mode=e,t){var o=r.defer();o.resolve();var n=o.promise;if(this.updateAllBranchesForHg())return n=(n=n.then(function(){return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)}.bind(this))).then(function(){if(this.pruneTree())return this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this));if(this.pruneTree())return this.animationFactory.playRefreshAnimation(this.gitVisuals)}},b.prototype.assignLocalRepo=function(e){this.localRepo=e},b.prototype.defaultInit=function(){var e=l.getDefaultTree();this.loadTree(e)},b.prototype.init=function(){this.rootCommit=this.makeCommit(null,null,{rootCommit:!0}),this.commitCollection.add(this.rootCommit);var e=this.makeBranch("master",this.rootCommit);this.HEAD=new v({id:"HEAD",target:e}),this.refs[this.HEAD.get("id")]=this.HEAD,this.commit()},b.prototype.hasOrigin=function(){return!!this.origin},b.prototype.isOrigin=function(){return!!this.localRepo},b.prototype.exportTreeForBranch=function(e){var t=this.exportTree(),o=l.getUpstreamSet(this,e),n=t.commits;t.commits={},n.forEach((function(e,n){o[n]&&(t.commits[n]=e)}));var r=t.branches;return t.branches={},r.forEach((function(o,n){n===e&&(t.branches[n]=o)})),t.HEAD.target=e,t},b.prototype.exportTree=function(){var e={branches:{},commits:{},tags:{},HEAD:null};this.branchCollection.toJSON().forEach((function(t){t.target=t.target.get("id"),delete t.visBranch,e.branches[t.id]=t})),this.commitCollection.toJSON().forEach((function(t){w.prototype.constants.circularFields.forEach((function(e){delete t[e]})),t.parents=(t.parents||[]).map((function(e){return e.get("id")})),e.commits[t.id]=t}),this),this.tagCollection.toJSON().forEach((function(t){delete t.visTag,t.target=t.target.get("id"),e.tags[t.id]=t}),this);var t=this.HEAD.toJSON();return t.lastTarget=t.lastLastTarget=t.visBranch=t.visTag=void 0,t.target=t.target.get("id"),e.HEAD=t,this.hasOrigin()&&(e.originTree=this.origin.exportTree()),e},b.prototype.printTree=function(e){e=e||this.exportTree(),c.reduceTreeFields([e]);var t=JSON.stringify(e);return/'/.test(t)&&(t=escape(t)),t},b.prototype.printAndCopyTree=function(){window.prompt(a.str("Copy the tree string below"),this.printTree())},b.prototype.loadTree=function(e){e=JSON.parse(JSON.stringify(e)),this.removeAll(),this.instantiateFromTree(e),this.reloadGraphics(),this.initUniqueID()},b.prototype.loadTreeFromString=function(e){this.loadTree(JSON.parse(unescape(this.crappyUnescape(e))))},b.prototype.instantiateFromTree=function(e){var t={};Object.values(e.commits).forEach((function(o){var n=this.getOrMakeRecursive(e,t,o.id,this.gitVisuals);this.commitCollection.add(n)}),this),Object.values(e.branches).forEach((function(o){var n=this.getOrMakeRecursive(e,t,o.id,this.gitVisuals);this.branchCollection.add(n,{silent:!0})}),this),Object.values(e.tags||{}).forEach((function(o){var n=this.getOrMakeRecursive(e,t,o.id,this.gitVisuals);this.tagCollection.add(n,{silent:!0})}),this);var o=this.getOrMakeRecursive(e,t,e.HEAD.id,this.gitVisuals);if(this.HEAD=o,this.rootCommit=t.C0,!this.rootCommit)throw new Error("Need root commit of C0 for calculations");if(this.refs=t,this.gitVisuals.gitReady=!1,this.branchCollection.each((function(e){this.gitVisuals.addBranch(e)}),this),this.tagCollection.each((function(e){this.gitVisuals.addTag(e)}),this),e.originTree){var n=JSON.stringify(e.originTree);this.animationQueue=this.animationQueue||new s({callback:function(){}}),this.makeOrigin(n)}},b.prototype.makeOrigin=function(e){if(this.hasOrigin())throw new h({msg:a.str("git-error-origin-exists")});e=e||this.printTree(this.exportTreeForBranch("master"));var t=this.gitVisuals.getVisualization().makeOrigin({localRepo:this,treeString:e});this.animationQueue.set("promiseBased",!0),t.customEvents.on("gitEngineReady",(function(){this.origin=t.gitEngine,t.gitEngine.assignLocalRepo(this),this.syncRemoteBranchFills(),this.origin.externalRefresh(),this.animationFactory.playRefreshAnimationAndFinish(this.gitVisuals,this.animationQueue)}),this);var o=JSON.parse(unescape(e));Object.keys(o.branches).forEach((function(e){var t=o.branches[e];if(!this.refs["o/"+e]){var n=this.findCommonAncestorWithRemote(t.target),r=this.makeBranch("o/"+e,this.getCommitFromRef(n));this.setLocalToTrackRemote(this.refs[t.id],r)}}),this)},b.prototype.makeRemoteBranchIfNeeded=function(e){if(!this.refs["o/"+e]&&"branch"===this.origin.resolveID(e).get("type"))return this.makeRemoteBranchForRemote(e)},b.prototype.makeBranchIfNeeded=function(e){if(!this.refs[e]){var t=this.findCommonAncestorForRemote(this.getCommitFromRef("HEAD").get("id"));return this.validateAndMakeBranch(e,this.getCommitFromRef(t))}},b.prototype.makeRemoteBranchForRemote=function(e){var t=this.origin.refs[e].get("target"),o=this.findCommonAncestorWithRemote(t.get("id"));return this.makeBranch("o/"+e,this.getCommitFromRef(o))},b.prototype.findCommonAncestorForRemote=function(e){if(this.origin.refs[e])return e;var t=this.refs[e].get("parents");if(1===t.length)return e=t[0].get("id"),this.findCommonAncestorForRemote(e);var o=this.findCommonAncestorForRemote(t[0].get("id")),n=this.findCommonAncestorForRemote(t[1].get("id"));return this.getCommonAncestor(o,n,!0).get("id")},b.prototype.findCommonAncestorWithRemote=function(e){if(this.refs[e])return e;var t=this.origin.refs[e].get("parents");if(1===t.length)return this.findCommonAncestorWithRemote(t[0].get("id"));var o=this.findCommonAncestorWithRemote(t[0].get("id")),n=this.findCommonAncestorWithRemote(t[1].get("id"));return this.getCommonAncestor(o,n,!0).get("id")},b.prototype.makeBranchOnOriginAndTrack=function(e,t){var o=this.makeBranch("o/"+e,this.getCommitFromRef(t));this.refs[e]&&this.setLocalToTrackRemote(this.refs[e],o);var n=this.findCommonAncestorForRemote(this.getCommitFromRef(t).get("id"));this.origin.makeBranch(e,this.origin.getCommitFromRef(n))},b.prototype.setLocalToTrackRemote=function(e,t){if(e.setRemoteTrackingBranchID(t.get("id")),this.command){var o='local branch "'+e.get("id")+'" set to track remote branch "'+t.get("id")+'"';this.command.addWarning(a.todo(o))}},b.prototype.getOrMakeRecursive=function(e,t,o,n){if(t[o])return t[o];var r=function(e,t){if(e.commits[t])return"commit";if(e.branches[t])return"branch";if("HEAD"==t)return"HEAD";if(e.tags[t])return"tag";throw new Error("bad type for "+t)}(e,o);if("HEAD"==r){var a=e.HEAD,i=new v(Object.assign(e.HEAD,{target:this.getOrMakeRecursive(e,t,a.target)}));return t[o]=i,i}if("branch"==r){var s=e.branches[o],c=new y(Object.assign(e.branches[o],{target:this.getOrMakeRecursive(e,t,s.target)}));return t[o]=c,c}if("tag"==r){var l=e.tags[o],u=new k(Object.assign(e.tags[o],{target:this.getOrMakeRecursive(e,t,l.target)}));return t[o]=u,u}if("commit"==r){var m=e.commits[o],d=m.parents.map((function(o){return this.getOrMakeRecursive(e,t,o)}),this),h=new w(Object.assign(m,{parents:d,gitVisuals:this.gitVisuals}));return t[o]=h,h}throw new Error("ruh rho!! unsupported type for "+o)},b.prototype.tearDown=function(){this.tornDown||(this.eventBaton.releaseBaton("processGitCommand",this.dispatch,this),this.removeAll(),this.tornDown=!0)},b.prototype.reloadGraphics=function(){this.gitVisuals.rootCommit=this.refs.C0,this.gitVisuals.initHeadBranch(),this.gitVisuals.drawTreeFromReload(),this.gitVisuals.refreshTreeHarsh()},b.prototype.removeAll=function(){this.branchCollection.reset(),this.tagCollection.reset(),this.commitCollection.reset(),this.refs={},this.HEAD=null,this.rootCommit=null,this.origin&&(this.origin.gitVisuals.getVisualization().tearDown(),delete this.origin,this.gitVisuals.getVisualization().clearOrigin()),this.gitVisuals.resetAll()},b.prototype.getDetachedHead=function(){return"branch"!==this.HEAD.get("target").get("type")},b.prototype.validateBranchName=function(e){if(e=(e=e.replace(/&#x2F;/g,"/")).replace(/\s/g,""),!/^(\w+[.\/\-]?)+\w+$/.test(e)||0===e.search("o/"))throw new h({msg:a.str("bad-branch-name",{branch:e})});if(/^[cC]\d+$/.test(e))throw new h({msg:a.str("bad-branch-name",{branch:e})});if(/[hH][eE][aA][dD]/.test(e))throw new h({msg:a.str("bad-branch-name",{branch:e})});return e.length>9&&(e=e.slice(0,9),this.command.addWarning(a.str("branch-name-short",{branch:e}))),e},b.prototype.validateAndMakeBranch=function(e,t){if(e=this.validateBranchName(e),this.refs[e])throw new h({msg:a.str("bad-branch-name",{branch:e})});return this.makeBranch(e,t)},b.prototype.validateAndMakeTag=function(e,t){if(e=this.validateBranchName(e),this.refs[e])throw new h({msg:a.str("bad-tag-name",{tag:e})});this.makeTag(e,t)},b.prototype.makeBranch=function(e,t){if(this.refs[e])throw new Error("woah already have that");var o=new y({target:t,id:e});return this.branchCollection.add(o),this.refs[o.get("id")]=o,o},b.prototype.makeTag=function(e,t){if(this.refs[e])throw new Error("woah already have that");var o=new k({target:t,id:e});return this.tagCollection.add(o),this.refs[o.get("id")]=o,o},b.prototype.getHead=function(){return Object.assign({},this.HEAD)},b.prototype.getTags=function(){var e=[];return this.tagCollection.each((function(t){e.push({id:t.get("id"),target:t.get("target"),remote:t.getIsRemote(),obj:t})}),this),e},b.prototype.getBranches=function(){var e=[];return this.branchCollection.each((function(t){e.push({id:t.get("id"),selected:this.HEAD.get("target")===t,target:t.get("target"),remote:t.getIsRemote(),obj:t})}),this),e},b.prototype.getRemoteBranches=function(){return this.getBranches().filter((function(e){return!0===e.remote}))},b.prototype.getLocalBranches=function(){return this.getBranches().filter((function(e){return!1===e.remote}))},b.prototype.printBranchesWithout=function(e){var t=this.getUpstreamBranchSet()[this.getCommitFromRef(e).get("id")].map((function(e){return e.selected=this.HEAD.get("target").get("id")==e.id,e}),this);this.printBranches(t)},b.prototype.printBranches=function(e){var t="";throw e.forEach((function(e){t+=(e.selected?"* ":"")+e.id+"\n"})),new p({msg:t})},b.prototype.printTags=function(e){var t="";throw e.forEach((function(e){t+=e.id+"\n"})),new p({msg:t})},b.prototype.printRemotes=function(e){var t="";throw e.verbose?(t+="origin (fetch)\n",t+=f+"git@github.com:pcottle/foo.git\n\n",t+="origin (push)\n",t+=f+"git@github.com:pcottle/foo.git"):t+="origin",new p({msg:t})},b.prototype.getUniqueID=function(){for(var e=this.uniqueId("C"),t=function(e){return!!this.refs[e]||!(!this.origin||!this.origin.refs[e])}.bind(this);t(e);)e=this.uniqueId("C");return e},b.prototype.makeCommit=function(e,t,o){t||(t=this.getUniqueID());var n=new w(Object.assign({parents:e,id:t,gitVisuals:this.gitVisuals},o||{}));return this.refs[n.get("id")]=n,this.commitCollection.add(n),n},b.prototype.revert=function(e){var t=e.map((function(e){return this.getCommitFromRef(e)}),this),o=r.defer(),n=o.promise,i=this.resolveID("HEAD");n=this.animationFactory.highlightEachWithPromise(n,t,i);var s=this.getCommitFromRef("HEAD"),c=function(e){var t=this.rebaseAltID(e.get("id")),o=a.str("git-revert-msg",{oldCommit:this.resolveName(e),oldMsg:e.get("commitMessage")}),n=this.makeCommit([s],t,{commitMessage:o});return s=n,this.animationFactory.playCommitBirthPromiseAnimation(n,this.gitVisuals)}.bind(this);t.forEach((function(e){n=n.then((function(){return c(e)}))})),n=n.then(function(){return this.setTargetLocation("HEAD",s),this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this)),this.animationQueue.thenFinish(n,o)},b.prototype.reset=function(e){this.setTargetLocation("HEAD",this.getCommitFromRef(e))},b.prototype.setupCherrypickChain=function(e){var t=r.defer(),o=t.promise,n=this.resolveID("HEAD");o=this.animationFactory.highlightEachWithPromise(o,e,n);var a=function(e){var t=this.cherrypick(e);return this.animationFactory.playCommitBirthPromiseAnimation(t,this.gitVisuals)}.bind(this);e.forEach((function(e){o=o.then((function(){return a(e)}))}),this),this.animationQueue.thenFinish(o,t)},b.prototype.checkUpstreamOfSource=function(e,t,o,n,r){if(!l.getUpstreamSet(t,n)[e.getCommitFromRef(o).get("id")])throw new h({msg:r||a.str("git-error-origin-fetch-no-ff")})},b.prototype.getTargetGraphDifference=function(e,t,o,n,r){r=r||{},n=t.resolveID(n);var i=l.getUpstreamSet(e,o),s=t.getCommitFromRef(n),c=t.exportTree(),u=c.commits[s.get("id")];if(i[u.id]){if(r.dontThrowOnNoFetch)return[];throw new h({msg:a.str("git-error-origin-fetch-uptodate")})}u.depth=0;for(var m=[],d=[u],p=function(e){if(!i[e]){var t=c.commits[e];t.depth=f.depth+1,d.push(t)}};d.length;){var f=d.pop();m.push(f),f.parents.forEach(p)}for(var g=l.getUniqueObjects(m),b=[],v=function(e){var t=!0;return e.parents.forEach((function(e){t=t&&i[e]})),t};g.length;)for(var y=0;y<g.length;y++)if(v(g[y])){var w=g[y];b.push(w),g.splice(y,1),i[w.id]=!0}return b},b.prototype.push=function(e){if(""!==(e=e||{}).source){var t=this.refs[e.source];if(t&&"tag"===t.attributes.type)throw new h({msg:a.todo("Tags are not allowed as sources for pushing")});this.origin.refs[e.destination]||(this.makeBranchOnOriginAndTrack(e.destination,this.getCommitFromRef(t)),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals));var o=this.origin.refs[e.destination],n=this.resolveID(e.source||"HEAD");e.force||this.checkUpstreamOfSource(this,this.origin,o,n,a.str("git-error-origin-push-no-ff"));var i=this.getTargetGraphDifference(this.origin,this,o,n,{dontThrowOnNoFetch:!0});if(!i.length){if(!e.force)throw new h({msg:a.str("git-error-origin-fetch-uptodate")});var s=this.getCommitFromRef(t),c=this.getCommitFromRef(o);if(s.id===c.id)throw new h({msg:a.str("git-error-origin-fetch-uptodate")})}i=i.filter((function(e){return!this.origin.refs[e.id]}),this);var l=function(e,t){var o=t.map((function(e){return this.origin.refs[e]}),this);return this.origin.makeCommit(o,e)}.bind(this),u=function(e,t){var o=l(e,t);return this.animationFactory.playCommitBirthPromiseAnimation(o,this.origin.gitVisuals)}.bind(this),m=r.defer(),d=m.promise;i.forEach((function(e){d=(d=d.then(function(){return this.animationFactory.playHighlightPromiseAnimation(this.refs[e.id],o)}.bind(this))).then((function(){return u(e.id,e.parents)}))}),this),d=(d=d.then(function(){var e=this.getCommitFromRef(n).get("id"),t=this.origin.refs[e];return this.origin.setTargetLocation(o,t),this.animationFactory.playRefreshAnimation(this.gitVisuals),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals)}.bind(this))).then(function(){var t=this.getCommitFromRef(n);return this.setTargetLocation(this.refs["o/"+e.destination],t),this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this)),e.dontResolvePromise||this.animationQueue.thenFinish(d,m)}else this.pushDeleteRemoteBranch(this.refs["o/"+e.destination],this.origin.refs[e.destination])},b.prototype.pushDeleteRemoteBranch=function(e,t){if("master"===t.get("id"))throw new h({msg:a.todo("You cannot delete master branch on remote!")});var o=e.get("id");this.origin.deleteBranch(t),this.deleteBranch(e),this.branchCollection.each((function(e){e.getRemoteTrackingBranchID()===o&&e.setRemoteTrackingBranchID(null)}),this),this.origin.pruneTree(),this.origin.externalRefresh()},b.prototype.fetch=function(e){var t;if(!(e=e||{}).destination||""!==e.source){if(e.destination&&e.source)return t=(t=t||this.makeRemoteBranchIfNeeded(e.source))||this.makeBranchIfNeeded(e.destination),e.didMakeBranch=t,this.fetchCore([{destination:e.destination,source:e.source}],e);var o=this.origin.branchCollection.toArray().map((function(e){var o=e.get("id");return t=t||this.makeRemoteBranchIfNeeded(o),{destination:e.getPrefixedID(),source:o}}),this);return e.didMakeBranch=t,this.fetchCore(o,e)}this.validateAndMakeBranch(e.destination,this.getCommitFromRef("HEAD"))},b.prototype.fetchCore=function(e,t){e.forEach((function(e){this.checkUpstreamOfSource(this,this.origin,e.destination,e.source)}),this);var o=[];if(e.forEach((function(e){o=o.concat(this.getTargetGraphDifference(this,this.origin,e.destination,e.source,Object.assign({},t,{dontThrowOnNoFetch:!0})))}),this),!o.length&&!t.dontThrowOnNoFetch)throw new h({msg:a.str("git-error-origin-fetch-uptodate")});o=l.getUniqueObjects(o),o=(o=l.descendSortDepth(o)).filter((function(e){return!this.refs[e.id]}),this);var n=function(e,t){var o=t.map((function(e){return this.refs[e]}),this);return this.makeCommit(o,e)}.bind(this),i=function(e,t){var o=n(e,t);return this.animationFactory.playCommitBirthPromiseAnimation(o,this.gitVisuals)}.bind(this),s=r.defer(),c=s.promise;t.didMakeBranch&&(c=c.then(function(){return this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this)));var u=this.origin.getUpstreamBranchSet();return o.forEach((function(e){var t=u[e.id][0].obj,o=this.refs[t.getPrefixedID()];c=(c=c.then(function(){return this.animationFactory.playHighlightPromiseAnimation(this.origin.refs[e.id],o)}.bind(this))).then((function(){return i(e.id,e.parents)}))}),this),c=c.then(function(){return e.forEach((function(e){var t=this.refs[e.destination],o=this.origin.getCommitFromRef(e.source).get("id"),n=this.refs[o];this.setTargetLocation(t,n)}),this),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this)),t.dontResolvePromise||this.animationQueue.thenFinish(c,s),{chain:c,deferred:s}},b.prototype.pull=function(e){e=e||{};var t=this.getOneBeforeCommit("HEAD"),o=this.fetch({dontResolvePromise:!0,dontThrowOnNoFetch:!0,source:e.source,destination:e.destination});if(o){var n=this.refs[e.destination];e.isRebase?this.pullFinishWithRebase(o,t,n):this.pullFinishWithMerge(o,t,n)}},b.prototype.pullFinishWithRebase=function(e,t,o){var n=e.chain,r=e.deferred;n=(n=(n=(n=(n=n.then(function(){if(this.isUpstreamOf(o,t))throw this.command.set("error",new p({msg:a.str("git-result-uptodate")})),"STAPH"}.bind(this))).then(function(){return this.animationFactory.getDelayedPromise(300)}.bind(this))).then(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(o),t)}.bind(this))).then(function(){if(e.dontResolvePromise=!0,this.isUpstreamOf(t,o))return this.setTargetLocation(t,this.getCommitFromRef(o)),this.checkout(t),this.animationFactory.playRefreshAnimation(this.gitVisuals);try{return this.rebase(o,t,e)}catch(e){if(this.filterError(e),e.getMsg()!==a.str("git-error-rebase-none"))throw e;return this.setTargetLocation(t,this.getCommitFromRef(o)),this.checkout(t),this.animationFactory.playRefreshAnimation(this.gitVisuals)}}.bind(this))).fail(g),this.animationQueue.thenFinish(n,r)},b.prototype.pullFinishWithMerge=function(e,t,o){var n=e.chain,r=e.deferred;n=(n=(n=(n=(n=(n=(n=n.then(function(){if(this.mergeCheck(o,t))throw this.command.set("error",new p({msg:a.str("git-result-uptodate")})),"STAPH"}.bind(this))).then(function(){return this.animationFactory.getDelayedPromise(300)}.bind(this))).then(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(o),t)}.bind(this))).then(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(t),o)}.bind(this))).then(function(){return this.animationFactory.getDelayedPromise(700)}.bind(this))).then(function(){var e=this.merge(o);return e?this.animationFactory.playCommitBirthPromiseAnimation(e,this.gitVisuals):this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this))).fail(g),this.animationQueue.thenFinish(n,r)},b.prototype.fakeTeamwork=function(e,t){for(var o=function(){var e=this.getUniqueID();return this.origin.receiveTeamwork(e,t,this.animationQueue)}.bind(this),n=function(){var e=o();return this.animationFactory.playCommitBirthPromiseAnimation(e,this.origin.gitVisuals)}.bind(this),a=r.defer(),i=a.promise,s=0;s<e;s++)i=i.then(n);this.animationQueue.thenFinish(i,a)},b.prototype.receiveTeamwork=function(e,t,o){this.checkout(this.resolveID(t));var n=this.makeCommit([this.getCommitFromRef("HEAD")],e);return this.setTargetLocation(this.HEAD,n),n},b.prototype.cherrypick=function(e){var t=this.rebaseAltID(e.get("id")),o=this.makeCommit([this.getCommitFromRef("HEAD")],t);return this.setTargetLocation(this.HEAD,o),o},b.prototype.commit=function(e){e=e||{};var t=this.getCommitFromRef(this.HEAD),o=null;e.isAmend&&(t=this.resolveID("HEAD~1"),o=this.rebaseAltID(this.getCommitFromRef("HEAD").get("id")));var n=this.makeCommit([t],o);return this.getDetachedHead()&&"git"===this.mode&&this.command.addWarning(a.str("git-warning-detached")),this.setTargetLocation(this.HEAD,n),n},b.prototype.resolveName=function(e){var t=this.resolveID(e);return"commit"==t.get("type")?"commit "+t.get("id"):"branch"==t.get("type")?'branch "'+t.get("id")+'"':this.resolveName(t.get("target"))},b.prototype.resolveID=function(e){if(null==e)throw new Error("Don't call this with null / undefined");return"string"!=typeof e?e:this.resolveStringRef(e)},b.prototype.resolveRelativeRef=function(e,t){for(var o,n=/([~\^])(\d*)/g;o=n.exec(t);){var r=e,i=o[2]?parseInt(o[2],10):1;if("^"==o[1])r=e.getParent(i-1);else for(;r&&i--;)r=r.getParent(0);if(!r){var s=a.str("git-error-relative-ref",{commit:e.id,match:o[0]});throw new h({msg:s})}e=r}return e},b.prototype.resolveStringRef=function(e){if(e=this.crappyUnescape(e),this.refs[e])return this.refs[e];if(e.match(/^c\d+'*/)&&this.refs[e.toUpperCase()])return this.refs[e.toUpperCase()];var t=null,o=null,n=/^([a-zA-Z0-9]+)(([~\^]\d*)*)$/.exec(e);if(!n)throw new h({msg:a.str("git-error-exist",{ref:e})});if(t=n[1],o=n[2],!this.refs[t])throw new h({msg:a.str("git-error-exist",{ref:e})});var r=this.getCommitFromRef(t);return o&&(r=this.resolveRelativeRef(r,o)),r},b.prototype.getCommitFromRef=function(e){for(var t=this.resolveID(e);"commit"!==t.get("type");)t=t.get("target");return t},b.prototype.getType=function(e){return this.resolveID(e).get("type")},b.prototype.setTargetLocation=function(e,t){"commit"!=this.getType(e)&&(e=this.getOneBeforeCommit(e)).set("target",t)},b.prototype.updateBranchesFromSet=function(e){if(!e)throw new Error("need commit set here");var t=this.getUpstreamBranchSet(),o={};e.forEach((function(e,n){t[n].forEach((function(e){o[e.id]=!0}))}),this);var n=o.map((function(e,t){return t}));return this.updateBranchesForHg(n)},b.prototype.updateAllBranchesForHgAndPlay=function(e){return this.updateBranchesForHg(e)&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},b.prototype.updateAllBranchesForHg=function(){var e=this.branchCollection.map((function(e){return e.get("id")}));return this.updateBranchesForHg(e)},b.prototype.syncRemoteBranchFills=function(){this.branchCollection.each((function(e){if(e.getIsRemote()){var t=this.origin.refs[e.getBaseID()];if(t.get("visBranch")){var o=t.get("visBranch").get("fill");e.get("visBranch").set("fill",o)}}}),this)},b.prototype.updateBranchesForHg=function(e){var t=!1;return e.forEach((function(e){var o=this.getCommitFromRef(e).get("id"),n=this.getBumpedID(o);if(this.refs[n]){var r;for(t=!0;this.refs[n];)r=n,n=this.rebaseAltID(n);this.setTargetLocation(this.refs[e],this.refs[r])}}),this),!!t},b.prototype.updateCommitParentsForHgRebase=function(e){var t=!1;return Object.keys(e).forEach((function(e){var o=this.refs[e].checkForUpdatedParent(this);t=t||o}),this),t},b.prototype.pruneTreeAndPlay=function(){return this.pruneTree()&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},b.prototype.pruneTree=function(){var e=this.getUpstreamBranchSet(),t=l.getUpstreamSet(this,"HEAD");Object.keys(t).forEach((function(t){e[t]=!0}));var o=[];if(this.commitCollection.each((function(t){e[t.get("id")]||o.push(t)}),this),o.length)return this.command&&this.command.addWarning(a.str("hg-prune-tree")),o.forEach((function(e){e.removeFromParents(),this.commitCollection.remove(e);var t=e.get("id");this.refs[t]=void 0,delete this.refs[t];var o=e.get("visNode");o&&o.removeAll()}),this),!0},b.prototype.getUpstreamBranchSet=function(){return this.getUpstreamCollectionSet(this.branchCollection)},b.prototype.getUpstreamTagSet=function(){return this.getUpstreamCollectionSet(this.tagCollection)},b.prototype.getUpstreamCollectionSet=function(e){var t={};return e.each((function(e){(function(e){for(var t=[],o=[e];o.length;){var n=o.pop();t.push(n.get("id")),n.get("parents")&&n.get("parents").length&&(o=o.concat(n.get("parents")))}return t})(e.get("target")).forEach((function(o){t[o]=t[o]||[],function(e,t){var o=!1;return e.forEach((function(e){e.id==t&&(o=!0)})),o}(t[o],e.get("id"))||t[o].push({obj:e,id:e.get("id")})}))})),t},b.prototype.getUpstreamHeadSet=function(){var e=l.getUpstreamSet(this,"HEAD");return e[this.getCommitFromRef("HEAD").get("id")]=!0,e},b.prototype.getOneBeforeCommit=function(e){var t=this.resolveID(e);return t!==this.HEAD||this.getDetachedHead()||(t=t.get("target")),t},b.prototype.scrapeBaseID=function(e){var t=/^C(\d+)/.exec(e);if(!t)throw new Error("regex failed on "+e);return"C"+t[1]},b.prototype.rebaseAltID=function(e){for(var t=this.getBumpedID(e);this.refs[t];)t=this.getBumpedID(t);return t},b.prototype.getMostRecentBumpedID=function(e){for(var t,o=e;this.refs[o];)t=o,o=this.getBumpedID(o);return t},b.prototype.getBumpedID=function(e){for(var t=[[/^C(\d+)[']{0,2}$/,function(e){return e[0]+"'"}],[/^C(\d+)[']{3}$/,function(e){return e[0].slice(0,-3)+"'^4"}],[/^C(\d+)['][\^](\d+)$/,function(e){return"C"+String(e[1])+"'^"+String(Number(e[2])+1)}]],o=0;o<t.length;o++){var n=t[o][0],r=t[o][1],a=n.exec(e);if(a)return r(a)}throw new Error("could not modify the id "+e)},b.prototype.idSortFunc=function(e,t){var o=[[/^C(\d+)$/,function(e){return 1e3*e[1]}],[/^C(\d+)([']+)$/,function(e){return 1e3*e[1]+e[2].length}],[/^C(\d+)['][\^](\d+)$/,function(e){return 1e3*e[1]+Number(e[2])}]],n=function(e){for(var t=0;t<o.length;t++){var n=o[t][0],r=o[t][1],a=n.exec(e);if(a)return r(a)}throw new Error("Could not parse commit ID "+e)};return n(e.get("id"))-n(t.get("id"))},b.prototype.dateSortFunc=function(e,t){var o=new Date(e.get("createTime")),n=new Date(t.get("createTime"));return o-n==0?b.prototype.idSortFunc(e,t):o-n},b.prototype.hgRebase=function(e,t){var o=r.defer(),n=this.rebase(e,t,{dontResolvePromise:!0,deferred:o});if(n){this.getCommonAncestor(e,t);var a=this.getCommitFromRef(t),i=this.getDownstreamSet(t),s=l.getUpstreamSet(this,e),c=this.getUpstreamDiffSetFromSet(s,t),u=[];Object.keys(c).forEach((function(e){u.push(this.getDownstreamSet(e))}),this);var m={};m[a.get("id")]=!0,[c,i].concat(u).forEach((function(e){Object.keys(e).forEach((function(e){m[e]=!0}))}));var d={},h=this.getUpstreamBranchSet();Object.keys(m).forEach((function(e){h[e].forEach((function(e){d[e.id]=!0}))}));var p=Object.keys(d);n=(n=(n=n.then(function(){if(this.updateCommitParentsForHgRebase(m))return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)}.bind(this))).then(function(){return this.updateAllBranchesForHgAndPlay(p)}.bind(this))).then(function(){return this.pruneTreeAndPlay()}.bind(this)),this.animationQueue.thenFinish(n,o)}},b.prototype.rebase=function(e,t,o){if(this.isUpstreamOf(e,t))return this.command.setResult(a.str("git-result-uptodate")),void this.checkout(t);if(this.isUpstreamOf(t,e))return this.setTargetLocation(t,this.getCommitFromRef(e)),this.command.setResult(a.str("git-result-fastforward")),void this.checkout(t);var n=l.getUpstreamSet(this,e),r=this.getUpstreamDiffFromSet(n,t);return this.rebaseFinish(r,n,e,t,o)},b.prototype.getUpstreamDiffSetFromSet=function(e,t){var o={};return this.getUpstreamDiffFromSet(e,t).forEach((function(e){o[e.get("id")]=!0})),o},b.prototype.getUpstreamDiffFromSet=function(e,t){var o=l.bfsFromLocationWithSet(this,t,e);return o.sort(this.dateSortFunc),o},b.prototype.getInteractiveRebaseCommits=function(e,t){for(var o=l.getUpstreamSet(this,e),n=[],r=[this.getCommitFromRef(t)];r.length;){var i=r.pop();o[i.get("id")]||(n.push(i),(r=r.concat(i.get("parents"))).sort(this.dateSortFunc))}var s=[];if(n.forEach((function(e){1==e.get("parents").length&&s.push(e)})),!s.length)throw new h({msg:a.str("git-error-rebase-none")});return s},b.prototype.rebaseInteractiveTest=function(e,t,o){o=o||{};var n,r=this.getInteractiveRebaseCommits(e,t),i={};if(r.forEach((function(e){var t=e.get("id");i[t]=e})),0===o.interactiveTest.length)n=r;else{var s=o.interactiveTest[0].split(","),c=[];if(n=[],s.forEach((function(e){e in i?n.push(i[e]):c.push(e)})),c.length>0)throw new h({msg:a.todo("Hey those commits don't exist in the set!")})}this.rebaseFinish(n,{},e,t)},b.prototype.rebaseInteractive=function(t,o,n){n=n||{};var i=this.getInteractiveRebaseCommits(t,o);this.animationQueue.set("defer",!0);var s,c=r.defer();if(c.promise.then(function(e){if(!e.length)throw new p({msg:a.str("git-result-nothing")});this.rebaseFinish(e,{},t,o)}.bind(this)).fail(function(e){this.filterError(e),this.command.set("error",e),this.animationQueue.start()}.bind(this)).done(),n.initialCommitOrdering&&n.initialCommitOrdering.length>0){var l={};i.forEach((function(e){l[e.get("id")]=!0})),s=[],n.initialCommitOrdering[0].split(",").forEach((function(e){if(!l[e])throw new h({msg:a.todo("Hey those commits don't exist in the set!")});s.push(e)}))}new(0,e("../views/rebaseView").InteractiveRebaseView)({deferred:c,toRebase:i,initialCommitOrdering:s,aboveAll:n.aboveAll})},b.prototype.filterRebaseCommits=function(e,t,o){var n={};Object.keys(t).forEach((function(e){n[this.scrapeBaseID(e)]=!0}),this);var r={};return e.filter((function(e){if(1!==e.get("parents").length&&!o.preserveMerges)return!1;var t=this.scrapeBaseID(e.get("id"));return!n[t]&&(!r[e.get("id")]&&(r[e.get("id")]=!0,!0))}),this)},b.prototype.getRebasePreserveMergesParents=function(e){return e.get("parents").map((function(e){var t=e.get("id"),o=this.getMostRecentBumpedID(t);return this.refs[o]}),this)},b.prototype.rebaseFinish=function(e,t,o,n,i){i=i||{};var s=this.resolveID(o),c=i.deferred||r.defer(),l=i.chain||c.promise,u=this.filterRebaseCommits(e,t,i);if(!u.length)throw new h({msg:a.str("git-error-rebase-none")});l=this.animationFactory.highlightEachWithPromise(l,u,s);var m=this.getCommitFromRef(o),d=!1,p=function(e){var t,o=this.rebaseAltID(e.get("id"));t=i.preserveMerges&&d&&d?this.getRebasePreserveMergesParents(e):[m];var n=this.makeCommit(t,o);return m=n,d=!0,this.animationFactory.playCommitBirthPromiseAnimation(n,this.gitVisuals)}.bind(this);return u.forEach((function(e){l=l.then((function(){return p(e)}))}),this),l=l.then(function(){return"commit"==this.resolveID(n).get("type")?this.checkout(m):(this.setTargetLocation(n,m),this.checkout(n)),this.animationFactory.playRefreshAnimation(this.gitVisuals)}.bind(this)),i.dontResolvePromise||this.animationQueue.thenFinish(l,c),l},b.prototype.mergeCheck=function(e,t){var o=this.getCommitFromRef(e)===this.getCommitFromRef(t);return this.isUpstreamOf(e,t)||o},b.prototype.merge=function(e,t){t=t||{};if(this.mergeCheck(e,"HEAD"))throw new p({msg:a.str("git-result-uptodate")});if(this.isUpstreamOf("HEAD",e)&&!t.noFF)return this.setTargetLocation("HEAD",this.getCommitFromRef(e)),void this.command.setResult(a.str("git-result-fastforward"));var o=this.getCommitFromRef("HEAD"),n=this.getCommitFromRef(e),r=a.str("git-merge-msg",{target:this.resolveName(e),current:this.resolveName("HEAD")}),i=this.makeCommit([o,n],null,{commitMessage:r});return this.setTargetLocation("HEAD",i),i},b.prototype.checkout=function(e){var t=this.resolveID(e);if("HEAD"!==t.get("id")){var o=t.get("type");if("branch"===o&&t.getIsRemote()&&(t=this.getCommitFromRef(t.get("id"))),"branch"!==o&&"tag"!==o&&"commit"!==o)throw new h({msg:a.str("git-error-options")});"tag"===o&&(t=t.get("target")),this.HEAD.set("target",t)}},b.prototype.forceBranch=function(e,t){e=this.crappyUnescape(e),this.refs[e]||this.branch(e,t);var o=this.resolveID(e);if("branch"!==o.get("type"))throw new h({msg:a.str("git-error-options")});if(o.getIsRemote())throw new h({msg:a.str("git-error-remote-branch")});var n=this.getCommitFromRef(t);this.setTargetLocation(o,n)},b.prototype.branch=function(e,t){var o=this.getCommitFromRef(t),n=this.validateAndMakeBranch(e,o);t=this.resolveID(t),this.isRemoteBranchRef(t)&&this.setLocalToTrackRemote(n,t)},b.prototype.isRemoteBranchRef=function(e){var t=this.resolveID(e);return"branch"===t.get("type")&&t.getIsRemote()},b.prototype.tag=function(e,t){var o=this.getCommitFromRef(t);this.validateAndMakeTag(e,o)},b.prototype.describe=function(e){var t=this.getCommitFromRef(e),o={};this.tagCollection.toJSON().forEach((function(e){o[e.target.get("id")]=e.id}));for(var n,r=[t],i=[];r.length;){var s=r.pop(),c=s.get("id");if(o[c]){n=o[c];break}i.push(s.get("id"));var l=s.get("parents");l&&l.length&&(r=r.concat(l)).sort(this.dateSortFunc)}if(!n)throw new h({msg:a.todo("Fatal: no tags found upstream")});if(0===i.length)throw new p({msg:n});throw new p({msg:n+"_"+i.length+"_g"+t.get("id")})},b.prototype.validateAndDeleteBranch=function(e){var t=this.resolveID(e);if("branch"!==t.get("type")||"master"==t.get("id")||this.HEAD.get("target")===t)throw new h({msg:a.str("git-error-branch")});var o=t;if(t.getIsRemote())throw new h({msg:a.str("git-error-remote-branch")});this.deleteBranch(o)},b.prototype.deleteBranch=function(e){this.branchCollection.remove(e),this.refs[e.get("id")]=void 0,delete this.refs[e.get("id")],this.HEAD.get("target")===e&&this.HEAD.set("target",this.refs.master),e.get("visBranch")&&e.get("visBranch").remove()},b.prototype.crappyUnescape=function(e){return e.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},b.prototype.filterError=function(e){if(!(e instanceof h||e instanceof p))throw e},b.prototype.externalRefresh=function(){this.animationQueue=new s({callback:function(){}}),this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),this.animationQueue.start()},b.prototype.dispatch=function(e,t){this.command=e;var o=e.get("vcs"),n=function(){this.dispatchProcess(e,t)}.bind(this);this.handleModeChange(o,n)},b.prototype.dispatchProcess=function(e,t){var o=function(){e.finishWith(t)}.bind(this);this.animationQueue=new s({callback:o});var n=e.get("vcs"),r=e.get("method").replace(/-/g,"");try{d.commands.execute(n,r,this,this.command)}catch(o){return this.filterError(o),e.set("error",o),void t.resolve()}var a=this.animationQueue.get("defer")||this.animationQueue.get("promiseBased");this.animationQueue.get("animations").length||a||this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),a||this.animationQueue.start()},b.prototype.show=function(e){var t=this.getCommitFromRef(e);throw new p({msg:t.getShowEntry()})},b.prototype.status=function(){var e=[];if(this.getDetachedHead())e.push(a.str("git-status-detached"));else{var t=this.HEAD.get("target").get("id");e.push(a.str("git-status-onbranch",{branch:t}))}e.push("Changes to be committed:"),e.push(""),e.push(f+"modified: cal/OskiCostume.stl"),e.push(""),e.push(a.str("git-status-readytocommit"));var o="";throw e.forEach((function(e){o+="# "+e+"\n"})),new p({msg:o})},b.prototype.logWithout=function(e,t){t=t.slice(1),this.log(e,l.getUpstreamSet(this,t))},b.prototype.revlist=function(e){var t=new C(this,e).formatRevisions((function(e){return e.id+"\n"}));throw new p({msg:t})},b.prototype.log=function(e){var t=new C(this,e).formatRevisions((function(e){return e.getLogEntry()}));throw new p({msg:t})},b.prototype.getCommonAncestor=function(e,t,o){if(this.isUpstreamOf(t,e)&&!o)throw new Error("Don't use common ancestor if we are upstream!");for(var n=l.getUpstreamSet(this,e),r=[this.getCommitFromRef(t)];r.length;){var a=r.pop();if(n[a.get("id")])return a;r=r.concat(a.get("parents"))}throw new Error("something has gone very wrong... two nodes aren't connected!")},b.prototype.isUpstreamOf=function(e,t){return e=this.getCommitFromRef(e),void 0!==l.getUpstreamSet(this,t)[e.get("id")]},b.prototype.getDownstreamSet=function(e){var t=this.getCommitFromRef(e),o=t.get("id"),n=[t],r={};r[o]=!0;for(var a=function(e){r[e.get("id")]=!0,n.push(e)};n.length;){n.pop().get("children").forEach(a)}return r};var v=n.Model.extend({initialize:function(){if(!this.get("target"))throw new Error("must be initialized with target");if(!this.get("id"))throw new Error("must be given an id");this.set("type","general ref"),"HEAD"==this.get("id")&&(this.set("lastLastTarget",null),this.set("lastTarget",this.get("target")),this.on("change:target",this.targetChanged,this))},getIsRemote:function(){return!1},getName:function(){return this.get("id")},targetChanged:function(e,t,o){this.set("lastLastTarget",this.get("lastTarget")),this.set("lastTarget",t)},toString:function(){return"a "+this.get("type")+"pointing to "+String(this.get("target"))}}),y=v.extend({defaults:{visBranch:null,remoteTrackingBranchID:null,remote:!1},initialize:function(){v.prototype.initialize.call(this),this.set("type","branch")},setRemoteTrackingBranchID:function(e){this.set("remoteTrackingBranchID",e)},getRemoteTrackingBranchID:function(){return this.get("remoteTrackingBranchID")},getPrefixedID:function(){if(this.getIsRemote())throw new Error("im already remote");return"o/"+this.get("id")},getBaseID:function(){if(!this.getIsRemote())throw new Error("im not remote so can't get base");return this.get("id").replace("o/","")},getIsRemote:function(){return this.get("id"),"o/"===this.get("id").slice(0,2)}}),w=n.Model.extend({defaults:{type:"commit",children:null,parents:null,author:"Peter Cottle",createTime:null,commitMessage:null,visNode:null,gitVisuals:null},constants:{circularFields:["gitVisuals","visNode","children"]},getLogEntry:function(){return["Author: "+this.get("author"),"Date: "+this.get("createTime"),"<br/>",this.get("commitMessage"),"<br/>","Commit: "+this.get("id")].join("\n")+"\n"},getShowEntry:function(){return[this.getLogEntry(),"diff --git a/bigGameResults.html b/bigGameResults.html","--- bigGameResults.html","+++ bigGameResults.html","@@ 13,27 @@ Winner, Score","- Stanfurd, 14-7","+ Cal, 21-14"].join("\n")+"\n"},validateAtInit:function(){if(!this.get("id"))throw new Error("Need ID!!");if(this.get("createTime")||this.set("createTime",(new Date).toString()),this.get("commitMessage")||this.set("commitMessage",a.str("git-dummy-msg")),this.set("children",[]),!(this.get("rootCommit")||this.get("parents")&&this.get("parents").length))throw new Error("needs parents")},addNodeToVisuals:function(){var e=this.get("gitVisuals").addNode(this.get("id"),this);this.set("visNode",e)},addEdgeToVisuals:function(e){this.get("gitVisuals").addEdge(this.get("id"),e.get("id"))},getParent:function(e){return this&&this.attributes&&this.attributes.parents?this.attributes.parents[e]:null},removeFromParents:function(){this.get("parents").forEach((function(e){e.removeChild(this)}),this)},checkForUpdatedParent:function(e){var t=this.get("parents");if(!(t.length>1)){var o=t[0].get("id"),n=e.getMostRecentBumpedID(o);if(o!==n){var r=e.refs[n];this.removeFromParents(),this.set("parents",[r]),r.get("children").push(this);var a=this.get("visNode");a&&a.removeAllEdges();var i=this.get("gitVisuals");return i&&i.addEdge(this.get("id"),n),!0}}},removeChild:function(e){var t=[];this.get("children").forEach((function(o){o!==e&&t.push(o)})),this.set("children",t)},isMainParent:function(e){return 0===this.get("parents").indexOf(e)},initialize:function(e){this.validateAtInit(),this.addNodeToVisuals(),(this.get("parents")||[]).forEach((function(e){e.get("children").push(this),this.addEdgeToVisuals(e)}),this)}}),k=v.extend({defaults:{visTag:null},initialize:function(){v.prototype.initialize.call(this),this.set("type","tag")}});function C(e,t){this.engine=e,this.tipsToInclude=[],this.tipsToExclude=[],this.includedRefs={},this.excludedRefs={},this.revisions=[],this.processSpecifiers(t)}var A=/^(.*)\.\.(.*)$/;C.prototype.processAsRange=function(e){var t=e.match(A);return!!t&&(this.tipsToExclude.push(t[1]),this.tipsToInclude.push(t[2]),!0)},C.prototype.processAsExclusion=function(e){return!!e.startsWith("^")&&(this.tipsToExclude.push(e.slice(1)),!0)},C.prototype.processAsInclusion=function(e){return this.tipsToInclude.push(e),!0},C.prototype.processSpecifiers=function(e){var t=this,o=[this.processAsRange,this.processAsExclusion];e.forEach((function(e){o.some((function(o){return o.bind(t)(e)}))||t.processAsInclusion(e)})),this.tipsToExclude.forEach((function(e){t.addExcluded(l.getUpstreamSet(t.engine,e))})),this.tipsToInclude.forEach((function(e){t.addIncluded(l.getUpstreamSet(t.engine,e))}));var n=Array.from(Object.keys(t.includedRefs));t.revisions=n.map((function(e){return t.engine.resolveStringRef(e)})),t.revisions.sort(t.engine.dateSortFunc),t.revisions.reverse()},C.prototype.isExcluded=function(e){return this.excludedRefs.hasOwnProperty(e)},C.prototype.addExcluded=function(e){var t=this;Object.keys(e).forEach((function(e){t.isExcluded(e)||(t.excludedRefs[e]=!0)}))},C.prototype.addIncluded=function(e){var t=this;Object.keys(e).forEach((function(e){t.isExcluded(e)||(t.includedRefs[e]=!0)}))},C.prototype.formatRevisions=function(e){var t="";return this.revisions.forEach((function(o){t+=e(o)})),t},o.GitEngine=b,o.Commit=w,o.Branch=y,o.Tag=k,o.Ref=v},{"../app":46,"../commands":47,"../graph":58,"../graph/treeCompare":59,"../intl":61,"../util/errors":87,"../views/rebaseView":103,"../visuals/animation":105,"../visuals/animation/animationFactory":104,backbone:1,q:21}],58:[function(e,t,o){var n={getOrMakeRecursive:function(t,o,n,r){var a=e("../git"),i=a.Commit,s=a.Ref,c=a.Branch,l=a.Tag;if(o[n])return o[n];var u=function(e,t){if(e.commits[t])return"commit";if(e.branches[t])return"branch";if("HEAD"==t)return"HEAD";if(e.tags[t])return"tag";throw new Error("bad type for "+t)}(t,n);if("HEAD"==u){var m=t.HEAD,d=new s(Object.assign(t.HEAD,{target:this.getOrMakeRecursive(t,o,m.target)}));return o[n]=d,d}if("branch"==u){var h=t.branches[n],p=new c(Object.assign(t.branches[n],{target:this.getOrMakeRecursive(t,o,h.target)}));return o[n]=p,p}if("tag"==u){var f=t.tags[n],g=new l(Object.assign(t.tags[n],{target:this.getOrMakeRecursive(t,o,f.target)}));return o[n]=g,g}if("commit"==u){var b=t.commits[n],v=[];b.parents.forEach((function(e){v.push(this.getOrMakeRecursive(t,o,e))}),this);var y=new i(Object.assign(b,{parents:v,gitVisuals:this.gitVisuals}));return o[n]=y,y}throw new Error("ruh rho!! unsupported type for "+n)},descendSortDepth:function(e){return e.sort((function(e,t){return t.depth-e.depth}))},bfsFromLocationWithSet:function(e,t,o){for(var n=[],r=[e.getCommitFromRef(t)];r.length;){var a=r.pop();o[a.get("id")]||(n.push(a),r=r.concat(a.get("parents")))}return n},getUpstreamSet:function(e,t){var o=e.getCommitFromRef(t),n=o.get("id"),r=[o],a={};a[n]=!0;for(var i=function(e){a[e.get("id")]=!0,r.push(e)};r.length;){(r.pop().get("parents")||[]).forEach(i)}return a},getUniqueObjects:function(e){var t={},o=[];return e.forEach((function(e){t[e.id]||(t[e.id]=!0,o.push(e))})),o},getDefaultTree:function(){return JSON.parse(unescape("%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22type%22%3A%22branch%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%22C0%22%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C1%22%7D%7D%2C%22HEAD%22%3A%7B%22id%22%3A%22HEAD%22%2C%22target%22%3A%22master%22%2C%22type%22%3A%22general%20ref%22%7D%7D"))}};t.exports=n},{"../git":57}],59:[function(e,t,o){var n=e("underscore"),r={dispatchFromLevel:function(e,t){var o=e.goalTreeString;return"string"!=typeof t&&console.warn("NEED to pass in string!! gah"),r.dispatch(e,o,t)},onlyMasterCompared:function(e){switch(!0){case!!e.compareOnlyMaster:case!!e.compareOnlyMasterHashAgnostic:case!!e.compareOnlyMasterHashAgnosticWithAsserts:return!0;default:return!1}},dispatch:function(e,t,o){var n=this.convertTreeSafe(t);if(o=this.convertTreeSafe(o),typeof n.originTree!=typeof o.originTree)return!1;var r=this.dispatchShallow(e,n,o);if(!r||!n.originTree)return r;var a=e.originCompare?e.originCompare:e;return r&&this.dispatchShallow(a,n.originTree,o.originTree)},dispatchShallow:function(e,t,o){switch(!0){case!!e.compareOnlyMaster:return r.compareBranchWithinTrees(o,t,"master");case!!e.compareOnlyBranches:return r.compareAllBranchesWithinTrees(o,t);case!!e.compareAllBranchesHashAgnostic:return r.compareAllBranchesWithinTreesHashAgnostic(o,t);case!!e.compareOnlyMasterHashAgnostic:return r.compareBranchesWithinTreesHashAgnostic(o,t,["master"]);case!!e.compareOnlyMasterHashAgnosticWithAsserts:return r.compareBranchesWithinTreesHashAgnostic(o,t,["master"])&&r.evalAsserts(o,e.goalAsserts);default:return r.compareAllBranchesWithinTreesAndHEAD(o,t)}},compareAllBranchesWithinTreesAndHEAD:function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),e.HEAD.target===t.HEAD.target&&this.compareAllBranchesWithinTrees(e,t)&&this.compareAllTagsWithinTrees(e,t)},compareAllBranchesWithinTrees:function(e,t){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t);var o=Object.assign({},e.branches,t.branches);return Object.keys(o).every(function(o){return this.compareBranchWithinTrees(e,t,o)}.bind(this))},compareAllTagsWithinTrees:function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]),n.isEqual(e.tags,t.tags)},compareBranchesWithinTrees:function(e,t,o){var n=!0;return o.forEach((function(o){n=n&&this.compareBranchWithinTrees(e,t,o)}),this),n},compareBranchWithinTrees:function(e,t,o){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var r=this.getRecurseCompare(e,t),a=e.branches[o],i=t.branches[o];return n.isEqual(a,i)&&r(e.commits[a.target],t.commits[i.target])},compareAllBranchesWithinTreesHashAgnostic:function(e,t){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var o=Object.assign({},e.branches,t.branches),n=Object.keys(o||{});return this.compareBranchesWithinTreesHashAgnostic(e,t,n)},compareBranchesWithinTreesHashAgnostic:function(e,t,o){e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]);var r=function(e,t){return!(!e||!t)&&(e=Object.assign({},e),t=Object.assign({},t),e.target=this.getBaseRef(e.target),t.target=this.getBaseRef(t.target),n.isEqual(e,t))}.bind(this),a=this.getRecurseCompareHashAgnostic(e,t),i=!0;return o.forEach((function(o){var n=e.branches[o],s=t.branches[o];i=i&&r(n,s)&&a(e.commits[n.target],t.commits[s.target])}),this),i},evalAsserts:function(e,t){var o=!0;return Object.keys(t).forEach((function(n){var r=t[n];o=o&&this.evalAssertsOnBranch(e,n,r)}),this),o},evalAssertsOnBranch:function(e,t,o){if(!(e=this.convertTreeSafe(e)).branches[t])return!1;for(var n=[e.branches[t].target],r={};n.length;){var a=n.pop();r[this.getBaseRef(a)]=this.getNumHashes(a),n=n.concat(e.commits[a].parents)}var i=!0;return o.forEach((function(e){try{i=i&&e(r)}catch(e){console.warn("error during assert",e),console.log(e),i=!1}})),i},getNumHashes:function(e){for(var t=[[/^C(\d+)([']{0,3})$/,function(e){return e[2]?e[2].length:0}],[/^C(\d+)['][\^](\d+)$/,function(e){return Number(e[2])}]],o=0;o<t.length;o++){var n=t[o][0],r=t[o][1],a=n.exec(e);if(a)return r(a)}throw new Error("couldn't parse ref "+e)},getBaseRef:function(e){var t=/^C(\d+)/.exec(e);if(!t)throw new Error("no regex matchy for "+e);return"C"+t[1]},getRecurseCompareHashAgnostic:function(e,t){var o=function(e){return e?Object.assign({},e,{id:this.getBaseRef(e.id),parents:null}):{}}.bind(this);return this.getRecurseCompare(e,t,{isEqual:function(e,t){return n.isEqual(o(e),o(t))}})},getRecurseCompare:function(e,t,o){o=o||{};var r=function(a,i){var s=o.isEqual?o.isEqual(a,i):n.isEqual(a,i);if(!s)return!1;for(var c=Math.max(a.parents.length,i.parents.length),l=0;l<c;l++){var u=a.parents[l],m=i.parents[l],d=e.commits[u],h=t.commits[m];s=s&&r(d,h)}return s};return r},lowercaseTree:function(e){e.HEAD&&(e.HEAD.target=e.HEAD.target.toLocaleLowerCase());var t=e.branches||{};return e.branches={},Object.keys(t).forEach((function(o){var n=t[o];n.id=n.id.toLocaleLowerCase(),e.branches[o.toLocaleLowerCase()]=n})),e},convertTreeSafe:function(e){return"string"!=typeof e||(e=JSON.parse(unescape(e)),this.lowercaseTree(e),e.originTree&&(e.originTree=this.lowercaseTree(e.originTree))),e},reduceTreeFields:function(e){var t=["parents","id","rootCommit"],o=["target","id","remoteTrackingBranchID"],n=["target","id"],r=["children","parents"],a={remoteTrackingBranchID:null},i={tags:{}};e.forEach((function(e){Object.keys(i).forEach((function(t){var o=i[t];void 0===e[t]&&(e[t]=o)}))}));var s=function(e,t,o,n){var r=e[t];Object.keys(r).forEach((function(i){var s=r[i],c={};o.forEach((function(e){void 0!==s[e]?c[e]=s[e]:void 0!==a[e]&&(c[e]=a[e])})),Object.values(n||{}).forEach((function(e){s[e]&&(s[e].sort(),c[e]=s[e])})),e[t][i]=c}))};e.forEach((function(e){s(e,"commits",t,r),s(e,"branches",o),s(e,"tags",n),e.HEAD={target:e.HEAD.target,id:e.HEAD.id},e.originTree&&this.reduceTreeFields([e.originTree])}),this)},compareTrees:function(e,t){return e=this.convertTreeSafe(e),t=this.convertTreeSafe(t),this.reduceTreeFields([e,t]),n.isEqual(e,t)}};t.exports=r},{underscore:38}],60:[function(e,t,o){(function(t){var{join:o}=e("path"),{readFileSync:n}=e("fs"),r=e("../util"),{strings:a}=e("../intl/strings"),i=/intl\.str\(\s*'([a-zA-Z\-]+)'/g,s=new Set(Object.keys(a));s.delete("error-untranslated");var c=new Set;r.isBrowser()||(r.readDirDeep(o(t,"../../")).forEach((function(e){for(var t,o,r=n(e);t=i.exec(r);)o=t[1],a[o]?(c.add(o),s.delete(o)):console.log('NO KEY for: "',o,'"')})),console.log(c.size," good keys found!"),console.log(s.size," keys did not use!"),console.log(s))}).call(this,"/src/js/intl")},{"../intl/strings":62,"../util":90,fs:3,path:14}],61:[function(e,t,o){var n=e("../stores/LocaleStore"),r=e("underscore"),a=e("../intl/strings").strings,i=n.getDefaultLocale,s={zh_TW:"zh_CN"},c=Object.assign({},r.templateSettings);c.interpolate=/\{(.+?)\}/g;var l=o.template=function(e,t){return r.template(e,t,c)},u=o.str=function(e,t){t=t||{};var o=n.getLocale();return a[e]?(a[e][o]||(o=s[o]||i()),a[e][o]?l(a[e][o],t):"error-untranslated"!==e?u("error-untranslated"):'No translation for the key "'+e+'"'):(console.warn("NO INTL support for key "+e),"NO INTL support for key "+e+". this is probably a dev error")},m=o.getIntlKey=function(e,t,o){if(!e||!e[t])throw new Error("that key "+t+"doesn't exist in this blob"+e);e[t][i()]||console.warn("WARNING!! This blob does not have intl support:",e,"for this key",t);var r=o||n.getLocale();return e[t][r]};o.todo=function(e){return e},o.getDialog=function(e){return m(e,"dialog")||e.dialog[i()]},o.getHint=function(e){return m(e,"hint")?m(e,"hint"):m(e,"hint",i())+" -- "+u("error-untranslated")},o.getName=function(e){return m(e,"name")?m(e,"name"):m(e,"name",i())+" -- "+u("error-untranslated")},o.getStartDialog=function(e){var t=m(e,"startDialog");if(t)return t;var o={type:"ModalAlert",options:{markdown:u("error-untranslated")}},n=Object.assign({},e.startDialog[i()]||e.startDialog);return n.childViews.unshift(o),n}},{"../intl/strings":62,"../stores/LocaleStore":83,underscore:38}],62:[function(e,t,o){o.strings={"finish-dialog-finished":{__desc__:"One of the lines in the next level dialog",ja:"最後のレベルをクリアしました！すごい！！",en_US:"Wow! You finished the last level, great!",de_DE:"Wow! Du hast den letzten Level gelöst, super!",zh_CN:"Wow！你通关了！",zh_TW:"我的天啊！您解開了最後一關，太強了！",es_AR:"¡Ea! Terminaste el último nivel, ¡genial!",es_ES:"¡Felicitaciones! Terminaste el último nivel!",pt_BR:"Uia! Você terminou o último nível, massa!",gl:"¡Yeeeha! Remataches o derradeiro nivel, ¡a tope!",fr_FR:"Félicitations, vous avez réussi le dernier niveau !",ru_RU:"Вау! Вы прошли последний уровень, отлично!",uk:"Вау! Ти пройшов останній рівень, круто!",ko:"와우! 마지막 레벨까지 마쳤습니다. 멋지네요!",vi:"Wao! Bạn đã phá đảo, quá tuyệt!"},"finish-dialog-next":{__desc__:"One of the lines in the next level dialog",en_US:'Would you like to move on to *"{nextLevel}"*, the next level?',de_DE:'Möchtest du mit *"{nextLevel}"* weitermachen, dem nächsten Level?',ja:'次の章 *"{nextLevel}"* へ進みますか？',zh_CN:"要不要试试下一关 *“{nextLevel}”*？",zh_TW:"下一關是*「{nextLevel}」*，您要繼續闖關嗎？",es_AR:'¿Querés seguir con *"{nextLevel}"*, el próximo nivel?',es_ES:'¿Quieres pasar al nivel *"{nextLevel}"*, el próximo nivel?',pt_BR:'Você gostaria de ir para o próximo nível: *"{nextLevel}"*?',gl:'¿Gustaríache ir o seguinte nivel: *"{nextLevel}"*?',fr_FR:'Voulez-vous passer à *"{nextLevel}"*, le prochain niveau ?',ru_RU:'Хотите перейти на следующий уровень: *"{nextLevel}"*?',uk:'Хочеш перейти на наступний рівень -- *"{nextLevel}"*?',ko:'다음 레벨로 넘어갈까요? 레벨 *"{nextLevel}"*',vi:'Bạn có muốn chuyển sang cấp độ tiếp: *"{nextLevel}"* không?'},"finish-dialog-win":{__desc__:"One of the lines in the next level dialog",en_US:"Awesome! You matched or exceeded our solution.",pt_BR:"Maravilha! Você fez uma solução tão boa quanto ou melhor que a nossa.",de_DE:"Wahnsinn! Du warst so gut wie unsere Lösung, oder sogar besser.",ja:"素晴らしい！このレベルをクリアしましたね",zh_CN:"太强了！你的答案符合标准答案甚至更好。",zh_TW:"太強了，您的答案符合我們的預期甚至更好！",es_AR:"¡Fabuloso! Igualaste o superaste nuestra solución.",es_ES:"¡Fabuloso! Igualaste o superaste nuestra solución.",gl:"¡Fabuloso! Fixécholo igual ou mellor ca nosa solución.",fr_FR:"Fabuleux ! Votre solution a égalé ou surpassé notre solution.",ru_RU:"Отлично! Ваше решение соответствует или превосходит наше.",uk:"Чудово! Твій розв’язок на рівні або кращий від нашого.",ko:"멋져요! 우리의 해답과 일치하거나 우리보다 좀 더 나은 해답입니다.",vi:"Tuyệt vời! Đáp án của bạn đạt chuẩn thâm chí có thể tốt hơn."},"finish-dialog-lose":{__desc__:"When the user entered more commands than our best, encourage them to do better",en_US:"See if you can whittle it down to {best} :D",de_DE:"Schau mal ob du es in {best} Schritten hinbekommst :D",ja:"模範解答の回数={best}回でクリアする方法も考えてみましょう :D",zh_CN:"试试看你能否在 {best} 步之内搞定 :D",zh_TW:"試試看您是否能在 {best} 步内搞定 :D",es_AR:"Fijate si podés bajarlo a usar sólo {best} comandos :D",es_ES:"Trata de usar sólo {best} comandos :D",pt_BR:"Veja se consegue reduzir para somente {best} :D",gl:"Mira se consigues reducir a solo {best} :D",fr_FR:"Voyons si vous pouvez descendre à {best} :D",ru_RU:"Попробуйте, может вы сможете уложиться в {best} : D",uk:"Спробуй, можливо ти зможеш вкластися в {best} кроків :D",ko:"{best}회로 줄일 수 있다면 해보세요. :D",vi:"Thử xem bạn có thể giảm xuống {best} không? :D"},"hg-prune-tree":{__desc__:"warning when pruning tree",en_US:"Warning! Mercurial does aggressive garbage collection and thus needs to prune your tree",zh_CN:"注意！ Mercurial 会进行主动垃圾回收，需要将你的提交树縮小。",zh_TW:"注意！ Mercurial 會積極地做垃圾收集，而且會因此把你的 tree 給縮小。",es_AR:"¡Cuidado! Mercurial hace garbage collection agresivamente y necesita eliminar tu árbol",es_ES:"¡Cuidado! Mercurial hace la recolección de basura agresivamente (para administrar memoria) y necesita podar tu árbol.",pt_BR:"Cuidado! O Mercurial faz coleção de lixo agressiva e precisa prunar sua árvore",gl:"¡Coidado! Mercurial fai que recolección de lixo agresivamente (para limpar memoria) e precisa podar a túa árbore.",fr_FR:"Attention, Mercurial supprime de façon agressive et nécessite un prune du repository",de_DE:"Achtung! Mercurial macht aggressive Garbage Collection und muss daher deinen Baum reduzieren",ru_RU:"Внимание! Mercurial использует агрессивный сборщик мусора и обрезает ваше дерево",uk:"Увага! Mercurial агресивно збирає сміття й може обрізати твоє дерево ",ko:"주의! Mercurial은 공격적으로 가비지 컬렉션을 수행하므로 트리를 정리할 필요가 있습니다.",vi:"Cảnh báo! Mercurial cần thực hiện thu gom rác và thu nhỏ cây lịch sử của bạn."},"hg-a-option":{__desc__:"warning for when using -A option",en_US:"The -A option is not needed for this app, just commit away!",zh_TW:"對於這個 app 來說，-A 選項並不是必須的，只需要 commit 就好！",zh_CN:"对本 App 而言，-A 选项并非必须项，直接 commit 就好！",es_AR:"La opción -A no es necesaria para esta aplicación, simplemente hacé commit",es_ES:"La opción -A no se necesita para este aplicación, sólo hace un commit!",pt_BR:"A opção -A não é necessária para este aplicativo, simplesmente faça commit",gl:"A opción -A non se necesita para este aplicativo, ¡fai só un commit!",de_DE:"Die Option -A wird in dieser Anwendung nicht benötigt, committe einfach!",fr_FR:"L'option -A n'est pas nécessaire pour cette application, simplement commiter",ru_RU:"Опция -A не требуется для этого приложения, просто сделайте коммит.",uk:"Опція -A не потрібна для цього застосунку, можна просто комітити!",ko:"이 앱에선 -A 옵션은 필요 없습니다. 그냥 커밋하세요!",vi:"Không cần thiết phải dùng tùy chọn -A trên ứng dụng này, cứ commit là được!"},"hg-error-no-status":{__desc__:"One of the errors for hg",en_US:"There is no status command for this app, since there is no staging of files. Try hg summary instead",zh_CN:"本 App 没有 status 命令哦，因为根本没有 stage 缓存文件。可以用 hg summary 代替哦",zh_TW:"本 App 没有 status 命令哦，因为根本没有 stage 缓存文件。可以用 hg summary 代替哦",es_AR:"No hay un comando status para esta aplicación, dado que no hay archivos que indexar. Probá hg summary, en cambio",es_ES:"No hay un comando status para esta aplicación, porque no hay archivos que indexar. Prueba el comando hg summary",pt_BR:"Não existe um comando status para este aplicativo, já que não há staging de arquivos. Tente hg summary",gl:"Non hai un comando status para esta aplicación, xa que non hai ficheiros que indexar. Proba hg summary",fr_FR:"Il n'y a pas de commande status pour cette application, car il n'y a pas de fichier stagé. Essayez hg summary à la place.",de_DE:"Es gibt keinen Befehl status in dieser Anwendung, da es kein Staging von Dateien gibt. Probier stattdessen hg summary",ru_RU:"Команда status не поддерживается в этом приложении, так как здесь нет файлов. Попробуйте выполнить hg summary",uk:"Команда status не підтримується в цьому застосунку, так як немає стейджингу(staging) файлів. Натомість спробуй hg summary ",ko:"이 앱을 위한 상태 명령어는 없습니다. 왜냐하면 파일들의 스테이징이 없기 때문입니다. 대신 hg summary를 시도해보세요.",vi:"Ứng dụng này không hỗ trợ lệnh `status` vì không có tệp nhớ đệm, thay vì đó hãy dùng lệnh `hg summary`"},"hg-error-need-option":{__desc__:"One of the errors for hg",en_US:"I need the option {option} for that command!",zh_CN:"我需要该命令使用 {option} 选项呢。",zh_TW:"我需要該命令使用 {option} 選項呢。",es_AR:"¡Necesito la opción {opcion} para ese comando!",es_ES:"¡Necesito la opción {opcion} para ese comando!",pt_BR:"Eu preciso da opção {option} para esse comando!",gl:"Preciso da opción {option} para ese comando!",fr_FR:"J'ai besoin de l'option {option} pour cette commande",de_DE:"Ich benötige die Option {option} für diesen Befehl!",ru_RU:"Для этой команды требуется опция {option}",uk:"Для цієї команди потрібна опція {option}",ko:"나는 그 명령어를 위한 {option} 옵션이 필요합니다.",vi:"Câu lệnh đó cần tùy chọn {option}!"},"hg-error-log-no-follow":{__desc__:"hg log without -f (--follow)",en_US:"hg log without -f is currently not supported, use -f",zh_CN:"暂不支持没有-f 选项的 hg log 命令，请补充 -f 选项吧",zh_TW:"暫不支持沒有-f 選項的 hg log 命令，請補充 -f 選項吧",es_AR:"hg log sin el parámetro -f no está soportado, usá -f",es_ES:"Actualmente hg log sin -f no es compatible con esta aplicación. Usa -f.",pt_BR:"hg log sem -f atualmente não é suportado, use -f",gl:"hg log sen -f actulamente non é soportado, usa -f",fr_FR:"hg log sans -f n'est pas supporté",de_DE:"hg log ohne -f wird aktuell nicht unterstützt, benutze bitte -f",ru_RU:"hg log без опции -f в настоящий момент не поддерживается, используйте -f",uk:"hg log без опції -f в данний момент не підтримується, використовуй -f",ko:"-f가 없는 hg log는 현재 지원되지 않습니다. -f를 사용하세요.",vi:"Hiện tại thì `hg log` mà không có tùy chọn -f chưa được hỗ trợ, hãy viết thêm -f."},"git-status-detached":{__desc__:"One of the lines for git status output",en_US:"Detached head!",de_DE:"Detached head!",zh_CN:"游离的 Head（Detached head）！",zh_TW:"分離 Head！",es_AR:"¡Detached HEAD!",es_ES:"¡HEAD separado! (Detached HEAD).",pt_BR:"Detached HEAD!",gl:"¡Detached HEAD!",fr_FR:"head détaché !",ru_RU:"Отделенный HEAD",uk:"Відокремлений HEAD",ko:"분리된 HEAD!",vi:"HEAD bị tách biệt!"},"git-status-onbranch":{__desc__:"One of the lines for git status output",en_US:"On branch {branch}",de_DE:"Auf Branch {branch}",zh_CN:"当前分支 {branch}",zh_TW:"切換到 branch {branch}",es_AR:"En la rama {branch}",es_ES:"En la rama {branch}",pt_BR:"No ramo {branch}",gl:"Non na rama {branch}",fr_FR:"Sur la branche {branch}",ru_RU:"В ветке {branch}",uk:"В гілці {branch}",ko:"분기 지점 {branch}에서",vi:"Đang trên nhánh {branch}"},"git-status-readytocommit":{__desc__:"One of the lines for git status output",en_US:"Ready to commit! (as always in this demo)",de_DE:"Fertig zum committen! (Wie immer in dieser Demo)",zh_CN:"可以提交啦！（在这个程序中无须修改文件，一直可以提交）",zh_TW:"準備 commit！（在這個 demo 裡面可以一直 commit）",es_AR:"¡Listo para commitear! (como siempre en esta demo ;-) )",es_ES:"¡Listo para hacer un commit (como siempre en esta demo)!",pt_BR:"Pronto para commitar! (como sempre neste demo ;-) )",gl:"¡Praparado para facer un commit (como sempre nesta demo ;-) )!",fr_FR:"Prêt à commit ! (comme toujours dans cette démo)",ru_RU:"Готово к коммиту! (как и всегда в этом демо)",uk:"Готово до коміту! (як завжди в цьому демо)",ko:"커밋을 준비하세요! (이 데모에서는 항상)",vi:"Sẵn sàng để commit! (khi demo thì luôn có thể commit)"},"git-dummy-msg":{__desc__:"The dummy commit message for all commits. Feel free to put in a shoutout to your school / city / whatever!",en_US:"Quick commit. Go Bears!",de_DE:"Schneller Commit. Eff-Zeh!",zh_CN:"快速提交。Coding 4ever！",zh_TW:"快速 commit。上啊熊！",es_AR:"Otro commit más, y van...",es_ES:"Hagamos un commit. Atlanta, Georgia! Escucha WHATUPRG también.",pt_BR:"Commitando.. Vai Timão!",gl:"Mesturando.. ¡Alá imos!",fr_FR:"Commit rapide. NoMaN Sux!",ru_RU:"Быстрый коммит. А надо!",uk:"Швидкий коміт. Динамо!",ko:"빨리 커밋하세요!",vi:"Commit luôn đi cho nóng!"},"git-error-origin-fetch-uptodate":{__desc__:"One of the error messages for git",en_US:"Already up to date!",de_DE:"Bereits aktuell!",fr_FR:"Déjà à jour",es_AR:"Estás en la versión más reciente",es_ES:"Ya actualizado con la versión más reciente.",pt_BR:"Já estamos na versão mais recente!",gl:"Xa estamos actualizados ca versión máis recente",zh_TW:"已經是最新的了",zh_CN:"已经是最新的了",ru_RU:"Уже обновлено!",uk:"Вже оновлено!",ko:"이미 최신 상태입니다!",vi:"Cập nhật mới nhất rồi!"},"git-error-origin-fetch-no-ff":{__desc__:"One of the error messages for git",en_US:"Your origin branch is out of sync with the remote branch and fetch cannot be performed",zh_CN:"你的 origin 仓库中的分支与远程分支的不同步了，无法执行 fetch 命令",zh_TW:"你的 origin 分支已經失去了與 remote 遠端分支的同步，所以無法執行 fetch 命令",de_DE:"Dein origin Branch ist nicht auf dem Stand des Remote Branch und fetch kann nicht ausgeführt werden",es_AR:"Tu rama origin está desincronizada con la rama remota, por lo que no se puede hacer el fetch",es_ES:"Tu rama origin no está sicronizada con la rama remota, así que el fetch no se puede realizar.",pt_BR:"O fetch não pode ser realizado pois o ramo de origem está fora de sincronia com o ramo remoto",gl:"O fetch non pode ser realizado xa que a rama de orixe non está sincronizada  ca rama remota",fr_FR:"Votre branche origin n'est plus synchronisée avec la branche distante et fetch ne peut pas être appliqué. Essayez avec l'option --force",ru_RU:"Ваша origin ветка не синхронизирована с удаленной веткой, невозможно выполнить fetch",uk:"Твоя гілка origin не синхронізована з віддаленою гілкою, неможливо виконати fetch",ko:"당신의 오리진 브랜치가 원격 브랜치와 동기화되지 않았고, 패치를 실행할 수 없습니다.",vi:"Nhánh của bạn không đồng bộ với nhánh remote nên lệnh fetch không thực thi được."},"git-error-origin-push-no-ff":{__desc__:"One of the error messages for git",en_US:"The remote repository has diverged from your local repository, so uploading your changes is not a simple fast forward (and thus your push was rejected). Please pull down the new changes in the remote repository, incorporate them into this branch, and try again. You can do so with git pull or git pull --rebase",zh_CN:"远程仓库与你的本地仓库产生了分歧，故此上传操作无法通过 Fast-forward 实现（因此你的 push 被拒绝了）。请 pull 下来远程仓库里最新的更改，与这个分支合并之后再试一次。你可以通过 git pull 或 git pull --rebase 实现。",zh_TW:"遠端倉庫與你的本地倉庫產生了分歧，故此上傳操作無法通過簡單地快進實現（因此你的 push 被拒絕了）。請 pull 下來遠端裡最新的更改，與本地合併之後再試一次。你可以通過 git pull 或 git pull --rebase 實現。",de_DE:"Das entfernte Repository weicht von deinem lokalen Repository ab, daher können deine Änderungen nicht mit einem einfachen fast forward hochgeladen werden (und daher ist dein push abgelehnt worden). Bitte pull erst die neuen Änderungen in das lokale Repository, integriere sie in den Branch und versuch es nochmal. Das kannst du mit git pull oder git pull --rebase machen",es_AR:"El repositorio remoto divergió de tu repositorio local, por lo que subir tus cambios no es un simple fast forward (y por eso se rechazó tu push). Por favor, hacé pull de los nuevos cambios en el repositorio remoto, incorporalos a esta rama y probá de nuevo. Podés hacerlo con git pull o git pull --rebase",es_ES:'El repositorio remoto se ha desviado del repositorio local. Subir cambios no es un avance en cámara rápida (por eso fue rechazado tu push). Por favor haz pull para descargar los cambios en el repositorio remoto para que los incorpores en la rama actual. Los cambios se pueden hacer pull con el comando "git pull" o "git pull --rebase"',pt_BR:"O repositório remoto divergiu do repositório local, então enviar suas mudanças não é um simples fast forward (e por isso seu push foi rejeitado). Por favor, faça pull das novas mudanças do repositório remoto, incorpore-os a este ramo, e tente novamente. Você pode fazê-lo com git pull ou git pull --rebase",gl:'O repositorio remoto diverxe do teu repositorio local. Subir os cambios non é un fast-forward (avance rápido) e por iso foi rechazado o teu push. Por favor, fai un pull dos novos cambios do repositorio remoto e inclúeos na túa rama actual. Os cambios pódense facer co comando "git pull" ou "git pull --rebase"',fr_FR:"Le dépôt distant a divergé de votre référentiel local, donc l'envoi de vos modifications n'est pas en simple avance rapide (et donc votre envoi a été rejeté). Veuillez récupérer les nouveaux changements depuis le dépôt distant, les intégrer dans cette branche, et essayez à nouveau. Vous pouvez le faire avec git pull ou git pull --rebase",ru_RU:"Удаленный репозиторий разошелся с вашим локальным репозиторием, поэтому выгрузка ваших изменений не может быть в режиме fast forward (и следовательно ваш push будет отклонён). Пожалуйста, удалите изменения в удаленном репозитории которые, объедините их в эту ветку и попробуйте еще раз. Вы можете сделать это с помощью git pull или git pull --rebase",uk:"Віддалений репозиторій розбігся з твоїм локальним репозиторієм, тому відвантаження твоїх змін не є простим fast forward (і тому твій push був відхилений). Будь-ласка, витягни зміни з віддаленого репозиторію, включи їх в цю гілку, й спробуй ще. Ти можеш зробити це за допомогою git pull чи git pull --rebase",ko:"원격 레포지토리가 당신의 로컬 레포지토리에서 분기하므로, 변경 사항을 업데이트 하는것은 간단한 fast forward가 아닙니다(따라서 push가 거절될 것입니다.). 원격 레포지토리에서의 변경 사항을 내려 받아 이 브랜치에 합쳐라. 그리고 이걸 반복하라. 당신은 git pull 또는 git pull --rebase를 사용해 이를 수행할 수 있다.",vi:"Kho chứa từ xa có sự khác biệt với kho chứa cục bộ của bạn, nên không thể tự động (fast forward) cập nhật thay đổi của bạn (và vì thế hoạt động push của bạn bị từ chối). Vui lòng kéo về thay đổi từ kho chứa từ xa, kết nạp vào nhánh hiện tại, và thử lại lần nữa. Bạn có thể dùng lệnh `git pull` hoặc `git pull --rebase`"},"git-error-remote-branch":{__desc__:"One of the error messages for git",en_US:"You cannot execute that command on a remote branch",zh_CN:"你不能在远程分支上执行这个命令。",zh_TW:"你不能在遠端分支上執行這個命令呀。",de_DE:"Du kannst diesen Befehl nicht auf einem Remote Branch ausführen",es_AR:"No podés ejecutar ese comando en una rama remota",es_ES:"No puedes ejecutar ese comando en una rama remota",pt_BR:"Você não pode executar esse comando em um ramo remoto",gl:"Non podes executar ese comando nunha rama remota",fr_FR:"Vous ne pouvez exécuter cette commande sur une branche distante",ru_RU:"Вы не можете выполнить эту команду на удаленной ветке",uk:"Ти не можеш виконати цю команду на віддаленій гілці",ko:"당신은 원격 브랜치에서 그 명령어를 실행시킬 수 없다.",vi:"Bạn không thể thực thi lệnh đó lên nhánh từ xa."},"git-error-origin-required":{__desc__:"One of the error messages for git",en_US:"An origin is required for that command",zh_CN:"该命令需要一个 origin",zh_TW:"該命令需要一個 origin",de_DE:"Für diesen Befehl wird origin benötigt",es_AR:"Necesitás un origen para ese comando",es_ES:"Se requiere un origen para ese comando.",pt_BR:"É necessário informar uma origem para esse comando",gl:"É necesario informar unha orixe para ese comando",fr_FR:"Une origine est requise pour cette commande",ru_RU:"Origin требуется для этой команды",uk:"Для цієї команди потрібний origin",ko:"그 명령어를 위한 오리진이 필요하다.",vi:"Lệnh đó yêu cầu có origin."},"git-error-origin-exists":{__desc__:"One of the error messages for git",en_US:"An origin already exists! You cannot make a new one",zh_CN:"origin 已存在。你不能重复创建",zh_TW:"origin 遠端已存在。你不能重複創建",de_DE:"origin existiert bereits! Du kannst es nicht nochmal anlegen",es_AR:"¡Ya existe el origen! No podés crear uno nuevo",es_ES:"¡Ya existe un origen! No puedes crearlo de nuevo.",pt_BR:"A origem já existe! Você não pode criar uma nova",gl:"A orixe xa existe! Non podes crear unha nova",fr_FR:"Une origine existe déjà ! Vous ne pouvez pas en créer une nouvelle",ru_RU:"Origin уже существует! Невозможно создать еще один",uk:"Origin вже існує! Неможливо створити ще один",ko:"오리진이 이미 존재합니다! 당신은 새로 만들 수 없습니다.",vi:"Nguyên bản (origin) đã tồn tại. Bạn không thể tạo thêm 1 cái mới"},"git-error-branch":{__desc__:"One of the error messages for git",en_US:"You can't delete the master branch, the branch you are on, or things that aren't branches",de_DE:"Du kannst nicht den Branch master, den Branch auf dem du gerade arbeitest oder Refs, die keine Branches sind, löschen",zh_CN:"你不能删除主分支（master），或者你当前所在的分支，或者其它连分支也不是的东西。",zh_TW:"你不能刪除 master branch，或者你當前所在的 branch，或者其它連 branch 都不是的東西。",es_AR:"No podés borrar la rama master, la rama en la que estás, o cosas que no son ramas",es_ES:"No puedes eliminar la rama master, la rama en que estás, o cosas que no son ramas.",pt_BR:"Você não pode apagar o ramo master, nem o ramo em que você está, nem coisas que não sejam ramos",gl:"Non podes borrala rama master, nin a rama na que ti estás, nin cousas que non sexan ramas",fr_FR:"Vous ne pouvez supprimer la branche master, la branche sur laquelle vous êtes, ou ce qui n'est pas une branche",ru_RU:"Невозможно удалить ветку master, ветку на которой вы сейчас и то что не является веткой",uk:"Неможливо видалити гілку master, гілку на якій ти зараз знаходишся чи штуки які не є гілкою",ko:"당신은 마스터 브랜치, 당신이 현재 사용중인 브랜치, 또는 브랜치가 아닌 것들을 삭제할 수 없습니다.",vi:"Bạn không thể xóa nhánh master, nhánh mà bạn đang tham chiếu tới, hoặc những gì không phải nhánh."},"git-merge-msg":{__desc__:"The commit message for a merge commit",en_US:"Merge {target} into {current}",de_DE:"Mergen von {target} in {current}",zh_CN:"合并 {target} 到 {current}",zh_TW:"將 {target} 併入 {current}",es_AR:"Mergear {target} a {current}",es_ES:"Incorporar {target} en {current}",pt_BR:"Merge de {target} em {current}",gl:"Merge de {target} en {current}",fr_FR:"Merge de {target} dans {current}",ru_RU:"Слияние {target} в {current}",uk:"Злиття {target} в {current}",ko:"{target}을 {current}에 병합하세요.",vi:"Gộp {target} vào {current}."},"git-error-rebase-none":{__desc__:"One of the error messages for git",en_US:"No commits to rebase! Everything is a merge commit or changes already applied",de_DE:"Keine Commits für Rebase gefunden! Alle Commits sind Merge Commits oder beinhalten nur schon vorhandene Änderungen",zh_CN:"没有可以 rebase 的提交记录！可能是合并提交，或者已经 rebase 过了。",zh_TW:"沒有需要 rebase 的 commit！每個都是一個 merge commit 或者修改已經被寫入了",es_AR:"¡No hay commits para rebasear! Son todos commits de merge o cambios ya aplicados",es_ES:"¡No hay commits para hacer rebase! Todo es un merge commit o cambios ya hecho.",pt_BR:"Não há commits para o rebase! São todos commits de merge ou mudanças já aplicadas",gl:"¡Non hai commits para o rebase! Son todos commits de merge ou cambios xa aplicados",fr_FR:"Aucun commit à rebaser ! C'est soit un commit de merge, soit des modifications déjà appliquées",ru_RU:"Нет коммитов для rebase! Все в коммите слияния или изменения уже применены",uk:"Нема комітів для rebase! Все в коміті злиття (merge commit) чи зміни вже застосовані",ko:"rebase를 하기 위한 커밋이 없습니다! 모든 커밋과 변경 사항들의 병합은 이미 적용되었습니다.",vi:"Không có commit nào để rebase. Mọi thứ là merge commit hoặc thay đổi đã được áp dụng."},"git-result-nothing":{__desc__:"The message that explains the result of a git command",en_US:"Nothing to do...",de_DE:"Nichts zu tun ...",zh_CN:"什么也没发生...",zh_TW:"沒什麼事情要做...",es_AR:"Nada para hacer...",es_ES:"Nada para hacer...",pt_BR:"Nada a ser feito...",gl:"Nada para facer...",fr_FR:"Rien à effectuer…",ru_RU:"Нечего выполнять...",uk:"Нічого виконувати...",ko:"할게 없습니다 ...",vi:"Không có gì để làm ..."},"git-result-fastforward":{__desc__:"The message that explains the result of a git command",en_US:"Fast forwarding...",de_DE:"Fast forward...",zh_CN:"快速前进...",zh_TW:"快速前進...",es_AR:"Fast forwardeando...",es_ES:"Avanzando rápidamente...",pt_BR:"Fast forward...",gl:"Fast forward...",fr_FR:"En avance rapide…",ru_RU:"Выполняю Fast forward...",uk:"Виконую Fast forward",ko:"Fast forward 중입니다...",vi:"Đang fast forward..."},"git-result-uptodate":{__desc__:"The message that explains the result of a git command",en_US:"Branch already up-to-date",de_DE:"Branch ist bereits aktuell",zh_CN:"分支已经是最新啦",zh_TW:"branch 已經是最新啦",es_AR:"Rama actualmente actualizada",es_ES:"La rama ya se ha actualizado.",pt_BR:"Ramo já atualizado",gl:"Rama xa actualizada",fr_FR:"Branche déjà à jour",ru_RU:"Ветка уже обновлена",uk:"Гілку вже оновлено",ko:"브랜치가 이미 최신 상태입니다.",vi:"Nhánh đã được cập nhật mới nhất."},"git-error-exist":{__desc__:"One of the error messages for git",en_US:"The ref {ref} does not exist or is unknown",de_DE:"Die Ref {ref} existiert nicht oder ist unbekannt",zh_CN:"引用 {ref} 不存在。",zh_TW:"索引 {ref} 不存在，或者找不到。",es_AR:"La referencia {ref} no existe o es desconocida",es_ES:"La referencia {ref} no existe o es desconocida",pt_BR:"A referência {ref} não existe ou é desconhecida",gl:"A referencia {ref} non existe ou é descoñecida",fr_FR:"La référence {ref} n'existe pas ou est inconnue",ru_RU:"Ссылка {ref} не существует или неизвестна",uk:"Посилання {ref} не існує чи невідоме",ko:"{ref} 참조가 존재하지 않거나 알 수 없습니다.",vi:"Tham chiếu {ref} không tồn tại hoặc không thể tìm thấy."},"git-error-relative-ref":{__desc__:"One of the error messages for git",en_US:"Commit {commit} does not have a {match}",de_DE:"Commit {commit} hat kein {match}",zh_CN:"{commit} 提交并没有 {match}",zh_TW:"commit {commit} 並沒有 {match}",es_AR:"El commit {commit} no tiene un {match}",es_ES:"El commit {commit} no tiene un {match}",pt_BR:"O commit {commit} não tem um {match}",gl:"O commit {commit} non ten un {match}",fr_FR:"Le commit {commit} n'a pas de correspondance {match}",ru_RU:"Коммит {commit} не содержит {match}",uk:"Коміт {commit} не містить {match}",ko:"커밋 {commit}은 {match}를 가지고 있지 않습니다.",vi:"Commit {commit} mà không có {match}."},"git-warning-detached":{__desc__:"One of the warning messages for git",en_US:"Warning!! Detached HEAD state",de_DE:"Achtung! Detached HEAD Zustand",zh_CN:"警告！现在是分离 HEAD 状态",zh_TW:"注意喔！現在的狀態是分離 Head",es_AR:"¡Cuidado! Modo de detached HEAD",es_ES:"¡Cuidado! Modo de HEAD separado (detached HEAD)",pt_BR:"Cuidado! Modo Detached HEAD",gl:"¡Coidado! Modo Detached HEAD",fr_FR:"Attention ! HEAD est détaché",ru_RU:"Внимание! Репозиторий в состоянии detached HEAD, то есть не находится ни на какой ветке!",uk:"Увага! Репозиторій в стані detached HEAD, тобто не знаходиться в жодній гілці!",ko:"주의! 분리된 HEAD 상태",vi:"Cảnh báo! HEAD bị tách rời"},"git-warning-add":{__desc__:"One of the warning messages for git",en_US:"No need to add files in this demo",de_DE:"In dieser Demo müssen keine Dateien hinzugefügt werden",zh_CN:"此程序中不需要添加文件",zh_TW:"此 demo 中不需要再加入檔案",es_AR:"No es necesario hacer add a los archivos en esta demo",es_ES:"No es necesario agregar los archivos en esta demo",pt_BR:"Não é necessário adicionar arquivos neste demo",gl:"Non é necesario incluír arquivos nesta demo",fr_FR:"Aucun besoin d'ajouter des fichiers dans cette démo",ru_RU:"Это демо не оперирует файлами",uk:"Не потрібно додавати файли для цього демо",ko:"이 데모에서는 파일을 추가할 필요가 없습니다.",vi:"Không cần thêm tập tin trong bản giới thiệu này."},"git-error-options":{__desc__:"One of the error messages for git",en_US:"Those options you specified are incompatible or incorrect",de_DE:"Die angegebenen Optionen sind inkompatibel oder falsch",zh_CN:"你所指定的参数不兼容或者不准确",zh_TW:"您指定了不相容或錯誤的選項",es_ES:"Las opciones que especificaste son incompatibles o incorrectas.",es_AR:"No es necesario hacer add a los archivos en esta demo",pt_BR:"As opções que você especificou são incompatíveis ou incorretas",gl:"As opcións que especificaches son incompatibles ou incorrectas",fr_FR:"Les options que vous avez spécifiées sont incompatibles ou incorrectes",ru_RU:"Неправильные опции",uk:"Опції, які ти ввів, або некорректні або не підтримуються",ko:"당신이 지정한 그 옵션들은 호환되지 않거나 올바르지 않습니다.",vi:"Các tham số bạn chỉ định không tương thích hoặc không chính xác."},"git-error-already-exists":{__desc__:"One of the error messages for git",en_US:"The commit {commit} already exists in your changes set, aborting!",de_DE:"Der Commit {commit} existiert bereit, Abbruch!",zh_CN:"{commit} 提交已经存在于你的改动集里，已忽略！",zh_TW:"commit {commit} 已經在你的修改的集合裡，正在停止！",es_AR:"El commit {commit} ya existe en tus cambios, ¡abortando!",es_ES:"El commit {commit} ya existe en tus cambios, ¡abortando!",pt_BR:"O commit {commit} já existe nas suas mudanças, abortando!",gl:"O commit {commit} xa existe nos seus cambios, ¡abortando!",fr_FR:"Le commit {commit} existe déjà dans votre ensemble de modifications, opération avortée !",ru_RU:"Коммит {commit} существует, отменяю!",uk:"Коміт {commit} вже існує в твоєму change set, відміна!",ko:"커밋 {commit}은 이미 당신의 변경 내역에 존재합니다. 중단!",vi:"Commit {commit} đã tồn tại trong những thay đổi của bạn. Đang hủy!"},"git-error-reset-detached":{__desc__:"One of the error messages for git",en_US:"Can't reset in detached head! Use checkout if you want to move",de_DE:"Kann im Detached Head Zustand kein reset ausführen! Bitte checkout zum Bewegen benutzen",zh_CN:"不能在分离的 HEAD 里重置！用 checkout 吧",zh_TW:"不能在分離 HEAD 的狀態中重來！用 checkout 來移動吧",es_AR:"No podés hacer reset en el modo detached. Usá checkout si querés moverte",es_ES:"No puedes hacer reset en el modo separado. Usa checkout si quieres moverte.",pt_BR:"Não se pode fazer reset no modo detached. Use checkout se quiser se mover",gl:"Non se pode facer reset no modo detached. Use checkout se te queres mover",fr_FR:"On ne peut pas effectuer un reset quand HEAD est détaché. Utilisez checkout pour déplacer",ru_RU:"Это невозможно в режиме detached HEAD! Используйте checkout!",uk:"Неможливо зробити reset в стані detached head! Використовуй checkout якщо хочеш змінити розташування",ko:"분리된 HEAD에서 reset할 수 없습니다. 만약 이동시키기를 원한다면 checkout을 사용하세요.",vi:"Trong trạng thái tách rời `HEAD` thì không thể `reset`. Dùng `checkout` nếu bạn muốn di chuyển."},"git-warning-hard":{__desc__:"One of the warning messages for git",en_US:"The default behavior for resets on LearnGitBranching is a --hard, so feel free to omit that option if you get tired of typing it out in our lessons. Just remember that the default behavior on actual Git is --mixed.",de_DE:"Das Standardverhalten in dieser Demo ist --hard, du kannst die Option auch weglassen!",zh_CN:"在本程序中默认的行为是 --hard 硬重置，可以尽情省略掉那个选项以避免麻烦！但是要记录 Git 中默认的是 --mixed。",zh_TW:"預設的行為是 --hard reset，儘量省略掉那個選項吧！",es_AR:"El comportamiento default es un --hard reset, sentite libre de omitir esa opción!",es_ES:"El comportamiento default para reajustes es --hard, pero siéntete libre de omitir esa opción si te cansas de escribirla en nuestras lecciones. Recuerda quepor defecto el comportamiento en GitHub es --mixed.",pt_BR:"O comportamento padrão é um reset --hard, fique livre para omitir essa opção!",gl:"O comportamente por defecto é un reset --hard, Lembra que por defecto en GitHub é --mixed.",fr_FR:"Le comportement par défaut est un --hard reset, soyez libre d'omettre cette option !",ru_RU:"По умолчанию будет выполнен --hard reset, эту опцию можно опускать!",uk:"На LearnGitBranching reset по замовчуванню використовує --hard, тому цю опцію можна пропустити, якщо ти втомився її набирати щоразу. Тільки запам’ятай, що по замовчуванню звичайний git reset використовує --mixed",ko:"LearnGitBranching에서 reset의 기본 설정은 옵션은 --hard입니다. 우리 레슨에서는 이 옵션을 생략해도 됩니다. 다만 실제 Git의 기본 설정 옵션은 --mixed라는것만 기억하세요.",vi:'Trạng thái mặc định cho lệnh `reset` của "Học nhánh Git" là `--hard`. Nên khi làm bài nếu bạn thấy gõ tham số này hơi tốn công thì cứ bỏ qua. Nhưng mà hãy nhớ rằng thực tế thì `--mixed` mới là trạng thái mặc định của `reset`.'},"git-error-staging":{__desc__:"One of the error messages for git",en_US:"There is no concept of adding / staging files, so that option or command is invalid!",de_DE:"In dieser Demo gibt es kein Hinzufügen / Vormerken von Dateien, dieser Befehl ist daher ungültig!",zh_CN:"没有添加、缓存文件的必要，所以该选项或者命令是不合法的。",zh_TW:"沒有加入、或者暫存 (staging) 文件的必要，所以改選項或者命令是不合法的。",es_AR:"No existe el concepto de agregar/indexar cambios, así que esa opción o comando es inválido",es_ES:"No existe el concepto de agregar/indexar cambios, así que esa opción o comando es inválido.",pt_BR:"Não existe o conceito de adicionar/indexar mudanças, de forma que essa opção ou comando é inválida",gl:"Non existe o concepto de agregar/indexar cambios, así que esa opción ou comando é inválido.",fr_FR:"Il n'y a pas le concept d'ajouter / mettre en staging, donc cette option ou commande est invalide",ru_RU:"Это демо не работает с файлами, так что git add не нужен!",uk:"В цьому демо немає можливості додати файл до робочої копії чи до стейджингу, тому ця опція чи команда некоректна чи не підтримується",ko:"여기엔 파일을 추가하거나 스테이징한다는 개념이 없습니다. 따라서 그 옵션 또는 명령어는 유효하지 않습니다.",vi:"Không có khái nệm thêm tập tin đệm(staging file), nên tùy chọn đó là bất hợp lệ."},"git-revert-msg":{__desc__:"Message for reverting git command",en_US:"Reverting {oldCommit}: {oldMsg}",de_DE:"Reverte {oldCommit}: {oldMsg}",zh_CN:"撤销 {oldCommit}：{oldMsg}",zh_TW:"還原 {oldCommit}：{oldMsg}",es_AR:"Revirtiendo {oldCommit}: {oldMsg}",es_ES:"Volviendo a {oldCommit}: {oldMsg}",pt_BR:"Revertendo {oldCommit}: {oldMsg}",gl:"Revertindo {oldCommit}: {oldMsg}",fr_FR:"Revert {oldCommit}: {oldMsg}",ru_RU:"Откатываю {oldCommit}: {oldMsg}",uk:"Повертаю {oldCommit}: {oldMsg}",ko:"{oldCommit}:{oldMsg}를 복구중입니다.",vi:"Hoàn tác {oldCommit}:{oldMsg}."},"git-error-args-many":{__desc__:"One of the error messages for git",en_US:"I expect at most {upper} argument(s) for {what}",de_DE:"Ich benötige maximal {upper} Argument(e) für {what}",zh_CN:"{what} 期望最多 {upper} 个参数",zh_TW:"{what} 期望最多 {upper} 個參數",es_AR:"Espero como máximo {upper} parámetros para {what}",es_ES:"Espero al máximo {upper} parámetros para {what}.",pt_BR:"Espero no máximo {upper} parâmetros para {what}",gl:"Espero ó máximo {upper} parámetros para {what}",fr_FR:"J'attends au plus {upper} argument(s) pour {what}",ru_RU:"Ожидается максимум {upper} аргумент(ов) для {what}",uk:"Я очікую максимум {upper} аргумент(ів) для {what}",ko:"{what}을 위해 최대 {upper}개의 인자를 받습니다.",vi:"Có thể có nhiều nhất {upper} tham số cho {what}."},"git-error-args-few":{__desc__:"One of the error messages for git",en_US:"I expect at least {lower} argument(s) for {what}",de_DE:"Ich benötige mindestens {lower} Argument(e) für {what}",zh_CN:"{what} 期望最少 {lower} 个参数",zh_TW:"{what} 期望最少 {lower} 個參數",es_AR:"Espero al menos {lower} parámetros para {what}",es_ES:"Espero al menos {lower} parámetros para {what}.",pt_BR:"Espero pelo menos {lower} parâmetros para {what}",gl:"Agardo polo menos {lower} parámetros para {what}",fr_FR:"J'attends au moins {lower} argument(s) pour {what}",ru_RU:"Ожидается как минимум {lower} аргументов для {what}",uk:"Я очікую як мінімум {lower} аргумент(ів) для {what}",ko:"{what}을 위해 최소 {lower}개의 인자를 받습니다.",vi:"Cần ít nhất {lower} tham số cho {what}."},"git-error-no-general-args":{__desc__:"One of the error messages for git",en_US:"That command accepts no general arguments",de_DE:"Dieser Befehl akzeptiert keine allgemeinen Argumente",zh_CN:"该命令不接收参数",zh_TW:"該指令不接受一般參數",es_AR:"Ese comando no acepta parámetros comunes",es_ES:"Ese comando no acepta parámetros generales.",pt_BR:"Este comando não aceita parâmetros gerais",gl:"Este comando non acepta parámetros xeráis",fr_FR:"Cette commande n'accepte aucun argument général",ru_RU:"Это команда без аргументов",uk:"Ця команда не приймає загальних аргументів",ko:"그 명령어는 일반적으로 인자를 받지 않습니다.",vi:"Lệnh đó không chấp nhận các tham số chung."},"copy-tree-string":{__desc__:"The prompt to copy the tree when sharing",en_US:"Copy the tree string below",de_DE:"Kopiere die folgende Baum-Zeichenkette",zh_CN:"拷贝下面的树字符串",zh_TW:"複製下方的樹狀字串",es_AR:"Copiá el código de acá abajo",es_ES:"Copia el código que sigue.",pt_BR:"Copie o código abaixo",gl:"Copie o código abaixo",fr_FR:"Copiez la chaîne d'arbre ci-dessous",ru_RU:"Скопируй текст ниже",uk:"Скопіюй рядок дерева нижче",ko:"다음 트리 문자열을 복사하세요.",vi:"Sao chép chuỗi cây bên dưới."},"learn-git-branching":{__desc__:"The title of the app, with spaces",en_US:"Learn Git Branching",de_DE:"Learn Git Branching",ja:"日本語版リポジトリ",zh_CN:"学习 Git 分支",zh_TW:"學習 git 分支",es_AR:"Aprendé a Branchear en Git",es_ES:"Aprende Git Branching",pt_BR:"Learn Git Branching",gl:"Aprende Git Branching",fr_FR:"Apprenez Git Branching",ru_RU:"Изучаем ветвление в git",uk:"Learn Git Branching",ko:"깃 브랜칭을 배워봅시다.",vi:"Học nhánh Git."},"select-a-level":{__desc__:"The prompt to select a level on the drop down view",en_US:"Select a level",de_DE:"Level auswählen",zh_CN:"选择一关",zh_TW:"選擇其中一關",es_AR:"Seleccioná un nivel",es_ES:"Selecciona un nivel",pt_BR:"Selecione um nível",gl:"Selecciona un nivel",fr_FR:"Choisissez un niveau",ru_RU:"Выбери уровень",uk:"Обери рівень",ko:"레벨을 선택하세요.",vi:"Chọn một cấp độ."},"main-levels-tab":{__desc__:"The name of main levels tab on the drop down view",en_US:"Main",de_DE:"Haupt",zh_CN:"主要",zh_TW:"主要",es_ES:"Principal",gl:"Principal",ru_RU:"Основы",uk:"Основи",ko:"메인",vi:"Bài học chính"},"remote-levels-tab":{__desc__:"The name of remote levels tab on the drop down view",en_US:"Remote",de_DE:"Remote",zh_CN:"远程",zh_TW:"遠端",es_ES:"Remota",gl:"Remota",ru_RU:"Удаленные репозитории",uk:"Віддалені репозиторії",ko:"원격",vi:"Bài học về thao tác từ xa"},"branch-name-short":{__desc__:"When branch names get too long, we need to truncate them. This is the warning for that",en_US:'Sorry, we need to keep branch names short for the visuals. Your branch name was truncated to 9 characters, resulting in "{branch}"',de_DE:'Tut mir leid, aber aus Gründen der Darstellung müssen wir die Branch-Namen kurz halten. Dein Branch-Name wurde auf 9 Zeichen gekürzt und heißt daher jetzt "{branch}"',zh_CN:'抱歉，为了显示的需要，我们需要一个短些的分支名称。您使用的名称将被截断到9个字符，即 "{branch}"',zh_TW:'抱歉，為了顯示的需要，我們需要一個短一點的 branch 名稱。您使用的將會被截斷到剩下9個字元，即"{branch}"',es_AR:'Perdón, necesitamos mantener los nombres de los branches cortos para visualizarlos. El nombre de tu rama se truncó a 9 caracteres, resultando en "{branch}"',es_ES:'Perdón, necesitamos mantener los nombres de las ramas cortos para visualizarlos. El nombre de tu rama se truncó a 9 caracteres, resultando en "{branch}"',pt_BR:'Desculpe, precisamos manter os nomes dos ramos curtos para visualizá-los. O nome do seu ramo foi truncado para 9 caracteres, resultando em "{branch}"',gl:'Desculpe, precisamos manter os nomes das ramas curtas para poder velas. O nome da súa rama foi truncada a 9 letras, resultado en "{branch}"',fr_FR:'Désolé, nous devons garder les noms de branches courts pour la visualisation. Votre nom de branche a été tronqué à 9 caractères, devenant "{branch}"',ru_RU:'Для наглядности нам нужно сохранять имена веток короткими. Твоё название сокращено до 9 символов и теперь это "{branch}"',uk:'Вибач, нам потрібно щоб ім’я гілок було як можна коротше для наглядності. Твоє ім’я гілки було скорочене до 9 літер й тепер це "{branch}"',ko:'미안하지만, 우리는 시각적으로 더 좋게 보기위해 짧은 브랜치명이 필요합니다. 당신의 브랜치명은 9자리로 잘라 "{branch}"로 만들었습니다.',vi:'Xin lỗi, chúng tôi cần giữ tên nhánh ngắn để tiện minh họa. Tên nhánh của bạn đã bị cắt xuống 9 ký tự là "{branch}".'},"bad-branch-name":{__desc__:"When the user enters a branch name thats not ok",en_US:'That branch name "{branch}" is not allowed!',de_DE:'Der Branch-Name "{branch}" ist nicht erlaubt!',zh_CN:'不能给分支起这个名字 "{branch}"',zh_TW:'不能给 branch 起這個名字 "{branch}"',es_AR:'El nombre "{branch}" no está permitido para los branches',es_ES:'El nombre "{branch}" es prohibido para nombrar una rama.',pt_BR:'Um ramo não pode ser chamado de "{branch}"!',gl:'Unha rama non pode ser chamada "{branch}',fr_FR:'Ce nom de branche "{branch}" n\'est pas autorisé',ru_RU:'Название для ветки "{branch}" недопустимо!',uk:'Назва гілки "{branch}" є недопустимою',ko:'"{branch}"라는 브랜치명은 사용할 수 없습니다.',vi:'Tên nhánh "{branch}" không được chấp nhận.'},"bad-tag-name":{__desc__:"When the user enters a tag name thats not ok",en_US:'That tag name "{tag}" is not allowed!',zh_CN:"该标签名 “{tag}” 不被接受。",zh_TW:"該標籤名 “{tag}” 不被接受。",es_AR:'El nombre "{tag}" no está permitido para los tags',es_ES:'El nombre "{tag}" es prohibido para nombrar un tag.',pt_BR:'Uma tag não pode ser chamada de "{tag}"!',gl:'Unha etiqueta non pode ser chamada "{tag}"',de_DE:'Der Tag-Name "{tag}" ist nicht erlaubt!',fr_FR:'Le nom de tag "{tag}" n\'est pas autorisé',ru_RU:'Название для тега "{tag}" недопустимо!',uk:'Назва тегу "{tag}" є недопустимою',ko:'"{tag}"라는 태그명은 사용할 수 없습니다.',vi:'Tên thẻ "{tag}" không được chấp nhận.'},"option-not-supported":{__desc__:"When the user specifies an option that is not supported by our demo",en_US:'The option "{option}" is not supported!',de_DE:'Die Option "{option}" wird nicht unterstützt!',zh_CN:'不支持选项 "{option}"',zh_TW:'不支援的選項 "{option}"',es_AR:"La opción {option} no está soportada",es_ES:"La opción {option} no compatible con esta demo.",pt_BR:"A opção {option} não é suportada",gl:"A opción {option} non está soportada",fr_FR:"L'option \"{option}\" n'est pas supportée",ru_RU:'Опция "{option}" недопустима!',uk:'Опція "{option}" не підтримується!',ko:'"{option}"(이)라는 옵션은 지원하지 않습니다.',vi:'Tùy chọn "{option}" không được hỗ trợ.'},"git-usage-command":{__desc__:"The line that shows how to format a git command",en_US:"git <command> [<args>]",de_DE:"git <Befehl> [<Argumente>]",zh_CN:"git <命令> [<参数>]",zh_TW:"git <指令> [<參數>]",es_AR:"git <comando> [<parametros>]",es_ES:"git <comando> [<parametros>]",pt_BR:"git <comando> [<parâmetros>]",gl:"git <comando> [<parámetros>]",fr_FR:"git <commande> [<arguments>]",ru_RU:"git <команда> [<аргументы>]",uk:"git <команда> [<аргументи>]",ko:"git <명령어> [<인자들>]",vi:"git <lệnh> [<tham số>]"},"git-supported-commands":{__desc__:"In the git help command, the header above the supported commands",en_US:"Supported commands:",de_DE:"Unterstützte Befehle:",zh_CN:"支持的命令有:",zh_TW:"支援的指令有：",es_AR:"Comandos soportados:",es_ES:"Comandos compatibles:",pt_BR:"Comandos suportados:",gl:"Comandos soportados:",fr_FR:"Commandes supportées",ru_RU:"Поддерживаемые команды",uk:"Допустимі команди",ko:"지원되는 명령어들:",vi:"Các lệnh được hỗ trợ:"},"git-usage":{__desc__:"In the dummy git output, the header before showing all the commands",en_US:"Usage:",de_DE:"Benutzung:",zh_CN:"使用:",zh_TW:"用法：",es_AR:"Uso:",es_ES:"Uso:",pt_BR:"Uso:",gl:"Uso:",fr_FR:"Utilisation :",ru_RU:"Использование:",uk:"Використання:",ko:"사용법",vi:"Cách dùng:"},"git-version":{__desc__:"The git version dummy output, kind of silly. PCOTTLE is my unix name but feel free to put yours instead",en_US:"Git Version PCOTTLE.1.0",de_DE:"Git Version PCOTTLE.1.0.jbr",zh_CN:"Git 版本 PCOTTLE.1.0",zh_TW:"Git 版本 PCOTTLE.1.0",es_AR:"Git Versión PCOTTLE.1.0",es_ES:"Git Versión PCOTTLE.1.0",pt_BR:"Git versão PCOTTLE.1.0",gl:"Git versión PCOTTLE.1.0",fr_FR:"Git version PCOTTLE.1.0",ru_RU:"Версия git PCOTTLE.1.0",uk:"Версія git PCOTTLE.1.0",ko:"Git Version PCOTILE.1.0",vi:"Phiên bản Git TTC-Solutions.1.0"},"flip-tree-command":{__desc__:"when the tree is being flipped",en_US:"Flipping tree...",zh_CN:"翻转树中...",zh_TW:"翻轉樹中...",es_AR:"Invirtiendo el árbol...",es_ES:"Invirtiendo el árbol...",pt_BR:"Invertendo a árvore...",gl:"Invirtindo a árbore...",fr_FR:"Inversion de l'arbre...",ru_RU:"Переворачиваю дерево...",uk:"Перевертаю дерево...",ko:"트리 뒤집는중...",vi:"Cây lật..."},"refresh-tree-command":{__desc__:"when the tree is visually refreshed",en_US:"Refreshing tree...",de_DE:"Aktualisiere Baum ...",zh_CN:"正在刷新树结构...",zh_TW:"正在更新樹狀結構...",es_AR:"Refrezcando el árbol...",es_ES:"Actualizando el árbol...",pt_BR:"Atualizando a árvore...",gl:"Actualizando a árbore...",fr_FR:"Actualisation de l'arbre…",ru_RU:"Обновляю дерево...",uk:"Оновлюю дерево...",ko:"트리 다시 불러오는중...",vi:"Làm mới cây..."},"locale-command":{__desc__:"when the locale is set to something",en_US:"Locale set to {locale}",de_DE:"Locale auf {locale} gesetzt",zh_CN:"语言更改为 {locale}",zh_TW:"語系設為 {locale}",es_AR:"Localización actualizada a {locale}",es_ES:"Idioma puesto a {locale}",pt_BR:"Língua trocada para {locale}",gl:"Cambiado o idioma a {locale}",fr_FR:"Langue changée à {locale}",ru_RU:"Локаль теперь равна {locale}",uk:"Локаль тепер дорівнює {locale}",ko:"로케일이 {locale}로 설정되었습니다.",vi:"Ngôn ngữ được thay đổi thành {locale}."},"locale-reset-command":{__desc__:"when the locale is reset",en_US:"Locale reset to default, which is {locale}",de_DE:"Locale auf Standard zurückgesetzt, also {locale}",zh_CN:"语言重置为默认的 {locale}",zh_TW:"還原為預設語系 {locale}",es_AR:"Localización vuelta al default, que es {locale}",es_ES:"Idioma reajustado a su valor por defecto ({locale})",pt_BR:"Língua retornada para a padrão, que é {locale}",gl:"Lingua reaxustada ó seu valor por defecto {locale}",fr_FR:"Langue remise par défaut, qui est {locale}",ru_RU:"Локаль сброшена. Теперь она равна {locale}",uk:"Локаль скинута. Тепер вона дорівнює {locale}",ko:"로케일이 {locale}로 초기화 되었습니다.",vi:"Ngôn ngữ được đổi thành mặc định: {locale}."},"show-command":{__desc__:'command output title from "show"',en_US:"Please use one of the following commands for more info:",zh_TW:"請使用下列其中一個指令取得更多資訊：",zh_CN:"请使用以下命令以了解更多：",de_DE:"Bitte benutze einen der folgenden Befehle um mehr Informationen zu bekommen:",es_AR:"Usá alguno de estos comandos para tener más información:",es_ES:"Por favor usa uno de los siguientes comandos para más información:",pt_BR:"Use algum destes comandos para ter mais informações:",gl:"Usa algún destes comandos para ter máis información:",fr_FR:"Merci d'utiliser une des commandes suivantes pour obtenir plus d'informations",ru_RU:"Для получения большей информации используй следующие команды:",uk:"Щоб отримати більше інформації використовуй наступні команди:",ko:"더 많은 정보를 위해 다음 명령어들중 하나를 사용하세요.",vi:"Vui lòng dùng một trong các lệnh sau để có thêm thông tin:."},"show-all-commands":{__desc__:'command output title from "show commands"',en_US:"Here is a list of all the commmands available:",zh_TW:"這份清單列出所有可用指令：",zh_CN:"该列表列出了所有可用的指令：",de_DE:"Hier ist eine Liste aller verfügbarer Befehle:",es_AR:"Esta es una lista de los comandos disponibles:",es_ES:"Esta es una lista de todos los comandos disponibles:",pt_BR:"Esta é uma lista dos comandos disponíveis:",gl:"Esta é unha lista dos comando dispoñibles:",fr_FR:"Ci-dessous est la liste de toutes les commandes disponibles :",ru_RU:"Вот все поддерживаемуе команды:",uk:"Ось список всіх можливих команд:",ko:"여기에 사용 가능한 모든 명령어들의 리스트가 있습니다.",vi:"Dưới đây là danh sách tất cả các lệnh hiện hành:."},"cd-command":{__desc__:"dummy command output for the command in the key",en_US:'Directory changed to "/directories/dont/matter/in/this/demo"',de_DE:'Verzeichnis gewechselt zu "/verzeichnisse/sind/in/dieser/demo/latte"',zh_CN:'目录切换到 "/directories/dont/matter/in/this/demo"',zh_TW:'目錄切換到 "/directories/dont/matter/in/this/demo"',es_AR:'Directorio cambiado a "/los/directorios/no/importan/en/esta/demo"',es_ES:'Directorio cambiado a "/los/directorios/no/importan/en/esta/demo"',pt_BR:'Diretório mudado para "/diretorios/nao/importam/neste/demo"',gl:'Directorio cambiado a "/os/directorios/non/importan/nesta/demo"',fr_FR:'Répertoire changé à "/directories/dont/matter/in/this/demo" (les répertoires ne servent à rien dans cette démo)',ru_RU:'Директория изменена на "/директории/не/важны/в/этом/демо"',uk:'Директорія змінена на "/директорії/не/мають/значення/в/цьому/демо"',ko:'디렉토리가 "/directories/dont/matter/in/this/demo"로 변경되었습니다.',vi:'Thay đổi thư mục thành "/directories/dont/matter/in/this/demo".'},"ls-command":{__desc__:"Dummy command output for the command in the key",en_US:"DontWorryAboutFilesInThisDemo.txt",de_DE:"VergissDateienInDieserDemo.txt",zh_CN:"在本程序中无须考虑文件问题.txt",zh_TW:"DontWorryAboutFilesInThisDemo.txt （譯註：在 demo 裡不用擔心檔案）",es_AR:"NoTePreocupesPorLosArchivosEnEstaDemo.txt",es_ES:"NoTePreocupesPorLosArchivosEnEstaDemo.txt",pt_BR:"NaoSePreocupeComNomesDeArquivoNesteDemo.txt",gl:"NonTePreocupesPolosCambiosNestaDemo.txt",fr_FR:"DontWorryAboutFilesInThisDemo.txt (ne vous préoccupez pas des noms de fichier dans cette démo)",ru_RU:"НеНадоЗаботитьсяОФайлахВЭтомДемо.txt",uk:"ЗабийНаФайлиВЦьомуДемо.txt",ko:"DontWorryAboutFilesInThisDemo.txt (이_데모에서_파일에_대한_걱정은_하지마세요.txt)",vi:"DontWorryAboutFilesInThisDemo.txt (ĐừngLoLắngVềTậpTinTrongBảnGiớiThiệuNày.txt)"},"mobile-alert":{__desc__:"When someone comes to the site on a mobile device, they can not input commands so this is a nasty alert to tell them",en_US:"LGB can't receive input on mobile, visit on desktop! it's worth it :D",de_DE:"LGB ist nicht mit mobilen Endgeräten kompatibel, nutz es vom Desktop! Es lohnt sich :D",zh_CN:"无法在移动设备/平板上调出键盘 :( 请试试桌面版 :D",zh_TW:"無法在行動裝置上叫出鍵盤，請改用桌面版！",es_AR:"LGB no puede recibir comandos en dispositivos móviles. Visitanos desde una desktop, ¡lo vale! :D",es_ES:"LGB no puede recibir comandos en dispositivos móviles. Visítanos en una computadora de escritorio, ¡lo vale! :D",pt_BR:"Provavelmente você não vai conseguir digitar comandos no celular, neste caso tente acessar de um computador",gl:"LGB non pode recibir os comandos nos dispositivos móbiles. Visítanos dende un ordenador de escritorio, ¡paga a pena! :D",fr_FR:"Impossible de faire apparaître le clavier sur mobile / tablette :( Essayez de passer sur un ordinateur de bureau :D",ru_RU:"Мобильные не поддерживаются, зайди с компьютера!",uk:"LGB не підтримує ввід тексту з мобільного, зайди з компьютера! Це цього варте!",ko:"LGB는 모바일에서 입력을 받을 수 없습니다. 데스크톱으로 접속하세요! 이것은 가치가 있습니다. :D",vi:"Đáng tiếc là ứng dụng không thể nhận thông tin từ điện thoại hay máy tính bảng, hãy sử dụng máy tính cá nhân, đáng để bỏ công mà :D"},"share-tree":{__desc__:"When you export a tree, we want you to share the tree with friends",en_US:'Share this tree with friends! They can load it with "import tree"',de_DE:'Teile diesen git-Baum mit Freunden! Sie können ihn mit "import tree" laden',zh_CN:'与你的好友分享提交树！他们可以用 "import tree" 加载它',zh_TW:'與你的好友分享這棵樹！他們可以用 "import tree" 來載入它',es_AR:'¡Compartí este árbol con amigos! Pueden cargarlo con "import tree"',es_ES:'¡Comparte este árbol con amigos! Pueden cargarlo con "import tree"',pt_BR:'Compartilhe esta árvore com seus amigos! Eles podem carregá-la com "import tree"',gl:'¡Comparte esta árbore cos teus amigos! Eles poden cargalo con "import tree"',fr_FR:'Partagez cet arbre avec vos amis ! Ils peuvent le charger avec "import tree"',ru_RU:'Поделись деревом с друзьями! Они могут загрузить его при помощи "import tree"',uk:'Поділись цим деревом з друзями! Вони зможуть його завантажити за допомогою "import tree"',ko:'친구들과 이 트리를 공유하세요! 그들은 "import tree"를 사용해 이를 로드할 수 있습니다.',vi:'Hãy chia sẻ cây này với bạn của mình! Họ có thể dùng "import tree" để tải.'},"paste-json":{__desc__:"When you are importing a level or tree",en_US:"Paste a JSON blob below!",de_DE:"Füg einen JSON-Blob unten ein!",zh_CN:"在下边粘贴一个 JSON 串",zh_TW:"在下方貼上一串 JSON",es_AR:"¡Pegá un blob JSON abajo!",es_ES:"¡Pega un blob JSON abajo!",pt_BR:"Cole o JSON abaixo!",gl:"Pega un JSON abaixo!",fr_FR:"Collez un blob JSON ci-dessous !",ru_RU:"Вставь JSON ниже!",uk:"Встав JSON нижче!",ko:"아래에 JSON blob을 붙여넣으세요.",vi:"Dán một chuỗi JSON xuống bên dưới."},"solved-map-reset":{__desc__:"When you reset the solved map to clear your solved history, in case someone else wants to use your browser",en_US:"Solved map was reset, you are starting from a clean slate!",de_DE:"Gelöste Karte wurde zurückgesetzt, du fängst mit einem leeren Blatt an!",zh_CN:"解决列表已重置，您现在可以从头开始了",zh_TW:"過關地圖已經重新設置，您現在從零開始了",es_AR:"El mapa resuelto fue eliminado, estás arrancando desde un estado limpio",es_ES:"El mapa resuelto fue eliminado, estás empezando de un estado limpio.",pt_BR:"Mapa de resolvidos descartado, você está começando com ficha limpa!",gl:"O mapa resolto foi eliminado, estás arrancando dende un estado limpo.",fr_FR:"La carte des niveaux résolus a été effacée, vous repartez de zéro !",ru_RU:"Всё сброшено! Можно начать с чистого листа!",uk:"Все скинуте! Можна починати з чистого аркушу!",ko:"해결된 지도가 초기화 되었습니다. 당신은 깨끗한 상태에서 시작합니다.",vi:"Tất cả đáp án đã được xóa, bạn có thể bắt đầu lại từ đầu."},"level-cant-exit":{__desc__:"When the user tries to exit a level when they are not in one",en_US:'You are not in a level! You are in a sandbox, start a level with "levels"',de_DE:'Du bist nicht in einem Level! Du bist im Sandkasten-Modus, starte einen Level mit "levels"',zh_CN:'您没在关卡中而是在沙盒中，要开始关卡请输入 "levels"',zh_TW:'您沒在關卡中！您在沙盒中，要開始關卡請輸入 "levels"',es_AR:'¡No estás en un nivel! Estás en el sandbox, comenzá un nivel usando "levels"',es_ES:'¡No estás en un nivel! Estás en el sandbox, comienza un nivel con "levels"',pt_BR:'Você não está em um nível! Você está no sandbox, comece um nível com "levels"',gl:'¡Non estás en ningún nivel! Estás nunha caixa de arena, comeza un nivel usando "levels"',fr_FR:'Vous n\'êtes pas dans un niveau ! Vous êtes dans le mode bac à sable, commencez un niveau avec "levels"',ru_RU:'Ты не проходишь уровень! Ты в песочнице! Чтобы начать уровень, используй команду "levels"!',uk:'Ти не в рівні! Ти в пісочниці! Почни рівень з "levels"',ko:'당신은 샌드박스에 있습니다. "levels"를 사용하여 레벨을 시작하세요.',vi:'Bạn hiện không ở cấp độ nào cả! Hãy bắt đầu một cấp độ với "levels".'},"level-no-id":{__desc__:"When you say an id but that level doesn't exist",en_US:'A level for that id "{id}" was not found! Opening up a level selection view',de_DE:'Konnte keinen Level mit der ID "{id}" finden! Öffne einen Level-Auswahldialog',zh_CN:'没找到 id 为 "{id}" 的关卡！打开关卡选择框',zh_TW:'找不到 id 為 "{id}" 的關卡！開啟關卡選擇視窗',es_AR:"No se encontró ningún nivel {id}. Abriendo la vista de selección de niveles...",es_ES:"No se encontró ningún nivel {id}. Abriendo la vista de selección de niveles...",pt_BR:'O nível "{id}" não existe! Abrindo uma caixa de seleção de nível',gl:'O nivel "{id}" non existe! Abrindo unha caixa de seleción de nivel',fr_FR:"Le niveau dont l'identifiant est {id} n'a pas été trouvé ! Ouverture de la vue de sélection des niveaux",ru_RU:'Уровень с id "{id}" не найден! Открываю выбор уровней',uk:'Рівень з id "{id}" не знайдений! Відкриваю вибір рівней',ko:'id "{id}"에 대한 레벨이 존재하지 않습니다. 레벨 선택 화면을 열어보세요.',vi:'Không tìm thấy cấp độ cho định danh "{id}". Mở cửa sổ chọn cấp độ.'},"undo-stack-empty":{__desc__:"The undo command can only undo back until the last time the level was reset or the beginning of the level",en_US:"The undo stack is empty!",de_DE:"Die Undo-Liste ist leer!",zh_CN:"还没有什么可以撤销",zh_TW:"還沒有什麼可以取消",es_AR:"No hay comandos que deshacer",es_ES:"No hay comandos que deshacer",pt_BR:"Você já desfez tudo!",gl:"Nonn hai comandos que desfacer",fr_FR:"La pile d'annulation est vide !",ru_RU:"Некуда откатывать!",uk:"Нема куди відкатуватися",ko:"되돌리기 스택이 비었습니다!",vi:"Không có gì để hoàn tác!"},"already-solved":{__desc__:"When you play in a level that is already solved",en_US:'You have already solved this level, try other levels with "levels" or go back to sandbox with "sandbox"',de_DE:'Du hast diesen Level bereits gelöst, probier einen anderen Level mit "levels" aus oder geh in den Sandkasten-Modus mit "sandbox"',zh_CN:'你已经解决了本关，输入 "levels" 尝试其他关卡，或者输入 "sandbox" 回到沙盒中',zh_TW:'你已經解决了本關，輸入 "levels" 嘗試其他關卡，或者輸入 "sandbox" 回到沙盒中',es_AR:'Ya resolviste este nivel, probá otros usando "levels" o volvé al sandbox usando "sandbox"',es_ES:'Ya resolviste este nivel, prueba otros usando "levels" o vuelve al sandbox usando "sandbox"',pt_BR:'Você já resolveu este nível, tente outros com "levels" ou volte ao sandbox com "sandbox"',gl:'Xa resolviches este nivel, proba outros usando "levels" ou volve á caixa de area con "sandbox"',fr_FR:'Vous avez déjà résolu ce niveau, essayez d\'autres niveaux avec "levels" ou revenez au bac à sable avec "sandbox"',ru_RU:'Ты уже прошел этот уровень, попробуй пройти другие при помощи команды "levels" или иди в песочницу "sandbox"',uk:'Ти вже пройшов цей рівень, спробуй інші рівні з "levels" чи повернись в пісочницю з "sandbox"',ko:'당신은 이미 이 레벨을 해결했습니다. "levels"를 사용하여 다른 레벨에 도전하거나 "sandbox"를 사용하여 샌드박스로 돌아가세요.',vi:'Bạn đã vượt qua cấp độ này. Thử cấp độ khác với "levels" hoặc dùng "sandbox" để trở lại hộp cát.'},"solved-level":{__desc__:"When you solved a level",en_US:"Solved!!\n:D",de_DE:"Gelöst!\n:D",zh_CN:"恭喜过关！！",zh_TW:"恭喜，本關解決了！！",es_ES:"¡Resuelto!\n:D",gl:"¡Resolto!",ru_RU:"Решено!!\n:D",uk:"Вирішено!!\n:D",ko:"해결 완료!!\n:D",vi:"ĐÃ XONG!!\n:D"},"command-disabled":{__desc__:"When you try a command that is disabled",en_US:"That git command is disabled for this level!",de_DE:"Dieser git-Befehl ist für diesen Level deaktiviert!",zh_CN:"本关不允许使用该命令！",zh_TW:"本關禁止使用該 git 指令！",es_AR:"¡Ese comando de git está deshabilitado para este nivel!",es_ES:"¡Ese comando de git está deshabilitado para este nivel!",pt_BR:"Achou que seria fácil assim? Desabilitamos esse comando durante este nível, só para dificultar ;-)",gl:"¡Ese comando de git está deshabilitado para este nivel!",fr_FR:"Cette commande git est désactivée pour ce niveau !",ru_RU:"На этом уровне нельзя использовать эту команду!",uk:"На цьому рівні не можна використовувати цю команду!",ko:"그 Git 명령어는 이 레벨에서 사용할 수 없습니다.",vi:"Ở cấp độ này thì lệnh git đó bị vô hiệu hóa."},"share-json":{__desc__:"when you have made the level, prompt to share this",en_US:"Here is the JSON for this level! Share it with someone or send it to me on Github",de_DE:"Hier ist das JSON für diesen Level! Teil es mit jemandem or schick es mir über Github",zh_CN:"这是一个关卡定义 JSON ！您可以分享它或者发到我的 Github 上",zh_TW:"這是本關的 JSON！您可以分享給別人，或是送到 Github 上給我",es_AR:"Este es el JSON de este nivel. Compartilo con quien quieras o mandámelo por Github",es_ES:"Este es el JSON de este nivel. Compártelo con quien quieras o mandámelo por Github.",pt_BR:"Aqui está o JSON para este nível! Compartilhe com alguém ou me envie pelo Github",gl:"Este é o JSON deste nivel. Comparteo con quen queiras ou mándao por Github",fr_FR:"Voici le JSON pour ce niveau ! Partagez-le avec quelqu'un ou envoyez-le moi sur Github",ru_RU:"Вот JSON для этого уровня! Поделись им с кем-нибудь или отправь его нам на GitHub",uk:"Ось JSON для цього рівня! Поділись з кимось чи відправ мені його на Github",ko:"이 레벨을 위한 JSON 데이터가 있습니다! 이를 다른 사람들과 공유하거나 Github에서 제게 보내보세요.",vi:"Đây là chuỗi JSON cho cấp độ này! Hãy chia sẻ với người khắc hoặc với tôi qua Github."},"want-start-dialog":{__desc__:"prompt to add a start dialog",en_US:"You have not specified a start dialog, would you like to add one?",de_DE:"Du hast noch keinen Einführungs-Dialog geschrieben, willst du einen hinzufügen?",zh_CN:"您还没有定义一开始的介绍，是否添加一个？",zh_TW:"尚未指定開始對話視窗，是否立即新增？",es_AR:"No especificaste un mensaje de inicio, ¿querés agregar uno?",es_ES:"No especificaste un mensaje de inicio, ¿quieres agregar uno?",pt_BR:"Você não especificou uma mensagem de início, quer colocar uma?",gl:"Non especificaches unha mensaxe de incio. ¿queres agregar un?",fr_FR:"Vous n'avez pas spécifié de dialogue de départ, voulez-vous en ajouter un ?",ru_RU:"Не указано стартово сообщение! Точно продолжаем?",uk:"Не вказано стартовий діалог, хочеш додати стартовий діалог?",ko:"당신은 시작 대화창을 지정하지 않았습니다. 추가 하시겠습니까?",vi:"Không có cửa sổ hội thoại được chỉ định, thêm một cái chứ?"},"want-hint":{__desc__:"prompt to add a hint",en_US:"You have not specified a hint, would you like to add one?",de_DE:"Du hast noch keinen Hinweis geschrieben, magst du einen hinzufügen?",zh_CN:"您还没有定义提示，是否添加一个？",zh_TW:"尚未指定提示，是否立即新增？",es_AR:"No especificaste ninguna pista, ¿querés agregar alguna?",es_ES:"No especificaste ninguna pista, ¿quieres agregar alguna?",pt_BR:"Você não especificou uma dica, quer colocar uma?",gl:"Ti non especificaches unha pista, ¿queres agregar algunha?",fr_FR:"Vous n'avez pas spécifié d'indice, voulez-vous en ajouter un ?",ru_RU:"Не указана подсказка для уровня! Пренебречь? Вальсируем?",uk:"Не вказана підказка, хочеш додати підказку?",ko:"당신은 힌트를 지정하지 않았습니다. 추가 하시겠습니까?",vi:"Bạn chưa chỉ định một gợi ý, thêm một cái chứ?"},"prompt-hint":{__desc__:"prompt for hint",en_US:"Enter the hint for this level, or leave this blank if you do not want to include one",de_DE:"Gib den Hinweis für diesen Level an, oder lass es leer wenn du keinen hinzufügen willst",zh_CN:"请输入关卡提示，如果没有请留空",zh_TW:"請輸入關卡提示，或者故意留空",es_AR:"Ingresá una pista para este nivel, o dejalo en blanco si no querés incluir ninguna",es_ES:"Ingresa una pista para este nivel, o déjalo en blanco si no quieres incluir ninguna.",pt_BR:"Colocque uma dica para este nível, ou deixe em branco se não quiser incluir",gl:"Ingresa unha pista para este nivel, ou déixao en branco se non a queres incluír.",fr_FR:"Entrez l'indice pour ce niveau, ou laissez-le vide pour ne pas l'inclure",ru_RU:"Введи подсказку для уровня, если хочешь.",uk:"Додай підказку для рівня, якщо хочеш",ko:"이 레벨을 위한 힌트를 입력하거나 만약 이를 포함시키고 싶지 않을 경우엔 비워두세요.",vi:"Thêm một gợi ý cho cấp độ này, hoặc cứ để trống nếu bạn không muốn thêm."},"prompt-name":{__desc__:"prompt for level name",en_US:"Enter the name for the level",de_DE:"Gib den Namen für diesen Level an",zh_CN:"请输入关卡名称",zh_TW:"請輸入關卡名稱",es_AR:"Ingresá el nombre del nivel",es_ES:"Ingresa el nombre del nivel.",pt_BR:"Coloque o nome do nível",gl:"Coloque o nome do nivel",fr_FR:"Entrez le nom pour ce niveau",ru_RU:"Введи название уровня",uk:"Введи назву рівня",ko:"레벨 이름을 입력하세요.",vi:"Nhập tên cho cấp độ này."},"solution-empty":{__desc__:"If you define a solution without any commands, aka a level that is solved without doing anything",en_US:"Your solution is empty!! Something is amiss",de_DE:"Deine Auflösung ist leer! Hier fehlt etwas",zh_CN:"你的解法是空的!! 可能是程序出错了",zh_TW:"您的解法是空的！這一定是哪裡出錯了",es_AR:"¡Tu solución está vacía! Algo hay que hacer",es_ES:"¡Tu solución está vacía! Algo hay que hacer.",pt_BR:"Sua solução está vazia! O aprendiz deveria ter que fazer alguma coisa",gl:"¡Su solución está vacía! Algo haberá que facer.",fr_FR:"Votre solution est vide !! Quelque chose ne tourne pas rond",ru_RU:"Решение не указано! Так не годится!",uk:"Розв’язок порожній!! Щось не так",ko:"해답이 비어있습니다. 무언가 잘못되었습니다.",vi:"Đáp án bị bỏ trống!! Có gì thiếu rồi."},"define-start-warning":{__desc__:"When you define the start point again, it overwrites the solution and goal so we add a warning",en_US:"Defining start point... solution and goal will be overwritten if they were defined earlier",de_DE:"Lege Start fest ... Auflösung und Ziel werden gelößcht, falls sie schon festgelegt worden waren",zh_CN:"定义开始点... 解决方法和目标会被新的替代",zh_TW:"正在定義起始點...先前定義的解法和目標會被覆蓋掉",es_AR:"Estableciendo el punto de inicio... La solución y el objetivo serán sobreescritos si ya habían sido definidos",es_ES:"Estableciendo el punto de inicio... La solución y el objetivo serán sobreescritos si ya habían sido definidos.",pt_BR:"Esbelecendo o ponto de início... a solução e o objetivo serão sobrescritos caso já existirem",gl:"Establecendo o punto de inicio... A solución e o obxectivo serán sobreescritos se xa foron definidos.",fr_FR:"Redéfinition du point de départ… la solution et la cible seront écrasés s'ils ont déjà été définis",ru_RU:"Устанавливаю стартовую точку... Решение и итоговое состояние будут стёрты, если они указаны ранее",uk:"Встановлюю стартову точку... розв’язок та ціль будуть переписані якщо вони були задані раніше",ko:"시작 지점을 정의하세요... 만약 그것이 먼저 정의된다면 해답과 목표가 덮어씌워질 것입니다.",vi:"Xác định điểm bắt đầu ... Các giải pháp và mục tiêu sẽ được thay thế nếu đã được chỉ định từ trước."},"help-vague-level":{__desc__:"When you are in a level and you say help, its vague and you need to specify",en_US:'You are in a level, so multiple forms of help are available. Please select either "help level" to learn more about this lesson, "help general" for using Learn GitBranching, or "objective" to learn about how to solve the level.',de_DE:'Du befindest dich in einem Level, daher gibt es verschiedene Hilfen. Gib "help level" ein um mehr úber diesen Level zu erfahren, "help general" um zu sehen wie Learn Git Branching bedient wird, oder "objective" um das Ziel dieses Levels zu erfahren.',zh_CN:'您正在关卡中，这里有多种形式的帮助，请选择 "help level" (关卡帮助)或 "help general" (一般帮助)',zh_TW:'您正在進行關卡中，這裡有多種不同型式的幫助，請選擇 "help level" 來了解這個關卡，或者是選擇 "help general" 來學習如何使用 Learn GitBranching，或者是選擇 "objective" 來學習如何解決這個關卡',es_AR:'Estás en un nivel, por lo que hay varios tipos de ayuda. Por favor elegí entre "help level" para aprender algo más sobre esta lección, "help general" para ayuda sobre el uso de Learn GitBranching, o "objective" para aprender a resolver este nivel.',es_ES:'Estás en un nivel, por lo que hay varios tipos de ayuda. Por favor elige "help level" para aprender más sobre esta lección, "help general" para ayuda sobre el uso de Learn GitBranching, o "objective" para aprender a resolver este nivel.',pt_BR:'Você está em um nível, então há vários tipos de ajuda. Selecione "help level" para aprender mais sobre esta lição, "help general" para aprender a usar o Learn GitBranching, ou "objective" ver como resolver o nível.',gl:'Estás nun nivel, entón hai varios tipos de axuda. Selecione "help level" para aprender máis sobre esta lección, "gelp general" para aprender a usar o Learn Git Branching, ou "objective" para ver como resolver o nivel.',fr_FR:'Vous êtes dans un niveau, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help level" pour en apprendre plus sur cette leçon, "help general" pour l\'utilisation de Learn GitBranching, ou "objective" pour apprendre comment résoudre le niveau',ru_RU:'При прохождении уровня доступны несколько видов помощи. Определить что нужно: "help level" чтобы получить информацию об этом уровне, "help general" для того, чтобы узнать о игре в целом или "objective" чтобы узнать что надо сделать в этом уровне.',uk:'При проходженні рівня доступні декілька різновидів допомоги. Виберіть або "help level" щоб взнати більше про цей рівень, чи "help general" щоб взнати більше про Learn Git Branching, чи "objective" щоб дізнатись більше про проходження цього рівня',ko:'당신은 한 레벨에 들어가 있고, 여러가지 도움 양식들을 사용할 수 있습니다. 레슨에 대해 더 알고싶을 땐 "help level", LearnGitBranching을 사용하고 싶을 땐 "help general", 또는 레벨을 어떻게 해결해야할지 알고싶을 땐 "objective"를 선택하세요.',vi:'Bạn đang ở trong một cấp độ, nên sẽ có nhiều hỗ trợ. Vui lòng dùng "help level" để biết thêm về bài học này, "help general" để sử dụng HọcNhánhGit, hoặc "objective" để biết cách giải quyết bài tập.'},"help-vague-builder":{__desc__:"When you are in a level builder, the help command is vague so you need to specify what you mean",en_US:'You are in a level builder, so multiple forms of help are available. Please select either "help general" or "help builder"',de_DE:'Du befindest dich im Level-Editor, daher gibt es verschiedene Hilfen. Gib bitte "help general" oder "help builder" ein',zh_CN:'您正在进行关卡构建中，这里有多种形式的帮助，请选择 "help general" (一般帮助)或 "help builder" (关卡构建帮助)',zh_TW:'您正在進行關卡構建中，這裡有多種不同型式的幫助，請選擇 "help general" （一般幫助）或 "help builder" （製造關卡的幫助）',es_AR:'Estás en el constructor de niveles, por lo que hay varios tipos de ayuda. Elegí entre "help general" para ayuda sobre Learn GitBranching y "help builder" para ayuda sobre el constructor de niveles',es_ES:'Estás en un constructor de niveles, por lo que hay varios tipos de ayuda. Elige "help general" para ayuda sobre Learn GitBranching o "help builder" para ayuda sobre el constructor de niveles',pt_BR:'Você está no construtor de nívels, então há vários tipos de ajuda. Selecione "help general" ou "help builder"',gl:'Estás no constructor de niveis, polo que hai varios tipos de axuda. Elixe "help general" ou "help builder"',fr_FR:'Vous êtes dans l\'éditeur de niveaux, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help general" soit "help builder"',ru_RU:'При создании уровней доступны несколько видов помощи. Выбери между "help general" и "help builder"',uk:'При створенні рівня доступні декілька різновидів допомоги. Виберіть або "help general", чи "help builder"',ko:'당신은 한 레벨 생성기에 들어가 있고, 여러가지 도움 양식들을 사용할 수 있습니다. "help general" 또는 "help builder"를 선택해주세요.',vi:'Bạn đang tạo một cấp độ, nên sẽ có nhiều trợ giúp có sẵn. Vui lòng chọn "help general" hoặc "help builder".'},"show-goal-button":{__desc__:"button label to show goal",en_US:"Show Goal",de_DE:"Ziel anzeigen",zh_TW:"顯示目標",zh_CN:"显示目标",fr_FR:"Afficher les cibles",pt_BR:"Mostrar objetivo",gl:"Amosar obxectivo",es_AR:"Mostrar objetivo",es_ES:"Mostrar objetivo",ja:"ゴールを表示",ru_RU:"Цель уровня",uk:"Ціль рівня",ko:"목표 보기",vi:"Hiển thị mục tiêu"},"hide-goal-button":{__desc__:"button label to hide goal",en_US:"Hide Goal",de_DE:"Ziel verstecken",fr_FR:"Cacher les cibles",zh_TW:"隱藏目標",zh_CN:"隐藏目标",pt_BR:"Ocultar objetivo",gl:"Ocultar obxectivo",es_AR:"Ocultar objetivo",es_ES:"Ocultar objetivo",ja:"ゴールを隠す",ru_RU:"Спрятать цель",uk:"Сховати ціль",ko:"목표 숨기기",vi:"Ẩn mục tiêu"},"objective-button":{__desc__:"button label to show objective",en_US:"Instructions",de_DE:"Ziel",zh_TW:"提示",zh_CN:"提示",es_ES:"Objetivo",gl:"Obxectivo",ru_RU:"Задача",uk:"Задача",ko:"목적",vi:"Chỉ dẫn"},"git-demonstration-title":{__desc__:"title of git demonstration window",en_US:"Git Demonstration",de_DE:"Git Demonstration",zh_TW:"Git示範",zh_CN:"Git示范",es_ES:"Demostración de Git",gl:"Demostración de Git",ru_RU:"Git демо",uk:"Git демо",ko:"Git 데모",vi:"Trình diễn Git"},"goal-to-reach":{__desc__:"title of window that shoes the goal tree to reach",en_US:"Goal To Reach",de_DE:"Ziel",zh_CN:"目标",zh_TW:"目標",es_AR:"Objetivo a cumplir",es_ES:"Objetivo a cumplir",pt_BR:"Objetivo a cumprir",gl:"Obxectivo a cumprir",fr_FR:"Cible à atteindre",ja:"到達目標",ru_RU:"Цель уровня",uk:"Ціль рівня",ko:"목표",vi:"Mục tiêu cần đạt"},"goal-only-master":{__desc__:"the helper message for the window that shows the goal tree when the goal will only be compared using the master branch",en_US:'<span class="fwber">Note:</span> Only the master branch will be checked in this level. The other branches are simply for reference (shown as dashed labels below). As always, you can hide this dialog with "hide goal"',fr_FR:'<span class="fwber">Note:</span> Dans ce niveau on ne doit faire de git checkout que sur la branche master. Les autres branches représentées ici (entourées d\'un cadre en tirets) doivent être utilisées uniquement comme références. Comme toujours, vous pouvez cacher cette fenêtre avec "Cacher les objectifs"',de_DE:'<span class="fwber">Hinweis:</span> In diesem Level wird nur der Branch master geprüft. Die anderen Branches dienen nur als Vergleichsbasis (als gestrichelte Bezeichner dargestellt). Wie immer kannst du diese Meldung mit "hide goal" ausblenden',es_AR:'<span class="fwber">Nota:</span> Sólo la rama master va a ser chequeada en este nivel. Las otras ramas sólo son para referencia. Como siempre, podés ocultar este mensaje con "hide goal"',es_ES:'<span class="fwber">Nota:</span> Sólo la rama master va a ser inspeccionado en este nivel. Las otras ramas sólo son para referencia (etiquetados abajo con guion). Siempre puedes ocultar este mensaje con "hide goal."',pt_BR:'<span class="fwber">Nota:</span> Apenas o ramo master será verificado neste nível. Os outros ramos (dentro das caixas clareadas) são somente para referência. Como sempre, você pode ocultar esta janela com "hide goal"',gl:'<span class="fwber">Nota:</span> Só a rama master será verificada neste nivel. As outras ramas (dentro das caixas clareadas) son soamente de referencia. Coma sempre, podes ocultar está ventá con "hide goal"',zh_CN:'<span class="fwber">注意:</span>本关卡中，只检查 master 分支，其他分支只是用作 reference 存在（以虚线标签表示）。照常，你可以用 “hide goal” 来隐藏此窗口。',zh_TW:'在這個關卡中，只有 master branch 會被檢查，別的 branch 只是用來做為 reference （下面用虛線符號表示）。一如往常，你可以利用 "hide goal" 來隱藏這個對話視窗',ja:'<span class="fwber">Note:</span> masterブランチだけをこのlevelではチェックします。その他のブランチ（以下では、破線で示されています）に関しては、参照のためにあります。また、いつでもこのウィンドウは"hide goal"と打つかクリックで閉じれます',ru_RU:'<span class="fwber">Важно:</span> В этом уровне проверяется только ветка master. Остальные ветки просто для наглядности. Как обычно, можно скрыть это сообщение при помощи "hide goal"',uk:'<span class="fwber">Важливо:</span> В цьому рівні буде перевірятися тільки гілка master. Решта гілок тільки для наглядності (показані пунктиром нижче). Як завжди, можна сховати цей діалог за допомогою "hide goal"',ko:'<span class="fwber">Note:</span> 이 레벨에선 오직 마스터 브랜치만이 검사될 것입니다.. 다른 브랜치들은 단순히 참고용입니다. (아래에 대시 라벨로 보여집니다.). "hide goal"을 사용하여 언제든지 창을 숨킬 수 있습니다.',vi:'<span class="fwber">Chú ý:</span> Ở cấp độ này chỉ nhánh master bị kiểm tra. Các nhánh khác chỉ dùng để tham chiếu(có dấu - ở nhãn). Như thường lệ, bạn có thể ẩn mục tiêu bằng "hide goal".'},"hide-goal":{__desc__:"the helper message for the window that shows the goal tree",en_US:'You can hide this window with "hide goal"',de_DE:'Du kannst diese Meldung mit "hide goal" ausblenden',zh_CN:'你可以通过 "hide goal" 命令关闭这个窗口',zh_TW:'你可以透過 "hide goal" 關閉這個視窗',es_AR:'Podés ocultar esta ventana con "hide goal"',es_ES:'Puedes ocultar esta ventana con "hide goal."',pt_BR:'Você pode ocultar esta janela com "hide goal"',gl:'Podes ocultar esta ventá con "hide goal"',fr_FR:'Vous pouvez masquer cette fenêtre avec "Cacher les cibles"',ja:'このウィンドウは"hide goal"と打つかクリックで閉じれます',ru_RU:'Можно скрыть это окно при помощи "hide goal"',uk:'Можна сховати це вікно за допомогою "hide goal"',ko:'"hide goal"을 사용하여 이 창을 숨길 수 있습니다.',vi:'Bạn có thể ẩn cửa sổ này với "hide goal".'},"hide-start":{__desc__:"The helper message for the window that shows the start tree for a level",en_US:'You can hide this window with "hide start"',de_DE:'Du kannst diese Meldung mit "hide start" ausblenden',zh_CN:'你可以通过 "hide start" 命令关闭这个窗口',zh_TW:'你可以透過 "hide start" 關閉這個視窗',es_AR:'Podés ocultar esta ventana con "hide start"',es_ES:'Puedes ocultar esta ventana con "hide start."',pt_BR:'Você pode ocultar esta janela com "hide start"',gl:'Podes ocultar esta ventá con "hide start"',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide start"',ja:'このウィンドウは"hide start"かクリックで閉じれます',ru_RU:'Можно скрыть это окно при помощи "hide start"',uk:'Можна сховати це вікно за допомогою "hide start"',ko:'"hide start"를 사용하여 이 창을 숨길 수 있습니다.',vi:'Bạn có thể ẩn cửa sổ này với "hide start".'},"level-builder":{__desc__:"The name for the environment where you build levels",en_US:"Level Builder",de_DE:"Level-Editor",zh_CN:"关卡生成器",zh_TW:"關卡產生器",es_AR:"Constructor de niveles",es_ES:"Constructor de niveles",pt_BR:"Construtor de níveis",gl:"Constructor de nivéis",fr_FR:"Éditeur de niveaux",ja:"Levelエディタ",ru_RU:"Редактор уровней",uk:"Редактор рівнів",ko:"레벨 생성기",vi:"Trình tạo câp độ"},"no-start-dialog":{__desc__:"when the user tries to open a start dialog for a level that does not have one",en_US:"There is no start dialog to show for this level!",de_DE:"Es gibt keinen Einführungs-Dialog für diesen Level!",zh_CN:"这个关卡没有介绍！",zh_TW:"這關沒有介紹!",es_AR:"¡No hay mensaje de inicio para este nivel!",es_ES:"¡No hay mensaje de inicio para este nivel!",pt_BR:"Não há mensagem de início para este nível!",gl:"¡Non hai mensaxe de inicio para este nivel!",fr_FR:"Il n'y a aucun dialogue de départ à afficher pour ce niveau !",ja:"このLevelにはスタートダイアログが存在しません",ru_RU:"Нет стартового сообщение для уровня!",uk:"Немає початкового діалогу для цього рівня!",ko:"이 레벨을 위한 시작 대화창이 없습니다.",vi:"Cấp độ này không được giới thiệu."},"no-hint":{__desc__:"when no hint is available for a level",en_US:"Hmm, there doesn't seem to be a hint for this level :-/",de_DE:"Hm, es gibt anscheinend keinen Hinweis für diesen Level :-/",zh_CN:"呃……，这关好像没有提示 :-/",zh_TW:"嗯‧‧‧這關沒有提示 :-/",es_AR:"Mmm... Pareciera no haber pistas para este nivel :-/",es_ES:"Mmm... Parece que no hay pistas para este nivel. :-/",pt_BR:"Hmm, não existe nenhuma pista para este nível :-/",gl:"Hmm, non existe ningunha pista para este nivel :-/",fr_FR:"Hum, il ne semble pas y avoir d'indice pour ce niveau :-/",ja:"あらら、このLevelでは、残念ながらヒントが存在しません :-/",ru_RU:"Милый мой, хороший, догадайся сам :-/ Подсказка не создана...",uk:"Хм, схоже для цього рівня немає підказки :-/",ko:"흠, 이 레벨을 위한 힌트가 없어보이는군요.",vi:"Hmmm, có vẻ cấp độ này không có gợi ý rồi. :-/"},"error-untranslated-key":{__desc__:"This error happens when we are trying to translate a specific key and the locale version is mission",en_US:"The translation for {key} does not exist yet :( Please hop on github and offer up a translation!",de_DE:"Die Übersetzung für {key} existiert noch nicht :( Falls du eine hast, bitte teil sie mit auf Github mit!",zh_CN:"还没翻译 {key} :( 请在 Github 上贡献您的翻译!",zh_TW:"還沒翻譯 {key} :( 請在 Github 上貢獻您的翻譯!",es_AR:"Aún no hay traducción para {key} :( ¡Metete en Github y sugerí una! :)",es_ES:"Aún no hay traducción para {key}. :( ¡Métete en Github y sugiere una! :)",pt_BR:"Não existe tradução para {key} :( Pule no Github e sugira uma! :)",gl:"Non existe tradución para {key} :( Axúdanos en Github e suxire unha! :)",fr_FR:"La traduction pour {key} n'existe pas encore :( Venez sur Github pour en offrir une !",ja:"{key}の翻訳がまだ存在しません :( GitHubでの、翻訳の協力をお願いします m(_)m",ru_RU:"Перевода для {key} не создано :( Пожалуйста, предложи перевод на GitHub",uk:"Немає перекладу для {key} :( Будь-ласка, запропонуй переклад на Github",ko:"{key}를 위한 번역은 아직 존재하지 않습니다 :( 번역에 참여해주세요!",vi:"Bản dịch cho {key} không có rồi :( Nếu có thể thì hãy lên dự án của chúng tôi ở Github để cung cấp bản dịch!"},"error-untranslated":{__desc__:"The general error when we encounter a dialog that is not translated",en_US:"This dialog or text is not yet translated in your locale :( Hop on github to aid in translation!",de_DE:"Dieser Dialog oder Text ist noch nicht in deine Sprache übersetzt. :( Schau auf Github vorbei um bei der Übersetzung zu helfen!",zh_CN:"这段对话还没有被翻译成您的语言 :( 欢迎在 Github 上贡献您的翻译!",zh_TW:"這段對話尚未翻成您的語言 :( 歡迎到 Github 貢獻翻譯！",es_AR:"Este mensaje o texto aún no fue traducido a tu idioma :( ¡Metete en Github y ayudanos a traducirlo!",es_ES:"Este mensaje o texto aún no fue traducido a tu idioma. :( ¡Métete en Github y ayúdanos a traducirlo!",pt_BR:"Esta mensagem ou texto não foi traduzida para Português :( Ajude-nos a traduzir no Github!",gl:"Esta mensaxe ou texto non foi traducida ó teu idioma :( Axúdanos a traducir a web en Github, é moi doado!",fr_FR:"Ce message n'a pas encore été traduit dans votre langue :( Venez sur Github aider à la traduction !",ja:"このダイアログ、またはテキストの翻訳がまだ存在しません :( GitHubでの、翻訳の協力をお願いします m(_)m",ru_RU:"Для этого сообщения нет перевода :( Пожалуйста, предложи перевод на GitHub",uk:"Для цього повідомлення ще немає перекладу :( Будь-ласка, запропонуй переклад на Github",ko:"이 대화창이나 텍스트는 아직 번역되지 않았습니다. :( 번역에 참여해주세요!",vi:"Hội thoại hoặc văn bản này chưa được dịch ra ngôn ngữ của bạn rồi. :( Hãy lên Github để cung cấp bản dịch!"}}},{}],63:[function(e,t,o){e("backbone");var n=e("q"),r=e("../util"),a=e("../app"),i=e("../intl"),s=e("../util/errors"),c=e("../visuals/visualization").Visualization,l=(e("../level/parseWaterfall").ParseWaterfall,e("../level").Level),u=e("../stores/LocaleStore"),m=e("../stores/LevelStore"),d=(e("../models/commandModel").Command,e("../git/gitShim").GitShim,e("../views/multiView").MultiView,e("../views").CanvasTerminalHolder),h=e("../views").ConfirmCancelTerminal,p=(e("../views").NextLevelConfirm,e("../views/builderViews").MarkdownPresenter),f=e("../views/builderViews").MultiViewBuilder,g=(e("../views/builderViews").MarkdownGrabber,{"define goal":/^define goal$/,"define name":/^define name$/,"help builder":/^help builder$/,"define start":/^define start$/,"edit dialog":/^edit dialog$/,"show start":/^show start$/,"hide start":/^hide start$/,"define hint":/^define hint$/,finish:/^finish$/}),b=r.genParseCommand(g,"processLevelBuilderCommand"),v=l.extend({initialize:function(t){(t=t||{}).level={},this.options=t;var o=u.getLocale();t.level.startDialog={},t.level.startDialog[o]={childViews:i.getDialog(e("../dialogs/levelBuilder"))},t.editLevel&&(m.getLevel(t.editLevel),t.level=void 0),v.__super__.initialize.apply(this,[t]),t.editLevel?(this.startDialogObj=(void 0).startDialog[o],this.definedGoal=!0):(this.startDialogObj=void 0,this.definedGoal=!1),delete this.treeCompare,delete this.solved},initName:function(){},initGoalData:function(){this.options.editLevel||(this.level.goalTreeString='{"branches":{"master":{"target":"C1","id":"master"},"makeLevel":{"target":"C2","id":"makeLevel"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"makeLevel","id":"HEAD"}}',this.level.solutionCommand="git checkout -b makeLevel; git commit"),v.__super__.initGoalData.apply(this,arguments)},minimizeGoal:function(e,t){this.doBothVis("hide"),this.goalWindowPos=e,this.goalWindowSize=t,$("#goalPlaceholder").is(":visible")&&($("#goalPlaceholder").hide(),this.mainVis.myResize())},doBothVis:function(e){this.startVis&&this.startVis[e].call(this.startVis),this.goalVis&&this.goalVis[e].call(this.goalVis)},resizeGoal:function(){this.doBothVis("myResize")},initStartVisualization:function(){return this.startCanvasHolder=new d({parent:this,additionalClass:"startTree",text:i.str("hide-start")}),this.startVis=new c({el:this.startCanvasHolder.getCanvasLocation(),containerElement:this.startCanvasHolder.getCanvasLocation(),treeString:this.level.startTree,noKeyboardInput:!0,smallCanvas:!0,noClick:!0}),this.startCanvasHolder},startOffCommand:function(){a.getEventBaton().trigger("commandSubmitted","echo :D")},objectiveDialog:function(e,t){var o=[e,t,void 0===this.startDialogObj?null:{startDialog:{en_US:this.startDialogObj}}];v.__super__.objectiveDialog.apply(this,o)},initParseWaterfall:function(e){v.__super__.initParseWaterfall.apply(this,[e]),this.parseWaterfall.addFirst("parseWaterfall",b),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands())},buildLevel:function(e,t){this.exitLevel(),setTimeout((function(){a.getSandbox().buildLevel(e,t)}),1.5*this.getAnimationTime())},getInstantCommands:function(){return[[/^help$|^\?$/,function(){throw new s.CommandResult({msg:i.str("help-vague-builder")})}]]},takeControl:function(){a.getEventBaton().stealBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),v.__super__.takeControl.apply(this)},releaseControl:function(){a.getEventBaton().releaseBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),v.__super__.releaseControl.apply(this)},showGoal:function(){this.hideStart(),v.__super__.showGoal.apply(this,arguments)},showStart:function(e,t){this.hideGoal(),this.showSideVis(e,t,this.startCanvasHolder,this.initStartVisualization)},resetSolution:function(){this.gitCommandsIssued=[],this.level.solutionCommand=void 0},hideStart:function(e,t){this.hideSideVis(e,t,this.startCanvasHolder)},defineStart:function(e,t){this.hideStart(),e.addWarning(i.str("define-start-warning")),this.resetSolution(),this.level.startTree=this.mainVis.gitEngine.printTree(),this.mainVis.resetFromThisTreeNow(this.level.startTree),this.showStart(e,t)},defineGoal:function(e,t){if(this.hideGoal(),!this.gitCommandsIssued.length)return e.set("error",new s.GitError({msg:i.str("solution-empty")})),void t.resolve();this.definedGoal=!0,this.level.solutionCommand=this.gitCommandsIssued.join(";"),this.level.goalTreeString=this.mainVis.gitEngine.printTree(),this.initGoalVisualization(),this.showGoal(e,t)},defineName:function(e,t){this.level.name={en_US:prompt(i.str("prompt-name"))},e&&e.finishWith(t)},defineHint:function(e,t){this.level.hint={en_US:prompt(i.str("prompt-hint"))},e&&e.finishWith(t)},editDialog:function(e,t){var o=n.defer();this.currentBuilder=new f({multiViewJSON:this.startDialogObj,deferred:o}),o.promise.then(function(e){this.startDialogObj=e}.bind(this)).fail((function(){})).done((function(){e?e.finishWith(t):t.resolve()}))},finish:function(e,t){if(!(this.options.editLevel||this.gitCommandsIssued.length&&this.definedGoal))return e.set("error",new s.GitError({msg:i.str("solution-empty")})),void t.resolve();for(;!this.level.name;)this.defineName();var o=n.defer(),r=o.promise;if(void 0===this.level.hint){var a=n.defer();r=r.then((function(){return a.promise})),new h({markdowns:[i.str("want-hint")]}).getPromise().then(this.defineHint.bind(this)).fail(function(){this.level.hint={en_US:""}}.bind(this)).done((function(){a.resolve()}))}if(void 0===this.startDialogObj){var c=n.defer();r=r.then((function(){return c.promise})),new h({markdowns:[i.str("want-start-dialog")]}).getPromise().then(function(){var e=n.defer();return this.editDialog(void 0,e),e.promise}.bind(this)).fail((function(){})).done((function(){c.resolve()}))}r=r.done(function(){new p({fillerText:JSON.stringify(this.getExportObj(),null,2),previewText:i.str("share-json")}),e.finishWith(t)}.bind(this)),o.resolve()},getExportObj:function(){var e=Object.assign({},this.level);return delete e.startDialog,this.startDialogObj&&(e.startDialog={en_US:this.startDialogObj}),e},processLevelBuilderCommand:function(e,t){var o={"define goal":this.defineGoal,"define start":this.defineStart,"show start":this.showStart,"hide start":this.hideStart,finish:this.finish,"define hint":this.defineHint,"define name":this.defineName,"edit dialog":this.editDialog,"help builder":v.__super__.startDialog};if(!o[e.get("method")])throw new Error("woah we don't support that method yet");o[e.get("method")].apply(this,arguments)},afterCommandDefer:function(e,t){e.resolve()},die:function(){this.hideStart(),v.__super__.die.apply(this,arguments),delete this.startVis,delete this.startCanvasHolder}});o.LevelBuilder=v,o.regexMap=g},{"../app":46,"../dialogs/levelBuilder":50,"../git/gitShim":55,"../intl":61,"../level":65,"../level/parseWaterfall":66,"../models/commandModel":70,"../stores/LevelStore":82,"../stores/LocaleStore":83,"../util":90,"../util/errors":87,"../views":100,"../views/builderViews":97,"../views/multiView":102,"../visuals/visualization":113,backbone:1,q:21}],64:[function(e,t,o){var n=e("../intl"),r=e("../commands"),a=e("../util/errors").GitError;function i(e){e=e||{},this.disabledMap=e.disabledMap||{"git cherry-pick":!0,"git rebase":!0}}i.prototype.getInstantCommands=function(){var e=[],t=function(){throw new a({msg:n.str("command-disabled")})};return Object.keys(this.disabledMap).forEach(function(o){o=o.slice("git".length+1);var n=r.commands.getRegexMap().git[o];if(!n)throw new Error("wuttttt this disbaled command"+o+" has no regex matching");e.push([n,t])}.bind(this)),e},o.DisabledMap=i},{"../commands":47,"../intl":61,"../util/errors":87}],65:[function(e,t,o){var n=e("q"),r=e("react"),a=e("react-dom"),i=e("../util"),s=e("../app"),c=e("../intl"),l=e("../log"),u=e("../util/errors"),m=e("../sandbox/").Sandbox,d=e("../actions/GlobalStateActions"),h=e("../stores/GlobalStateStore"),p=e("../actions/LevelActions"),f=e("../stores/LevelStore"),g=e("../visuals/visualization").Visualization,b=e("../level/disabledMap").DisabledMap,v=e("../git/gitShim").GitShim,y=e("../commands"),w=e("../views/multiView").MultiView,k=e("../views").CanvasTerminalHolder,C=e("../views").ConfirmCancelTerminal,A=e("../views").NextLevelConfirm,x=e("../react_views/LevelToolbarView.jsx"),E=e("../graph/treeCompare"),_={"help level":/^help level$/,"start dialog":/^start dialog$/,"show goal":/^(show goal|goal|help goal)$/,"hide goal":/^hide goal$/,"show solution":/^show solution($|\s)/,objective:/^(objective|assignment)$/},M=i.genParseCommand(_,"processLevelCommand"),D=m.extend({initialize:function(e){(e=e||{}).level=e.level||{},this.level=e.level,this.gitCommandsIssued=[],this.solved=!1,this.wasResetAfterSolved=!1,this.initGoalData(e),this.initName(e),this.on("minimizeCanvas",this.minimizeGoal),this.on("resizeCanvas",this.resizeGoal),this.isGoalExpanded=!1,D.__super__.initialize.apply(this,[e]),this.startOffCommand(),this.handleOpen(e.deferred)},getIsGoalExpanded:function(){return this.isGoalExpanded},handleOpen:function(e){e=e||n.defer(),!this.level.startDialog||this.testOption("noIntroDialog")?setTimeout((function(){e.resolve()}),1.2*this.getAnimationTime()):new w(Object.assign({},c.getStartDialog(this.level),{deferred:e}))},objectiveDialog:function(e,t,o){if(!(o=void 0===o?this.level:o)||!o.startDialog)return e.set("error",new u.GitError({msg:c.str("no-start-dialog")})),void t.resolve();var n=$.extend({},c.getStartDialog(o));n.childViews=n.childViews.slice(-1),new w(Object.assign(n,{deferred:t})),t.promise.then((function(){e.set("status","finished")}))},startDialog:function(e,t){if(!this.level.startDialog)return e.set("error",new u.GitError({msg:c.str("no-start-dialog")})),void t.resolve();this.handleOpen(t),t.promise.then((function(){e.set("status","finished")}))},getEnglishName:function(){return this.level.name.en_US},initName:function(){var e=c.getName(this.level);this.levelToolbar=r.createElement(x,{name:e,onGoalClick:this.toggleGoal.bind(this),onObjectiveClick:this.toggleObjective.bind(this),parent:this}),a.render(this.levelToolbar,document.getElementById("levelToolbarMount"))},initGoalData:function(e){if(!this.level.goalTreeString||!this.level.solutionCommand)throw new Error("need goal tree and solution")},takeControl:function(){s.getEventBaton().stealBaton("processLevelCommand",this.processLevelCommand,this),D.__super__.takeControl.apply(this)},releaseControl:function(){s.getEventBaton().releaseBaton("processLevelCommand",this.processLevelCommand,this),D.__super__.releaseControl.apply(this)},startOffCommand:function(){var e=this.options.command.get("method");this.testOption("noStartCommand")||"importLevelNow"===e||s.getEventBaton().trigger("commandSubmitted","hint; delay 2000; show goal")},initVisualization:function(e){this.mainVis=new g({el:e.el||this.getDefaultVisEl(),treeString:e.level.startTree})},initGoalVisualization:function(){var e=E.onlyMasterCompared(this.level);return this.goalCanvasHolder=new k({text:e?c.str("goal-only-master"):void 0,parent:this}),this.goalVis=new g({el:this.goalCanvasHolder.getCanvasLocation(),containerElement:this.goalCanvasHolder.getCanvasLocation(),treeString:this.level.goalTreeString,noKeyboardInput:!0,smallCanvas:!0,isGoalVis:!0,levelBlob:this.level,noClick:!0}),this.goalVis.customEvents.on("drag",function(e,t){t.position.left>.5*$(window).width()?$("#goalPlaceholder").is(":visible")||($("#goalPlaceholder").show(),this.mainVis.myResize()):$("#goalPlaceholder").is(":visible")&&($("#goalPlaceholder").hide(),this.mainVis.myResize())}.bind(this)),this.goalCanvasHolder},minimizeGoal:function(e,t){this.isGoalExpanded=!1,this.trigger("goalToggled"),this.goalVis.hide(),this.goalWindowPos=e,this.goalWindowSize=t,$("#goalPlaceholder").is(":visible")&&($("#goalPlaceholder").hide(),this.mainVis.myResize())},resizeGoal:function(){this.goalVis&&this.goalVis.myResize()},showSolution:function(t,o){var r=this.level.solutionCommand,a=function(){this.isShowingSolution=!0,s.getEventBaton().trigger("commandSubmitted",r),l.showLevelSolution(this.getEnglishName())}.bind(this),i=t.get("rawStr");if(this.testOptionOnString(i,"noReset")||(r="reset --forSolution; "+r),this.testOptionOnString(i,"force"))return a(),void t.finishWith(o);var u=n.defer(),m=c.getDialog(e("../dialogs/confirmShowSolution"))[0],d=new C({markdowns:m.options.markdowns,deferred:u});u.promise.then(a).fail((function(){t.setResult("")})).done((function(){setTimeout((function(){t.finishWith(o)}),d.getAnimationTime())}))},toggleObjective:function(){s.getEventBaton().trigger("commandSubmitted","objective")},toggleGoal:function(){this.goalCanvasHolder&&this.goalCanvasHolder.inDom?this.hideGoal():this.showGoal()},showGoal:function(e,t){this.isGoalExpanded=!0,this.trigger("goalToggled"),this.showSideVis(e,t,this.goalCanvasHolder,this.initGoalVisualization),$(this.goalVis.el).offset().left>.5*$(window).width()&&($("#goalPlaceholder").show(),this.mainVis.myResize())},showSideVis:function(e,t,o,n){o&&o.inDom||(o=n.apply(this)),o.restore(this.goalWindowPos,this.goalWindowSize),setTimeout((function(){e&&e.finishWith(t)}),o.getAnimationTime())},hideGoal:function(e,t){this.isGoalExpanded=!1,this.trigger("goalToggled"),this.hideSideVis(e,t,this.goalCanvasHolder)},hideSideVis:function(e,t,o,n){var r=function(){e&&e.finishWith(t)};o&&o.inDom?(o.die(),setTimeout(r,o.getAnimationTime())):r()},initParseWaterfall:function(e){D.__super__.initParseWaterfall.apply(this,[e]),this.parseWaterfall.addFirst("parseWaterfall",M),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands()),e.level.disabledMap&&this.parseWaterfall.addFirst("instantWaterfall",new b({disabledMap:e.level.disabledMap}).getInstantCommands())},initGitShim:function(e){this.gitShim=new v({beforeCB:this.beforeCommandCB.bind(this),afterCB:this.afterCommandCB.bind(this),afterDeferHandler:this.afterCommandDefer.bind(this)})},undo:function(){this.gitCommandsIssued.pop(),D.__super__.undo.apply(this,arguments)},beforeCommandCB:function(e){this._treeBeforeCommand=this.mainVis.gitEngine.printTree()},afterCommandCB:function(e){this.doesCommandCountTowardsTotal(e)&&(this.gitCommandsIssued.push(e.get("rawStr")),this.undoStack.push(this._treeBeforeCommand))},doesCommandCountTowardsTotal:function(e){if(e.get("error"))return!1;var t=!1,o=y.commands.getCommandsThatCount();return Object.values(o).forEach((function(o){Object.values(o).forEach((function(o){t=t||o.test(e.get("rawStr"))}))})),t},afterCommandDefer:function(e,t){if(this.solved)return t.addWarning(c.str("already-solved")),void e.resolve();var o=this.mainVis.gitEngine.printTree();E.dispatchFromLevel(this.level,o)?this.levelSolved(e):e.resolve()},getNumSolutionCommands:function(){return this.level.solutionCommand.replace(/^;|;$/g,"").split(";").length},testOption:function(e){return this.options.command&&new RegExp("--"+e).test(this.options.command.get("rawStr"))},testOptionOnString:function(e,t){return e&&new RegExp("--"+t).test(e)},levelSolved:function(e){this.solved=!0,this.isShowingSolution||(p.setLevelSolved(this.level.id),l.levelSolved(this.getEnglishName())),this.hideGoal();var t=f.getNextLevel(this.level.id),o=this.gitCommandsIssued.length,r=this.getNumSolutionCommands(),a=this.testOption("noFinishDialog")||this.wasResetAfterSolved,i=this.wasResetAfterSolved;i||d.levelSolved();var c=1;switch(h.getNumLevelsSolved()){case 2:c=1.5;break;case 3:c=1.8;break;case 4:c=2.1;break;case 5:c=2.4}h.getNumLevelsSolved()>5&&(c=2.5);var u=null;if(i){var m=n.defer();m.resolve(),u=m.promise,s.getEventBaton().trigger("commandSubmitted","echo \"level solved! type in 'levels' to access the next level\"")}else d.changeIsAnimating(!0),u=this.mainVis.gitVisuals.finishAnimation(c),this.mainVis.originVis&&(u=u.then(this.mainVis.originVis.gitVisuals.finishAnimation(c)));a||(u=u.then((function(){return new A({nextLevel:t,numCommands:o,best:r}).getPromise()}))),u.then((function(){!a&&t&&(l.choseNextLevel(t.id),s.getEventBaton().trigger("commandSubmitted","level "+t.id))})).fail((function(){})).done((function(){d.changeIsAnimating(!1),e.resolve()}))},die:function(){a.unmountComponentAtNode(document.getElementById("levelToolbarMount")),this.hideGoal(),this.mainVis.die(),this.releaseControl(),this.clear(),delete this.commandCollection,delete this.mainVis,delete this.goalVis,delete this.goalCanvasHolder},getInstantCommands:function(){var e=function(){var e=c.getHint(this.level);return e&&e.length?e:c.str("no-hint")}.bind(this);return[[/^help$|^\?$/,function(){throw new u.CommandResult({msg:c.str("help-vague-level")})}],[/^hint$/,function(){throw new u.CommandResult({msg:e()})}]]},reset:function(e,t){this.gitCommandsIssued=[];var o=e?e.get("rawStr"):"";this.testOptionOnString(o,"forSolution")||(this.isShowingSolution=!1),this.solved&&(this.wasResetAfterSolved=!0),this.solved=!1,D.__super__.reset.apply(this,arguments)},buildLevel:function(e,t){this.exitLevel(),setTimeout((function(){s.getSandbox().buildLevel(e,t)}),1.5*this.getAnimationTime())},importLevel:function(e,t){this.exitLevel(),setTimeout((function(){s.getSandbox().importLevel(e,t)}),1.5*this.getAnimationTime())},startLevel:function(e,t){this.exitLevel(),setTimeout((function(){s.getSandbox().startLevel(e,t)}),1.5*this.getAnimationTime())},exitLevel:function(e,t){this.die(),e&&t&&(setTimeout((function(){e.finishWith(t)}),this.getAnimationTime()),s.getEventBaton().trigger("levelExited"))},processLevelCommand:function(e,t){var o={"show goal":this.showGoal,"hide goal":this.hideGoal,"show solution":this.showSolution,"start dialog":this.startDialog,"help level":this.startDialog,objective:this.objectiveDialog}[e.get("method")];if(!o)throw new Error("woah we don't support that method yet",o);o.apply(this,[e,t])}});o.Level=D,o.regexMap=_},{"../actions/GlobalStateActions":43,"../actions/LevelActions":44,"../app":46,"../commands":47,"../dialogs/confirmShowSolution":49,"../git/gitShim":55,"../graph/treeCompare":59,"../intl":61,"../level/disabledMap":64,"../log":67,"../react_views/LevelToolbarView.jsx":76,"../sandbox/":79,"../stores/GlobalStateStore":81,"../stores/LevelStore":82,"../util":90,"../util/errors":87,"../views":100,"../views/multiView":102,"../visuals/visualization":113,q:21,react:30,"react-dom":24}],66:[function(e,t,o){var n=e("../git/commands"),r=e("../commands"),a=e("../sandbox/commands"),i=function(e){e=e||{},this.options=e,this.shortcutWaterfall=e.shortcutWaterfall||[r.commands.getShortcutMap()],this.instantWaterfall=e.instantWaterfall||[n.instantCommands,a.instantCommands]};i.prototype.initParseWaterfall=function(){e("../util").isBrowser()?this.parseWaterfall=this.options.parseWaterfall||[r.parse,a.parse,a.getOptimisticLevelParse(),a.getOptimisticLevelBuilderParse()]:this.parseWaterfall=[r.parse]},i.prototype.clone=function(){return new i({shortcutWaterfall:this.shortcutWaterfall.slice(),instantWaterfall:this.instantWaterfall.slice(),parseWaterfall:this.parseWaterfall.slice()})},i.prototype.getWaterfallMap=function(){return this.parseWaterfall||this.initParseWaterfall(),{shortcutWaterfall:this.shortcutWaterfall,instantWaterfall:this.instantWaterfall,parseWaterfall:this.parseWaterfall}},i.prototype.addFirst=function(e,t){if(!e||!t)throw new Error("need to know which!!!");this.getWaterfallMap()[e].unshift(t)},i.prototype.addLast=function(e,t){this.getWaterfallMap()[e].push(t)},i.prototype.expandAllShortcuts=function(e){return this.shortcutWaterfall.forEach((function(t){e=this.expandShortcut(e,t)}),this),e},i.prototype.expandShortcut=function(e,t){return Object.keys(t).forEach((function(o){var n=t[o];Object.keys(n).forEach((function(t){var r=n[t].exec(e);r&&(e=o+" "+t+" "+e.slice(r[0].length))}))})),e},i.prototype.processAllInstants=function(e){this.instantWaterfall.forEach((function(t){this.processInstant(e,t)}),this)},i.prototype.processInstant=function(e,t){t.forEach((function(t){var o=t[0].exec(e);o&&t[1](o)}))},i.prototype.parseAll=function(e){this.parseWaterfall||this.initParseWaterfall();var t=!1;return this.parseWaterfall.forEach((function(o){var n=o(e);n&&(t=n)}),this),t},o.ParseWaterfall=i},{"../commands":47,"../git/commands":54,"../sandbox/commands":78,"../util":90}],67:[function(e,t,o){var n=function(e,t,o){window._gaq=window._gaq||[],window._gaq.push(["_trackEvent",e,t,o])};o.viewInteracted=function(e){n("views","interacted",e)},o.showLevelSolution=function(e){n("levels","showedLevelSolution",e)},o.choseNextLevel=function(e){n("levels","nextLevelChosen",e)},o.levelSelected=function(e){n("levels","levelSelected",e)},o.levelSolved=function(e){n("levels","levelSolved",e)},o.commandEntered=function(e){n("commands","commandEntered",e)}},{}],68:[function(e,t,o){var n=e("../intl"),r=(e("../git/commands"),e("../util/errors")),a=(r.CommandProcessError,r.GitError),i=(r.Warning,r.CommandResult,{commit:{regex:/^hg +(commit|ci)($|\s)/,options:["--amend","-A","-m"],delegate:function(e,t){return t.getOptionsMap()["-A"]&&t.addWarning(n.str("hg-a-option")),{vcs:"git",name:"commit"}}},status:{regex:/^hg +(status|st) *$/,dontCountForGolf:!0,execute:function(e,t){throw new a({msg:n.str("hg-error-no-status")})}},export:{regex:/^hg +export($|\s)/,dontCountForGolf:!0,delegate:function(e,t){return t.mapDotToHead(),{vcs:"git",name:"show"}}},graft:{regex:/^hg +graft($|\s)/,options:["-r"],delegate:function(e,t){return t.acceptNoGeneralArgs(),t.prependOptionR(),{vcs:"git",name:"cherrypick"}}},log:{regex:/^hg +log($|\s)/,options:["-f"],dontCountForGolf:!0,delegate:function(e,t){var o=t.getOptionsMap();if(t.acceptNoGeneralArgs(),!o["-f"])throw new a({msg:n.str("hg-error-log-no-follow")});return t.mapDotToHead(),{vcs:"git",name:"log"}}},bookmark:{regex:/^hg (bookmarks|bookmark|book)($|\s)/,options:["-r","-f","-d"],delegate:function(e,t){var o,r,i=t.getOptionsMap(),s=t.getGeneralArgs(),c={vcs:"git"};if(i["-m"]&&i["-d"])throw new a({msg:n.todo("-m and -d are incompatible")});if(i["-d"]&&i["-r"])throw new a({msg:n.todo("-r is incompatible with -d")});if(i["-m"]&&i["-r"])throw new a({msg:n.todo("-r is incompatible with -m")});return s.length+(i["-r"]?i["-r"].length:0)+(i["-d"]?i["-d"].length:0)===0?(c.name="branch",c):(i["-d"]?(i["-D"]=i["-d"],delete i["-d"],c.name="branch"):i["-r"]?(o=(s=t.getGeneralArgs())[0],r=i["-r"][0],c.name="branch",t.setGeneralArgs([o,r])):s.length>0?(t.setOptionsMap({"-b":[s[0]]}),c.name="checkout",t.setGeneralArgs([])):c.name="branch",c)}},rebase:{regex:/^hg +rebase($|\s+)/,options:["-d","-s","-b"],execute:function(e,t){var o=function(){throw new a({msg:n.str("git-error-options")})},r=t.getOptionsMap();if(r["-d"]&&r["-s"]||!r["-d"]&&r["-s"],r["-b"]||(r["-b"]=["."]),t.setOptionsMap(r),t.mapDotToHead(),(r=t.getOptionsMap())["-d"]){var i=r["-d"][0]||o(),s=r["-b"][0];e.hgRebase(i,s)}else o()}},update:{regex:/^hg +(update|up)($|\s+)/,options:["-r"],delegate:function(e,t){return t.appendOptionR(),{vcs:"git",name:"checkout"}}},backout:{regex:/^hg +backout($|\s+)/,options:["-r"],delegate:function(e,t){return t.prependOptionR(),{vcs:"git",name:"revert"}}},histedit:{regex:/^hg +histedit($|\s+)/,delegate:function(e,t){var o=t.getGeneralArgs();return t.validateArgBounds(o,1,1),t.setOptionsMap({"-i":o}),t.setGeneralArgs([]),{vcs:"git",name:"rebase"}}},pull:{regex:/^hg +pull($|\s+)/,delegate:function(e,t){return{vcs:"git",name:"pull"}}},summary:{regex:/^hg +(summary|sum) *$/,delegate:function(e,t){return{vcs:"git",name:"branch"}}}});o.commandConfig=i},{"../git/commands":54,"../intl":61,"../util/errors":87}],69:[function(e,t,o){var n=e("q"),r=e("backbone"),a=e("../git").Commit,i=e("../git").Branch,s=e("../git").Tag,c=e("../models/commandModel").Command,l=e("../util/constants").TIME,u=r.Collection.extend({model:a}),m=r.Collection.extend({model:c}),d=r.Collection.extend({model:i}),h=r.Collection.extend({model:s}),p=r.Model.extend({defaults:{collection:null},initialize:function(e){e.collection.bind("add",this.addCommand,this),this.buffer=[],this.timeout=null},addCommand:function(e){this.buffer.push(e),this.touchBuffer()},touchBuffer:function(){this.timeout||this.setTimeout()},setTimeout:function(){this.timeout=setTimeout(function(){this.sipFromBuffer()}.bind(this),l.betweenCommandsDelay)},popAndProcess:function(){for(var e=this.buffer.shift(0);e.get("error")&&this.buffer.length;)e=this.buffer.shift(0);e.get("error")?this.clear():this.processCommand(e)},processCommand:function(t){t.set("status","processing");var o=n.defer();o.promise.then(function(){this.setTimeout()}.bind(this));var r=t.get("eventName");if(!r)throw new Error("I need an event to trigger when this guy is parsed and ready");var a=e("../app");if(!a.getEventBaton().getNumListeners(r)){var i=e("../util/errors");return t.set("error",new i.GitError({msg:"That command is valid, but not supported in this current environment! Try entering a level or level builder to use that command"})),void o.resolve()}a.getEventBaton().trigger(r,t,o)},clear:function(){clearTimeout(this.timeout),this.timeout=null},sipFromBuffer:function(){this.buffer.length?this.popAndProcess():this.clear()}});o.CommitCollection=u,o.CommandCollection=m,o.BranchCollection=d,o.TagCollection=h,o.CommandBuffer=p},{"../app":46,"../git":57,"../models/commandModel":70,"../util/constants":84,"../util/errors":87,backbone:1,q:21}],70:[function(e,t,o){var n=e("backbone"),r=e("../util/errors"),a=e("../level/parseWaterfall").ParseWaterfall,i=e("../intl"),s=r.CommandProcessError,c=r.GitError,l=r.Warning,u=r.CommandResult,m=n.Model.extend({defaults:{status:"inqueue",rawStr:null,result:"",createTime:null,error:null,warnings:null,parseWaterfall:new a,generalArgs:null,supportedMap:null,options:null,method:null},initialize:function(){this.initDefaults(),this.validateAtInit(),this.on("change:error",this.errorChanged,this),this.get("error")&&this.errorChanged(),this.parseOrCatch()},initDefaults:function(){this.set("generalArgs",[]),this.set("supportedMap",{}),this.set("warnings",[])},replaceDotWithHead:function(e){return e.replace(/\./g,"HEAD")},appendOptionR:function(){var e=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(this.getGeneralArgs().concat(e))},prependOptionR:function(){var e=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(e.concat(this.getGeneralArgs()))},mapDotToHead:function(){var e=this.getGeneralArgs(),t=this.getOptionsMap();e=e.map((function(e){return this.replaceDotWithHead(e)}),this);var o={};Object.keys(t).forEach((function(e){var n=t[e];o[e]=Object.values(n).map((function(e){return this.replaceDotWithHead(e)}),this)}),this),this.setGeneralArgs(e),this.setOptionsMap(o)},deleteOptions:function(e){var t=this.getOptionsMap();e.forEach((function(e){delete t[e]}),this),this.setOptionsMap(t)},getGeneralArgs:function(){return this.get("generalArgs")},setGeneralArgs:function(e){this.set("generalArgs",e)},setOptionsMap:function(e){this.set("supportedMap",e)},getOptionsMap:function(){return this.get("supportedMap")},acceptNoGeneralArgs:function(){if(this.getGeneralArgs().length)throw new c({msg:i.str("git-error-no-general-args")})},oneArgImpliedHead:function(e,t){this.validateArgBounds(e,0,1,t),this.impliedHead(e,0)},twoArgsImpliedHead:function(e,t){this.validateArgBounds(e,1,2,t),this.impliedHead(e,1)},oneArgImpliedOrigin:function(e){this.validateArgBounds(e,0,1),e.length||e.unshift("origin")},twoArgsForOrigin:function(e){this.validateArgBounds(e,0,2)},impliedHead:function(e,t){e.length==t&&e.push("HEAD")},validateArgBounds:function(e,t,o,n){var r=void 0===n?"git "+this.get("method"):this.get("method")+" "+n+" ";if(r="with "+r,e.length<t)throw new c({msg:i.str("git-error-args-few",{lower:String(t),what:r})});if(e.length>o)throw new c({msg:i.str("git-error-args-many",{upper:String(o),what:r})})},validateAtInit:function(){if(null===this.get("rawStr"))throw new Error("Give me a string!");this.get("createTime")||this.set("createTime",(new Date).toString())},setResult:function(e){this.set("result",e)},finishWith:function(e){this.set("status","finished"),e.resolve()},addWarning:function(e){this.get("warnings").push(e),this.set("numWarnings",this.get("numWarnings")?this.get("numWarnings")+1:1)},parseOrCatch:function(){this.expandShortcuts(this.get("rawStr"));try{this.processInstants()}catch(e){return r.filterError(e),void this.set("error",e)}this.parseAll()||this.set("error",new s({msg:'The command "'+this.get("rawStr")+"\" isn't supported, sorry!"}))},errorChanged:function(){var e=this.get("error");e&&(e instanceof s||e instanceof c?this.set("status","error"):e instanceof u?this.set("status","finished"):e instanceof l&&this.set("status","warning"),this.formatError())},formatError:function(){this.set("result",this.get("error").getMsg())},expandShortcuts:function(e){e=this.get("parseWaterfall").expandAllShortcuts(e),this.set("rawStr",e)},processInstants:function(){var e=this.get("rawStr");if(!e.length)throw new u({msg:""});this.get("parseWaterfall").processAllInstants(e)},parseAll:function(){var e=this.get("rawStr"),t=this.get("parseWaterfall").parseAll(e);return!!t&&(Object.keys(t.toSet).forEach((function(e){var o=t.toSet[e];this.set(e,o)}),this),!0)}});o.Command=m},{"../intl":61,"../level/parseWaterfall":66,"../util/errors":87,backbone:1}],71:[function(e,t,o){var n=e("react"),r=e("prop-types"),a=e("../react_views/CommandView.jsx"),i=e("../app"),s=["add","reset","change","all"];class c extends n.Component{componentDidMount(){for(var e=0;e<s.length;e++)this.props.commandCollection.on(s[e],this.updateFromCollection,this);this.props.commandCollection.on("change",this.scrollDown,this),i.getEvents().on("commandScrollDown",this.scrollDown,this),i.getEvents().on("clearOldCommands",()=>this.clearOldCommands(),this)}componentWillUnmount(){for(var e=0;e<s.length;e++)this.props.commandCollection.off(s[e],this.updateFromCollection,this)}updateFromCollection(){this.forceUpdate()}render(){var e=[];return this.props.commandCollection.each((function(t,o){e.push(n.createElement(a,{id:"command_"+o,command:t,key:t.cid}))}),this),n.createElement("div",null,e)}scrollDown(){var e=document.getElementById("commandDisplay"),t=document.getElementById("terminal"),o=e.clientHeight>t.clientHeight||window.innerHeight<e.clientHeight,n=t.className.match(/scrolling/g);o&&!n?t.className+=" scrolling":!o&&n&&(t.className=t.className.replace(/shouldScroll/g,"")),o&&(t.scrollTop=t.scrollHeight)}clearOldCommands(){var e=[];this.props.commandCollection.each((function(t){"inqueue"!==t.get("status")&&"processing"!==t.get("status")&&e.push(t)}),this);for(var t=0;t<e.length;t++)e[t].destroy();this.updateFromCollection(),this.scrollDown()}}c.propTypes={commandCollection:r.object.isRequired},t.exports=c},{"../app":46,"../react_views/CommandView.jsx":72,"prop-types":19,react:30}],72:[function(e,t,o){var n=e("react"),r=e("react-dom"),a=e("prop-types"),i=e("../util/reactUtil"),s=e("fbjs/lib/keyMirror")({inqueue:null,processing:null,finished:null});class c extends n.Component{componentDidMount(){this.props.command.on("change",this.updateStateFromModel,this),this.props.command.on("destroy",this.onModelDestroy,this),this.updateStateFromModel()}componentWillUnmount(){this.props.command.off("change",this.updateStateFromModel,this),this.props.command.off("destroy",this.onModelDestroy,this)}onModelDestroy(){r.unmountComponentAtNode(r.findDOMNode(this).parentNode)}updateStateFromModel(){var e=this.props.command.toJSON();this.setState({status:e.status,rawStr:e.rawStr,warnings:e.warnings,result:e.result})}constructor(e,t){super(e,t),this.state={status:s.inqueue,rawStr:"git commit",warnings:[],result:""}}render(){var e=i.joinClasses([this.state.status,"commandLine","transitionBackground"]);return n.createElement("div",{id:this.props.id,className:"reactCommandView"},n.createElement("p",{className:e},n.createElement("span",{className:"prompt"},"$")," ",n.createElement("span",{dangerouslySetInnerHTML:{__html:this.state.rawStr}}),n.createElement("span",{className:"icons transitionAllSlow"},n.createElement("i",{className:"icon-exclamation-sign"}),n.createElement("i",{className:"icon-check-empty"}),n.createElement("i",{className:"icon-retweet"}),n.createElement("i",{className:"icon-check"}))),this.renderResult(),n.createElement("div",{className:"commandLineWarnings"},this.renderFormattedWarnings()))}renderResult(){if(!this.state.result)return null;for(var e=this.state.result.split("\n"),t=[],o=0;o<e.length;o++)e[o].startsWith("https://")?t.push(n.createElement("a",{href:e[o],key:"paragraph_"+o,dangerouslySetInnerHTML:{__html:e[o]}})):t.push(n.createElement("p",{key:"paragraph_"+o,dangerouslySetInnerHTML:{__html:e[o]}}));return n.createElement("div",{className:"commandLineResult"},t)}renderFormattedWarnings(){for(var e=this.state.warnings,t=[],o=0;o<e.length;o++)t.push(n.createElement("p",{key:"warning_"+o},n.createElement("i",{className:"icon-exclamation-sign"}),e[o]));return t}}c.propTypes={command:a.object.isRequired,id:a.string},t.exports=c},{"../util/reactUtil":94,"fbjs/lib/keyMirror":6,"prop-types":19,react:30,"react-dom":24}],73:[function(e,t,o){var n=e("react"),r=e("prop-types"),a=e("../react_views/HelperBarView.jsx"),i=e("../app"),s=e("../log");class c extends n.Component{render(){return n.createElement(a,{items:this.getItems(),shown:this.props.shown})}fireCommand(e){s.viewInteracted("commandHelperBar"),i.getEventBaton().trigger("commandSubmitted",e)}getItems(){return[{text:"Levels",onClick:function(){this.fireCommand("levels")}.bind(this)},{text:"Solution",onClick:function(){this.fireCommand("show solution")}.bind(this)},{text:"Reset",onClick:function(){this.fireCommand("reset")}.bind(this)},{text:"Undo",onClick:function(){this.fireCommand("undo")}.bind(this)},{text:"Objective",onClick:function(){this.fireCommand("objective")}.bind(this)},{text:"Help",onClick:function(){this.fireCommand("help general; git help")}.bind(this)},{icon:"signout",onClick:function(){this.props.onExit()}.bind(this)}]}}c.propTypes={shown:r.bool.isRequired,onExit:r.func.isRequired},t.exports=c},{"../app":46,"../log":67,"../react_views/HelperBarView.jsx":74,"prop-types":19,react:30}],74:[function(e,t,o){var n=e("react"),r=e("prop-types"),a=e("../util/reactUtil");class i extends n.Component{render(){var e=a.joinClasses(["helperBar","transitionAll",this.props.shown?"show":"",this.props.className?this.props.className:""]);return n.createElement("div",{className:e},this.props.items.map(function(e,t){return[this.renderItem(e,t),t===this.props.items.length-1?null:n.createElement("span",{key:"helper_bar_span_"+t}," ")]}.bind(this)))}renderItem(e,t){var o=e.icon||e.testID||e.text.toLowerCase();return e.newPageLink?n.createElement("a",{"data-testid":o,key:"helper_bar_"+t,onClick:e.onClick,target:"_blank",href:e.href},n.createElement("i",{className:"icon-"+e.icon})," "):n.createElement("a",{"data-testid":o,key:"helper_bar_"+t,onClick:e.onClick},e.text?e.text:n.createElement("i",{className:"icon-"+e.icon})," ")}}i.propTypes={className:r.string,shown:r.bool.isRequired,items:r.array.isRequired},t.exports=i},{"../util/reactUtil":94,"prop-types":19,react:30}],75:[function(e,t,o){var n=e("prop-types"),r=e("../react_views/HelperBarView.jsx"),a=e("../app"),i=e("react"),s=e("../log");class c extends i.Component{render(){return i.createElement(r,{items:this.getItems(),shown:this.props.shown})}fireCommand(e){s.viewInteracted("intlSelect"),a.getEventBaton().trigger("commandSubmitted",e),this.props.onExit()}getItems(){return[{text:"Git Branching",testID:"english",onClick:function(){this.fireCommand("locale en_US; levels")}.bind(this)},{text:"日本語版リポジトリ",testID:"japanese",onClick:function(){this.fireCommand("locale ja; levels")}.bind(this)},{text:"Git 브랜치 배우기",testID:"korean",onClick:function(){this.fireCommand("locale ko; levels")}.bind(this)},{text:"学习 Git 分支",testID:"simplifiedChinese",onClick:function(){this.fireCommand("locale zh_CN; levels")}.bind(this)},{text:"學習 Git 分支",testID:"traditionalChinese",onClick:function(){this.fireCommand("locale zh_TW; levels")}.bind(this)},{text:"español",testID:"spanish",onClick:function(){this.fireCommand("locale es_ES; levels")}.bind(this)},{text:"argentino",testID:"argentinian",onClick:function(){this.fireCommand("locale es_AR; levels")}.bind(this)},{text:"português",testID:"portuguese",onClick:function(){this.fireCommand("locale pt_BR; levels")}.bind(this)},{text:"français",testID:"french",onClick:function(){this.fireCommand("locale fr_FR; levels")}.bind(this)},{text:"Deutsch",testID:"german",onClick:function(){this.fireCommand("locale de_DE; levels")}.bind(this)},{text:"Русский",testID:"russian",onClick:function(){this.fireCommand("locale ru_RU; levels")}.bind(this)},{text:"Українська",testID:"ukrainian",onClick:function(){this.fireCommand("locale uk; levels")}.bind(this)},{text:"Tiếng Việt",testID:"vietnamese",onClick:function(){this.fireCommand("locale vi; levels")}.bind(this)},{text:"Galego",testID:"galician",onClick:function(){this.fireCommand("locale gl; levels")}.bind(this)},{icon:"signout",onClick:function(){this.props.onExit()}.bind(this)}]}}c.propTypes={shown:n.bool.isRequired,onExit:n.func.isRequired},t.exports=c},{"../app":46,"../log":67,"../react_views/HelperBarView.jsx":74,"prop-types":19,react:30}],76:[function(e,t,o){var n=e("react"),r=e("prop-types"),a=e("../intl"),i=e("../util/reactUtil");class s extends n.Component{constructor(e,t){super(e,t),this.state={isHidden:!0,isGoalExpanded:this.props.parent.getIsGoalExpanded()}}componentWillUnmount(){this._isMounted=!1}componentDidMount(){this._isMounted=!0,this.setState({isHidden:this.props.parent.getIsGoalExpanded(),isGoalExpanded:this.props.parent.getIsGoalExpanded()}),this.props.parent.on("goalToggled",function(){this._isMounted&&this.setState({isGoalExpanded:this.props.parent.getIsGoalExpanded()})}.bind(this))}render(){return n.createElement("div",{className:i.joinClasses(["toolbar","level-toolbar","box","vertical","center","transitionAll",this.state.isHidden?"hidden":""])},n.createElement("div",{className:"clearfix"},n.createElement("div",{className:"levelNameWrapper"},n.createElement("i",{className:"icon-bolt"})," Level ",n.createElement("span",{className:"levelToolbarSpan"},this.props.name))),n.createElement("div",{className:"buttonsWrapper"},n.createElement("div",{className:"showGoalWrapper"},n.createElement("button",{onClick:this.props.onGoalClick,type:"button"},this.state.isGoalExpanded?a.str("hide-goal-button"):a.str("show-goal-button"))),n.createElement("div",{className:"showObjectiveWrapper"},n.createElement("button",{onClick:this.props.onObjectiveClick,type:"button"},a.str("objective-button")))))}}s.propTypes={name:r.string.isRequired,onGoalClick:r.func.isRequired,onObjectiveClick:r.func.isRequired,parent:r.object.isRequired},t.exports=s},{"../intl":61,"../util/reactUtil":94,"prop-types":19,react:30}],77:[function(e,t,o){var n=e("../react_views/HelperBarView.jsx"),r=e("../react_views/IntlHelperBarView.jsx"),a=e("../react_views/CommandsHelperBarView.jsx"),i=e("react"),s=e("../util/keyMirror"),c=(e("../log"),s({SELF:null,INTL:null,COMMANDS:null}));class l extends i.Component{constructor(e,t){super(e,t),this.state={shownBar:c.SELF}}render(){return i.createElement("div",null,i.createElement(n,{className:"BaseHelperBar",items:this.getItems(),shown:this.state.shownBar===c.SELF}),i.createElement(a,{shown:this.state.shownBar===c.COMMANDS,onExit:this.showSelf.bind(this)}),i.createElement(r,{shown:this.state.shownBar===c.INTL,onExit:this.showSelf.bind(this)}))}showSelf(){this.setState({shownBar:c.SELF})}getItems(){return[{icon:"question-sign",onClick:function(){this.setState({shownBar:c.COMMANDS})}.bind(this)},{icon:"globe",onClick:function(){this.setState({shownBar:c.INTL})}.bind(this)},{newPageLink:!0,icon:"twitter",href:"https://twitter.com/petermcottle"},{newPageLink:!0,icon:"facebook",href:"https://www.facebook.com/LearnGitBranching"}]}}t.exports=l},{"../log":67,"../react_views/CommandsHelperBarView.jsx":73,"../react_views/HelperBarView.jsx":74,"../react_views/IntlHelperBarView.jsx":75,"../util/keyMirror":91,react:30}],78:[function(e,t,o){var n=e("../util"),r=(e("../util/constants"),e("../intl")),a=e("../commands"),i=e("../util/errors"),s=(i.CommandProcessError,e("../stores/LocaleStore")),c=e("../actions/LocaleActions"),l=e("../stores/GlobalStateStore"),u=e("../actions/GlobalStateActions"),m=(i.GitError,i.Warning,i.CommandResult),d=[[/^ls( |$)/,function(){throw new m({msg:r.str("ls-command")})}],[/^cd( |$)/,function(){throw new m({msg:r.str("cd-command")})}],[/^(locale|locale reset)$/,function(e){throw c.changeLocale(s.getDefaultLocale()),new m({msg:r.str("locale-reset-command",{locale:s.getDefaultLocale()})})}],[/^show$/,function(e){var t=[r.str("show-command"),"<br/>","show commands","show solution","show goal"];throw new m({msg:t.join("\n")})}],[/^locale (\w+)$/,function(e){throw c.changeLocale(e[1]),new m({msg:r.str("locale-command",{locale:e[1]})})}],[/^flip$/,function(){throw u.changeFlipTreeY(!l.getFlipTreeY()),e("../app").getEvents().trigger("refreshTree"),new m({msg:r.str("flip-tree-command")})}],[/^refresh$/,function(){throw e("../app").getEvents().trigger("refreshTree"),new m({msg:r.str("refresh-tree-command")})}],[/^rollup (\d+)$/,function(t){throw e("../app").getEvents().trigger("rollupCommands",t[1]),new m({msg:"Commands combined!"})}],[/^echo "(.*?)"$|^echo (.*?)$/,function(e){var t=e[1]||e[2];throw new m({msg:t})}],[/^show +commands$/,function(e){var t=p(),o=[r.str("show-all-commands"),"<br/>"];throw Object.keys(t).forEach((function(e){o.push(e)})),new m({msg:o.join("\n")})}]],h={"reset solved":/^reset solved($|\s)/,help:/^help( +general)?$|^\?$/,reset:/^reset( +--forSolution)?$/,delay:/^delay (\d+)$/,clear:/^clear($|\s)/,"exit level":/^exit level($|\s)/,sandbox:/^sandbox($|\s)/,level:/^level\s?([a-zA-Z0-9]*)/,levels:/^levels($|\s)/,mobileAlert:/^mobile alert($|\s)/,"build level":/^build +level\s?([a-zA-Z0-9]*)$/,"export tree":/^export +tree$/,importTreeNow:/^importTreeNow($|\s)/,importLevelNow:/^importLevelNow($|\s)/,"import tree":/^import +tree$/,"import level":/^import +level$/,undo:/^undo($|\s)/,"share permalink":/^share( +permalink)?$/},p=function(){var t=Object.assign({},e("../level").regexMap,h),o=a.commands.getRegexMap();return Object.keys(o).forEach((function(e){var n=o[e];Object.keys(n).forEach((function(o){var r=n[o];t[e+" "+o]=r}))})),["mobileAlert"].forEach((function(e){delete t[e]})),t};o.instantCommands=d,o.parse=n.genParseCommand(h,"processSandboxCommand"),o.getOptimisticLevelParse=function(){return n.genParseCommand(e("../level").regexMap,"processLevelCommand")},o.getOptimisticLevelBuilderParse=function(){return n.genParseCommand(e("../level/builder").regexMap,"processLevelBuilderCommand")}},{"../actions/GlobalStateActions":43,"../actions/LocaleActions":45,"../app":46,"../commands":47,"../intl":61,"../level":65,"../level/builder":63,"../stores/GlobalStateStore":81,"../stores/LocaleStore":83,"../util":90,"../util/constants":84,"../util/errors":87}],79:[function(e,t,o){var n=e("q"),r=e("backbone"),a=e("../util"),i=e("../intl"),s=e("../app"),c=e("../util/errors"),l=e("../visuals/visualization").Visualization,u=e("../level/parseWaterfall").ParseWaterfall,m=(e("../level/disabledMap").DisabledMap,e("../models/commandModel").Command),d=e("../git/gitShim").GitShim,h=e("../actions/LevelActions"),p=e("../stores/LevelStore"),f=e("../views"),g=(f.ModalTerminal,f.ModalAlert,e("../views/builderViews")),b=e("../views/multiView").MultiView,v=r.View.extend({tagName:"div",initialize:function(e){e=e||{},this.options=e,this.initVisualization(e),this.initCommandCollection(e),this.initParseWaterfall(e),this.initGitShim(e),this.initUndoStack(e),e.wait||this.takeControl()},getDefaultVisEl:function(){return $("#mainVisSpace")[0]},getAnimationTime:function(){return 1050},initVisualization:function(e){this.mainVis=new l({el:e.el||this.getDefaultVisEl()})},initUndoStack:function(e){this.undoStack=[]},initCommandCollection:function(e){this.commandCollection=s.getCommandUI().commandCollection},initParseWaterfall:function(e){this.parseWaterfall=new u},initGitShim:function(e){this.gitShim=new d({beforeCB:this.beforeCommandCB.bind(this)})},takeControl:function(){s.getEventBaton().stealBaton("commandSubmitted",this.commandSubmitted,this),s.getEventBaton().stealBaton("processSandboxCommand",this.processSandboxCommand,this),s.getEventBaton().stealBaton("levelExited",this.levelExited,this),this.insertGitShim()},releaseControl:function(){s.getEventBaton().releaseBaton("commandSubmitted",this.commandSubmitted,this),s.getEventBaton().releaseBaton("processSandboxCommand",this.processSandboxCommand,this),s.getEventBaton().releaseBaton("levelExited",this.levelExited,this),this.releaseGitShim()},releaseGitShim:function(){this.gitShim&&this.gitShim.removeShim()},insertGitShim:function(){this.gitShim&&this.mainVis.customEvents.on("gitEngineReady",(function(){this.gitShim.insertShim()}),this)},beforeCommandCB:function(e){this.pushUndo()},pushUndo:function(){this.undoStack.push(this.mainVis.gitEngine.printTree())},undo:function(e,t){var o=this.undoStack.pop();if(!o)return e.set("error",new c.GitError({msg:i.str("undo-stack-empty")})),void t.resolve();this.mainVis.reset(o),setTimeout((function(){e.finishWith(t)}),this.mainVis.getAnimationTime())},commandSubmitted:function(e){s.getEvents().trigger("commandSubmittedPassive",e),a.splitTextCommand(e,(function(e){this.commandCollection.add(new m({rawStr:e,parseWaterfall:this.parseWaterfall}))}),this)},startLevel:function(t,o){var r=(t.get("regexResults")||[])[1]||"",a=p.getLevel(r);if(!a)return t.addWarning(i.str("level-no-id",{id:r})),s.getEventBaton().trigger("commandSubmitted","levels"),t.set("status","error"),void o.resolve();this.hide(),this.clear();var c=n.defer(),l=e("../level").Level;this.currentLevel=new l({level:a,deferred:c,command:t}),c.promise.then((function(){t.finishWith(o)}))},buildLevel:function(t,o){this.hide(),this.clear();var r=n.defer(),a=e("../level/builder").LevelBuilder,i=(t.get("regexResults")||[])[1]||!1;this.levelBuilder=new a({deferred:r,editLevel:i}),r.promise.then((function(){t.finishWith(o)}))},exitLevel:function(e,t){e.addWarning(i.str("level-cant-exit")),e.set("status","error"),t.resolve()},showLevels:function(e,t){var o=n.defer();s.getLevelDropdown().show(o,e),o.promise.done((function(){e.finishWith(t)}))},sharePermalink:function(e,t){var o=JSON.stringify(this.mainVis.gitEngine.exportTree()),n="https://learngitbranching.js.org/?NODEMO&command=importTreeNow%20"+escape(o);e.setResult(i.todo("Here is a link to the current state of the tree: ")+"\n"+n),e.finishWith(t)},resetSolved:function(e,t){h.resetLevelsSolved(),e.addWarning(i.str("solved-map-reset")),e.finishWith(t)},processSandboxCommand:function(e,t){var o={"reset solved":this.resetSolved,undo:this.undo,"help general":this.helpDialog,help:this.helpDialog,reset:this.reset,delay:this.delay,clear:this.clear,"exit level":this.exitLevel,level:this.startLevel,sandbox:this.exitLevel,levels:this.showLevels,mobileAlert:this.mobileAlert,"build level":this.buildLevel,"export tree":this.exportTree,"import tree":this.importTree,importTreeNow:this.importTreeNow,"import level":this.importLevel,importLevelNow:this.importLevelNow,"share permalink":this.sharePermalink}[e.get("method")];if(!o)throw new Error("no method for that wut");o.apply(this,[e,t])},hide:function(){this.mainVis.hide()},levelExited:function(){this.show()},show:function(){this.mainVis.show()},importLevelNow:function(t,o){var r=t.get("regexResults")||[];if(r.length<2)return t.set("error",new c.GitError({msg:i.str("git-error-options")})),void t.finishWith(o);var a=r.input.replace(/importLevelNow\s+/g,""),s=e("../level").Level;try{var l=JSON.parse(unescape(a)),u=n.defer();this.currentLevel=new s({level:l,deferred:u,command:t}),this.hide(),u.promise.then((function(){t.finishWith(o)}))}catch(e){throw t.set("error",new c.GitError({msg:"Something went wrong "+String(e)})),e}t.finishWith(o)},importTreeNow:function(e,t){var o=e.get("regexResults")||[];o.length<2&&(e.set("error",new c.GitError({msg:i.str("git-error-options")})),e.finishWith(t));var n=o.input.replace(/importTreeNow\s+/g,"");try{this.mainVis.gitEngine.loadTreeFromString(n)}catch(t){e.set("error",new c.GitError({msg:String(t)}))}e.finishWith(t)},importTree:function(e,t){new g.MarkdownPresenter({previewText:i.str("paste-json"),fillerText:" "}).deferred.promise.then(function(e){try{this.mainVis.gitEngine.loadTree(JSON.parse(e))}catch(e){this.mainVis.reset(),new b({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that JSON! Here is the error:","",String(e)]}}]})}}.bind(this)).fail((function(){})).done((function(){e.finishWith(t)}))},importLevel:function(t,o){new g.MarkdownPresenter({previewText:i.str("paste-json"),fillerText:" "}).deferred.promise.then(function(r){var a=e("../level").Level;try{var i=JSON.parse(r),s=n.defer();this.currentLevel=new a({level:i,deferred:s,command:t}),this.hide(),s.promise.then((function(){t.finishWith(o)}))}catch(e){new b({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that level JSON, this happened:","",String(e)]}}]}),t.finishWith(o)}}.bind(this)).fail((function(){t.finishWith(o)})).done()},exportTree:function(e,t){var o=JSON.stringify(this.mainVis.gitEngine.exportTree(),null,2);new b({childViews:[{type:"MarkdownPresenter",options:{previewText:i.str("share-tree"),fillerText:o,noConfirmCancel:!0}}]}).getPromise().then((function(){e.finishWith(t)})).done()},clear:function(e,t){s.getEvents().trigger("clearOldCommands"),e&&t&&e.finishWith(t)},mobileAlert:function(e,t){alert(i.str("mobile-alert")),e.finishWith(t)},delay:function(e,t){var o=parseInt(e.get("regexResults")[1],10);setTimeout((function(){e.finishWith(t)}),o)},reset:function(e,t){this.mainVis.reset(),this.initUndoStack(),setTimeout((function(){e.finishWith(t)}),this.mainVis.getAnimationTime())},helpDialog:function(t,o){new b({childViews:i.getDialog(e("../dialogs/sandbox"))}).getPromise().then(function(){t.finishWith(o)}.bind(this)).done()}});o.Sandbox=v},{"../actions/LevelActions":44,"../app":46,"../dialogs/sandbox":52,"../git/gitShim":55,"../intl":61,"../level":65,"../level/builder":63,"../level/disabledMap":64,"../level/parseWaterfall":66,"../models/commandModel":70,"../stores/LevelStore":82,"../util":90,"../util/errors":87,"../views":100,"../views/builderViews":97,"../views/multiView":102,"../visuals/visualization":113,backbone:1,q:21}],80:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=e("events").EventEmitter,i=n.ActionTypes,s=[];try{s=JSON.parse(localStorage.getItem("lgb_CommandHistory")||"[]")||[]}catch(e){}var c=Object.assign({},a.prototype,n.StoreSubscribePrototype,{getMaxHistoryLength:function(){return 100},getCommandHistoryLength:function(){return s.length},getCommandHistory:function(){return s.slice(0)},dispatchToken:r.register((function(e){var t=e.action,o=!1;switch(t.type){case i.SUBMIT_COMMAND:s.unshift(String(t.text)),s.length>100&&(s=s.slice(0,10)),function(){try{localStorage.setItem("lgb_CommandHistory",JSON.stringify(s))}catch(e){}}(),o=!0;break;case i.CHANGE_FLIP_TREE_Y:}o&&c.emit(n.CHANGE_EVENT)}))});t.exports=c},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53,events:4}],81:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=e("events").EventEmitter,i=n.ActionTypes,s=!1,c=!1,l=0,u=Object.assign({},a.prototype,n.StoreSubscribePrototype,{getIsAnimating:function(){return s},getFlipTreeY:function(){return c},getNumLevelsSolved:function(){return l},dispatchToken:r.register((function(e){var t=e.action,o=!1;switch(t.type){case i.CHANGE_IS_ANIMATING:s=t.isAnimating,o=!0;break;case i.CHANGE_FLIP_TREE_Y:c=t.flipTreeY,o=!0;break;case i.LEVEL_SOLVED:l++,o=!0}o&&u.emit(n.CHANGE_EVENT)}))});t.exports=u},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53,events:4}],82:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=e("events").EventEmitter,i=e("../../levels").levelSequences,s=e("../../levels").sequenceInfo,c=e("../util"),l=n.ActionTypes,u={},m={},d=[];if(!c.isBrowser())var h={},p={setItem:function(e,t){h[e]=t||""},getItem:function(e){return e in h?h[e]:null},removeItem:function(e){delete h[e]},get length(){return Object.keys(h).length},key:function(e){return Object.keys(h)[e]||null}};try{m=JSON.parse(p.getItem("solvedMap")||"{}")||{}}catch(e){console.warn("local storage failed",e)}function f(){try{p.setItem("solvedMap",JSON.stringify(m))}catch(e){console.warn("local storage failed on set",e)}}Object.keys(i).forEach((function(e){var t=i[e];if(d.push(e),!t||!t.length)throw new Error("no empty sequences allowed");t.forEach((function(t,o){!function(e){e=e||{};["name","goalTreeString","solutionCommand"].forEach((function(t){if(void 0===e[t])throw console.log(e),new Error("I need this field for a level: "+t)}))}(t);var n=e+String(o+1),r=Object.assign({},t,{index:o,id:n,sequenceName:e});u[n]=r,i[e][o]=r}))}));var g=Object.assign({},a.prototype,n.StoreSubscribePrototype,{getSequenceToLevels:function(){return i},getSequences:function(){return Object.keys(i)},getLevelsInSequence:function(e){if(!i[e])throw new Error("that sequecne name "+e+"does not exist");return i[e]},getSequenceInfo:function(e){return s[e]},getLevel:function(e){return u[e]},getNextLevel:function(e){if(!u[e])return console.warn("that level doesn't exist!!!"),null;var t=u[e],o=t.sequenceName,n=i[o],r=t.index+1;if(r<n.length)return n[r];var a=d.indexOf(o)+1;if(a<d.length){var s=d[a];return i[s][0]}return null},isLevelSolved:function(e){if(!u[e])throw new Error("that level doesn't exist!");return!!m[e]},dispatchToken:r.register((function(e){var t=e.action,o=!1;switch(t.type){case l.RESET_LEVELS_SOLVED:m={},f(),o=!0;break;case l.SET_LEVEL_SOLVED:m[t.levelID]=!0,f(),o=!0}o&&g.emit(n.CHANGE_EVENT)}))});t.exports=g},{"../../levels":115,"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53,"../util":90,events:4}],83:[function(e,t,o){"use strict";var n=e("../constants/AppConstants"),r=e("../dispatcher/AppDispatcher"),a=e("../util"),i=e("events").EventEmitter,s=n.ActionTypes,c={en:"en_US",zh:"zh_CN",ja:"ja",ko:"ko",es:"es_AR",fr:"fr_FR",de:"de_DE",pt:"pt_BR",ru:"ru_RU",uk:"uk",vi:"vi"},l={"zh-CN":"zh_CN","zh-TW":"zh_TW","pt-BR":"pt_BR","es-ES":"es_ES"},u=Object.values(c).concat(Object.values(l)).filter((function(e,t,o){return o.indexOf(e)===t}));var m="en_US",d=Object.assign({},i.prototype,n.StoreSubscribePrototype,{getDefaultLocale:function(){return"en_US"},getLangLocaleMap:function(){return Object.assign({},c)},getHeaderLocaleMap:function(){return Object.assign({},l)},getLocale:function(){return m},getSupportedLocales:function(){return u.slice()},dispatchToken:r.register((function(e){var t=e.action,o=!1,r=m;switch(t.type){case s.CHANGE_LOCALE:m=t.locale,o=!0;break;case s.CHANGE_LOCALE_FROM_HEADER:var i=function(e){for(var t,o=e.split(","),n=0;n<o.length;n++){var r=o[n].split(";")[0];if(l[r]){t=l[r];break}var a=r.slice(0,2);if(c[a]){t=c[a];break}}return t}(t.header);i&&(m=i,o=!0)}if(a.isBrowser()&&r!==m){var u=new URL(document.location.href);u.searchParams.set("locale",m),window.history.replaceState({},"",u.href)}o&&d.emit(n.CHANGE_EVENT)}))});t.exports=d},{"../constants/AppConstants":48,"../dispatcher/AppDispatcher":53,"../util":90,events:4}],84:[function(e,t,o){o.TIME={betweenCommandsDelay:400},o.GRAPHICS={arrowHeadSize:8,nodeRadius:17,curveControlPointOffset:50,defaultEasing:"easeInOut",defaultAnimationTime:400,rectFill:"hsb(0.8816909813322127,0.6,1)",headRectFill:"#2831FF",rectStroke:"#FFF",rectStrokeWidth:"3",originDash:"- ",multiBranchY:20,multiTagY:15,upstreamHeadOpacity:.5,upstreamNoneOpacity:.2,edgeUpstreamHeadOpacity:.4,edgeUpstreamNoneOpacity:.15,visBranchStrokeWidth:2,visBranchStrokeColorNone:"#333",defaultNodeFill:"hsba(0.5,0.6,0.7,1)",defaultNodeStrokeWidth:2,defaultNodeStroke:"#FFF",tagFill:"hsb(0,0,0.9)",tagStroke:"#FFF",tagStrokeWidth:"2",orphanNodeFill:"hsb(0.5,0.8,0.7)"},o.VIEWPORT={minZoom:.55,maxZoom:1.25,minWidth:600,minHeight:600}},{}],85:[function(e,t,o){t.exports=function(e,t,o){var n;return function(){var r=function(){n=null,o||e.apply(this,arguments)},a=o&&!n;clearTimeout(n),n=setTimeout(r,t),a&&e.apply(this,arguments)}}},{}],86:[function(e,t,o){var n={App:e("../app/index.js"),Tree:e("../visuals/tree"),Visuals:e("../visuals"),Git:e("../git"),CommandModel:e("../models/commandModel"),CommandLineStore:e("../stores/CommandLineStore"),CommandLineActions:e("../actions/CommandLineActions"),LevelActions:e("../actions/LevelActions"),LevelStore:e("../stores/LevelStore"),LocaleActions:e("../actions/LocaleActions"),GlobalStateActions:e("../actions/GlobalStateActions"),GlobalStateStore:e("../stores/GlobalStateStore"),LocaleStore:e("../stores/LocaleStore"),Levels:e("../graph/treeCompare"),Constants:e("../util/constants"),Commands:e("../commands"),Collections:e("../models/collections"),Async:e("../visuals/animation"),AnimationFactory:e("../visuals/animation/animationFactory"),Main:e("../app"),HeadLess:e("../git/headless"),Q:{Q:e("q")},RebaseView:e("../views/rebaseView"),Views:e("../views"),MultiView:e("../views/multiView"),ZoomLevel:e("../util/zoomLevel"),VisBranch:e("../visuals/visBranch"),TreeCompare:e("../graph/treeCompare"),Level:e("../level"),Sandbox:e("../sandbox/"),GitDemonstrationView:e("../views/gitDemonstrationView"),Markdown:e("markdown"),LevelDropdownView:e("../views/levelDropdownView"),BuilderViews:e("../views/builderViews"),Util:e("../util/index"),Intl:e("../intl")};Object.keys(n).forEach((function(e){var t=n[e];for(var o in t){var r=t[o];r instanceof Function&&(r=r.bind(t)),window["debug_"+e+"_"+o]=r}})),$(document).ready((function(){window.debug_events=n.Main.getEvents(),window.debug_eventBaton=n.Main.getEventBaton(),window.debug_sandbox=n.Main.getSandbox(),window.debug_modules=n,window.debug_levelDropdown=n.Main.getLevelDropdown(),window.debug_copyTree=function(){return n.Main.getSandbox().mainVis.gitEngine.printAndCopyTree()}}))},{"../actions/CommandLineActions":42,"../actions/GlobalStateActions":43,"../actions/LevelActions":44,"../actions/LocaleActions":45,"../app":46,"../app/index.js":46,"../commands":47,"../git":57,"../git/headless":56,"../graph/treeCompare":59,"../intl":61,"../level":65,"../models/collections":69,"../models/commandModel":70,"../sandbox/":79,"../stores/CommandLineStore":80,"../stores/GlobalStateStore":81,"../stores/LevelStore":82,"../stores/LocaleStore":83,"../util/constants":84,"../util/index":90,"../util/zoomLevel":96,"../views":100,"../views/builderViews":97,"../views/gitDemonstrationView":99,"../views/levelDropdownView":101,"../views/multiView":102,"../views/rebaseView":103,"../visuals":106,"../visuals/animation":105,"../visuals/animation/animationFactory":104,"../visuals/tree":107,"../visuals/visBranch":109,markdown:11,q:21}],87:[function(e,t,o){var n=e("backbone").Model.extend({defaults:{type:"MyError"},toString:function(){return this.get("type")+": "+this.get("msg")},getMsg:function(){return this.get("msg")||console.warn("my error without message"),this.get("msg")}}),r=o.CommandProcessError=n.extend({defaults:{type:"Command Process Error"}}),a=o.CommandResult=n.extend({defaults:{type:"Command Result"}}),i=o.Warning=n.extend({defaults:{type:"Warning"}}),s=o.GitError=n.extend({defaults:{type:"Git Error"}});o.filterError=function(e){if(!(e instanceof r||e instanceof s||e instanceof a||e instanceof i))throw e}},{backbone:1}],88:[function(e,t,o){var n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"};t.exports=function(e){return(""+e).replace(/[&<>"'\/]/g,(function(e){return n[e]}))}},{}],89:[function(e,t,o){function n(e){this.eventMap={},this.options=e||{}}n.prototype.stealBaton=function(e,t,o){if(!e)throw new Error("need name");if(!t)throw new Error("need func!");var n=this.eventMap[e]||[];n.push({func:t,context:o}),this.eventMap[e]=n},n.prototype.sliceOffArgs=function(e,t){for(var o=[],n=e;n<t.length;n++)o.push(t[n]);return o},n.prototype.trigger=function(e){var t=this.sliceOffArgs(1,arguments),o=this.eventMap[e];if(o&&o.length){var n=o.slice(-1)[0];n.func.apply(n.context,t)}else console.warn("no listeners for",e)},n.prototype.getNumListeners=function(e){return(this.eventMap[e]||[]).length},n.prototype.getListenersThrow=function(e){var t=this.eventMap[e];if(!t||!t.length)throw new Error("no one has that baton!"+e);return t},n.prototype.passBatonBackSoft=function(e,t,o,n){try{return this.passBatonBack(e,t,o,n)}catch(e){}},n.prototype.passBatonBack=function(e,t,o,n){var r,a=this.getListenersThrow(e);if(a.forEach((function(e,n){0!==n&&e.func===t&&e.context===o&&(r=n-1)})),void 0===r)throw new Error("you are the last baton holder! or i didn't find you");var i=a[r];i.func.apply(i.context,n)},n.prototype.releaseBaton=function(e,t,o){var n=this.getListenersThrow(e),r=[],a=!1;if(n.forEach((function(e){e.func===t&&e.context===o?(a&&(console.warn("woah duplicates!!!"),console.log(n)),a=!0):r.push(e)})),!a)throw console.log("did not find that function",t,o,e,arguments),console.log(this.eventMap),new Error("can't releasebaton if you don't have it");this.eventMap[e]=r},o.EventBaton=n},{}],90:[function(e,t,o){var{readdirSync:n,lstatSync:r}=e("fs"),{join:a}=e("path"),i=e("../util/escapeString");e("../util/constants");o.parseQueryString=function(e){var t={};return e.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),(function(e,o,n,r){t[o]=r})),t},o.isBrowser=function(){return"undefined"!==String(typeof window)},o.splitTextCommand=function(e,t,o){t=t.bind(o),e.split(";").forEach((function(e,o){e=(e=i(e)).replace(/^(\s+)/,"").replace(/(\s+)$/,"").replace(/&quot;/g,'"').replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/"),o>0&&!e.length||t(e)}))},o.genParseCommand=function(e,t){return function(o){var n,r;return Object.keys(e).forEach((function(t){var a=e[t].exec(o);a&&(n=t,r=a)})),!!n&&{toSet:{eventName:t,method:n,regexResults:r}}}},o.readDirDeep=function(e){var t=[];return n(e).forEach((function(n){var i=a(e,n);r(i).isDirectory()?t.push(...o.readDirDeep(i)):t.push(i)})),t}},{"../util/constants":84,"../util/escapeString":88,fs:3,path:14}],91:[function(e,t,o){"use strict";t.exports=function(e){var t={};for(var o in e)e.hasOwnProperty(o)&&(t[o]=o);return t}},{}],92:[function(e,t,o){e("backbone");var n=e("../app"),r=function(e){return{37:"left",38:"up",39:"right",40:"down",27:"esc",13:"enter"}[e]};function a(e){this.events=e.events,this.aliasMap=e.aliasMap||{},e.wait||this.listen()}a.prototype.listen=function(){this.listening||(this.listening=!0,n.getEventBaton().stealBaton("docKeydown",this.keydown,this))},a.prototype.mute=function(){this.listening=!1,n.getEventBaton().releaseBaton("docKeydown",this.keydown,this)},a.prototype.keydown=function(e){var t=e.which||e.keyCode,o=r(t);void 0!==o&&this.fireEvent(o,e)},a.prototype.fireEvent=function(e,t){e=this.aliasMap[e]||e,this.events.trigger(e,t)},a.prototype.passEventBack=function(e){n.getEventBaton().passBatonBackSoft("docKeydown",this.keydown,this,[e])},o.KeyboardListener=a,o.mapKeycodeToKey=r},{"../app":46,backbone:1}],93:[function(e,t,o){o.mock=function(e){var t={},o=function(){};for(var n in e.prototype)t[n]=o;return t}},{}],94:[function(e,t,o){o.joinClasses=function(e){return e.join(" ")}},{}],95:[function(e,t,o){t.exports=function(e,t){var o=!1;return function(){o||(e.apply(this,arguments),o=!0,setTimeout((function(){o=!1}),t))}}},{}],96:[function(e,t,o){var n=!0;o.detectZoom=function(){return window.outerWidth&&window.innerWidth?window.outerWidth/window.innerWidth:(n&&(console.warn("Can't detect zoom level correctly :-/"),n=!1),1)}},{}],97:[function(e,t,o){var n=e("underscore"),r=e("q"),a=e("../views"),i=e("../util/throttle"),s=a.ModalTerminal,c=a.ContainedBase,l=c.extend({tagName:"div",className:"textGrabber box vertical",template:n.template($("#text-grabber").html()),initialize:function(e){e=e||{},this.JSON={helperText:e.helperText||"Enter some text"},this.container=e.container||new s({title:"Enter some text"}),this.render(),e.initialText&&this.setText(e.initialText),e.wait||this.show()},getText:function(){return this.$("textarea").val()},setText:function(e){this.$("textarea").val(e)}}),u=c.extend({tagName:"div",className:"markdownGrabber box horizontal",template:n.template($("#markdown-grabber-view").html()),events:{"keyup textarea":"keyup"},initialize:function(e){if(e=e||{},this.deferred=e.deferred||r.defer(),e.fromObj&&(e.fillerText=e.fromObj.options.markdowns.join("\n")),this.JSON={previewText:e.previewText||"Preview",fillerText:e.fillerText||"## Enter some markdown!\n\n\n"},this.container=e.container||new s({title:e.title||"Enter some markdown"}),this.render(),!e.withoutButton){var t=r.defer();t.promise.then(this.confirmed.bind(this)).fail(this.cancelled.bind(this)).done();new a.ConfirmCancelView({deferred:t,destination:this.getDestination()})}this.updatePreview(),e.wait||this.show()},confirmed:function(){this.die(),this.deferred.resolve(this.getRawText())},cancelled:function(){this.die(),this.deferred.resolve()},keyup:function(){this.throttledPreview||(this.throttledPreview=i(this.updatePreview.bind(this),500)),this.throttledPreview()},getRawText:function(){return this.$("textarea").val()},exportToArray:function(){return this.getRawText().split("\n")},getExportObj:function(){return{markdowns:this.exportToArray()}},updatePreview:function(){var t=this.getRawText(),o=e("markdown").markdown.toHTML(t);this.$("div.insidePreview").html(o)}}),m=c.extend({tagName:"div",className:"markdownPresenter box vertical",template:n.template($("#markdown-presenter").html()),initialize:function(e){(e=e||{},this.deferred=e.deferred||r.defer(),this.JSON={previewText:e.previewText||"Here is something for you",fillerText:e.fillerText||"# Yay"},this.container=new s({title:"Check this out..."}),this.render(),e.noConfirmCancel)||new a.ConfirmCancelView({destination:this.getDestination()}).deferred.promise.then(function(){this.deferred.resolve(this.grabText())}.bind(this)).fail(function(){this.deferred.reject()}.bind(this)).done(this.die.bind(this));this.show()},grabText:function(){return this.$("textarea").val()}}),d=c.extend({tagName:"div",className:"demonstrationBuilder box vertical",template:n.template($("#demonstration-builder").html()),events:{"click div.testButton":"testView"},initialize:function(e){if(e=e||{},this.deferred=e.deferred||r.defer(),e.fromObj){var t=e.fromObj.options;e=Object.assign({},e,t,{beforeMarkdown:t.beforeMarkdowns.join("\n"),afterMarkdown:t.afterMarkdowns.join("\n")})}this.JSON={},this.container=new s({title:"Demonstration Builder"}),this.render(),this.beforeMarkdownView=new u({container:this,withoutButton:!0,fillerText:e.beforeMarkdown,previewText:"Before demonstration Markdown"}),this.beforeCommandView=new l({container:this,helperText:"The git command(s) to set up the demonstration view (before it is displayed)",initialText:e.beforeCommand||"git checkout -b bugFix"}),this.commandView=new l({container:this,helperText:"The git command(s) to demonstrate to the reader",initialText:e.command||"git commit"}),this.afterMarkdownView=new u({container:this,withoutButton:!0,fillerText:e.afterMarkdown,previewText:"After demonstration Markdown"});var o=r.defer();new a.ConfirmCancelView({deferred:o,destination:this.getDestination()});o.promise.then(this.confirmed.bind(this)).fail(this.cancelled.bind(this)).done()},testView:function(){new(0,e("../views/multiView").MultiView)({childViews:[{type:"GitDemonstrationView",options:this.getExportObj()}]})},getExportObj:function(){return{beforeMarkdowns:this.beforeMarkdownView.exportToArray(),afterMarkdowns:this.afterMarkdownView.exportToArray(),command:this.commandView.getText(),beforeCommand:this.beforeCommandView.getText()}},confirmed:function(){this.die(),this.deferred.resolve(this.getExportObj())},cancelled:function(){this.die(),this.deferred.resolve()},getInsideElement:function(){return this.$(".insideBuilder")[0]}}),h=c.extend({tagName:"div",className:"multiViewBuilder box vertical",template:n.template($("#multi-view-builder").html()),typeToConstructor:{ModalAlert:u,GitDemonstrationView:d},events:{"click div.deleteButton":"deleteOneView","click div.testButton":"testOneView","click div.editButton":"editOneView","click div.testEntireView":"testEntireView","click div.addView":"addView","click div.saveView":"saveView","click div.cancelView":"cancel"},initialize:function(e){e=e||{},this.deferred=e.deferred||r.defer(),this.multiViewJSON=e.multiViewJSON||{},this.JSON={views:this.getChildViews(),supportedViews:Object.keys(this.typeToConstructor)},this.container=new s({title:"Build a MultiView!"}),this.render(),this.show()},saveView:function(){this.hide(),this.deferred.resolve(this.multiViewJSON)},cancel:function(){this.hide(),this.deferred.resolve()},addView:function(e){var t=e.target,o=$(t).attr("data-type"),n=r.defer(),a=new(0,this.typeToConstructor[o])({deferred:n});n.promise.then(function(){var e={type:o,options:a.getExportObj()};this.addChildViewObj(e)}.bind(this)).fail((function(){})).done()},testOneView:function(t){var o=t.target,n=$(o).attr("data-index"),r=this.getChildViews()[n];new(0,e("../views/multiView").MultiView)({childViews:[r]})},testEntireView:function(){new(0,e("../views/multiView").MultiView)({childViews:this.getChildViews()})},editOneView:function(e){var t=e.target,o=$(t).attr("data-index"),n=$(t).attr("data-type"),a=r.defer(),i=new this.typeToConstructor[n]({deferred:a,fromObj:this.getChildViews()[o]});a.promise.then(function(){var e={type:n,options:i.getExportObj()},t=this.getChildViews();t[o]=e,this.setChildViews(t)}.bind(this)).fail((function(){})).done()},deleteOneView:function(e){var t=e.target,o=$(t).attr("data-index"),n=this.getChildViews(),r=n.slice(0,o).concat(n.slice(o+1));this.setChildViews(r),this.update()},addChildViewObj:function(e,t){var o=this.getChildViews();o.push(e),this.setChildViews(o),this.update()},setChildViews:function(e){this.multiViewJSON.childViews=e},getChildViews:function(){return this.multiViewJSON.childViews||[]},update:function(){this.JSON.views=this.getChildViews(),this.renderAgain()}});o.MarkdownGrabber=u,o.DemonstrationBuilder=d,o.TextGrabber=l,o.MultiViewBuilder=h,o.MarkdownPresenter=m},{"../util/throttle":95,"../views":100,"../views/multiView":102,markdown:11,q:21,underscore:38}],98:[function(e,t,o){var n=e("backbone"),r=e("../app"),a=e("../stores/CommandLineStore"),i=e("../actions/CommandLineActions"),s=e("../log"),c=e("../util/keyboard"),l=n.View.extend({initialize:function(){r.getEvents().on("commandSubmittedPassive",this.addToCommandHistory,this),this.index=-1,this.commandParagraph=this.$("#prompt p.command")[0],this.focus(),r.getEvents().on("rollupCommands",this.rollupCommands,this),r.getEventBaton().stealBaton("keydown",this.onKeyDown,this),r.getEventBaton().stealBaton("keyup",this.onKeyUp,this),this.updatePrompt(" ")},events:{"blur #commandTextField":"hideCursor","focus #commandTextField":"showCursor"},blur:function(){this.hideCursor()},focus:function(){this.$("#commandTextField").focus(),this.showCursor()},hideCursor:function(){this.toggleCursor(!1)},showCursor:function(){this.toggleCursor(!0)},toggleCursor:function(e){$(this.commandParagraph).toggleClass("showCursor",e)},onKeyDown:function(e){if(9!==e.keyCode){var t=e.target;this.updatePrompt(t)}else e.preventDefault()},onKeyUp:function(e){this.onKeyDown(e);var t={enter:function(){this.submit()}.bind(this),up:function(){this.commandSelectChange(1)}.bind(this),down:function(){this.commandSelectChange(-1)}.bind(this)},o=c.mapKeycodeToKey(e.which||e.keyCode);void 0!==t[o]&&(e.preventDefault(),t[o](),this.onKeyDown(e))},badHtmlEncode:function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/</g,"&lt;").replace(/ /g,"&nbsp;").replace(/\n/g,"")},updatePrompt:function(e){e=e||{};var t=$("#commandTextField").val(),o=e.selectionStart,n=e.selectionEnd;t.length?o===n?(t+=" ",n+=1):void 0!==o&&void 0!==n||(o=Math.max(t.length-1,0),n=t.length):(t=" ",o=0,n=1);var a=t.substring(0,o),i=t.substring(o,n),s=t.substring(n,t.length),c="<span>"+this.badHtmlEncode(a)+'</span><span class="commandCursor">'+this.badHtmlEncode(i)+"</span><span>"+this.badHtmlEncode(s)+"</span>";this.commandParagraph.innerHTML=c,r.getEvents().trigger("commandScrollDown")},commandSelectChange:function(e){if(this.index+=e,this.index>=a.getCommandHistoryLength()||this.index<0)return this.clear(),void(this.index=-1);var t=a.getCommandHistory()[this.index];this.setTextField(t)},setTextField:function(e){this.$("#commandTextField").val(e)},clear:function(){this.setTextField("")},submit:function(){var e=this.$("#commandTextField").val().replace("\n","");this.clear(),this.submitCommand(e),this.index=-1},rollupCommands:function(e){var t=a.getCommandHistory().slice(1,Number(e)+1);t.reverse();var o="";t.forEach((function(e){o+=e+";"}),this),i.submitCommand(o)},addToCommandHistory:function(e){(e.length&&-1===this.index||e.length&&-1!==this.index&&a.getCommandHistory()[this.index]!==e)&&(i.submitCommand(e),s.commandEntered(e))},submitCommand:function(e){r.getEventBaton().trigger("commandSubmitted",e)}});o.CommandPromptView=l},{"../actions/CommandLineActions":42,"../app":46,"../log":67,"../stores/CommandLineStore":80,"../util/keyboard":92,backbone:1}],99:[function(e,t,o){var n=e("underscore"),r=e("q"),a=e("backbone"),i=e("../util"),s=e("../intl"),c=e("../util/keyboard").KeyboardListener,l=e("../models/commandModel").Command,u=e("../views").ModalTerminal,m=e("../views").ContainedBase,d=e("../visuals/visualization").Visualization,h=e("../git/headless"),p=m.extend({tagName:"div",className:"gitDemonstrationView box horizontal",template:n.template($("#git-demonstration-view").html()),events:{"click div.command > p.uiButton":"positive"},initialize:function(t){t=t||{},this.options=t,this.JSON=Object.assign({beforeMarkdowns:["## Git Commits","","Awesome!"],command:"git commit",afterMarkdowns:["Now you have seen it in action","","Go ahead and try the level!"]},t);var o=function(t){return e("markdown").markdown.toHTML(t.join("\n"))};this.JSON.beforeHTML=o(this.JSON.beforeMarkdowns),this.JSON.afterHTML=o(this.JSON.afterMarkdowns),this.container=new u({title:t.title||s.str("git-demonstration-title")}),this.render(),this.checkScroll(),this.navEvents=Object.assign({},a.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new c({events:this.navEvents,aliasMap:{enter:"positive",right:"positive",left:"negative"},wait:!0}),this.visFinished=!1,this.initVis(),t.wait||this.show()},receiveMetaNav:function(e,t){e.navEvents.on("positive",this.positive,this),this.metaContainerView=t},checkScroll:function(){this.$("div.demonstrationText").children().toArray().map((function(e){return e.clientHeight})).reduce((function(e,t){return e+t}))<this.$("div.demonstrationText").height()&&this.$("div.demonstrationText").addClass("noLongText")},dispatchBeforeCommand:function(){if(this.options.beforeCommand){var e=r.defer();h.getTreeQuick(this.options.beforeCommand,e),e.promise.then(function(e){this.mainVis.gitEngine.loadTree(e),this.mainVis.gitVisuals.refreshTreeHarsh()}.bind(this))}},takeControl:function(){this.hasControl=!0,this.keyboardListener.listen(),this.metaContainerView&&this.metaContainerView.lock()},releaseControl:function(){this.hasControl&&(this.hasControl=!1,this.keyboardListener.mute(),this.metaContainerView&&this.metaContainerView.unlock())},reset:function(){this.mainVis.reset(),this.dispatchBeforeCommand(),this.demonstrated=!1,this.$el.toggleClass("demonstrated",!1),this.$el.toggleClass("demonstrating",!1)},positive:function(){!this.demonstrated&&this.hasControl&&(this.demonstrated=!0,this.demonstrate())},demonstrate:function(){this.$el.toggleClass("demonstrating",!0);var e=r.defer();this.dispatchCommand(this.JSON.command,e),e.promise.then(function(){this.$el.toggleClass("demonstrating",!1),this.$el.toggleClass("demonstrated",!0),this.releaseControl()}.bind(this))},negative:function(e){this.$el.hasClass("demonstrating")||this.keyboardListener.passEventBack(e)},dispatchCommand:function(e,t){var o=[];i.splitTextCommand(e,(function(e){o.push(new l({rawStr:e}))}),this);var n=r.defer(),a=n.promise;o.forEach((function(e,t){a=(a=a.then(function(){var t=r.defer();return this.mainVis.gitEngine.dispatch(e,t),t.promise}.bind(this))).then((function(){return r.delay(300)}))}),this),a=a.then((function(){t.resolve()})),n.resolve()},tearDown:function(){this.mainVis.tearDown(),p.__super__.tearDown.apply(this)},hide:function(){this.releaseControl(),this.reset(),this.visFinished&&(this.mainVis.setTreeIndex(-1),this.mainVis.setTreeOpacity(0)),this.shown=!1,p.__super__.hide.apply(this)},show:function(){this.takeControl(),this.visFinished&&setTimeout(function(){this.shown&&(this.mainVis.setTreeIndex(300),this.mainVis.showHarsh())}.bind(this),1.5*this.getAnimationTime()),this.shown=!0,p.__super__.show.apply(this)},die:function(){this.visFinished&&p.__super__.die.apply(this)},initVis:function(){this.mainVis=new d({el:this.$("div.visHolder div.visHolderInside")[0],noKeyboardInput:!0,noClick:!0,smallCanvas:!0,zIndex:-1}),this.mainVis.customEvents.on("paperReady",function(){this.visFinished=!0,this.dispatchBeforeCommand(),this.shown&&this.show()}.bind(this))}});o.GitDemonstrationView=p},{"../git/headless":56,"../intl":61,"../models/commandModel":70,"../util":90,"../util/keyboard":92,"../views":100,"../visuals/visualization":113,backbone:1,markdown:11,q:21,underscore:38}],100:[function(e,t,o){(function(t){var n=e("underscore"),r=e("q"),a=e("backbone"),i=e("../app"),s=e("../intl"),c=(e("../log"),e("../util/constants")),l=e("../util/keyboard").KeyboardListener,u=e("../util/debounce"),m=e("../util/throttle"),d=a.View.extend({getDestination:function(){return this.destination||this.container.getInsideElement()},tearDown:function(){this.$el.remove(),this.container&&this.container.tearDown()},renderAgain:function(e){e=e||this.template(this.JSON),this.$el.html(e)},render:function(e){this.renderAgain(e);var t=this.getDestination();$(t).append(this.el)}}),h=d.extend({resolve:function(){this.deferred.resolve()},reject:function(){this.deferred.reject()}}),p=d.extend({positive:function(){this.navEvents.trigger("positive")},exit:function(){this.navEvents.trigger("exit")},negative:function(){this.navEvents.trigger("negative")}}),f=d.extend({getAnimationTime:function(){return 700},show:function(){this.container.show()},hide:function(){this.container.hide()},die:function(){this.hide(),setTimeout(function(){this.tearDown()}.bind(this),1.1*this.getAnimationTime())}}),g=f.extend({tagName:"a",className:"generalButton uiButton",template:n.template($("#general-button").html()),events:{click:"click"},initialize:function(e){e=e||{},this.navEvents=e.navEvents||Object.assign({},a.Events),this.destination=e.destination,this.destination||(this.container=new w),this.JSON={buttonText:e.buttonText||"General Button",wantsWrapper:void 0===e.wantsWrapper||e.wantsWrapper},this.render(),this.container&&!e.wait&&this.show()},click:function(){this.clickFunc||(this.clickFunc=m(this.sendClick.bind(this),500)),this.clickFunc()},sendClick:function(){this.navEvents.trigger("click")}.bind(this)}),b=h.extend({tagName:"div",className:"confirmCancelView box horizontal justify",template:n.template($("#confirm-cancel-template").html()),events:{"click .confirmButton":"resolve","click .cancelButton":"reject"},initialize:function(e){if(!e.destination)throw new Error("needmore");this.destination=e.destination,this.deferred=e.deferred||r.defer(),this.JSON={confirm:e.confirm||"Confirm",cancel:e.cancel||"Cancel"},this.render()}}),v=p.extend({tagName:"div",className:"leftRightView box horizontal center",template:n.template($("#left-right-template").html()),initialize:function(e){if(!e.destination||!e.events)throw new Error("needmore");this.destination=e.destination,this.pipeEvents=e.events,this.navEvents=Object.assign({},a.Events),this.JSON={showLeft:void 0===e.showLeft||e.showLeft,lastNav:void 0!==e.lastNav&&e.lastNav},this.render(),this.$("div.right").click(this.positive.bind(this)),this.$("div.left").click(this.negative.bind(this)),this.$("div.exit").click(this.exit.bind(this))},exit:function(){this.pipeEvents.trigger("exit"),v.__super__.exit.apply(this)},positive:function(){this.pipeEvents.trigger("positive"),v.__super__.positive.apply(this)},negative:function(){this.pipeEvents.trigger("negative"),v.__super__.negative.apply(this)}}),y=a.View.extend({tagName:"div",className:"modalView box horizontal center transitionOpacityLinear",template:n.template($("#modal-view-template").html()),getAnimationTime:function(){return 700},initialize:function(e){this.shown=!1,this.render()},render:function(){this.$el.html(this.template({})),$("body").append(this.el)},stealKeyboard:function(){i.getEventBaton().stealBaton("keydown",this.onKeyDown,this),i.getEventBaton().stealBaton("keyup",this.onKeyUp,this),i.getEventBaton().stealBaton("windowFocus",this.onWindowFocus,this),i.getEventBaton().stealBaton("documentClick",this.onDocumentClick,this),$("#commandTextField").blur()},releaseKeyboard:function(){i.getEventBaton().releaseBaton("keydown",this.onKeyDown,this),i.getEventBaton().releaseBaton("keyup",this.onKeyUp,this),i.getEventBaton().releaseBaton("windowFocus",this.onWindowFocus,this),i.getEventBaton().releaseBaton("documentClick",this.onDocumentClick,this),i.getEventBaton().trigger("windowFocus")},onWindowFocus:function(e){},onDocumentClick:function(e){},onKeyDown:function(e){e.preventDefault()},onKeyUp:function(e){e.preventDefault()},show:function(){this.toggleZ(!0),t.nextTick(function(){this.toggleShow(!0)}.bind(this))},hide:function(){this.toggleShow(!1),setTimeout(function(){this.shown||this.toggleZ(!1)}.bind(this),this.getAnimationTime())},getInsideElement:function(){return this.$(".contentHolder")},toggleShow:function(e){this.shown!==e&&(e?this.stealKeyboard():this.releaseKeyboard(),this.shown=e,this.$el.toggleClass("show",e))},toggleZ:function(e){this.$el.toggleClass("inFront",e)},tearDown:function(){this.$el.html(""),$("body")[0].removeChild(this.el)}}),w=f.extend({tagName:"div",className:"modalTerminal box flex1",template:n.template($("#terminal-window-template").html()),events:{"click div.inside":"onClick"},initialize:function(e){e=e||{},this.navEvents=e.events||Object.assign({},a.Events),this.container=new y,this.JSON={title:e.title},this.render()},updateTitle:function(e){this.$(".modal-title").text(e)},onClick:function(){this.navEvents.trigger("click")},getInsideElement:function(){return this.$(".inside")}}),k=f.extend({tagName:"div",template:n.template($("#modal-alert-template").html()),initialize:function(e){this.options=e||{},this.JSON={title:e.title||"Something to say",text:e.text||"Here is a paragraph",markdown:e.markdown},e.markdowns&&(this.JSON.markdown=e.markdowns.join("\n")),this.container=new w({}),this.render(),e.wait||this.show()},render:function(){var t=this.JSON.markdown?e("markdown").markdown.toHTML(this.JSON.markdown):this.template(this.JSON);this.options._dangerouslyInsertHTML&&(t+=this.options._dangerouslyInsertHTML),k.__super__.render.apply(this,[t])}}),C=a.View.extend({initialize:function(e){e=e||{},this.deferred=e.deferred||r.defer(),this.modalAlert=new k(Object.assign({},{markdown:"#you sure?"},e));var t=r.defer();this.buttonDefer=t,this.confirmCancel=new b({deferred:t,destination:this.modalAlert.getDestination()}),t.promise.then(this.deferred.resolve).fail(this.deferred.reject).done(function(){this.close()}.bind(this)),this.navEvents=Object.assign({},a.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new l({events:this.navEvents,aliasMap:{enter:"positive",esc:"negative"}}),e.wait||this.modalAlert.show()},positive:function(){this.buttonDefer.resolve()},negative:function(){this.buttonDefer.reject()},getAnimationTime:function(){return 700},show:function(){this.modalAlert.show()},hide:function(){this.modalAlert.hide()},getPromise:function(){return this.deferred.promise},close:function(){this.keyboardListener.mute(),this.modalAlert.die()}}),A=C.extend({initialize:function(t){var o,n=(t=t||{}).nextLevel?s.getName(t.nextLevel):"",r=s.getDialog(e("../dialogs/nextLevel"))[0].options.markdowns.join("\n");r=s.template(r,{numCommands:t.numCommands,best:t.best}),r=t.numCommands<=t.best?r+"\n\n"+s.str("finish-dialog-win"):r+"\n\n"+s.str("finish-dialog-lose",{best:t.best}),r+="\n\n",t.nextLevel?r+=s.str("finish-dialog-next",{nextLevel:n}):o='<p class="catchadream">'+s.str("finish-dialog-finished")+" (ﾉ^_^)ﾉ (ﾉ^_^)ﾉ (ﾉ^_^)ﾉ</p>",t=Object.assign({},t,{markdown:r,_dangerouslyInsertHTML:o}),A.__super__.initialize.apply(this,[t])}}),x=a.View.extend({initialize:function(e){this.grabBatons(),this.modalAlert=new k({markdowns:this.markdowns}),this.modalAlert.show()},grabBatons:function(){i.getEventBaton().stealBaton(this.eventBatonName,this.batonFired,this)},releaseBatons:function(){i.getEventBaton().releaseBaton(this.eventBatonName,this.batonFired,this)},finish:function(){this.releaseBatons(),this.modalAlert.die()}}),E=x.extend({initialize:function(e){this.eventBatonName="windowSizeCheck",this.markdowns=["## That window size is not supported :-/","Please resize your window back to a supported size","","(and of course, pull requests to fix this are appreciated :D)"],E.__super__.initialize.apply(this,[e])},batonFired:function(e){e.w>c.VIEWPORT.minWidth&&e.h>c.VIEWPORT.minHeight&&this.finish()}}),_=x.extend({initialize:function(e){if(!e||!e.level)throw new Error("need level");this.eventBatonName="zoomChange",this.markdowns=["## That zoom level of "+e.level+" is not supported :-/","Please zoom back to a supported zoom level with Ctrl + and Ctrl -","","(and of course, pull requests to fix this are appreciated :D)"],_.__super__.initialize.apply(this,[e])},batonFired:function(e){e<=c.VIEWPORT.maxZoom&&e>=c.VIEWPORT.minZoom&&this.finish()}}),M=d.extend({tagName:"div",className:"canvasTerminalHolder box flex1",template:n.template($("#terminal-window-bare-template").html()),events:{"click div.wrapper":"onClick"},initialize:function(e){e=e||{},this.parent=e.parent,this.minHeight=e.minHeight||200,this.destination=$("body"),this.JSON={title:e.title||s.str("goal-to-reach"),text:e.text||s.str("hide-goal")},this.render(),this.inDom=!0,this.$terminal=this.$el.find(".terminal-window-holder").first(),this.$terminal.height(.8*$(window).height()),this.$terminal.draggable({cursor:"move",handle:".toolbar",containment:"#interfaceWrapper",scroll:!1}),$(window).on("resize",u(this.recalcLayout.bind(this),300)),e.additionalClass&&this.$el.addClass(e.additionalClass)},getAnimationTime:function(){return 700},onClick:function(){this.die()},die:function(){this.minimize(),this.inDom=!1,setTimeout(function(){this.tearDown()}.bind(this),this.getAnimationTime())},minimize:function(){this.parent.trigger("minimizeCanvas",{left:this.$terminal.css("left"),top:this.$terminal.css("top")},{width:this.$terminal.css("width"),height:this.$terminal.css("height")}),this.$terminal.animate({height:"0px",opacity:0},this.getAnimationTime())},restore:function(e,t){var o=this;e=e||{top:this.$terminal.css("top"),left:this.$terminal.css("left")},t=t||{width:this.$terminal.css("width"),height:this.$terminal.css("height")},this.$terminal.css({top:e.top,left:e.left,width:t.width,height:"0px",opacity:"0"}),this.$terminal.animate({height:t.height,opacity:1},this.getAnimationTime(),(function(){o.recalcLayout()}))},recalcLayout:function(){var e=this.parent,t=0,o=0,n=0,r=this.$terminal.outerWidth(),a=this.$terminal.outerHeight(),i=this.$terminal.offset().left,s=this.$terminal.offset().top,c=$(window).width()-(i+r),l=$(window).height()-(s+a),u=.75*$(window).height(),m=.95*$(window).height();s<0&&(o=-s),i<0&&(t=-i),c<0&&(t=c),l<0&&(o=l),a<u&&(n=u-a),a>m&&(n=m-a),i=Math.max(i+t,0),s=Math.max(s+o,0),a=Math.max(a+n,u),this.$terminal.animate({left:i+"px",top:s+"px",height:a+"px"},this.getAnimationTime(),(function(){e.trigger("resizeCanvas")}))},getCanvasLocation:function(){return this.$("div.inside")[0]}});o.BaseView=d,o.GeneralButton=g,o.ModalView=y,o.ModalTerminal=w,o.ModalAlert=k,o.ContainedBase=f,o.ConfirmCancelView=b,o.LeftRightView=v,o.ZoomAlertWindow=_,o.ConfirmCancelTerminal=C,o.WindowSizeAlertWindow=E,o.CanvasTerminalHolder=M,o.NextLevelConfirm=A}).call(this,e("_process"))},{"../app":46,"../dialogs/nextLevel":51,"../intl":61,"../log":67,"../util/constants":84,"../util/debounce":85,"../util/keyboard":92,"../util/throttle":95,_process:15,backbone:1,markdown:11,q:21,underscore:38}],101:[function(e,t,o){var n=e("underscore"),r=(e("q"),e("backbone")),a=e("../stores/LocaleStore"),i=e("../util"),s=e("../util/debounce"),c=e("../intl"),l=e("../log"),u=e("../util/keyboard").KeyboardListener,m=e("../app"),d=e("../stores/LevelStore"),h=e("../views").ModalTerminal,p=e("../views").ContainedBase,f=e("../views").BaseView,g=e("../../levels"),b=p.extend({tagName:"div",className:"levelDropdownView box vertical",template:n.template($("#level-dropdown-view").html()),events:{"click div.levelDropdownTab":"onTabClick"},initialize:function(e){e=e||{};var t=i.parseQueryString(window.location.href);this.JSON={selectedTab:t.defaultTab||"main",tabs:[{id:"main",name:c.str("main-levels-tab")},{id:"remote",name:c.str("remote-levels-tab")}]},this.navEvents=Object.assign({},r.Events),this.navEvents.on("clickedID",s(this.loadLevelID.bind(this),300,!0)),this.navEvents.on("negative",this.negative,this),this.navEvents.on("positive",this.positive,this),this.navEvents.on("left",this.left,this),this.navEvents.on("right",this.right,this),this.navEvents.on("up",this.up,this),this.navEvents.on("down",this.down,this),this.keyboardListener=new u({events:this.navEvents,aliasMap:{esc:"negative",enter:"positive"},wait:!0}),this.sequences=d.getSequences(),this.sequenceToLevels=d.getSequenceToLevels(),this.container=new h({title:c.str("select-a-level")});var o=this;a.subscribe((function(){o.render.apply(o)})),d.subscribe((function(){o.render()})),this.render(),e.wait||this.show()},render:function(){this.container.updateTitle(c.str("select-a-level")),this.updateTabNames([c.str("main-levels-tab"),c.str("remote-levels-tab")]),b.__super__.render.apply(this,arguments),this.buildSequences()},onTabClick:function(e){var t=e.target||e.srcElement,o=$(t).attr("data-id");o!==this.JSON.selectedTab&&(this.selectedTab=o,this.updateTabTo(o))},updateTabTo:function(e){this.JSON.selectedTab=e,this.render(),this.selectedID&&(this.selectedSequence=this.getSequencesOnTab()[0],this.selectedIndex=0,this.updateSelectedIcon())},updateTabNames:function(e){for(var t=0;t<e.length;++t)this.JSON.tabs[t].name=e[t]},positive:function(){this.selectedID&&this.loadLevelID(this.selectedID)},left:function(){this.turnOnKeyboardSelection()||this.leftOrRight(-1)},updateSelectedIcon:function(){this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},leftOrRight:function(e){this.deselectIconByID(this.selectedID);var t=this.selectedIndex+e,o=this.getCurrentSequence(),n=this.JSON.tabs;t>=o.length&&this.getTabIndex()+1<n.length?(this.switchToTabIndex(this.getTabIndex()+1),this.selectedIndex=0):t<0&&this.getTabIndex()-1>=0?(this.switchToTabIndex(this.getTabIndex()-1),this.selectedIndex=0):this.selectedIndex=this.wrapIndex(this.selectedIndex+e,this.getCurrentSequence()),this.updateSelectedIcon()},right:function(){this.turnOnKeyboardSelection()||this.leftOrRight(1)},up:function(){this.turnOnKeyboardSelection()||(this.selectedSequence=this.getPreviousSequence(),this.downOrUp())},down:function(){this.turnOnKeyboardSelection()||(this.selectedSequence=this.getNextSequence(),this.downOrUp())},downOrUp:function(){this.selectedIndex=this.boundIndex(this.selectedIndex,this.getCurrentSequence()),this.deselectIconByID(this.selectedID),this.updateSelectedIcon()},turnOnKeyboardSelection:function(){return!this.selectedID&&(this.selectFirst(),!0)},turnOffKeyboardSelection:function(){this.selectedID&&(this.deselectIconByID(this.selectedID),this.selectedID=void 0,this.selectedIndex=void 0,this.selectedSequence=void 0)},getTabIndex:function(){return this.JSON.tabs.map((function(e){return e.id})).indexOf(this.JSON.selectedTab)},switchToTabIndex:function(e){var t=this.JSON.tabs[e].id;this.updateTabTo(t)},wrapIndex:function(e,t){return e=(e=e>=t.length?0:e)<0?t.length-1:e},boundIndex:function(e,t){return e=(e=e>=t.length?t.length-1:e)<0?0:e},getSequencesOnTab:function(){return this.sequences.filter((function(e){return g.getTabForSequence(e)===this.JSON.selectedTab}),this)},getNextSequence:function(){var e=this.getSequenceIndex(this.selectedSequence),t=this.wrapIndex(e+1,this.getSequencesOnTab());return this.getSequencesOnTab()[t]},getPreviousSequence:function(){var e=this.getSequenceIndex(this.selectedSequence),t=this.wrapIndex(e-1,this.getSequencesOnTab());return this.getSequencesOnTab()[t]},getSequenceIndex:function(e){var t=this.getSequencesOnTab().indexOf(e);if(t<0)throw new Error("didnt find");return t},getIndexForID:function(e){return d.getLevel(e).index},selectFirst:function(){var e=this.sequenceToLevels[this.getSequencesOnTab()[0]][0].id;this.selectIconByID(e),this.selectedIndex=0,this.selectedSequence=this.getSequencesOnTab()[0]},getCurrentSequence:function(){return this.sequenceToLevels[this.selectedSequence]},getSelectedID:function(){return this.sequenceToLevels[this.selectedSequence][this.selectedIndex].id},selectIconByID:function(e){this.toggleIconSelect(e,!0)},deselectIconByID:function(e){this.toggleIconSelect(e,!1)},toggleIconSelect:function(e,t){this.selectedID=e,$("#levelIcon-"+e).toggleClass("selected",t),this.seriesViews.forEach((function(t){-1!==t.levelIDs.indexOf(e)&&t.updateAboutForLevelID(e)}),this)},negative:function(){this.hide()},testOption:function(e){return this.currentCommand&&new RegExp("--"+e).test(this.currentCommand.get("rawStr"))},show:function(e,t){this.currentCommand=t,this.updateSolvedStatus(),this.showDeferred=e,this.keyboardListener.listen(),b.__super__.show.apply(this)},hide:function(){this.showDeferred&&this.showDeferred.resolve(),this.showDeferred=void 0,this.keyboardListener.mute(),this.turnOffKeyboardSelection(),b.__super__.hide.apply(this)},loadLevelID:function(e){if(!this.testOption("noOutput")){m.getEventBaton().trigger("commandSubmitted","level "+e);var t=d.getLevel(e).name.en_US;l.levelSelected(t)}this.hide()},updateSolvedStatus:function(){this.seriesViews.forEach((function(e){e.updateSolvedStatus()}),this)},buildSequences:function(){this.seriesViews=[],this.getSequencesOnTab().forEach((function(e){this.seriesViews.push(new v({destination:this.$el,name:e,navEvents:this.navEvents}))}),this)}}),v=f.extend({tagName:"div",className:"seriesView box flex1 vertical",template:n.template($("#series-view").html()),events:{"click div.levelIcon":"click","mouseenter div.levelIcon":"enterIcon"},initialize:function(e){this.name=e.name||"intro",this.navEvents=e.navEvents,this.info=d.getSequenceInfo(this.name),this.levels=d.getLevelsInSequence(this.name),this.levelIDs=[];var t=null;this.levels.forEach((function(e){null===t&&(t=this.formatLevelAbout(e.id)),this.levelIDs.push(e.id)}),this),this.destination=e.destination,this.JSON={displayName:c.getIntlKey(this.info,"displayName"),about:c.getIntlKey(this.info,"about")||"&nbsp;",levelInfo:t,ids:this.levelIDs},this.render(),this.updateSolvedStatus()},updateSolvedStatus:function(){this.$("div.levelIcon").each((function(e,t){var o=$(t).attr("data-id");$(t).toggleClass("solved",d.isLevelSolved(o))}))},getEventID:function(e){var t=e.target;return $(t).attr("data-id")},setAbout:function(e){this.$("p.levelInfo").text(e)},enterIcon:function(e){var t=this.getEventID(e);this.updateAboutForLevelID(t)},updateAboutForLevelID:function(e){this.setAbout(this.formatLevelAbout(e))},formatLevelAbout:function(e){var t=d.getLevel(e);return this.getLevelNumberFromID(e)+": "+c.getName(t)},getLevelNumberFromID:function(e){return e.replace(/[^0-9]/g,"")},click:function(e){var t=this.getEventID(e);this.navEvents.trigger("clickedID",t)}});o.LevelDropdownView=b},{"../../levels":115,"../app":46,"../intl":61,"../log":67,"../stores/LevelStore":82,"../stores/LocaleStore":83,"../util":90,"../util/debounce":85,"../util/keyboard":92,"../views":100,backbone:1,q:21,underscore:38}],102:[function(e,t,o){var n=e("q"),r=e("backbone"),a=e("../views").LeftRightView,i=e("../views").ModalAlert,s=e("../views/gitDemonstrationView").GitDemonstrationView,c=e("../views/builderViews").MarkdownPresenter,l=e("../util/keyboard").KeyboardListener,u=e("../util/debounce"),m=r.View.extend({tagName:"div",className:"multiView",navEventDebounce:550,deathTime:700,typeToConstructor:{ModalAlert:i,GitDemonstrationView:s,MarkdownPresenter:c},initialize:function(e){e=e||{},this.childViewJSONs=e.childViews||[{type:"ModalAlert",options:{markdown:"Woah wtf!!"}},{type:"GitDemonstrationView",options:{command:"git checkout -b side; git commit; git commit"}},{type:"ModalAlert",options:{markdown:"Im second"}}],this.deferred=e.deferred||n.defer(),this.childViews=[],this.currentIndex=0,this.navEvents=Object.assign({},r.Events),this.navEvents.on("negative",this.getNegFunc(),this),this.navEvents.on("positive",this.getPosFunc(),this),this.navEvents.on("quit",this.finish,this),this.navEvents.on("exit",this.finish,this),this.keyboardListener=new l({events:this.navEvents,aliasMap:{left:"negative",right:"positive",enter:"positive",esc:"quit"}}),this.render(),e.wait||this.start()},onWindowFocus:function(){},getAnimationTime:function(){return 700},getPromise:function(){return this.deferred.promise},getPosFunc:function(){return u(function(){this.navForward()}.bind(this),this.navEventDebounce,!0)},getNegFunc:function(){return u(function(){this.navBackward()}.bind(this),this.navEventDebounce,!0)},lock:function(){this.locked=!0},unlock:function(){this.locked=!1},navForward:function(){if(!this.locked)return this.currentIndex===this.childViews.length-1?(this.hideViewIndex(this.currentIndex),void this.finish()):void this.navIndexChange(1)},navBackward:function(){0!==this.currentIndex&&this.navIndexChange(-1)},navIndexChange:function(e){this.hideViewIndex(this.currentIndex),this.currentIndex+=e,this.showViewIndex(this.currentIndex)},hideViewIndex:function(e){this.childViews[e].hide()},showViewIndex:function(e){this.childViews[e].show()},finish:function(){this.keyboardListener.mute(),this.childViews.forEach((function(e){e.die()})),this.deferred.resolve()},start:function(){this.showViewIndex(this.currentIndex)},createChildView:function(e){var t=e.type;if(!this.typeToConstructor[t])throw new Error('no constructor for type "'+t+'"');return new this.typeToConstructor[t](Object.assign({},e.options,{wait:!0}))},addNavToView:function(e,t){var o=new a({events:this.navEvents,destination:e.getDestination(),showLeft:0!==t,lastNav:t===this.childViewJSONs.length-1});e.receiveMetaNav&&e.receiveMetaNav(o,this)},render:function(){this.childViewJSONs.forEach((function(e,t){var o=this.createChildView(e);this.childViews.push(o),this.addNavToView(o,t)}),this)}});o.MultiView=m},{"../util/debounce":85,"../util/keyboard":92,"../views":100,"../views/builderViews":97,"../views/gitDemonstrationView":99,backbone:1,q:21}],103:[function(e,t,o){e("../util/errors").GitError;var n=e("underscore"),r=e("q"),a=e("backbone"),i=e("../views").ModalTerminal,s=e("../views").ContainedBase,c=e("../views").ConfirmCancelView,l=s.extend({tagName:"div",template:n.template($("#interactive-rebase-template").html()),initialize:function(e){this.deferred=e.deferred,this.rebaseMap={},this.entryObjMap={},this.options=e,this.rebaseEntries=new m,e.toRebase.reverse(),e.toRebase.forEach((function(e){var t=e.get("id");this.rebaseMap[t]=e,this.entryObjMap[t]=new u({id:t}),this.rebaseEntries.add(this.entryObjMap[t])}),this),this.container=new i({title:"Interactive Rebase"}),this.render(),this.show(),e.aboveAll&&$("#canvasHolder").css("display","none")},restoreVis:function(){$("#canvasHolder").css("display","inherit")},confirm:function(){this.die(),this.options.aboveAll&&this.restoreVis();var e=[];this.$("ul.rebaseEntries li").each((function(t,o){e.push(o.id)}));var t=[];e.forEach((function(e){this.entryObjMap[e].get("pick")&&t.unshift(this.rebaseMap[e])}),this),t.reverse(),this.deferred.resolve(t),this.$el.html("")},render:function(){var e={num:Object.keys(this.rebaseMap).length,solutionOrder:this.options.initialCommitOrdering},t=this.container.getInsideElement();this.$el.html(this.template(e)),$(t).append(this.el);var o=this.$("ul.rebaseEntries");this.rebaseEntries.each((function(e){new d({el:o,model:e})}),this),o.sortable({axis:"y",placeholder:"rebaseEntry transitionOpacity ui-state-highlight",appendTo:"parent"}),this.makeButtons()},cancel:function(){this.hide(),this.options.aboveAll&&this.restoreVis(),this.deferred.resolve([])},makeButtons:function(){var e=r.defer();e.promise.then(function(){this.confirm()}.bind(this)).fail(function(){this.cancel()}.bind(this)).done(),new c({destination:this.$(".confirmCancel"),deferred:e})}}),u=a.Model.extend({defaults:{pick:!0},toggle:function(){this.set("pick",!this.get("pick"))}}),m=a.Collection.extend({model:u}),d=a.View.extend({tagName:"li",template:n.template($("#interactive-rebase-entry-template").html()),toggle:function(){this.model.toggle(),this.listEntry.toggleClass("notPicked",!this.model.get("pick"))},initialize:function(e){this.render()},render:function(){this.$el.append(this.template(this.model.toJSON())),this.listEntry=this.$el.children(":last"),this.listEntry.delegate("#toggleButton","click",function(){this.toggle()}.bind(this))}});o.InteractiveRebaseView=l},{"../util/errors":87,"../views":100,backbone:1,q:21,underscore:38}],104:[function(e,t,o){e("backbone");var n=e("q"),r=e("./index").Animation,a=e("./index").PromiseAnimation,i=e("../../util/constants").GRAPHICS,s={},c=function(e,t){var o=1*i.defaultAnimationTime,n=2*o;return{animation:function(){e.refreshTree(o),t.setBirth(),t.parentInFront(),e.visBranchesFront(),t.animateUpdatedPosition(n,"bounce"),t.animateOutgoingEdges(o)},duration:Math.max(o,n)}};s.genCommitBirthAnimation=function(e,t,o){if(!e)throw new Error("Need animation queue to add closure to!");var n=t.get("visNode"),a=c(o,n);e.add(new r({closure:a.animation,duration:a.duration}))},s.genCommitBirthPromiseAnimation=function(e,t){var o=e.get("visNode");return new a(c(t,o))},s.highlightEachWithPromise=function(e,t,o){return t.forEach(function(t){e=e.then(function(){return this.playHighlightPromiseAnimation(t,o)}.bind(this))}.bind(this)),e},s.playCommitBirthPromiseAnimation=function(e,t){var o=this.genCommitBirthPromiseAnimation(e,t);return o.play(),o.getPromise()},s.playRefreshAnimationAndFinish=function(e,t){var o=new a({closure:function(){e.refreshTree()}});o.play(),t.thenFinish(o.getPromise())},s.genRefreshPromiseAnimation=function(e){return new a({closure:function(){e.refreshTree()}})},s.playRefreshAnimationSlow=function(e){var t=i.defaultAnimationTime;return this.playRefreshAnimation(e,2*t)},s.playRefreshAnimation=function(e,t){var o=new a({duration:t,closure:function(){e.refreshTree(t)}});return o.play(),o.getPromise()},s.refreshTree=function(e,t){e.add(new r({closure:function(){t.refreshTree()}}))},s.genHighlightPromiseAnimation=function(e,t){var o=t.get("visBranch")||t.get("visNode")||t.get("visTag");if(!o)throw console.log(t),new Error("could not find vis object for dest obj");var n=e.get("visNode");return new a(function(e,t){var o=2*(.66*i.defaultAnimationTime);return{animation:function(){e.highlightTo(t,o,"easeInOut")},duration:1.5*o}}(n,o))},s.playHighlightPromiseAnimation=function(e,t){var o=this.genHighlightPromiseAnimation(e,t);return o.play(),o.getPromise()},s.getDelayedPromise=function(e){var t=n.defer();return setTimeout(t.resolve,e||1e3),t.promise},s.delay=function(e,t){t=t||i.defaultAnimationTime,e.add(new r({closure:function(){},duration:t}))},o.AnimationFactory=s},{"../../util/constants":84,"./index":105,backbone:1,q:21}],105:[function(e,t,o){var n=e("q"),r=e("backbone"),a=e("../../actions/GlobalStateActions"),i=e("../../util/constants").GRAPHICS,s=r.Model.extend({defaults:{duration:i.defaultAnimationTime,closure:null},validateAtInit:function(){if(!this.get("closure"))throw new Error("give me a closure!")},initialize:function(e){this.validateAtInit()},run:function(){this.get("closure")()}}),c=r.Model.extend({defaults:{animations:null,index:0,callback:null,defer:!1,promiseBased:!1},initialize:function(e){this.set("animations",[]),e.callback||console.warn("no callback")},thenFinish:function(e,t){e.then(function(){this.finish()}.bind(this)),e.fail((function(e){throw console.log("uncaught error",e),e})),this.set("promiseBased",!0),t&&t.resolve()},add:function(e){if(!(e instanceof s))throw new Error("Need animation not something else");this.get("animations").push(e)},start:function(){this.set("index",0),a.changeIsAnimating(!0),this.next()},finish:function(){a.changeIsAnimating(!1),this.get("callback")()},next:function(){var e=this.get("animations"),t=this.get("index");if(t>=e.length)this.finish();else{var o=e[t],n=o.get("duration");o.run(),this.set("index",t+1),setTimeout(function(){this.next()}.bind(this),n)}}}),l=r.Model.extend({defaults:{deferred:null,closure:null,duration:i.defaultAnimationTime},initialize:function(e){if(!e.closure&&!e.animation)throw new Error("need closure or animation");this.set("closure",e.closure||e.animation),this.set("duration",e.duration||this.get("duration")),this.set("deferred",e.deferred||n.defer())},getPromise:function(){return this.get("deferred").promise},play:function(){this.get("closure")(),setTimeout(function(){this.get("deferred").resolve()}.bind(this),this.get("duration"))},then:function(e){return this.get("deferred").promise.then(e)}});l.fromAnimation=function(e){return new l({closure:e.get("closure"),duration:e.get("duration")})},o.Animation=s,o.PromiseAnimation=l,o.AnimationQueue=c},{"../../actions/GlobalStateActions":43,"../../util/constants":84,backbone:1,q:21}],106:[function(e,t,o){var n=e("q"),r=e("../intl"),a=e("../util/constants").GRAPHICS,i=e("../util/debounce"),s=e("../stores/GlobalStateStore"),c=e("../visuals/visNode").VisNode,l=e("../visuals/visBranch").VisBranch,u=e("../visuals/visBranch").VisBranchCollection,m=e("../visuals/visTag").VisTag,d=e("../visuals/visTag").VisTagCollection,h=e("../visuals/visEdge").VisEdge,p=e("../visuals/visEdge").VisEdgeCollection;function f(t){t=t||{},this.options=t,this.visualization=t.visualization,this.commitCollection=t.commitCollection,this.branchCollection=t.branchCollection,this.tagCollection=t.tagCollection,this.visNodeMap={},this.visEdgeCollection=new p,this.visBranchCollection=new u,this.visTagCollection=new d,this.commitMap={},this.rootCommit=null,this.branchStackMap=null,this.tagStackMap=null,this.upstreamBranchSet=null,this.upstreamTagSet=null,this.upstreamHeadSet=null,this.paper=t.paper,this.gitReady=!1,this.branchCollection.on("add",this.addBranchFromEvent,this),this.branchCollection.on("remove",this.removeBranch,this),this.tagCollection.on("add",this.addTagFromEvent,this),this.tagCollection.on("remove",this.removeTag,this),this.deferred=[],this.flipFraction=.65;var o=e("../app"),n=this;this._onRefreshTree=function(){n.refreshTree()},o.getEvents().on("refreshTree",this._onRefreshTree,this)}f.prototype.defer=function(e){this.deferred.push(e)},f.prototype.deferFlush=function(){this.deferred.forEach((function(e){e()}),this),this.deferred=[]},f.prototype.resetAll=function(){this.visEdgeCollection.toArray().forEach((function(e){e.remove()}),this),this.visBranchCollection.toArray().forEach((function(e){e.remove()}),this),this.visTagCollection.toArray().forEach((function(e){e.remove()}),this),Object.values(this.visNodeMap).forEach((function(e){e.remove()}),this),this.visEdgeCollection.reset(),this.visBranchCollection.reset(),this.visTagCollection.reset(),this.visNodeMap={},this.rootCommit=null,this.commitMap={}},f.prototype.tearDown=function(){this.resetAll(),this.paper.remove(),e("../app").getEvents().removeListener("refreshTree",this._onRefreshTree)},f.prototype.assignGitEngine=function(e){this.gitEngine=e,this.initHeadBranch(),this.deferFlush()},f.prototype.getVisualization=function(){return this.visualization},f.prototype.initHeadBranch=function(){this.addBranchFromEvent(this.gitEngine.HEAD)},f.prototype.getScreenPadding=function(){var e=s.getFlipTreeY()?3:1.5;return{widthPadding:1.5*a.nodeRadius,topHeightPadding:a.nodeRadius*e,bottomHeightPadding:5*a.nodeRadius}},f.prototype.getPosBoundaries=function(){return this.gitEngine.hasOrigin()?{min:0,max:.5}:this.gitEngine.isOrigin()?{min:.5,max:1}:{min:0,max:1}},f.prototype.getFlipPos=function(){var e=this.getPosBoundaries(),t=e.min,o=e.max;return this.flipFraction*(o-t)+t},f.prototype.getIsGoalVis=function(){return!!this.options.isGoalVis},f.prototype.getLevelBlob=function(){return this.visualization.options.levelBlob||{}},f.prototype.toScreenCoords=function(e){if(!this.paper.width)throw new Error("being called too early for screen coords");var t,o,n,r,a=this.getScreenPadding(),i=function(e,t,o){return o+e*(t-2*o)}(e.x,this.paper.width,a.widthPadding),c=(t=e.y,o=this.paper.height,n=a.topHeightPadding,r=a.bottomHeightPadding,n+t*(o-r-n));return s.getFlipTreeY()&&(c=this.paper.height-c),{x:i,y:c}},f.prototype.animateAllAttrKeys=function(e,t,o,r){var i=n.defer(),s=function(n){n.animateAttrKeys(e,t,o,r)};this.visBranchCollection.each(s),this.visEdgeCollection.each(s),this.visTagCollection.each(s),Object.values(this.visNodeMap).forEach(s);var c=void 0!==o?o:a.defaultAnimationTime;return setTimeout((function(){i.resolve()}),c),i.promise},f.prototype.finishAnimation=function(e){if(!(e=e||1))throw new Error("need speed by time i finish animation"+e);var t=n.defer(),o=n.defer(),i=a.defaultAnimationTime,s=a.nodeRadius,c=r.str("solved-level"),l=null,u=function(){(l=this.paper.text(this.paper.width/2,this.paper.height/2,c)).attr({opacity:0,"font-weight":500,"font-size":"32pt","font-family":"Monaco, Courier, font-monospace",stroke:"#000","stroke-width":2,fill:"#000"}),l.animate({opacity:1},i)}.bind(this);return t.promise.then(function(){return this.animateAllAttrKeys({exclude:["circle"]},{opacity:0},1.1*i/e)}.bind(this)).then(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:2*s},1.5*i/e)}.bind(this)).then(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:.75*s},.5*i/e)}.bind(this)).then(function(){return u(),this.explodeNodes(e)}.bind(this)).then(function(){return this.explodeNodes(e)}.bind(this)).then(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{},1.25*i)}.bind(this)).then(function(){return l.animate({opacity:0},i,void 0,void 0,(function(){l.remove()})),this.animateAllAttrKeys({},{})}.bind(this)).then((function(){o.resolve()})).fail((function(e){console.warn("animation error"+e)})).done(),t.resolve(),o.promise},f.prototype.explodeNodes=function(e){var t=n.defer(),o=[];Object.values(this.visNodeMap).forEach((function(t){o.push(t.getExplodeStepFunc(e))}));var r=setInterval((function(){var e=[];if(o.forEach((function(t){t()&&e.push(t)})),!e.length)return clearInterval(r),void t.resolve();o=e}),.025);return t.promise},f.prototype.animateAllFromAttrToAttr=function(e,t,o){var n=function(n){var r=n.getID();o.includes(r)||e[r]&&t[r]&&n.animateFromAttrToAttr(e[r],t[r])};this.visBranchCollection.each(n),this.visEdgeCollection.each(n),this.visTagCollection.each(n),Object.values(this.visNodeMap).forEach(n)},f.prototype.genSnapshot=function(){this.fullCalc();var e={};return Object.values(this.visNodeMap).forEach((function(t){e[t.get("id")]=t.getAttributes()}),this),this.visBranchCollection.each((function(t){e[t.getID()]=t.getAttributes()}),this),this.visEdgeCollection.each((function(t){e[t.getID()]=t.getAttributes()}),this),this.visTagCollection.each((function(t){e[t.getID()]=t.getAttributes()}),this),e},f.prototype.refreshTree=function(e){this.gitReady&&this.gitEngine.rootCommit&&(this.fullCalc(),this.animateAll(e))},f.prototype.refreshTreeHarsh=function(){this.fullCalc(),this.animateAll(0)},f.prototype.animateAll=function(e){this.zIndexReflow(),this.animateEdges(e),this.animateNodePositions(e),this.animateRefs(e)},f.prototype.fullCalc=function(){this.calcTreeCoords(),this.calcGraphicsCoords()},f.prototype.calcTreeCoords=function(){if(!this.rootCommit)throw new Error("grr, no root commit!");this.calcUpstreamSets(),this.calcBranchStacks(),this.calcTagStacks(),this.calcDepth(),this.calcWidth()},f.prototype.calcGraphicsCoords=function(){this.visBranchCollection.each((function(e){e.updateName()})),this.visTagCollection.each((function(e){e.updateName()}))},f.prototype.calcUpstreamSets=function(){this.upstreamBranchSet=this.gitEngine.getUpstreamBranchSet(),this.upstreamHeadSet=this.gitEngine.getUpstreamHeadSet(),this.upstreamTagSet=this.gitEngine.getUpstreamTagSet()},f.prototype.getCommitUpstreamBranches=function(e){return this.branchStackMap[e.get("id")]},f.prototype.getBlendedHuesForCommit=function(e){var t=this.upstreamBranchSet[e.get("id")];if(!t)throw new Error("that commit doesn't have upstream branches!");return this.blendHuesFromBranchStack(t)},f.prototype.blendHuesFromBranchStack=function(e){var t=[];return e.forEach((function(e){var o=e.obj.get("visBranch").get("fill");if("hsb"!==o.slice(0,3)){var n=Raphael.color(o);o=(o="hsb("+String(n.h)+","+String(n.l))+","+String(n.s)+")"}t.push(o)})),function(e){var t=0,o=0,n=0,r=0,a=e.length;e.forEach((function(e){var a=e.split("(")[1];a=(a=a.split(")")[0]).split(","),n+=parseFloat(a[1]),r+=parseFloat(a[2]);var i=parseFloat(a[0])*Math.PI*2;t+=Math.cos(i),o+=Math.sin(i)})),t/=a,o/=a,n/=a,r/=a;var i=Math.atan2(o,t)/(2*Math.PI);i<0&&(i+=1);return"hsb("+String(i)+","+String(n)+","+String(r)+")"}(t)},f.prototype.getCommitUpstreamStatus=function(e){if(!this.upstreamBranchSet)throw new Error("Can't calculate this yet!");var t=e.get("id"),o=this.upstreamBranchSet,n=this.upstreamHeadSet,r=this.upstreamTagSet;return o[t]?"branch":r[t]?"tag":n[t]?"head":"none"},f.prototype.calcTagStacks=function(){var e=this.gitEngine.getTags(),t={};e.forEach((function(e){var o=e.target.get("id");t[o]=t[o]||[],t[o].push(e),t[o].sort((function(e,t){var o=e.obj.get("id"),n=t.obj.get("id");return o.localeCompare(n)}))})),this.tagStackMap=t},f.prototype.calcBranchStacks=function(){var e=this.gitEngine.getBranches(),t={};e.forEach((function(e){var o=e.target.get("id");t[o]=t[o]||[],t[o].push(e),t[o].sort((function(e,t){var o=e.obj.get("id"),n=t.obj.get("id");return"master"==o||"master"==n?"master"==o?-1:1:o.localeCompare(n)}))})),this.branchStackMap=t},f.prototype.calcWidth=function(){this.maxWidthRecursive(this.rootCommit);var e=this.getPosBoundaries();this.assignBoundsRecursive(this.rootCommit,e.min,e.max)},f.prototype.maxWidthRecursive=function(e){var t=0;e.get("children").forEach((function(o){if(o.isMainParent(e)){var n=this.maxWidthRecursive(o);t+=n}}),this);var o=Math.max(1,t);return e.get("visNode").set("maxWidth",o),o},f.prototype.assignBoundsRecursive=function(e,t,o){var n=(o+t)/2;if(e.get("visNode").get("pos").x=n,0!==e.get("children").length){var r=o-t,a=0,i=e.get("children");i.forEach((function(t){t.isMainParent(e)&&(a+=t.get("visNode").getMaxWidthScaled())}),this);var s=t;i.forEach((function(t,o){if(t.isMainParent(e)){var n=t.get("visNode").getMaxWidthScaled()/a*r,i=s,c=i+n;this.assignBoundsRecursive(t,i,c),s=i+n}}),this)}},f.prototype.calcDepth=function(){var e=this.calcDepthRecursive(this.rootCommit,0);e>15&&console.warn("graphics are degrading from too many layers");var t=this.getDepthIncrement(e);Object.values(this.visNodeMap).forEach((function(e){e.setDepthBasedOn(t,this.getHeaderOffset())}),this)},f.prototype.animateNodePositions=function(e){Object.values(this.visNodeMap).forEach((function(t){t.animateUpdatedPosition(e)}),this)},f.prototype.addBranchFromEvent=function(e,t,o){var n=function(){this.addBranch(e)}.bind(this);this.gitEngine&&this.gitReady?n():this.defer(n)},f.prototype.addBranch=function(e){var t=new l({branch:e,gitVisuals:this,gitEngine:this.gitEngine});this.visBranchCollection.add(t),this.gitReady?t.genGraphics(this.paper):this.defer(function(){t.genGraphics(this.paper)}.bind(this))},f.prototype.addTagFromEvent=function(e,t,o){var n=function(){this.addTag(e)}.bind(this);this.gitEngine&&this.gitReady?n():this.defer(n)},f.prototype.removeTag=function(e,t,o){var n=function(){var t;this.visTagCollection.each((function(o){o.get("tag")==e&&(t=o)}),!0),t.remove(),this.removeVisTag(t)}.bind(this);this.gitEngine&&this.gitReady?n():this.defer(n)},f.prototype.addTag=function(e){var t=new m({tag:e,gitVisuals:this,gitEngine:this.gitEngine});this.visTagCollection.add(t),this.gitReady?t.genGraphics(this.paper):this.defer(function(){t.genGraphics(this.paper)}.bind(this))},f.prototype.removeVisBranch=function(e){this.visBranchCollection.remove(e)},f.prototype.removeVisTag=function(e){this.visTagCollection.remove(e)},f.prototype.removeVisNode=function(e){delete this.visNodeMap[e.getID()]},f.prototype.removeVisEdge=function(e){this.visEdgeCollection.remove(e)},f.prototype.animateRefs=function(e){this.visBranchCollection.each((function(t){t.animateUpdatedPos(e)}),this),this.visTagCollection.each((function(t){t.animateUpdatedPos(e)}),this)},f.prototype.animateEdges=function(e){this.visEdgeCollection.each((function(t){t.animateUpdatedPath(e)}),this)},f.prototype.getMinLayers=function(){return this.options.smallCanvas?2:7},f.prototype.getDepthIncrement=function(e){return e=Math.max(e,this.getMinLayers()),(1-this.getHeaderOffset())/e},f.prototype.shouldHaveHeader=function(){return this.gitEngine.isOrigin()||this.gitEngine.hasOrigin()},f.prototype.getHeaderOffset=function(){return this.shouldHaveHeader()?.05:0},f.prototype.calcDepthRecursive=function(e,t){e.get("visNode").setDepth(t);var o=e.get("children"),n=t;return o.forEach((function(e){var o=this.calcDepthRecursive(e,t+1);n=Math.max(o,n)}),this),n},f.prototype.canvasResize=function(e,t){this.resizeFunc||this.genResizeFunc(),this.resizeFunc(e,t)},f.prototype.genResizeFunc=function(){this.resizeFunc=i(function(e,t){this.refreshTree()}.bind(this),200,!0)},f.prototype.addNode=function(e,t){this.commitMap[e]=t,t.get("rootCommit")&&(this.rootCommit=t);var o=new c({id:e,commit:t,gitVisuals:this,gitEngine:this.gitEngine});return this.visNodeMap[e]=o,this.gitReady&&o.genGraphics(this.paper),o},f.prototype.addEdge=function(e,t){var o=this.visNodeMap[e],n=this.visNodeMap[t];if(!o||!n)throw new Error("one of the ids in ("+e+", "+t+") does not exist");var r=new h({tail:o,head:n,gitVisuals:this,gitEngine:this.gitEngine});this.visEdgeCollection.add(r),this.gitReady&&r.genGraphics(this.paper)},f.prototype.zIndexReflow=function(){this.visNodesFront(),this.visBranchesFront(),this.visTagsFront()},f.prototype.visNodesFront=function(){Object.values(this.visNodeMap).forEach((function(e){e.toFront()}))},f.prototype.visBranchesFront=function(){this.visBranchCollection.each((function(e){e.nonTextToFront(),e.textToFront()})),this.visBranchCollection.each((function(e){e.textToFrontIfInStack()}))},f.prototype.visTagsFront=function(){this.visTagCollection.each((function(e){e.nonTextToFront(),e.textToFront()})),this.visTagCollection.each((function(e){e.textToFrontIfInStack()}))},f.prototype.drawTreeFromReload=function(){this.gitReady=!0,this.deferFlush(),this.calcTreeCoords()},f.prototype.drawTreeFirstTime=function(){this.gitReady=!0,this.calcTreeCoords(),Object.values(this.visNodeMap).forEach((function(e){e.genGraphics(this.paper)}),this),this.visEdgeCollection.each((function(e){e.genGraphics(this.paper)}),this),this.visBranchCollection.each((function(e){e.genGraphics(this.paper)}),this),this.visTagCollection.each((function(e){e.genGraphics(this.paper)}),this),this.zIndexReflow()},o.GitVisuals=f},{"../app":46,"../intl":61,"../stores/GlobalStateStore":81,"../util/constants":84,"../util/debounce":85,"../visuals/visBranch":109,"../visuals/visEdge":110,"../visuals/visNode":111,"../visuals/visTag":112,q:21}],107:[function(e,t,o){var n=e("backbone").Model.extend({removeKeys:function(e){e.forEach((function(e){this.get(e)&&this.get(e).remove()}),this)},animateAttrKeys:function(e,t,o,n){e=Object.assign({},{include:["circle","arrow","rect","path","text"],exclude:[]},e||{});var r=this.getAttributes();e.include.forEach((function(e){r[e]=Object.assign({},r[e],t)})),e.exclude.forEach((function(e){delete r[e]})),this.animateToAttr(r,o,n)}});o.VisBase=n},{backbone:1}],108:[function(e,t,o){var n=e("backbone").Model.extend({removeKeys:function(e){e.forEach((function(e){this.get(e)&&this.get(e).remove()}),this)},getNonAnimateKeys:function(){return["stroke-dasharray"]},getIsInOrigin:function(){return!!this.get("gitEngine")&&this.get("gitEngine").isOrigin()},animateToAttr:function(e,t,o){if(0!==t){var n=void 0!==t?t:this.get("animationSpeed"),r=o||this.get("animationEasing");this.setAttr(e,!1,n,r)}else this.setAttr(e,!0)},setAttrBase:function(e,t,o,n,r){e.forEach((function(e){o?this.get(e).attr(t[e]):(this.get(e).stop(),this.get(e).animate(t[e],n,r),this.getNonAnimateKeys().forEach((function(o){t[e]&&void 0!==t[e][o]&&this.get(e).attr(o,t[e][o])}),this)),t.css&&$(this.get(e).node).css(t.css)}),this)},animateAttrKeys:function(e,t,o,n){e=Object.assign({},{include:["circle","arrow","rect","path","text"],exclude:[]},e||{});var r=this.getAttributes();e.include.forEach((function(e){r[e]=Object.assign({},r[e],t)})),e.exclude.forEach((function(e){delete r[e]})),this.animateToAttr(r,o,n)}});o.VisBase=n},{backbone:1}],109:[function(e,t,o){var n=e("backbone"),r=e("../util/constants").GRAPHICS,a=e("../visuals/visBase").VisBase,i=e("../graph/treeCompare"),s=function(){var e=Math.random();return"hsb("+String(e)+",0.6,1)"},c=a.extend({defaults:{pos:null,text:null,rect:null,arrow:null,isHead:!1,flip:1,fill:r.rectFill,stroke:r.rectStroke,"stroke-width":r.rectStrokeWidth,offsetX:4.75*r.nodeRadius,offsetY:0,arrowHeight:14,arrowInnerSkew:0,arrowEdgeHeight:6,arrowLength:14,arrowOffsetFromCircleX:10,vPad:5,hPad:5,animationSpeed:r.defaultAnimationTime,animationEasing:r.defaultEasing},validateAtInit:function(){if(!this.get("branch"))throw new Error("need a branch!")},getID:function(){return this.get("branch").get("id")},initialize:function(){if(this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),!this.gitEngine)throw new Error("asd wtf");this.get("branch").set("visBranch",this);var e=this.get("branch").get("id");"HEAD"==e?(this.set("isHead",!0),this.set("flip",-1),this.refreshOffset(),this.set("fill",r.headRectFill)):"master"!==e&&this.set("fill",s())},getCommitPosition:function(){var e=this.gitEngine.getCommitFromRef(this.get("branch")),t=e.get("visNode");return this.set("flip",this.getFlipValue(e,t)),this.refreshOffset(),t.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelBranchCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return!!this.get("gitVisuals").getIsGoalVis()&&!this.getIsLevelBranchCompared()},getIsLevelBranchCompared:function(){if(this.getIsMaster())return!0;var e=this.get("gitVisuals").getLevelBlob();return!i.onlyMasterCompared(e)},getIsMaster:function(){return"master"==this.get("branch").get("id")},getFlipValue:function(e,t){var o=this.get("gitVisuals").getFlipPos(),n=t.get("pos").x>o;return"C0"===e.get("id")?-1:this.get("isHead")?n?this.isBranchStackEmpty()?-1:1:this.isBranchStackEmpty()?1:-1:n?-1:1},refreshOffset:function(){var e=4.75*r.nodeRadius;1===this.get("flip")?(this.set("offsetY",-33),this.set("offsetX",e-10)):(this.set("offsetY",33),this.set("offsetX",e-10))},getArrowTransform:function(){return 1===this.get("flip")?"t-2,-20R-35":"t2,20R-35"},getBranchStackIndex:function(){if(this.get("isHead"))return 0;var e=this.getBranchStackArray(),t=-1;return e.forEach((function(e,o){e.obj==this.get("branch")&&(t=o)}),this),t},getBranchStackLength:function(){return this.get("isHead")?1:this.getBranchStackArray().length},isBranchStackEmpty:function(){var e=this.gitVisuals.branchStackMap[this.getCommitID()];return!e||0===e.length},getCommitID:function(){var e=this.get("branch").get("target");return"branch"===e.get("type")&&(e=e.get("target")),e.get("id")},getBranchStackArray:function(){var e=this.gitVisuals.branchStackMap[this.getCommitID()];return void 0===e?(this.gitVisuals.calcBranchStacks(),this.getBranchStackArray()):e},getTextPosition:function(){var e=this.getCommitPosition(),t=this.getBranchStackIndex();return{x:e.x+this.get("flip")*this.get("offsetX"),y:e.y+t*r.multiBranchY+this.get("offsetY")}},getRectPosition:function(){var e=this.getTextPosition(),t=(this.get("flip"),this.getTextSize());return{x:e.x-.5*t.w-this.get("hPad"),y:e.y-.5*t.h-this.get("vPad")}},getArrowPath:function(){var e=function(e,t,o){return{x:e.x+t,y:e.y+o}},t=function(e){return String(Math.round(e.x))+","+String(Math.round(e.y))},o=this.get("flip"),n=e(this.getCommitPosition(),o*this.get("arrowOffsetFromCircleX"),0),r=e(n,o*this.get("arrowLength"),-this.get("arrowHeight")),a=e(n,o*this.get("arrowLength"),this.get("arrowHeight")),i=e(r,o*this.get("arrowInnerSkew"),this.get("arrowEdgeHeight")),s=e(a,o*this.get("arrowInnerSkew"),-this.get("arrowEdgeHeight")),c=e(i,49*o,0),l=e(s,49*o,0),u="";return u+="M"+t(c)+" ",[i,r,n,a,s,l].forEach((function(e){u+="L"+t(e)+" "}),this),u+="z"},getTextSize:function(){var e=function(e){return e.w||(e.w=75),e.h||(e.h=20),e},t=this.get("text").node;if(this.get("isHead")){var o=t.getBoundingClientRect();return e({w:o.width,h:o.height})}var n=0;return this.getBranchStackArray().forEach((function(e){n=Math.max(n,function(e){var t=e.get("text")?e.get("text").node:null;return null===t?0:t.getBoundingClientRect().width}(e.obj.get("visBranch")))})),e({w:n,h:t.clientHeight})},getSingleRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),o=this.get("hPad");return{w:e.w+2*t,h:e.h+2*o}},getRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),o=this.get("hPad"),n=this.getBranchStackLength();return{w:e.w+2*t,h:e.h*n*1.1+2*o}},getIsRemote:function(){return this.get("branch").getIsRemote()},getName:function(){var e=this.get("branch").getName(),t=this.get("branch")===this.gitEngine.HEAD.get("target"),o=this.getIsRemote(),n=this.gitEngine.getIsHg();return"HEAD"===e&&n&&(e="."),e+(!t||this.getIsInOrigin()||o?"":"*")},nonTextToFront:function(){this.get("arrow").toFront(),this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){0!==this.getBranchStackIndex()&&this.get("text").toFront()},getFill:function(){return this.get("isHead")||1==this.getBranchStackLength()||0!==this.getBranchStackIndex()?this.get("fill"):this.gitVisuals.blendHuesFromBranchStack(this.getBranchStackArray())},remove:function(){this.removeKeys(["text","arrow","rect"]),this.gitVisuals.removeVisBranch(this)},handleModeChange:function(){},genGraphics:function(e){var t=this.getTextPosition(),o=this.getName(),n=e.text(t.x,t.y,String(o));n.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity()}),this.set("text",n);var r=this.getAttributes(),a=this.getRectPosition(),i=this.getRectSize(),s=e.rect(a.x,a.y,i.w,i.h,8).attr(r.rect);this.set("rect",s);var c=this.getArrowPath(),l=e.path(c).attr(r.arrow);this.set("arrow",l);["text","rect","arrow"].forEach((function(e){$(this.get(e).node).css(r.css)}),this),this.attachClickHandlers(),s.toFront(),n.toFront()},attachClickHandlers:function(){this.get("gitVisuals").options.noClick||[this.get("rect"),this.get("text"),this.get("arrow")].forEach((function(e){e.click(this.onClick.bind(this))}),this)},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(!this.shouldDisableClick()){var t="git checkout "+this.get("branch").get("id");e("../app").getEventBaton().trigger("commandSubmitted",t)}},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:0!==this.getBranchStackIndex()?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?0===this.getBranchStackIndex()?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var e=this.getTextOpacity();this.updateName();var t=this.getTextPosition(),o=this.getRectPosition(),n=this.getRectSize(),r=this.getArrowPath(),a=this.getDashArray();return{css:{cursor:this.shouldDisableClick()?"auto":"pointer"},text:{x:t.x,y:t.y,opacity:e},rect:{x:o.x,y:o.y,width:n.w,height:n.h,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),"stroke-dasharray":a,"stroke-width":this.getStrokeWidth()},arrow:{path:r,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),transform:this.getArrowTransform(),"stroke-dasharray":a,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(e,t){var o=this.getAttributes();this.animateToAttr(o,e,t)},animateFromAttrToAttr:function(e,t,o,n){this.animateToAttr(e,0),this.animateToAttr(t,o,n)},setAttr:function(e,t,o,n){this.setAttrBase(["text","rect","arrow"],e,t,o,n)}}),l=n.Collection.extend({model:c});o.VisBranchCollection=l,o.VisBranch=c,o.randomHueString=s},{"../app":46,"../graph/treeCompare":59,"../util/constants":84,"../visuals/visBase":108,backbone:1}],110:[function(e,t,o){var n=e("backbone"),r=e("../util/constants").GRAPHICS,a=e("../visuals/visBase").VisBase,i=e("../stores/GlobalStateStore"),s=a.extend({defaults:{tail:null,head:null,animationSpeed:r.defaultAnimationTime,animationEasing:r.defaultEasing},validateAtInit:function(){["tail","head"].forEach((function(e){if(!this.get(e))throw new Error(e+" is required!")}),this)},getID:function(){return this.get("tail").get("id")+"."+this.get("head").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.get("tail").get("outgoingEdges").push(this)},remove:function(){this.removeKeys(["path"]),this.gitVisuals.removeVisEdge(this)},genSmoothBezierPathString:function(e,t){var o=e.getScreenCoords(),n=t.getScreenCoords();return this.genSmoothBezierPathStringFromCoords(o,n)},genSmoothBezierPathStringFromCoords:function(e,t){var o=i.getFlipTreeY()?-1:1,n=function(e){return String(Math.round(e.x))+","+String(Math.round(e.y))},a=function(e,t,n){return n=n||r.curveControlPointOffset,{x:e.x,y:e.y+o*n*t}},s=function(e,t,n){return{x:e.x+t,y:e.y+o*n}};e=a(e,-1,this.get("tail").getRadius()),t=a(t,1,1.15*this.get("head").getRadius());var c="";c+="M"+n(e)+" ",c+="C",c+=n(a(e,-1))+" ",c+=n(a(t,1))+" ",c+=n(t);var l=r.arrowHeadSize||10;return c+=" L"+n(s(t,-l,l)),c+=" L"+n(s(t,l,l)),c+=" L"+n(t),c+="C",c+=n(a(t,1))+" ",c+=n(a(e,-1))+" ",c+=n(e)},getBezierCurve:function(){return this.genSmoothBezierPathString(this.get("tail"),this.get("head"))},getStrokeColor:function(){return r.visBranchStrokeColorNone},setOpacity:function(e){e=void 0===e?1:e,this.get("path").attr({opacity:e})},genGraphics:function(e){var t=this.getBezierCurve(),o=e.path(t).attr({"stroke-width":r.visBranchStrokeWidth,stroke:this.getStrokeColor(),"stroke-linecap":"round","stroke-linejoin":"round",fill:this.getStrokeColor()});o.toBack(),this.set("path",o)},getOpacity:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("tail")),t={branch:1,tag:1,head:r.edgeUpstreamHeadOpacity,none:r.edgeUpstreamNoneOpacity};if(void 0===t[e])throw new Error("bad stat");return t[e]},getAttributes:function(){return{path:{path:this.getBezierCurve(),opacity:this.getOpacity()}}},animateUpdatedPath:function(e,t){var o=this.getAttributes();this.animateToAttr(o,e,t)},animateFromAttrToAttr:function(e,t,o,n){this.animateToAttr(e,0),this.animateToAttr(t,o,n)},animateToAttr:function(e,t,o){0!==t?(this.get("path").toBack(),this.get("path").stop(),this.get("path").animate(e.path,void 0!==t?t:this.get("animationSpeed"),o||this.get("animationEasing"))):this.get("path").attr(e.path)}}),c=n.Collection.extend({model:s});o.VisEdgeCollection=c,o.VisEdge=s},{"../stores/GlobalStateStore":81,"../util/constants":84,"../visuals/visBase":108,backbone:1}],111:[function(e,t,o){e("backbone");var n=e("../util/constants").GRAPHICS,r=e("../visuals/visBase").VisBase,a=r.extend({defaults:{depth:void 0,maxWidth:null,outgoingEdges:null,circle:null,text:null,id:null,pos:null,radius:null,commit:null,animationSpeed:n.defaultAnimationTime,animationEasing:n.defaultEasing,fill:n.defaultNodeFill,"stroke-width":n.defaultNodeStrokeWidth,stroke:n.defaultNodeStroke},getID:function(){return this.get("id")},validateAtInit:function(){if(!this.get("id"))throw new Error("need id for mapping");if(!this.get("commit"))throw new Error("need commit for linking");this.get("pos")||this.set("pos",{x:Math.random(),y:Math.random()})},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.set("outgoingEdges",[])},setDepth:function(e){this.set("depth",Math.max(this.get("depth")||0,e))},setDepthBasedOn:function(e,t){if(void 0===this.get("depth"))throw new Error("no depth yet!");this.get("pos").y=this.get("depth")*e+t},getMaxWidthScaled:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("commit")),t={branch:1,tag:1,head:.3,none:.1};if(void 0===t[e])throw new Error("bad stat");return t[e]*this.get("maxWidth")},toFront:function(){this.get("circle").toFront(),this.get("text").toFront()},getOpacity:function(){var e={branch:1,tag:1,head:n.upstreamHeadOpacity,none:n.upstreamNoneOpacity},t=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));if(void 0===e[t])throw new Error("invalid status");return e[t]},getTextScreenCoords:function(){return this.getScreenCoords()},getAttributes:function(){var e=this.getScreenCoords(),t=this.getTextScreenCoords(),o=this.getOpacity(),r=this.getIsInOrigin()?n.originDash:"";return{circle:{cx:e.x,cy:e.y,opacity:o,r:this.getRadius(),fill:this.getFill(),"stroke-width":this.get("stroke-width"),"stroke-dasharray":r,stroke:this.get("stroke")},text:{x:t.x,y:t.y,opacity:o}}},animatePositionTo:function(e,t,o){var n=this.getAttributes(),r=e.getAttributes();n.circle=r.circle,n.text=r.text,this.animateToAttr(n,t,o)},highlightTo:function(e,t,o){var n=e.get("fill"),r={circle:{fill:n,stroke:n,"stroke-dasharray":"","stroke-width":5*this.get("stroke-width")},text:{}};this.animateToAttr(r,t,o)},animateUpdatedPosition:function(e,t){var o=this.getAttributes();this.animateToAttr(o,e,t)},animateFromAttrToAttr:function(e,t,o,n){this.animateToAttr(e,0),this.animateToAttr(t,o,n)},animateToSnapshot:function(e,t,o){e[this.getID()]&&this.animateToAttr(e[this.getID()],t,o)},setAttr:function(e,t,o,n){this.setAttrBase(["text","circle"],e,t,o,n)},animateToAttr:function(e,t,o){r.prototype.animateToAttr.apply(this,arguments);var n=void 0!==t?t:this.get("animationSpeed");o||this.get("animationEasing");"bounce"==o&&e.circle&&void 0!==e.circle.cx&&e.text&&void 0!==e.text.x&&(this.get("circle").animate(e.circle.cx,n,"easeInOut"),this.get("text").animate(e.text.x,n,"easeInOut"))},getScreenCoords:function(){var e=this.get("pos");return this.gitVisuals.toScreenCoords(e)},getRadius:function(){return this.get("radius")||n.nodeRadius},getParentScreenCoords:function(){return this.get("commit").get("parents")[0].get("visNode").getScreenCoords()},setBirthPosition:function(){var e=this.getParentScreenCoords();this.get("circle").attr({cx:e.x,cy:e.y,opacity:0,r:0}),this.get("text").attr({x:e.x,y:e.y,opacity:0})},setBirthFromSnapshot:function(e){var t=e[this.get("commit").get("parents")[0].get("visNode").getID()];this.get("circle").attr({opacity:0,r:0,cx:t.circle.cx,cy:t.circle.cy}),this.get("text").attr({opacity:0,x:t.text.x,y:t.text.y});var o={x:t.circle.cx,y:t.circle.cy};this.setOutgoingEdgesBirthPosition(o)},setBirth:function(){this.setBirthPosition(),this.setOutgoingEdgesBirthPosition(this.getParentScreenCoords())},setOutgoingEdgesOpacity:function(e){this.get("outgoingEdges").forEach((function(t){t.setOpacity(e)}))},animateOutgoingEdgesToAttr:function(e,t,o){this.get("outgoingEdges").forEach((function(t){var o=e[t.getID()];t.animateToAttr(o)}),this)},animateOutgoingEdges:function(e,t){this.get("outgoingEdges").forEach((function(o){o.animateUpdatedPath(e,t)}),this)},animateOutgoingEdgesFromSnapshot:function(e,t,o){this.get("outgoingEdges").forEach((function(n){var r=e[n.getID()];n.animateToAttr(r,t,o)}),this)},setOutgoingEdgesBirthPosition:function(e){this.get("outgoingEdges").forEach((function(t){var o=t.get("head").getScreenCoords(),n=t.genSmoothBezierPathStringFromCoords(e,o);t.get("path").stop(),t.get("path").attr({path:n,opacity:0})}),this)},parentInFront:function(){this.get("commit").get("parents")[0].get("visNode").toFront()},getFontSize:function(e){return e.length<3?12:e.length<5?10:8},getFill:function(){var e=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));return"head"==e?n.headRectFill:"tag"==e||"none"==e?n.orphanNodeFill:this.gitVisuals.getBlendedHuesForCommit(this.get("commit"))},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var t="git checkout "+this.get("commit").get("id"),o=e("../app");[this.get("circle"),this.get("text")].forEach((function(e){e.click((function(){o.getEventBaton().trigger("commandSubmitted",t)})),$(e.node).css("cursor","pointer")}))}},setOpacity:function(e){e=void 0===e?1:e;["circle","text"].forEach((function(t){this.get(t).attr({opacity:e})}),this)},remove:function(){this.removeKeys(["circle"],["text"]);var e=this.get("text");e&&e.remove(),this.gitVisuals.removeVisNode(this)},removeAll:function(){this.remove(),this.removeAllEdges()},removeAllEdges:function(){this.get("outgoingEdges").forEach((function(e){e.remove()}),this)},getExplodeStepFunc:function(e){if(!e)throw new Error("need speed by now");var t=this.get("circle"),o=20/e,n=Math.PI+1*Math.random()*Math.PI,r=.2*e,a=.01*e,i=o*Math.cos(n),s=o*Math.sin(n),c=t.attr("cx"),l=t.attr("cy"),u=this.gitVisuals.paper.width,m=this.gitVisuals.paper.height,d=.8/e;return function(){return((c+=1*(i-=a*i))<0||c>u)&&(i=d*-i,c=c<0?0:u),((l+=1*(s+=1*r-a*s))<0||l>m)&&(s=d*-s,l=l<0?0:m),t.attr({cx:c,cy:l}),!(i*i+s*s<.1&&Math.abs(l-m)<=.1)}},makeCircle:function(e){var t=this.getScreenCoords();return e.circle(t.x,t.y,this.getRadius()).attr(this.getAttributes().circle)},makeText:function(e){var t=this.getTextScreenCoords();return e.text(t.x,t.y,String(this.get("id")))},genGraphics:function(){var e=this.gitVisuals.paper,t=this.makeCircle(e),o=this.makeText(e);o.attr({"font-size":this.getFontSize(this.get("id")),"font-weight":"bold","font-family":"Monaco, Courier, font-monospace",opacity:this.getOpacity()}),this.set("circle",t),this.set("text",o),this.attachClickHandlers()}});o.VisNode=a},{"../app":46,"../util/constants":84,"../visuals/visBase":108,backbone:1}],112:[function(e,t,o){var n=e("backbone"),r=e("../util/constants").GRAPHICS,a=e("../visuals/visBase").VisBase,i=e("../graph/treeCompare"),s=a.extend({defaults:{pos:null,text:null,rect:null,isHead:!1,fill:r.tagFill,stroke:r.tagStroke,"stroke-width":r.tagStrokeWidth,offsetX:r.nodeRadius,offsetY:r.nodeRadius,vPad:2,hPad:2,animationSpeed:r.defaultAnimationTime,animationEasing:r.defaultEasing},validateAtInit:function(){if(!this.get("tag"))throw new Error("need a Tag!")},getID:function(){return this.get("tag").get("id")},initialize:function(){if(this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),!this.gitEngine)throw new Error("asd wtf");this.get("tag").set("visTag",this)},getCommitPosition:function(){return this.gitEngine.getCommitFromRef(this.get("tag")).get("visNode").getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelTagCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return!!this.get("gitVisuals").getIsGoalVis()&&!this.getIsLevelTagCompared()},getIsLevelTagCompared:function(){var e=this.get("gitVisuals").getLevelBlob();return!i.onlyMasterCompared(e)},getTagStackIndex:function(){if(this.get("isHead"))return 0;var e=this.getTagStackArray(),t=-1;return e.forEach((function(e,o){e.obj==this.get("tag")&&(t=o)}),this),t},getTagStackLength:function(){return this.get("isHead")?1:this.getTagStackArray().length},isTagStackEmpty:function(){var e=this.gitVisuals.tagStackMap[this.getCommitID()];return!e||0===e.length},getCommitID:function(){return this.get("tag").get("target").get("id")},getTagStackArray:function(){var e=this.gitVisuals.tagStackMap[this.getCommitID()];return void 0===e?(this.gitVisuals.calcTagStacks(),this.getTagStackArray()):e},getTextPosition:function(){var e=this.getCommitPosition(),t=this.getTagStackIndex();return{x:e.x+this.get("offsetX"),y:e.y+t*r.multiTagY+this.get("offsetY")}},getRectPosition:function(){var e=this.getTextPosition(),t=this.getTextSize();return{x:e.x-this.get("hPad"),y:e.y-.5*t.h-this.get("vPad")}},getTextSize:function(){var e,t=this.get("text").node,o=0;return this.getTagStackArray().forEach((function(e){o=Math.max(o,function(e){var t=e.get("text")?e.get("text").node:null;return null===t?0:t.getBoundingClientRect().width}(e.obj.get("visTag")))})),(e={w:o,h:t.clientHeight}).w||(e.w=75),e.h||(e.h=20),e},getSingleRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),o=this.get("hPad");return{w:e.w+2*t,h:e.h+2*o}},getRectSize:function(){var e=this.getTextSize(),t=this.get("vPad"),o=this.get("hPad"),n=this.getTagStackLength();return{w:e.w+2*t,h:e.h*n+2*o}},getIsRemote:function(){return this.get("tag").getIsRemote()},getName:function(){var e=this.get("tag").getName();this.getIsRemote(),this.gitEngine.getIsHg();return e},nonTextToFront:function(){this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){0!==this.getTagStackIndex()&&this.get("text").toFront()},remove:function(){this.removeKeys(["text","rect"]),this.gitVisuals.removeVisTag(this)},handleModeChange:function(){},genGraphics:function(e){var t=this.getTextPosition(),o=this.getName(),n=e.text(t.x,t.y,String(o));n.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity(),"text-anchor":"start"}),this.set("text",n);var r=this.getAttributes(),a=this.getRectPosition(),i=this.getRectSize(),s=e.rect(a.x,a.y,i.w,i.h,8).attr(r.rect);this.set("rect",s);["text","rect"].forEach((function(e){$(this.get(e).node).css(r.css)}),this),this.attachClickHandlers(),s.toFront(),n.toFront()},attachClickHandlers:function(){this.get("gitVisuals").options.noClick||[this.get("rect"),this.get("text")].forEach((function(e){e.click(this.onClick.bind(this))}),this)},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(!this.shouldDisableClick()){var t="git checkout "+this.get("tag").get("id");e("../app").getEventBaton().trigger("commandSubmitted",t)}},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:0!==this.getTagStackIndex()?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?0===this.getTagStackIndex()?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var e=this.getTextOpacity();this.updateName();var t=this.getTextPosition(),o=this.getRectPosition(),n=this.getRectSize(),r=this.getDashArray();return{css:{cursor:this.shouldDisableClick()?"auto":"pointer"},text:{x:t.x,y:t.y,opacity:e},rect:{x:o.x,y:o.y,width:n.w,height:n.h,opacity:this.getNonTextOpacity(),fill:this.get("fill"),stroke:this.get("stroke"),"stroke-dasharray":r,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(e,t){var o=this.getAttributes();this.animateToAttr(o,e,t)},animateFromAttrToAttr:function(e,t,o,n){this.animateToAttr(e,0),this.animateToAttr(t,o,n)},setAttr:function(e,t,o,n){this.setAttrBase(["text","rect"],e,t,o,n)}}),c=n.Collection.extend({model:s});o.VisTagCollection=c,o.VisTag=s,o.randomHueString=function(){var e=Math.random();return"hsb("+String(e)+",0.7,1)"}},{"../app":46,"../graph/treeCompare":59,"../util/constants":84,"../visuals/visBase":108,backbone:1}],113:[function(e,t,o){(function(t){var n=e("backbone"),r=e("../models/collections"),a=r.CommitCollection,i=r.BranchCollection,s=r.TagCollection,c=e("../util/eventBaton").EventBaton,l=e("../visuals").GitVisuals,u=n.View.extend({initialize:function(e){e=e||{},this.options=e,this.customEvents=Object.assign({},n.Events),this.containerElement=e.containerElement;var o=this,r=e.containerElement||$("#canvasHolder")[0];new Raphael(r,200,200,(function(){var n=this;t.nextTick((function(){o.paperInitialize(n,e)}))}))},paperInitialize:function(o,n){this.treeString=n.treeString,this.paper=o;var r=e("../app");this.eventBaton=n.noKeyboardInput?new c({noInput:!0}):r.getEventBaton(),this.commitCollection=new a,this.branchCollection=new i,this.tagCollection=new s,this.gitVisuals=new l({commitCollection:this.commitCollection,branchCollection:this.branchCollection,tagCollection:this.tagCollection,paper:this.paper,noClick:this.options.noClick,isGoalVis:this.options.isGoalVis,smallCanvas:this.options.smallCanvas,visualization:this});var u=e("../git").GitEngine;this.gitEngine=new u({collection:this.commitCollection,branches:this.branchCollection,tags:this.tagCollection,gitVisuals:this.gitVisuals,eventBaton:this.eventBaton}),this.gitEngine.init(),this.gitVisuals.assignGitEngine(this.gitEngine),this.myResize(),$(window).on("resize",()=>this.myResize()),this.$el.parents(".ui-draggable").on("drag",function(e,t){this.customEvents.trigger("drag",e,t),this.myResize()}.bind(this)),this.gitVisuals.drawTreeFirstTime(),this.treeString&&this.gitEngine.loadTreeFromString(this.treeString),this.options.zIndex&&this.setTreeIndex(this.options.zIndex),this.shown=!1,this.setTreeOpacity(0),t.nextTick(this.fadeTreeIn.bind(this)),this.customEvents.trigger("gitEngineReady"),this.customEvents.trigger("paperReady")},clearOrigin:function(){delete this.originVis},makeOrigin:function(e){return this.originVis=new u(Object.assign({},this.options,{noKeyboardInput:!0,noClick:!0,treeString:e.treeString})),this.originVis.customEvents.on("paperReady",function(){var e=$(this.paper.canvas).css("z-index");this.originVis.setTreeIndex(e)}.bind(this)),this.originVis},originToo:function(e,t){if(this.originVis){var o=function(){this.originVis[e].apply(this.originVis,t)}.bind(this);this.originVis.paper?o():this.originVis.customEvents.on("paperReady",o)}},setTreeIndex:function(e){$(this.paper.canvas).css("z-index",e),this.originToo("setTreeIndex",arguments)},setTreeOpacity:function(e){0===e&&(this.shown=!1),$(this.paper.canvas).css("opacity",e),this.originToo("setTreeOpacity",arguments)},getAnimationTime:function(){return 300},fadeTreeIn:function(){this.shown=!0,this.paper&&($(this.paper.canvas).animate({opacity:1},this.getAnimationTime()),this.originToo("fadeTreeIn",arguments))},fadeTreeOut:function(){this.shown=!1,this.paper&&this.paper.canvas&&$(this.paper.canvas).animate({opacity:0},this.getAnimationTime()),this.originToo("fadeTreeOut",arguments)},hide:function(){this.fadeTreeOut(),setTimeout(function(){$(this.paper.canvas).css("visibility","hidden")}.bind(this),this.getAnimationTime()),this.originToo("hide",arguments)},show:function(){$(this.paper.canvas).css("visibility","visible"),setTimeout(this.fadeTreeIn.bind(this),10),this.originToo("show",arguments),this.myResize()},showHarsh:function(){$(this.paper.canvas).css("visibility","visible"),this.setTreeOpacity(1),this.originToo("showHarsh",arguments),this.myResize()},resetFromThisTreeNow:function(e){this.treeString=e;var t=this.getOriginInTreeString(e);if(t){var o=this.gitEngine.printTree(t);this.originToo("resetFromThisTreeNow",[o])}},getOriginInTreeString:function(e){return JSON.parse(unescape(e)).originTree},reset:function(e){var t=e||this.treeString;if(this.setTreeOpacity(0),t?this.gitEngine.loadTreeFromString(t):this.gitEngine.defaultInit(),this.fadeTreeIn(),this.originVis)if(t){var o=this.getOriginInTreeString(t);this.originToo("reset",[JSON.stringify(o)])}else this.originToo("reset",arguments)},tearDown:function(e){e=e||{},this.gitEngine.tearDown(),this.gitVisuals.tearDown(),delete this.paper,this.originToo("tearDown",arguments)},die:function(){this.fadeTreeOut(),setTimeout(function(){this.shown||this.tearDown({fromDie:!0})}.bind(this),this.getAnimationTime()),this.originToo("die",arguments)},myResize:function(){if(this.paper){var e=this.el,t=e.getBoundingClientRect(),o=t.width,n=t.height;if(this.containerElement)$(this.paper.canvas).css({position:"absolute"});else{var r=this.$el.offset().left,a=this.$el.offset().top;$(this.paper.canvas).css({position:"absolute",left:r+"px",top:a+"px"})}this.paper.setSize(o,n),this.gitVisuals.canvasResize(o,n),this.originToo("myResize",arguments)}}});o.Visualization=u}).call(this,e("_process"))},{"../app":46,"../git":57,"../models/collections":69,"../util/eventBaton":89,"../visuals":106,_process:15,backbone:1}],114:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C7","id":"master"},"bugWork":{"target":"C2","id":"bugWork"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git branch bugWork master^^2^",startTree:'{"branches":{"master":{"target":"C7","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Multiple parents",zh_CN:"两个父节点",fr_FR:"Parents multiples",de_DE:"Mehrere Vorgänger",ja:"複数の親",es_AR:"Múltiples padres",es_ES:"Múltiples padres",pt_BR:"Múltiplos pais",gl:"Múltiples pais",zh_TW:"多個 parent commit",ru_RU:"Здоровая семья, или несколько родителей",ko:"다수의 부모",uk:"Декілька батьків",vi:"Nhiều cha lắm mẹ"},hint:{en_US:"Use `git branch bugWork` with a target commit to create the missing reference.",de_DE:"Nutze `git branch bugWork` mit einem Ziel-Commit um die fehlende Referenz zu erstellen.",ja:"`git branch bugWork`を対象のコミットと組み合わせて使い、欠如しているリファレンスを作成しましょう",fr_FR:'Utilisez "git branch bugWork" avec un commit pour créer une référence manquante',zh_CN:"使用 `git branch bugWork` 加上一个目标提交记录来创建消失的引用。",es_AR:"Usá `git branch bugWork` sobre algún commit para crear la referencia faltante",es_ES:"Usa `git branch bugWork` sobre algún commit para crear la referencia que falta",pt_BR:"Use `git branch bugWork` com um commit alvo para criar a referência que falta",gl:"Usa `git branch bugWork` sobre calquera commit para crear a referencia que falta",zh_TW:"在一個指定的 commit 上面使用 `git branch bugWork`。",ru_RU:"`git branch bugWork` на нужном коммите поможет создать нужную ссылку.",ko:"`git branch bugWork`를 대상 커밋과 함께 사용해서 부족한 참조를 만드세요",uk:'Використай "git branch bugWork" на потрібному коміті щоб створити потрібне посилання',vi:"Dùng lệnh `git branch bugWork` để tạo nhánh tại vị trí chỉ định"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Specifying Parents","","Like the `~` modifier, the `^` modifier also accepts an optional number after it.","","Rather than specifying the number of generations to go back (what `~` takes), the modifier on `^` specifies which parent reference to follow from a merge commit. Remember that merge commits have multiple parents, so the path to choose is ambiguous.","",'Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with `^` changes this default behavior.',"","Enough talking, let's see it in action.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have a merge commit. If we checkout `master^` without the modifier, we will follow the first parent after the merge commit. ","","(*In our visuals, the first parent is positioned directly above the merge commit.*)"],afterMarkdowns:["Easy -- this is what we are all used to."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now let's try specifying the second parent instead..."],afterMarkdowns:["See? We followed the other parent upwards."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The `^` and `~` modifiers can make moving around a commit tree very powerful:"],afterMarkdowns:["Lightning fast!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Even crazier, these modifiers can be chained together! Check this out:"],afterMarkdowns:["The same movement as before, but all in one command."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Put it to practice","","To complete this level, create a new branch at the specified destination.","","Obviously it would be easy to specify the commit directly (with something like `C6`), but I challenge you to use the modifiers we talked about instead!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Vorgänger ansteuern","","Wie der Operator `~` akzeptiert auch der Operator `^` eine optionale Anzahl.","","Anstatt der Anzahl von Schritten, die zurückgegangen werden soll (das ist das, was man bei `~` angibt), bezeichnet die Anzahl nach `^` welchem Vorgänger bei einem Merge-Commit gefolgt werden soll. Du erinnerst dich, dass ein Merge-Commit mehrere Vorgänger hat; es gilt also aus diesen auszuwählen.","",'Normalerweise folgt Git dem "ersten" Vorgänger des Merge-Commit, aber durch Angabe einer Zahl nach dem `^` lässt sich dieses Verhalten ändern.',"","Aber genug gequatscht, schauen wir's uns in Aktion an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier sehen wir einen Merge-Commit. Wenn wir einen Checkout von `master^` ohne Zahl machen, wird Git auf den ersten Vorgänger des Commits zurückgehen. ","","*(In unserer Darstellung befindet sich der erste Vorgänger direkt über dem Merge-Commit.)*"],afterMarkdowns:["Simpel -- so kennen wir das."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Jetzt versuchen wir mal stattdessen den zweiten Vorgänger anzugeben ..."],afterMarkdowns:["Gesehen? Wir gehen zu dem anderen Vorgänger zurück."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Die Operatoren `^` und `~` geben uns eine Menge Möglichkeiten für das Navigieren durch den Commit-Baum:"],afterMarkdowns:["Bämm!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Noch abgefahrener: die beiden Operatoren können verkettet werden. Aufgepasst:"],afterMarkdowns:["Gleicher Ablauf wie zuvor, nur alles in einem Befehl."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Setzen wir's um","","Erstelle einen neuen Branch an dem angegebenen Ziel, um diesen Level abzuschließen.","","Es ist natürlich möglich den Commit einfach direkt anzugeben (also mit sowas wie `C6`), aber ich fordere dich heraus stattdessen die relativen Operatoren zu benutzen!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Détermine les parents","","Comme le symbole `~`, le symbole `^` accepte un numéro après lui.","","Au lieu d'entrer le nombre de générations à remonter (ce que `~` fait), le symbole `^` détermine quel parent est à remonter. Attention, un merge commit a deux parents ce qui peut porter à confusion.","",'Normalement Git suit le "premier" parent pour un commit/merge, mais avec un numéro suivi de `^` le comportement par défaut est modifié.',"","Assez de bla bla, passons à l'action",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous avons un commit/merge. Si nous faisons checkout `master^` sans le symbole, on obtient le premier parent suivant ce commit. ","","(*Dans notre vue, le premier parent se situe juste au dessus du merge.*)"],afterMarkdowns:["Facile -- C'est ce que nous faisons tout le temps."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous allons spécifier le deuxième parent à la place."],afterMarkdowns:["Vous voyez ? Nous suivons le second parent."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Les symboles `^` et `~` permettent de se déplacer de façon très efficace :"],afterMarkdowns:["Boum, vitesse du tonnerre !"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Encore plus fou, ces symboles peuvent être enchainés ! Regardez cela :"],afterMarkdowns:["Le même résultat, mais en une seule commande."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Un peu de pratique","","Pour réussir le niveau, créez une nouvelle branche à la destination indiquée.","","Évidement ce serait plus rapide de spécifier le commit (C6 par exemple), mais faites-le plutôt avec les symboles de déplacement dont nous venons de parler !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 选择父提交记录","","操作符 `^` 与 `~` 符一样，后面也可以跟一个数字。","","但是该操作符后面的数字与 `~` 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。","","Git 默认选择合并提交的“第一个”父提交，在操作符 `^` 后跟一个数字可以改变这一默认行为。","","废话不多说，举个例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里有一个合并提交记录。如果不加数字修改符直接检出 `master^`，会回到第一个父提交记录。","","(*在我们的图示中，第一个父提交记录是指合并提交记录正上方的那个提交记录。*)"],afterMarkdowns:["这正是我们都已经习惯的方法。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在来试试选择另一个父提交……"],afterMarkdowns:["看见了吧？我们回到了另外一个父提交上。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用 `^` 和 `~` 可以自由地在提交树中移动，非常给力："],afterMarkdowns:["快若闪电！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["更厉害的是，这些操作符还支持链式操作！试一下这个："],afterMarkdowns:["和前面的结果一样，但只用了一条命令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 课后小练习","","要完成此关，在指定的目标位置创建一个新的分支。","","很明显可以简单地直接使用提交记录的哈希值（比如 `C6`），但我要求你使用刚刚讲到的相对引用修饰符！"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Especificando los padres","","Como el modificador de `~`, `^` también acepta un número opcional después de él.","","En lugar de especificar cuántas generaciones hacia atrás ir (como `~`), el modificador de `^` especifica por cuál de las referencias padres seguir en un commit de merge. Recordá que un commit de merge tiene múltiples padres, por lo que el camino a seguir es ambiguo.","",'Git normalmente sigue el "primer" padre de un commit de merge, pero especificando un número junto con `^` cambia este comportamiento predefinido.',"","Demasiada charla, veámoslo en acción.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos un commit de merge. Si hacemos checkout de `master^`, sin modificadores, vamos a seguir al primer padre después del commit de merge. ","","(*En nuestras visualizaciones, el primer padre se ubica directamente arriba del commit de merge.*)"],afterMarkdowns:["Fácil -- esto es a lo que estamos acostumbrados."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora tratemos de especificar el segundo padre, en cambio..."],afterMarkdowns:["¿Ves? Seguimos al otro padre hacia arriba."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Los modificadores de `^` y `~` son muy poderosos a la hora de movernos en un árbol:"],afterMarkdowns:["¡Rapidísimo!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Más loco aún, ¡estos modificadores pueden encadenarse entre sí! Mirá esto:"],afterMarkdowns:["El mismo movimiento que antes, pero todo en uno."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Ponelo en práctica","","Para completar este nivel, creá una nueva rama en la ubicación indicada.","","Obviamente sería muy fácil especificar el commit directamente (algo como `C6`), pero te reto a usar los modificadores de los que estuvimos hablando, mejor"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["### Especificando los padres","","Como el modificador de `~`, `^` también acepta un número opcional después de él.","","En lugar de especificar cuántas generaciones hacia atrás ir (como `~`), el modificador de `^` especifica por cuál de las referencias padres seguir en un commit de merge. Recuerda que un commit de merge tiene múltiples padres, por lo que el camino a seguir es ambiguo.","",'Git normalmente sigue el "primer" padre de un commit de merge, pero especificando un número junto con `^` cambia este comportamiento predefinido.',"","Demasiada charla, veámoslo en acción.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí tenemos un commit de merge. Si hacemos checkout de `master^`, sin modificadores, vamos a seguir al primer padre después del commit de merge. ","","(*En nuestras visualizaciones, el primer padre se ubica directamente arriba del commit de merge.*)"],afterMarkdowns:["Fácil -- esto es a lo que estamos acostumbrados."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora tratemos de especificar el segundo padre, en cambio..."],afterMarkdowns:["¿Ves? Seguimos al otro padre hacia arriba."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Los modificadores de `^` y `~` son muy poderosos a la hora de movernos en un árbol:"],afterMarkdowns:["¡Rapidísimo!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Más loco aún, ¡estos modificadores pueden encadenarse entre sí! Mira esto:"],afterMarkdowns:["El mismo movimiento que antes, pero todo en uno."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Ponlo en práctica","","Para completar este nivel, crea una nueva rama en la ubicación indicada.","","Obviamente sería muy fácil especificar el commit directamente (algo como `C6`), pero te reto a usar los modificadores de los que estuvimos hablando, mejor"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Especificando pais","","Assim como o modificador `~`, o modificador `^` também aceita um número opcional depois dele.","","Em vez de especificar o número de gerações a voltar (que é o que o `~` faz), o modificador no `^` especifica qual referência de pai a ser seguida a partir de um commit de merge. Lembre-se que commits de merge possuem múltiplos pais, então o caminho a seguir é ambíguo.","",'O Git normalmente subirá o "primeiro" pai de um commit de merge, mas especificar um número após o `^` muda esse comportamento padrão.',"","Basta de conversa, vejamos o operador em ação.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui temos um commit de merge. Se fizermos checkout em `master^` sem especificar um número, vamos seguir o primeiro pai acima do commit de merge. ","","(*Em nossa visualização, o primeiro pai é aquele diretamente acima do commit de merge.*)"],afterMarkdowns:["Fácil -- isso é aquilo com o que já estamos acostumados."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora vamos, em vez disso, especificar o segundo pai..."],afterMarkdowns:["Viu? Subimos para o outro pai."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Os modificadores `^` e `~` podem tornar a movimentação ao redor da árvore de commits muito poderosa:"],afterMarkdowns:["Rápido como a luz!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ainda mais louco, esses modificadores podem ser encadeados em conjunto! Veja só:"],afterMarkdowns:["O mesmo movimento que o anterior, mas tudo em um único comando."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Coloque em prática","","Para completar este nível, crie um novo ramo no destino especificado.","","Obviamente seria mais fácil especificar o commit diretamente (com algo como `C6`), mas em vez disso eu desafio você a usar os modificadores sobre os quais falamos!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["### Especificando pais","","Tanto o modificador `~`, como o modificador `^` aceptan un número opcional despois del.","","Mellor que especificar o número de commits que percorrer cara atrás (que é o que o `~` fai), o modificador sobre `^` especifica  qué referencia do pai vai ser seguida dende o commit con merge. Lembra qué os commits do merge teñen varios pais, entón o camiño a seguir é ambiguo.","",'Git normalmente seguirá ó "primeiro" pai de un commit de merge, pero especificando un número co `^` muda o comportamento do pai.',"","Xa chega de faladoiros, vexamos o comando en acción.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí temos un commit do merge. Se fixéramos checkout en `master^` sen especificar un número, imos seguir ó primeiro pai enriba do commit do merge. ","","(*Na nosa vista, o primeiro pai é aquel directamente enriba do commit do merge.*)"],afterMarkdowns:["Sinxelo, eso é aquelo co que xa estamos acostumados."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora imos, en vez de iso, especificar o segundo pai..."],afterMarkdowns:["¿Viches? Subimos para o outro pai."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Os modificadores `^` e `~` pódense mover ao redor da árbore de commits con moito poder:"],afterMarkdowns:["Rápido coma a luz!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aínda máis tolo, eses modificadores poden ser encadeados en conxunto! Olla ahí:"],afterMarkdowns:["O mesmo movemento feito antes, pero feito nun só comando."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Pono na práctica","","Para completar este nível, crea unha nova rama no destino especificado.","","Obviamente sería máis sinxelo especificar o commit diretamente (algo como `C6`), pero en vez de facer eso, ¡podes usar os modificadores dos que falamos!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### 選擇 parent commit","","和 `~` 符號一樣，`^` 符號的後面也可以接一個（可選的）數字。","","這不是用來指定往上回去幾代（`~` 的作用），`^` 後面所跟的數字表示我要選擇哪一個 parent commit。還記得一個 merge commit 可以有多個 parent commit 吧，所以當我們要選擇走到哪一個 parent commit 的時候就會比較麻煩了。","",'git 預設會選擇 merge commit 的"第一個" parent commit，使用 `^` 後面接一個數字可以改變這個預設的行為。',"","廢話不多說，舉一個例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡有一個 merge commit。如果後面不加數字的話會直接切換到`master^`，也就是說會回到第一個 parent commit。","","(*在我們的圖示中，第一個 parent commit 是指 merge commit 正上方的那一個 parent commit。*)"],afterMarkdowns:["簡單吧！這就是預設的情況。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在來試試選擇第二個 parent commit..."],afterMarkdowns:["看到了嗎？我們回到了第二個 parent commit。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`^`和`~`可以自由在 commit tree 中移動："],afterMarkdowns:["簡直就像是電光石火！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["再瘋狂點，這些符號可以被連在一起！試一下這個："],afterMarkdowns:["和前面的結果一樣，但只用了一條指令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 練習一下","","要完成這一關，在指定的目標位置上面建立一個新的 branch。","","很明顯可以直接使用 commit 的 hash 值（比如 `C6`），但我要求你使用剛剛講到的相對引用的符號！"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["### Определение родителей","","Так же как тильда (~), каретка (^) принимает номер после себя.","","Но в отличие от количества коммитов, на которые нужно откатиться назад (как делает `~`), номер после `^` определяет, на какого из родителей мерджа надо перейти. Учитывая, что мерджевый коммит имеет двух родителей, просто указать ^ нельзя.","",'Git по умолчанию перейдёт на "первого" родителя коммита, но указание номера после `^` изменяет это поведение.',"","Посмотрим, как это работает.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Вот мерджевый коммит. Если мы перейдём на `master^` без номера, то попадём на первого родителя.","","(*На нашей визуализации первый родитель находится прямо над коммитом*)"],afterMarkdowns:["Просто - прямо как мы любим."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Теперь попробуем перейти на второго родителя."],afterMarkdowns:["Вот. Мы на втором родительском коммите."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Модификаторы `^` и `~` сильно помогают перемещаться по дереву коммитов:"],afterMarkdowns:["Быстро как Флэш!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Более того, эти модификаторы можно применять вместе. Например, так:"],afterMarkdowns:["Сделаем то же самое, что перед этим, только в одну команду."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### На практике","","Чтобы пройти этот уровень, создай ветку в указанном месте.","","Очевидно, что (в данном случае) будет проще указать коммит напрямую, но для того, чтобы закрепить пройденное, используй модификаторы, о которых мы говорили выше."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### 親の指定","","`~`修飾子と同じように、`^`修飾子も後に任意の番号を置くことができます。","","指定した数だけ遡る（これは`~`の場合の機能）のではなく、`^`はマージコミットからどの親を選択するかを指定できます。マージコミットは複数の親で構成されるので、選択する経路が曖昧であることを覚えておいてください。","","Gitは通常、マージコミットから「一つ目」の親、マージされた側のブランチの親を選びます。しかし、`^`で数を指定することでこのデフォルトの動作を変えることができます。","","では、実際の動作を見ていきましょう。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["ここに、マージコミットがあります。もし、指定無しに`master^`でチェックアウトした場合、私たちは一番目の親に移動することになります。","","(*私たちのツリーでは、一番目の親はマージコミットのちょうど上に位置しています。*)"],afterMarkdowns:["簡単ですね -- これがデフォルトの動作になります。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["それでは代わりに二つ目の親を指定してみます"],afterMarkdowns:["見ましたか？私たちは他の親に移ることができました。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`^`修飾子と`~`修飾子は、コミット履歴を辿るのを強力に補助してくれます:"],afterMarkdowns:["超高速ですね！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["より素晴らしいことに、これらの修飾子は連鎖させることができます！これを見てください:"],afterMarkdowns:["前と同じ移動ですが、なんと一つのコマンドでできています。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 練習課題","","このレベルをクリアするためには、まず新しいブランチを指定したように作成します。","","明らかに直接コミットを指定した方が（`C6`というように）簡単ですが、私は今まで述べたような修飾子を使う方法で挑戦してもらいたいと思います。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 부모를 선택하기","","`~` 수식처럼 `^` 수식 또한 뒤에 숫자를 추가 할 수 있습니다.","","몇개의 세대를 돌아갈지 정하는 것 대신(`~`의 기능) `^`수식은 병합이된 커밋에서 어떤 부모를 참조할지 선택할 수 있습니다. 병합된 커밋들은 다수의 부모를 가지고 있다는것을 기억하시나요? 어떤 부모를 선택할지 예측할 수가 없습니다.","",'Git은 보통 병합된 커밋에서 "첫"부모를 따라갑니다. 하지만 `^`수식을 를 숫자와 함께 사용하면 앞의 디폴트 동작대로가 아닌 다른 결과가 나타납니다.',"","이만 줄이고, 직접 확인해봅시다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 병합된 커밋이 있습니다. 우리가 `master`를 수식없이 체크아웃한다면 병합된 커밋의 첫 부모를 따라 올라갈 것입니다. ","","(*화면에서는 첫 부모는 병합된 커밋 바로 위에 위치해 있습니다.*)"],afterMarkdowns:["간단하죠 -- 우리한테 익숙한 모습입니다."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["자 이제 두번째 부모를 선택해봅시다..."],afterMarkdowns:["보이나요? 다른 부모를 선택해 올라갔습니다."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`^`수식과 `~`수식을 이용해 커밋트리에서 효과적으로 움직일 수 있습니다.:"],afterMarkdowns:["빛처럼 빠르게 말이죠!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["더 대단한것은 이 수식들은 같이 사용할 수 있다는 겁니다! 확인해봅시다:"],afterMarkdowns:["앞과 같은 움직임이지만 하나의 명령으로 표현되었습니다."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 직접 확인해봅시다","","이 레벨을 완료하기 위해서 정해진 목적지에 새 브랜치를 생성하세요.","","물론 커밋을 직접 특정지어주면 아주 쉽겠지만(`C6`과 같이), 수식을 익혀볼겸 배운것을 사용해 도전해 봅시다!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["### Вибираємо Попередників","","Так само як і модифікатор `~`, модифікатор `^` також приймає необов’язкове число після нього.","","Замість того, щоб вказувати кількість генерацій щоб переміститись назад  (те що робить `~`), число після `^` вказує на яке батьківське посилання мерджу потрібно перейти. Зауважте що так як мерджевий коміт має декілька батьків, використання '^' без числа є неоднозначним.","",'Git зазвичай перейде на "першого" з батьків вверх з мерджевого коміту, але вказання числа після  `^` змінює цю поведінку. ',"","Годі ляси точити, перевірмо як це працює в дії.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ось ми маємо мерджевий коміт. Якщо зробимо checkout `master^` без числа, ми потрапимо на першого з предків ","","(*В нашій візуалізації перший предок знаходиться прямо над мерджевим комітом*)"],afterMarkdowns:["Легко -- те до чого ми всі звикли."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Тепер спробуймо натомість вказати другого батька..."],afterMarkdowns:["Бачиш? Ми перейшли до другого батька вверх."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Модифікатори `^` та `~` дозволяють легко пересуватися деревом комітів:"],afterMarkdowns:["Супер швидко!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Більше того, ці модифікатори можна використовувати разом! Заціни:"],afterMarkdowns:["Те саме, що й перед цим, але однією командою."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Практика","","Щоб завершити цей рівень, створи нову гілку на вказаному місці.","","Очевидно, що в данному випадку досить легко вказати коміт напряму (щось на зразок checkout `C6`), але для закріплення матеріалу використай модифікатори, про які ми щойно говорили!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["### Tìm về cội nguồn","","Cũng giống ký hiệu `~`, ta cũng có thể thêm số theo sau ký hiệu `^`.","","Nhưng mà không giống như (`~`) con số theo sau là số lượng thế hệ commit, con số theo sau `^` chỉ định commit cha từ commit merge. Hãy nhớ rằng commit merge có nhiều cha, cho nên chọn cha nào cũng khá là mơ hồ.","",'Thông thường thì sẽ chọn cha "đầu tiên" từ commit merge, nhưng nếu sau dấu `^` có một con số thì cách hành xử sẽ khác đi.',"","Không nói dông dài nữa, làm thử một ví dụ nào",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ở đây ta có 1 commit merge. Nếu ta dùng lệnh `master^` mà không bổ nghĩa cho nó, ta sẽ đi ngược lên commit cha đầu tiên của merge commit. ","","(*Trong hình minh họa bên trái thì commit cha đầu tiên được xếp hẳng hàng ngay phía trên của commit merge.*)"],afterMarkdowns:["Dễ dàng -- đó là cách mà ta thường làm."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nào bây giờ hãy chỉ định commit cha thứ hai thử..."],afterMarkdowns:["Thấy chứ? Ta đã leo lên commit cha khác lúc trước."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Dùng bổ ngữ `^` và `~` cho ta khả năng di chuyển trên cây lịch sử:"],afterMarkdowns:["Nhanh như chớp!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Thâm chí còn ghê gớm hơn khi ta kết hợp chúng với nhau! Hãy xem thử:"],afterMarkdowns:["Cùng con đường như lúc trước, nhưng chỉ cần 1 dòng lệnh."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Áp dụng thực hành nào","","Để hoàn thành cấp độ này, hãy tạo ra một nhánh mới ở vị trí chỉ định.","","Dùng cách chỉ định trực tiếp commit (như là dùng `C6` chẳng hạn) thì dễ quá, nhưng thử thách ở đây là dùng các bổ ngữ đã học ở trên!"]}}]}}}},{}],115:[function(e,t,o){o.levelSequences={intro:[e("./intro/commits").level,e("./intro/branching").level,e("./intro/merging").level,e("./intro/rebasing").level],rampup:[e("./rampup/detachedHead").level,e("./rampup/relativeRefs").level,e("./rampup/relativeRefs2").level,e("./rampup/reversingChanges").level],move:[e("./rampup/cherryPick").level,e("./rampup/interactiveRebase").level],mixed:[e("./mixed/grabbingOneCommit").level,e("./mixed/jugglingCommits").level,e("./mixed/jugglingCommits2").level,e("./mixed/tags").level,e("./mixed/describe").level],advanced:[e("./rebase/manyRebases").level,e("./advanced/multipleParents").level,e("./rebase/selectiveRebase").level],remote:[e("./remote/clone").level,e("./remote/remoteBranches").level,e("./remote/fetch").level,e("./remote/pull").level,e("./remote/fakeTeamwork").level,e("./remote/push").level,e("./remote/fetchRebase").level,e("./remote/lockedMaster").level],remoteAdvanced:[e("./remote/pushManyFeatures").level,e("./remote/mergeManyFeatures").level,e("./remote/tracking").level,e("./remote/pushArgs").level,e("./remote/pushArgs2").level,e("./remote/fetchArgs").level,e("./remote/sourceNothing").level,e("./remote/pullArgs").level]};var n=o.sequenceInfo={intro:{displayName:{en_US:"Introduction Sequence",de_DE:"Einführung",ja:"まずはここから",fr_FR:"Séquence d'introduction",es_AR:"Secuencia introductoria",es_ES:"Secuencia introductoria",pt_BR:"Sequência introdutória",gl:"Secuencia introductoria",zh_CN:"基础篇",zh_TW:"基礎篇",ko:"git 기본",ru_RU:"Введение",uk:"Вступ",vi:"Giới thiệu chuỗi luyện tập"},about:{en_US:"A nicely paced introduction to the majority of git commands",de_DE:"Eine gut abgestimmte Einführung in die wichtigsten Git-Befehle",ja:"gitの基本的なコマンド群をほどよいペースで学ぶ",fr_FR:"Une introduction en douceur à la majorité des commandes git",es_AR:"Una breve introducción a la mayoría de los comandos de git",es_ES:"Una breve introducción a la mayoría de los comandos de git",pt_BR:"Uma breve introdução à maioria dos comandos do git",gl:"Unha breve introducción á maioría dos comandos de git",zh_CN:"循序渐进地介绍 Git 主要命令",zh_TW:"循序漸進地介紹 git 主要命令",ko:"git의 주요 명령어를 깔끔하게 알려드립니다",ru_RU:"Хорошо подобранное введение в основные команды git",uk:"Гарно підібране введення в основні команди git",vi:"Từng bước làm quen với phần lớn lệnh điều khiển git"}},rampup:{displayName:{en_US:"Ramping Up",de_DE:"Aufstieg",ja:"次のレベルに進もう",fr_FR:"Montée en puissance",es_AR:"Acelerando",es_ES:"Acelerando",pt_BR:"Acelerando",gl:"Alixeirando",zh_CN:"高级篇",zh_TW:"進階篇",ru_RU:"Едем дальше",uk:"Їдемо далі",ko:"다음 단계로",vi:"Tăng tốc"},about:{en_US:"The next serving of 100% git awesomes-ness. Hope you're hungry",de_DE:"Eine Portion Git-Wahnsinn zum Thema Navigation",ja:"更にgitの素晴らしさを堪能しよう",fr_FR:"Le prochain excellent plat de pur git. J'espère que vous êtes affamés",es_AR:"La próxima porción de 100% maravillas git. Espero que estés hambriento",es_ES:"La próxima ración de git. Espero que estés hambriento",pt_BR:"A próxima porção de maravilhas do git. Faminto?",gl:"A próxima porción das marabillas de git. Agardo que estés esfameado",zh_CN:"要开始介绍 Git 的超棒特性了，快来吧！",zh_TW:"接下來是 git 非常厲害的地方！相信你已經迫不及待了吧！",ru_RU:"Следующая порция абсолютной git-крутотенюшки. Проголодались?",uk:"Наступна порція абсолютної git-дивини. Сподіваюсь, ви зголодніли",ko:"git은 아주 멋져요. 왜 멋진지 알려드립니다",vi:"Tận hưởng khẩu phần tuyệt hảo của git. Hi vọng bạn còn đói."}},remote:{tab:"remote",displayName:{en_US:"Push & Pull -- Git Remotes!",de_DE:"Push & Pull -- entfernte Repositorys",ja:"Push及びPullコマンド -- Gitリモート",fr_FR:"Push & Pull -- dépôts gits distants !",es_AR:"Push & Pull -- Git Remotes!",es_ES:"Push y Pull -- Git Remotes!",pt_BR:"Push & Pull -- repositórios remotos no Git!",gl:"Push & Pull -- Repositorios remotos no Git!",zh_CN:"Push & Pull —— Git 远程仓库！",zh_TW:"Push & Pull -- Git Remotes!",ru_RU:"Push & Pull - удалённые репозитории в Git!",uk:"Push & Pull -- віддалені репозиторії в Git!",ko:"Push & Pull -- Git 원격 저장소!",vi:"Push & Pull -- Tác động git từ xa!"},about:{en_US:"Time to share your 1's and 0's kids; coding just got social",fr_FR:"C'est le temps de partager vos 1 et vos 0 les enfants, le code vient de devenir social.",ja:"自分のコードをより広く公開しましょう",de_DE:"Zeit Eure 1en und 0en zu teilen; Coding mit sozialer Komponente",es_AR:"Hora de compartir sus 1's y 0's, chicos; programar se volvió social!",es_ES:"Hora de compartir vuestros 1's y 0's, chicos; programar se volvió social!",pt_BR:"Hora de compartilhar seus 1's e 0's, crianças; programar agora é social!",gl:"Hora de compartilos seus 1' e 0's, rapaces; programar agora é social!",zh_CN:"是时候分享你的代码了，让编码变得社交化吧",zh_TW:"是時候分享你的程式碼了",ru_RU:"Настало время поделиться своими единичками и нулями. Время коллективного программирования",uk:"Настав час поділитися своїми нулями та одиничками; соціальне програмування",ko:"내 코드를 공개할 때가 되었습니다. 코드를 공개해봅시다!",vi:"Chia sẻ đứa con tinh thần '0' và '1' của bạn; mã đã đến với cộng đồng"}},remoteAdvanced:{tab:"remote",displayName:{en_US:"To Origin And Beyond -- Advanced Git Remotes!",de_DE:"Bis zum origin und noch weiter",ja:'"origin"とその先へ -- Gitリモート上級編',fr_FR:"Vers l'infini et au-delà -- dépôts distants version avancée",es_AR:"Hasta el origin y más allá -- Git Remotes avanzado!",es_ES:"Hasta el origen y más allá -- Git Remotes avanzado!",pt_BR:"Até a origin e além -- repositórios remotos avançados!",gl:"Ata á orixe e máis aló -- repositorios remotos avanzados!",zh_CN:"关于 origin 和它的周边 —— Git 远程仓库高级操作",zh_TW:"關於 origin 和其它 repo，git remote 的進階指令",ru_RU:"Через origin – к звёздам. Продвинутое использование Git Remotes",uk:"Через origin – до зірок. Прогресивне використання Git Remotes",ko:'"origin"그 너머로 -- 고급 Git 원격 저장소',vi:"Về với cội nguồn và vươn xa hơn -- nâng cao về các git remote"},about:{en_US:"And you thought being a benevolent dictator would be fun...",fr_FR:"Et vous pensiez qu'être un dictateur bienfaisant serait amusant...",ja:"絶えず上級者の仕事は存在する。。。",es_AR:"Y pensabas que ser un dictador benévolo sería divertido...",es_ES:"Y pensabas que ser un dictador benévolo sería divertido...",pt_BR:"E você achava que ser um déspota esclarecido seria mais divertido...",gl:"E pensabas que ser un dictador benévolo sería divertido...",zh_CN:"做一名仁慈的独裁者一定会很有趣……",zh_TW:"而且你會覺得做一個仁慈的獨裁者會很有趣...",de_DE:"Git Remotes für Fortgeschrittene",ru_RU:"Весело было быть всесильным мудрым правителем...",uk:"А ти думав, що бути всесильним диктатором весело...",ko:"자비로운 독재자가 되는게 재밌을 줄 알았겠지만...",vi:"Và bạn nghĩ làm một kẻ độc tài nhân từ thì sẽ vui ..."}},move:{displayName:{en_US:"Moving Work Around",de_DE:"Code Umherschieben",fr_FR:"Déplacer le travail",es_AR:"Moviendo el trabajo por ahí",es_ES:"Moviendo el trabajo por ahí",pt_BR:"Movendo trabalho por aí",gl:"Movendo o traballo por ahí",ja:"コードの移動",ko:"코드 이리저리 옮기기",zh_CN:"移动提交记录",zh_TW:"調整提交順序",ru_RU:"Перемещаем труды туда-сюда",uk:"Переміщуємо роботу туди-сюди",vi:"Điều chỉnh vị trí"},about:{en_US:'"Git" comfortable with modifying the source tree :P',de_DE:"Gewöhn dich daran, den Git-Baum zu verändern",fr_FR:"Soyez à l'aise pour modifier l'arbre Git",es_AR:"Ponete cómodo con modificar el directorio fuente",es_ES:"Ponte cómodo cuando modifiques el directorio fuente",pt_BR:"Fique confortável em modificar a árvore de códigos",gl:"Ponte cómodo modificando a árbore de git",ko:"작업 트리를 수정하는건 식은죽 먹기지요 이제",ja:"話題のrebaseってどんなものだろう？って人にオススメ",zh_CN:"自由修改提交树",zh_TW:"自由修改提交樹",ru_RU:"Не стесняйтесь менять историю",uk:"Не соромимось змінювати історію",vi:"Chỉnh sửa cây lịch sử Git không hề khó"}},mixed:{displayName:{en_US:"A Mixed Bag",de_DE:"Ein Kessel Buntes",ja:"様々なtips",fr_FR:"Un assortiment",es_AR:"Bolsa de gatos",es_ES:"Un poco de todo",pt_BR:"Sortidos",gl:"Todo mesturado",ko:"종합선물세트",zh_CN:"杂项",zh_TW:"活用 git 的指令",ru_RU:"Сборная солянка",uk:"Всяке",vi:"Những trò mèo đáng đồng tiền bát gạo"},about:{en_US:"A mixed bag of Git techniques, tricks, and tips",de_DE:"Eine bunte Mischung von Techniken, Tipps und Tricks",ja:"gitを使う上での様々なtipsやテクニックなど",fr_FR:"Un assortiment de techniques et astuces pour utiliser Git",es_AR:"Un rejunte de técnicas, trucos y tips sobre Git",es_ES:"Un batiburrillo de técnicas, trucos y sugerencias sobre Git",pt_BR:"Técnicas, truques e dicas sortidas sobre Git",gl:"Mestura de técnicas, trucos e consellos",ko:"Git을 다루는 다양한 팁과 테크닉을 다양하게 알아봅니다",zh_CN:"Git 技术、技巧与贴士大集合",zh_TW:"git 的技術，招數與技巧",ru_RU:"Ассорти из приёмов работы с Git, хитростей и советов",uk:"Різні прийоми роботи з Git, хитрощі та поради",vi:"Các kỹ thuật, bí quyết, và mẹo vặt hữu ích"}},advanced:{displayName:{en_US:"Advanced Topics",de_DE:"Themen für Fortgeschrittene",ja:"上級トピック",fr_FR:"Sujets avancés",es_AR:"Temas avanzados",es_ES:"Temas avanzados",pt_BR:"Temas avançados",gl:"Temas avanzados",zh_CN:"高级话题",zh_TW:"進階主題",ru_RU:"Продвинутый уровень",uk:"Досвідчений рівень",ko:"고급 문제",vi:"Các chủ đề nâng cao"},about:{en_US:"For the truly brave!",de_DE:"... die nie ein Mensch zuvor gesehen hat.",ja:"勇気ある人のみ！",fr_FR:"Pour les plus courageux !",es_AR:"¡Para los verdaderos valientes!",es_ES:"¡Para los verdaderos valientes!",pt_BR:"Para os verdadeiros valentes!",gl:"¡Para os verdadeiros valerosos!",zh_CN:"只为真正的勇士！",zh_TW:"來成為真正的強者吧！",ru_RU:"Если ты смелый, ловкий, умелый – потренируйся тут",uk:"Для хоробрих",ko:"용기있는 도전자를 위해 준비한 문제입니다",vi:"Mạnh mẽ lên!"}}};o.getTabForSequence=function(e){var t=n[e];return t.tab?t.tab:"main"}},{"./advanced/multipleParents":114,"./intro/branching":116,"./intro/commits":117,"./intro/merging":118,"./intro/rebasing":119,"./mixed/describe":120,"./mixed/grabbingOneCommit":121,"./mixed/jugglingCommits":122,"./mixed/jugglingCommits2":123,"./mixed/tags":124,"./rampup/cherryPick":125,"./rampup/detachedHead":126,"./rampup/interactiveRebase":127,"./rampup/relativeRefs":128,"./rampup/relativeRefs2":129,"./rampup/reversingChanges":130,"./rebase/manyRebases":131,"./rebase/selectiveRebase":132,"./remote/clone":133,"./remote/fakeTeamwork":134,"./remote/fetch":135,"./remote/fetchArgs":136,"./remote/fetchRebase":137,"./remote/lockedMaster":138,"./remote/mergeManyFeatures":139,"./remote/pull":140,"./remote/pullArgs":141,"./remote/push":142,"./remote/pushArgs":143,"./remote/pushArgs2":144,"./remote/pushManyFeatures":145,"./remote/remoteBranches":146,"./remote/sourceNothing":147,"./remote/tracking":148}],116:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C1","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git branch bugFix;git checkout bugFix",name:{en_US:"Branching in Git",de_DE:"Branches in Git",ja:"Gitのブランチ",ko:"Git에서 브랜치 쓰기",es_AR:"Brancheando en Git",es_ES:"Creando ramas en Git",pt_BR:"Ramos no Git",gl:"Ramas en Git",fr_FR:"Gérer les branches avec Git",zh_CN:"Git Branch",zh_TW:"建立 git branch",ru_RU:"Ветвление в Git",uk:"Розгалуження в Git",vi:"Rẽ nhánh với Git"},hint:{en_US:'Make a new branch with "git branch <branch-name>" and check it out with "git checkout <branch-name>"',de_DE:'Lege mit "git branch <Name>" einen neuen Branch an und checke ihn mit "git checkout <Name> aus',ja:'ブランチの作成（"git branch [ブランチ名]"）と、チェックアウト（"git checkout [ブランチ名]"）',es_AR:'Hacé una nueva rama con "git branch [nombre]" y cambiá a ella con "git checkout [nombre]"',es_ES:'Crea una nueva rama con "git branch [nombre]" y sitúate en ella con "git checkout [nombre]"',pt_BR:'Crie um novo ramo com "git branch [nome]" e mude para ele com "git checkout [nome]"',gl:'Crea unha nova rama con "git branch [nome]" e cambiate a ela facendo "git checkout [nome]"',fr_FR:'Faites une nouvelle branche avec "git branch [nom]" positionnez-vous dans celle-ci avec "git checkout [nom]"',zh_CN:"用 'git branch <分支名>' 来创建分支，用 'git checkout <分支名>' 来切换到分支",zh_TW:"用 'git branch [ branch 名稱]' 來建立 branch，用 'git checkout [ branch 名稱]' 切換到該 branch",ko:'"git branch [브랜치명]"으로 새 브랜치를 만들고, "git checkout [브랜치명]"로 그 브랜치로 이동하세요',ru_RU:'Создай новую ветку при помощи "git branch [name]" и перейди на неё при помощи "git checkout [name]"',uk:'Створи нову гілку за допомогою "git branch [ім’я]" й перейди на неї за допомогою "git checkout [ім’я]"',vi:'Tạo một nhánh mới với lệnh "git branch <ten-nhanh>" và chuyển sang đó với lệnh "git checkout <ten-nhanh>"'},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches","","Branches in Git are incredibly lightweight as well. They are simply pointers to a specific commit -- nothing more. This is why many Git enthusiasts chant the mantra:","","```","branch early, and branch often","```","","Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have big beefy branches.","",'When we start mixing branches and commits, we will see how these two features combine. For now though, just remember that a branch essentially says "I want to include the work of this commit and all parent commits."']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what branches look like in practice.","","Here we will create a new branch named `newImage`"],afterMarkdowns:["There, that's all there is to branching! The branch `newImage` now refers to commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try to put some work on this new branch. Hit the button below"],afterMarkdowns:["Oh no! The `master` branch moved but the `newImage` branch didn't! That's because we weren't \"on\" the new branch, which is why the asterisk (*) was on `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's tell git we want to checkout the branch with","","```","git checkout <name>","```","","This will put us on the new branch before committing our changes"],afterMarkdowns:["There we go! Our changes were recorded on the new branch"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! You are all ready to get branching. Once this window closes,","make a new branch named `bugFix` and switch to that branch.","","By the way, here's a shortcut: if you want to create a new ","branch AND check it out at the same time, you can simply ","type `git checkout -b [yourbranchname]`."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches in Git","","Branches sind in Git extrem schlank. Sie sind einfach Verweise auf einen bestimmten Commit -- das ist alles. Es ist unter Git-Enthusiasten deshalb gängige Praxis, früh und oft Branches anzulegen.","","Da das Anlegen von Branches keinen Plattenplatz und Speicher verbraucht, liegt es nahe die Arbeit in kleine logische Häppchen aufzuteilen, anstatt mit wenigen großen, monolithischen Branches zu hantieren.","",'Wir werden sehen wie Commits und Branches zusammengehören sobald wir anfangen mit beiden zu arbeiten. Bis hierhin merk dir einfach, dass ein Branch im Prinzip bedeutet "ich möchte die Arbeit, die in diesem Commit und seinen Vorgängern steckt, sichern".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir mal, wie Branches in der Praxis aussehen.","","Wir legen einen neuen Branch an und nennen ihn `issue`:"],afterMarkdowns:["Und das war's auch schon, mehr ist es nicht. Der Branch `issue` zeigt nun auf den Commit `C1`."],command:"git branch issue",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lass uns mal ein wenig auf dem neuen Branch arbeiten. Machen wir einen Commit:"],afterMarkdowns:['Oi! Der Branch `master` hat sich verändert, aber der Branch `issue` nicht. Das liegt daran, dass wir nicht "auf" dem neuen Branch waren, weshalb das Sternchen `*` auch hinter `master` steht.'],command:"git commit",beforeCommand:"git branch issue"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Sagen wir Git also erst mal auf welchem Branch wir arbeiten wollen, und zwar mit","","```","git checkout <Name>","```","","Das wird uns auf den neuen Branch bringen bevor wir unsere Änderungen committen."],afterMarkdowns:["Und fertig! Unsere Änderungen wurden im neuen Branch gespeichert."],command:"git checkout issue; git commit",beforeCommand:"git branch issue"}},{type:"ModalAlert",options:{markdowns:["Cool! Jetzt bist du soweit, selbst Branches anzulegen. Wenn dieses Fenster geschlossen wurde, leg einen neuen Branch namens `bugFix` an und schalte auf diesen um."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのブランチ","","Gitではコミットだけでなく、ブランチもまた信じられないほど軽量です。ブランチとは単に特定のコミットを指示したポインタにしか過ぎません。Gitの達人が決まってこう言うのは、そのためです：","","```","早めに、かつ頻繁にブランチを切りなさい","```","","どれほど多くのブランチを作ってもストレージやメモリを全然使わないので、ブランチを肥大化させるよりも論理的に分割していく方が簡単なのです。","","ブランチとコミットをあわせて使い始めると、これら2つの機能がどのように連動して機能するかがわかるでしょう。ここではとりあえず、ブランチは基本的には「あるコミットとその親のコミットたちを含めた全てのコミット」のことを呼ぶと覚えておいてください。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["では実際にブランチがどのようなものかを見ていきましょう。","","`newImage`という名前の新しいブランチを切ってみることにします。"],afterMarkdowns:["以上。必要な手順はこれだけです。いま作成された`newImage`ブランチは`C1`コミットを指しています。"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["この新しいブランチに何か変更を加えてみましょう。次のボタンを押してください。"],afterMarkdowns:["あらら、`newImage`ではなくて`master`ブランチが移動してしまいました。これは、私たちが`newImage`のブランチ上で作業していなかったためです。どのブランチで作業しているかは、アスタリスク(*)がついてるかどうかで分かります。"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["今度は作業したいブランチ名をgitに伝えてみましょう。","","```","git checkout [ブランチ名]","```","","このようにして、コミットする前に新しいブランチへと作業ブランチを移動することができます。"],afterMarkdowns:["できましたね。今度は新しいブランチに対して変更を記録することができました。"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["はい、これでもうどんなブランチでも切れますね。このウィンドウを閉じて、","`bugFix`という名前のブランチを作成し、そのブランチをチェックアウトしてみましょう。"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas en Git","","Las ramas (branches) en Git son increíblemente livianas. Son sólo referencias a un commit específico - nada más. Por esto es que tantos entusiastas de Git siguen el mantra:","","```","brancheá temprano, y brancheá seguido","```","","Como no hay consumo extra de almacenamiento ni memoria al hacer varias ramas, es más fácil dividir lógicamente tu trabajo que tener un par de ramas grandes.","",'Cuando empecemos a mezclar ramas y commits, vamos a ver cómo se combinan estas dos herramientas. Por ahora, en cambio, simplemente recordá que una rama esencialmente dice "Quiero incluir el trabajo de este commit y todos su ancestros".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos cómo se ven las ramas en práctica.","","Acá vamos a crear una rama nueva llamada `newImage`"],afterMarkdowns:["Ahí está, ¡eso es todo lo que hay que hacer para branchear! La rama `newImage` ahora referencia al commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Pongamos algo de trabajo en esta nueva rama. Apretá el botón de acá abajo"],afterMarkdowns:['¡Uh, no! ¡La rama `master` avanzó, pero `newImage` no! Eso es porque no estábamos "en" la rama nueva, y por eso el asterisco (*) estaba en `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Digámosle a git que queremos checkoutear esa rama con","","```","git checkout [name]","```","","Esto va a situarnos en esa rama antes de commitear nuestros cambios"],afterMarkdowns:["¡Ahí estamos! Nuestros cambios se registraron en nuestra nueva rama"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["¡Ok! Ya estás listo para manejar ramas. Cuando se cierre esta ventana,","creá una nueva rama llamada `bugFix` y cambiate a ella"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas en Git","","Las ramas (branches) en Git son increíblemente livianas. Son sólo referencias a un commit específico - nada más. Por esto es que tantos entusiastas de Git siguen el mantra:","","```","crea ramas al principio y hazlo también de manera frecuente","```","","Como no hay consumo extra de almacenamiento ni memoria al crear varias ramas, lógicamente es más fácil dividir tu trabajo que trabajar solamente con un par de ramas grandes.","",'Cuando empecemos a mezclar ramas y commits, vamos a ver cómo se combinan estas dos herramientas. Por ahora, en cambio, simplemente recuerda que una rama esencialmente dice "Quiero incluir el trabajo de este commit y todos su ancestros".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos cómo son las ramas en la práctica.","","Ahora vamos a crear una rama nueva llamada `newImage`"],afterMarkdowns:["Ahí está, ¡eso es todo lo que hay que hacer para crear una rama! La rama `newImage` ahora referencia al commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Pongamos algo de trabajo en esta nueva rama. Aprieta el botón de aquí abajo"],afterMarkdowns:['¡Vaya! ¡La rama `master` avanzó, pero `newImage` no! Eso es porque no estábamos "en" la rama nueva, y por eso el asterisco (*) estaba en `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Digámosle a git que queremos hacer checkout a esa rama con","","```","git checkout [name]","```","","Esto va a situarnos en esa rama antes de hacer un commit con nuestros cambios"],afterMarkdowns:["¡Ahí estamos! Nuestros cambios se registraron en nuestra nueva rama"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["¡Perfecto! Ya estás listo para trabajar con ramas. Cuando se cierre esta ventana,","crea una nueva rama llamada `bugFix` y cámbiate a ella"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramos no Git","","Ramos no Git também são incrivelmente leves. Eles são simplesmente referências a um commit específico -- e nada mais. É por isso que muitos entusiastas do Git entoam o mantra:","","```","ramifique cedo, ramifique sempre","```","","Devido a não existir sobrecarga de armazenamento / memória associada à criação de ramos, é mais fácil dividir logicamente o seu trabalho do que ter ramos grandes e gordos.","",'Quando começarmos a misturar ramos e commits, vamos ver como esses dois recursos combinam bem. Por enquanto, só lembre que um ramo diz essencialmente "Quero incluir o trabalho deste commit e de todos os seus ancestrais".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos como os ramos funcionam na prática.","","Aqui vamos criar um novo ramo chamado `newImage`"],afterMarkdowns:["Veja, é só isso que você tem que fazer para ramificar! O ramo `newImage` agora se refere ao commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos tentar colocar algum trabalho neste novo ramo. Clique no botão abaixo"],afterMarkdowns:['Ah não! O ramo `master` se moveu mas o `newImage` não! Isso é porque o novo ramo não era o "ativo", e é por isso que o asterisco (*) estava no `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos contar ao git que queremos fazer checkout no ramo com:","","```","git checkout [nome]","```","","Isso vai nos situar no ramo antes de commitarmos nossas mudanças"],afterMarkdowns:["Aqui vamos nós! Nossas mudanças foram gravadas no novo ramo"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vocês estão todos prontos para ramificar. Assim que esta janela fechar,","crie um novo ramo chamado `bugFix` e mude para esse ramo"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas en Git","","As Ramas en Git son tamén increiblemente liviás. Elas sinxelamente son referencias a un mesmo commit específico, e nada máis. É por iso que moitos entusiastas do Git entonan o mantra:","","```","ramifica cedo, ramifica sempre","```","","Debido a non existir sobrecarga de memoria facendo moitas ramas, é máis sinxelo dividir a lóxica do teu traballo en ramas que ter unha enorme.","",'Cando comezamos a mesturar ramas e commits imos ver como eses dous recursos combínanse ben. Por agora lembra que unha rama esencialmente di "Quero incluír o traballo deste commit e de todos os seus ancestros".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos cómo as ramas funcionan na práctica.","","Aquí imos crear unha nova rama chamada `newImage`"],afterMarkdowns:["Mira, solo tes que poñer eso para crear unha rama! A rama `newImage` agora apunta ó commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Imos intentar colocar algún traballo nesta nova rama. Pincha no botón de abaixo"],afterMarkdowns:['¡Bueno home! A rama `master` moveuse pero a rama `newImage` non! Eso é porque a nova rama non era a "actual", e é por iso que o asterisco (*) ficaba na rama `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ímoslle decir a Git que nos queremos mover á rama con:","","```","git checkout [nome]","```","","Esto vainos levar á rama que tiñamos antes de facer os nosos cambios."],afterMarkdowns:["¡Imos alá! Os nosos cambios foron grabados na nova rama."],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["¡Ok! Estas preparado para facer ramas. Así que podes pechar a ventá,","crear unha rama chamada `bugFix` e moverte para esa rama.","","Inda así, hai un atallo: se ti quixeras crear unha nova ","rama e moverte a ela ó mesmo tempo, ti podes escribir simplemente ","`git checkout -b [a-tua- rama]`."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches Git","","Les branches sous Git sont incroyablement légères. Elles sont simplement des références sur un commit spécifique -- rien de plus. C'est pourquoi beaucoup d'enthousiastes répètent en cœur :","","```","des branches le plus tôt possible, et des branches souvent","```","","Parce qu'il n'y a pas de surcoût (stockage/mémoire) associé aux branches, il est facile de diviser son travail en de nombreuses branches plutôt que d'avoir quelques grosses branches.","","Nous verrons comment les branches et les commits interagissent quand nous les utiliserons ensemble. Pour l'instant, souvenez-vous qu'une branche est un moyen d'exprimer \"Je veux inclure le contenu de ce commit et de tous les commits parents.\""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons à quoi ressemblent les branches en pratique.","","Nous allons nous positionner (checkout) dans une nouvelle branche appellée `newImage`"],afterMarkdowns:["Et voilà, c'est tout ! La branche `newImage` se réfère désormais au commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Travaillons mainenant dans cette branche. Appuyez sur le bouton ci-dessous."],afterMarkdowns:["Oh non! La branche `master` a bougé mais pas la branche `newImage` ! C'est parce que nous n'étions pas  \"sur\" la nouvelle branche, comme indiqué par l'astérisque (*) sur `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Indiquons à git que nous voulons nous positionner sur la branche avec ","","```","git checkout [nom]","```","","Cela nous positionne sur la nouvelle branche avant de faire un commit avec nos modifications"],afterMarkdowns:["C'est parti ! Nos modifications ont été enregistrées sur la nouvelle branche"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vous êtes fin prêt pour faire des branches. Après la fermeture de cette fenêtre,","faites une nouvelle branche nommée `bugFix` et positionnez-vous sur cette branche"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branch",""," Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：","","```","早建分支！多用分支！","```","","这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。","","在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们通过实际操作来看看分支是什么样子的。","","接下来，我们将要创建一个到名为 `newImage` 的分支。"],command:"git branch newImage",afterMarkdowns:["看到了吗，创建分支就是这么容易！新创建的分支 `newImage` 指向的是提交记录 `C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在咱们试着往新分支里提交一些东西。点击下面的按钮"],command:"git commit",afterMarkdowns:["哎呀！为什么 `master` 分支前进了，但 `newImage` 分支还待在原地呢？！这是因为我们没有“在”这个新分支上，看到 `master` 分支上的那个星号（*）了吗？这表示当前所在的分支是 `master`。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在咱们告诉 Git 我们想要切换到新的分支上","","```","git checkout <name>","```","","下面的命令会让我们在提交修改之前先切换到新的分支上"],command:"git checkout newImage; git commit",afterMarkdowns:["这就对了！我们的修改已经保存到新的分支里了。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["OK，你们都已经准备好使用分支了。当前窗口关闭后，","创建一个名为 `bugFix` 的新分支，然后切换过去。","","对了，有个更简洁的方式：如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过 `git checkout -b <your-branch-name>` 来实现。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git 的 branch",""," git 的 branch 非常不佔空間。它們只是一個指向某個 commit 的 reference，就這麼簡單。所以許多 git 的愛好者會建議：","","```","早點建立 branch！經常建立 branch！","```","","因為建立 branch 不怎麼會佔用到硬碟空間或者是記憶體，所以你可以把你目前的工作分成好幾個 branch，這比只用一個 branch 要來的好。","","同時使用 branch 和 commit 時，我們待會可以看到兩者如何配合。現在，只要記住使用 branch 其實就是在說：「我想要包含這一次的 commit 以及它的所有 parent 的 commit。」"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["舉一個例子來看看 branch 到底是什麼。","","這裡，我們建立一個名稱為 `newImage` 的新的 branch。"],command:"git branch newImage",afterMarkdowns:["看吧！這就是建立 branch 所需的操作啦！ `newImage` branch 現在指向 commit `C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在讓我們這個新的 branch 做一些操作。點擊下面的按鈕。"],command:"git commit",afterMarkdowns:["太奇怪了啦！ `master` branch 前進了，但 `newImage` branch 沒有前進！這是因為我們沒有「在」這個新的 branch 上，這也是為什麼星號（*）會在 `master` 上。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用如下指令告訴 git 我們想要切換到新的 branch","","```","git checkout [name]","```","","這可以讓我們在 commit 之前切換到新的 branch。"],command:"git checkout newImage; git commit",afterMarkdowns:["太好了！新的 branch 已經記錄了我們的修改。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["好啦，你已經準備好使用 branch 了。當目前的視窗關閉後，","建立一個叫 `bugFix` 的新的 branch，然後切換過去。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치","","깃의 브랜치도 놀랍도록 가볍습니다. 브랜치는 특정 커밋에 대한 참조(reference)에 지나지 않습니다. 이런 사실 때문에 수많은 Git 애찬론자들이 자주 이렇게 말하곤 합니다:","","```","브랜치를 서둘러서, 그리고 자주 만드세요","```","","브랜치를 많이 만들어도 메모리나 디스크 공간에 부담이 되지 않기 때문에, 여러분의 작업을 커다른 브랜치로 만들기 보다, 작은 단위로 잘게 나누는 것이 좋습니다.","",'브랜치와 커밋을 같이 쓸 때, 어떻게 두 기능이 조화를 이루는지 알아보겠습니다. 하지만 우선은, 단순히 브랜치를 "하나의 커밋과 그 부모 커밋들을 포함하는 작업 내역"이라고 기억하시면 됩니다.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["브랜치가 어떤 것인지 연습해보죠.","","`newImage`라는 브랜치를 살펴보겠습니다."],afterMarkdowns:["저 그림에 브랜치의 모든 것이 담겨있습니다! 브랜치 `newImage`가 커밋 `C1`를 가리킵니다"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이 새로운 브랜치에 약간의 작업을 더해봅시다. 아래 버튼을 눌러주세요"],afterMarkdowns:["앗! `master` 브랜치가 움직이고, `newImage` 브랜치는 이동하지 않았네요! 그건 우리가 새 브랜치 위에 있지 않았었기 때문입니다. 별표(*)가 `master`에 있었던 것이죠."],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["아래의 명령으로 새 브랜치로 이동해 봅시다.","","```","git checkout [브랜치명]","```","","이렇게 하면 변경분을 커밋하기 전에 새 브랜치로 이동하게 됩니다."],afterMarkdowns:["이거죠! 이제 우리의 변경이 새 브랜치에 기록되었습니다!"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["좋아요! 이제 직접 브랜치 작업을 연습해봅시다. 이 창을 닫고,","`bugFix`라는 새 브랜치를 만드시고, 그 브랜치로 이동해보세요"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ветвление в Git","","Ветки в Git, как и коммиты, невероятно легковесны. Это просто ссылки на определённый коммит — ничего более. Вот почему многие фанаты Git повторяют мантру","","```","делай ветки сразу, делай ветки часто","```","","Так как создание множества веток никак не отражается на памяти или жестком диске, удобнее и проще разбивать свою работу на много маленьких веток, чем хранить все изменения в одной огромной ветке.","","Чуть позже мы попробуем использовать ветки и коммиты, и вы увидите, как две эти возможности сочетаются. Можно сказать, что созданная ветка хранит изменения текущих коммитов и всех его родителей."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Посмотрим, что такое ветки на практике","","Создадим здесь новую ветку с именем newImage"],afterMarkdowns:["Вот и всё, ребята! Ветка newImage теперь указывает на коммит C1"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Теперь попробуем сделать некоторые изменения в этой ветке. Для этого нажми кнопку ниже."],afterMarkdowns:["О-оу! Ветка master сдвинулась, тогда как ветка newImage - нет! Всё из-за того, что мы не переключились на новую ветку, а остались в старой, о чём говорит звёздочка около ветки master"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Сообщим Git, что хотим выбрать ветку","","```","git checkout [name]","```","","Эта команда перенесёт нас на новую ветку в момент, когда мы ещё не коммитили изменения"],afterMarkdowns:["Вот так! Наши изменения записаны уже в новую ветку"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ну что ж, теперь ты готов к работе с ветками. Как только это окно закроется,","создай ветку с именем bugFix и переключись на неё"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Гілки в Git","","Гілки в Git також є дивовижно легкими. Вони є просто посиланнями на конкретний коміт, нічого більше. Через це багато Git-ентузіастів повторюють мантру:","","```","роби гілки завчасно, роби гілки часто","```","","Через те, що сворення нових гілок ніяк не впливає на використання пам’яті чи дискового простору, набагато простіше розділити свою роботу на кілька логічно зв’язаних по функціоналу гілок, ніж працювати з величезними гілками.","","Коли ми почнемо використовувати гілки та коміти, ми побачимо, як вони поєднуються між собою. Але зараз просто запам’ятай, що гілка просто зберігає роботу теперішнього коміту і всіх його попередників."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте на практиці подивимось, як виглядають гілки в Git.","","Зараз ми створимо нову гілку `newImage`."],afterMarkdowns:["Ось і все, що треба знати про гілки. Гілка `newImage` тепер посилається на коміт `C1`."],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте спробуємо додати якусь інформацію до цієї нової гілки. Натисни кнопку внизу."],afterMarkdowns:['От халепа! Гілка `master` просунулася вперед, але гілка `newImage` — ні! Це тому, що ми були не "на новій гілці". Через це зірочка (*) була поруч з  `master`.'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте вкажемо Git, що ми хочемо перейти на нову гілку за допомогою","","```","git checkout [ім’я]","```","","Ця команда перекине нас на нову гілку до того, як ми закомітимо наші зміни."],afterMarkdowns:["Ось і все! Наші зміни були записані в нову гілку."],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Тепер ти готовий до створення гілок. Як тільки це вікно пропаде, ","зроби нову гілку з назвою `bugFix` та перейди на неї."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Nhánh Git","","Nhánh trong Git cũng nhẹ đến không ngờ. Chúng chỉ đơn giản là các con trỏ đến commit -- không hơn. Đó là lý do các con chiên Git hay niệm chú:","","```","rẽ nhánh sớm, rẽ nhánh thường xuyên","```","","Bởi vì chẳng tốn bao nhiêu bộ nhớ cho việc rẽ nhánh cả, và nó dễ dàng phân chia công việc hơn là có một cái nhánh to tổ chảng.","",'Khi bạn trộn lẫn commit và nhánh, bạn sẽ thấy chúng kết hợp với nhau thế nào. Còn bây giờ, đơn giản hãy nhớ nhánh cơ bản muốn nói "Tôi muốn thành quả trong commit này và tất cả cha ông của nó"']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nào hãy xem nhánh trong Git hoạt động thế nào.","","Giờ chúng ta tạo một nhánh mới tên là `newImage`"],afterMarkdowns:["Đó, rẽ nhánh là thế đó! Nhánh `newImage` giờ đã tham chiếu đến commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nào cùng thử thêm nội dung vào nhánh mới này nào. Hãy bấm nút bên dưới"],afterMarkdowns:['Ồ không! Nhánh `master` đã di chuyển nhưng nhánh `newImage` thì không! Đó là do ta không "nằm trên" nhánh mới, đó là tại sao dấu hoa thị (*) nằm trên nhánh `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nào cùng bảo Git chuyển ta sang nhánh khác với lệnh","","```","git checkout <name>","```","","Lệnh này sẽ chuyển ta sang nhánh mới trước khi commit"],afterMarkdowns:["Đó! Thay đổi của ta đã được lưu sang nhánh mới"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Được rồi! Bạn đã sẵn sàng để tập rẽ nhánh rồi. Khi cửa sổ này đóng lại,","tạo một nhánh mới tên là `bugFix` và chuyển sang nhánh đó.","","Tiện thể, có đường tắt đấy: nếu bạn muốn tạo nhánh mới ","VÀ đồng thời chuyển sang luôn, bạn chỉ cần ","gõ `git checkout -b [yourbranchname]`."]}}]}}}},{}],117:[function(e,t,o){o.level={name:{en_US:"Introduction to Git Commits",de_DE:"Einführung in Git Commits",es_AR:"Introducción a los commits de Git",es_ES:"Introducción a los commits de Git",pt_BR:"Introdução aos commits no Git",gl:"Introducción ós commits de Git",fr_FR:"Introduction aux commits avec Git",ja:"Gitのコミット",ko:"Git 커밋 소개",zh_CN:"Git Commit",zh_TW:"介紹 git commit ",ru_RU:"Знакомство с Git Commit ",uk:"Знайомство з комітами в Git",vi:"Giới thiệu về Git Commit"},goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git commit;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"Just type in 'git commit' twice to finish!",de_DE:"Gib einfach zweimal 'git commit' ein um den Level abzuschließen",es_AR:"¡Simplemente tipeá 'git commit' dos veces para terminar!",es_ES:"¡Simplemente escribe 'git commit' dos veces para terminar!",pt_BR:"Simplesmente digite 'git commit' duas vezes para concluir!",gl:"Simplemente escribe 'git commit' dúas veces para terminar.",fr_FR:"Il suffit de saisir 'git commit' deux fois pour réussir !",zh_CN:"执行两次 'git commit' 就可以过关了！",zh_TW:"輸入兩次 'git commit' 就可以完成！",ja:"'git commit'コマンドを2回打てば完成!",ko:"'git commit'이라고 두 번 치세요!",ru_RU:"Попробуй дважды выполнить команду 'git commit' ;)",uk:"Спробуй двічі виконати команду 'git commit' ;)",vi:"Đơn giản là cứ gõ 'git commit' 2 lần"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","A commit in a git repository records a snapshot of all the files in your directory. It's like a giant copy and paste, but even better!","",'Git wants to keep commits as lightweight as possible though, so it doesn\'t just blindly copy the entire directory every time you commit. It can (when possible) compress a commit as a set of changes, or a "delta", from one version of the repository to the next.',"","Git also maintains a history of which commits were made when. That's why most commits have ancestor commits above them -- we designate this with arrows in our visualization. Maintaining history is great for everyone working on the project!","","It's a lot to take in, but for now you can think of commits as snapshots of the project. Commits are very lightweight and switching between them is wicked fast!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what this looks like in practice. On the right we have a visualization of a (small) git repository. There are two commits right now -- the first initial commit, `C0`, and one commit after that `C1` that might have some meaningful changes.","","Hit the button below to make a new commit"],afterMarkdowns:["There we go! Awesome. We just made changes to the repository and saved them as a commit. The commit we just made has a parent, `C1`, which references which commit it was based off of."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Go ahead and try it out on your own! After this window closes, make two commits to complete the level"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","Ein Commit in ein Git-Repository speichert einen Abbildung aller Dateien in deinem Projektverzeichnis. Es ist wie ein riesiges Kopieren und Einfügen, nur besser.","","Allerdings will Git die Commits so schlank wie möglich halten, also kopiert es nicht einfach stur das ganze Verzeichnis jedes Mal wenn du committest. Es kann (wenn möglich) Commits als Menge von Änderungen zusammenpacken, von einer Version des Repositorys zur nächsten.","","Außerdem führt Git ein Protokoll darüber welche Commits wann gemacht wurden, und welcher auf welchen folgt. Deshalb werden die Commits hier mit ihrem Vorgänger über sich gezeigt -- wir verwenden Pfeile zur Darstellung der Beziehung. Dieses Protokoll zu haben ist eine tolle Sache für jeden, der an einem Projekt arbeitet.","","Das war jetzt eine Menge Neues, aber vorerst kannst du dir Commits einfach als Abbildungen des Projekts vorstellen. Commits sind sehr ressourcenschonend, und zwischen ihnen wechseln geht superschnell!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mal sehen wie das in der Praxis ist. Rechts sehen wir ein (kleines) Git-Repository. Es gibt aktuell zwei Commits -- den initialen, `C0`, und den danach, `C1`, der irgendwelche Änderungen enthält.","","Klick die Schaltfläche unten um einen neuen Commit zu erzeugen:"],afterMarkdowns:["Fertig. Klasse! Wir haben gerade Änderungen gemacht und als Commit im Repository gespeichert. Der Commit, den wir gerade gemacht haben, hat den Vorgänger `C1`; der verweist wiederum auf den Commit, auf dem er basiert: `C0`."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Probier das committen gleich mal aus! Mach zwei Commits um den Level abzuschließen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのコミット","コミットによって、ディレクトリ中の全てのファイルのスナップショットを記録します。巨大なコピー＆ペーストのようなものですが、実際にはそれよりずっと良いものです。","","Gitではコミットを可能な限り軽量に保つために、コミット毎にフォルダ全体をコピーしません。実際にはGitは、コミットを直前のバージョンから一つ先のバージョンへの「変更の固まり」あるいは「差分」として記録します。後で出てきますが、ほとんどのコミットが親を持っているのはそういう理由からです。","","リポジトリをcloneする時には、内部動作としてはコミットの差分をたどって全ての変更を取得しています。cloneした時に以下のような表示が出るのは：","","`resolving deltas`（訳：差分を解決中）","","このためです。","","もっと説明したいところですが、しばらくはコミットをスナップショットのようなものだと考えてください。コミットは非常に軽量であり、コミット間の移動も非常に高速です。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["これがどういうことか、動きを見ていきましょう。図には（小さな）gitリポジトリが描かれています。コミットが2つあります -- `C0`という名前の初回のコミットがあり、`C1`という名前の次のコミットが続きます。これは何か意味のある変更かもしれません。","","下のボタンを押下して新しいコミットを作ってみましょう。"],afterMarkdowns:["できました! 良いですね。いまリポジトリに新しい変更が加えられ、1つのコミットとして保存されました。作成したコミットには親がいて、このコミットの出発点となった`C1`を指しています。"],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["実際に手を動かしてみましょう。このウィンドウを閉じたら、試しに2回コミットをしてみましょう。"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits de Git","Un commit en un repositorio git registra un snapshot de todos los archivos en tu directorio. Es como un _gran_ copy&paste, ¡pero incluso mejor!","",'Git pretende mantener los commits tan livianos como sea posible, por lo que no copia ciegamente el directorio completo cada vez que commiteás. Puede (cuando sea posible) comprimir un commit como un conjunto de cambios (o un _"delta"_) entre una versión de tu repositorio y la siguiente.',"","Git mantiene, también, un historial de qué commits se hicieron cuándo. Es por eso que la mayoría de los commits tienen commits ancestros arriba suyo -- designamos esto con flechas en nuestra visualización. ¡Mantener el historial es genial para todos los que trabajan en el proyecto!","","Hay un montón en lo que ahondar, pero por ahora podés pensar en los commits como snapshots de tu proyecto. Los commits son muy livianos, y ¡cambiar de uno a otro es terriblemente rápido!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos cómo se ve esto en la práctica. A la derecha tenemos una visualización de un (pequeño) repositorio git. Hay dos commits ahora: el commit inicial, `C0`, y un commit que lo sigue, `C1`, que podría tener algunos cambios interesantes.","","Dale al botón de abajo para hacer un nuevo commit"],afterMarkdowns:["¡Ahí va! Increíble. Acabamos de hacer cambios al repositorio y los guardamos como un commit. El commit que acabamos de crear tiene un padre, `C1`, que referencia al commit en que se basó este."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["¡Dale, intentalo vos ahora! Cuando se cierre esta ventana, hacé dos commits para completar el nivel."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits de Git","Un commit en un repositorio git registra un snapshot de todos los archivos en tu directorio. Es como un _gran_ copy&paste, ¡pero incluso mejor!","",'Git pretende mantener los commits tan livianos como sea posible, por lo que no copia ciegamente el directorio completo cada vez que haces un commit. Puede (cuando es posible) comprimir un commit como un conjunto de cambios (o un _"delta"_) entre una versión de tu repositorio y la siguiente.',"","Git mantiene, también, un historial de qué commits se hicieron y cuándo. Es por eso que la mayoría de los commits tienen commits ancestros encima -- designamos esto con flechas en nuestra visualización. ¡Mantener el historial es genial para todos los que trabajan en el proyecto!","","Hay un montón en lo que ahondar, pero por ahora puedes pensar en los commits como snapshots de tu proyecto. Los commits son muy livianos, y ¡cambiar de uno a otro es terriblemente rápido!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos cómo se ve esto en la práctica. A la derecha tenemos una visualización de un (pequeño) repositorio git. Hay dos commits: el commit inicial, `C0`, y un commit que lo sigue, `C1`, que podría tener algunos cambios interesantes.","","Dale al botón de abajo para crear un nuevo commit"],afterMarkdowns:["¡Allá va! Increíble. Acabamos de hacer cambios al repositorio y los guardamos como un commit. El commit que acabamos de crear tiene un padre, `C1`, que referencia al commit en el que se basó este."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["¡Venga, inténtalo ahora! Cuando se cierre esta ventana, crea dos commits para completar el nivel."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits no Git","Um commit em um repositório git registra uma fotografia (snapshot) de todos os arquivos no seu diretório. É como um _grande_ copy&paste, mas ainda melhor!","",'O Git tem por objetivo manter os commits tão leves quanto possível, de forma que ele não copia cegamente o diretório completo toda vez que você commita. Ele pode (quando possível) comprimir um commit como um conjunto de mudanças (ou um _"delta"_) entre uma versão do seu repositório e a seguinte.',"","O Git também mantém um histórico de quando ocorreu cada commit. É por isso que a maioria dos commits tem ancestrais acima de si -- que indicamos usando setas na nossa visualização. Manter a história é ótimo para todos que trabalham no projeto!","","Há muito para aprender, mas por enquanto pense nos commits como snapshots do seu projeto. Os commits são muito leves, e mudar de um para outro é extremamente rápido!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos o que isso significa na prática. À direita, temos uma visualização de um (pequeno) repositório git. Há dois commits no momento: o commit inicial, `C0`, e um commit que se segue, `C1`, que poderia conter algumas mudanças interessantes.","","Clique no botão abaixo para fazer um novo commit"],afterMarkdowns:["Aí vamos nós! Incrível. Acabamos de fazer mudanças no repositório e as guardamos como um commit. O commit que acabamos de criar tem um pai, `C1`, que referencia em qual commit ele se baseou."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Vamos lá, tente você agora! Quando esta janela se fechar, faça dois commits para completar o nível."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits en Git","Un commit nun repositorio de git rexistra unha fotografía (snapshot) de tódolos arquivos no seu directorio. É coma un copy&paste xigante, ¡pero todavía mellor!","",'Git quere gardar os commits o máis pequenos posíbel, por iso non copia directamente o directorio completo sempre que fas un commit. El pode (cando é posíbel) comprimir nun commit un conxunto de cambios (ou un _"delta"_) entre unha versión do teu respositorio e o seguinte.',"","Git tamén garda un histórico de cando se fixo cada cambio. Por iso a maioría dos commits teñen ancestros enriba deles, e nos indicámolos con frechas na nosa visualización. ¡Manter a historia é óptimo para tódolos que traballan no proxecto!","","Hai moito que aprender, pero por agora podes pensar que os commits son fotos do teu proxecto. Os commits son liviáns, e cambiar dun para o outro é extremadamente rápido!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos o que iso significa na práctica. Á dereita, temos unha visualización dun (pequeno) repositorio de git. Hai dous commits por agora: o commit inicial, `C0`, e un commit que lle segue, `C1`, que podería ter algúns cambios interesantes.","","Pincha no botón de abaixo para facer un novo commit"],afterMarkdowns:["¡Alá imos! Mi ma!. Fixemos cambios no repositorio e gardámolos nun commit. O commit que creaches ten un pai, `C1`, que é unha referencia do commit no que se basea."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Alá imos. ¡Inténtao ti agora! Cando se peche a ventá, fai dous commits para completar o nivel."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits Git","Un commit dans un dépôt (repository) git enregistre une image (snapshot) de tous les fichiers du repertoire. Comme un Copier-Coller géant, mais en bien mieux !","","Git fait en sorte que les commits soient aussi légers que possible donc il ne recopie pas tout le répertoire à chaque commit. En fait, git n'enregistre que l'ensemble des changements (\"delta\") depuis la version précédente du dépôt. C'est pour cette raison que la plupart des commits ont un commit parent -- ainsi que nous le verrons plus tard.","",'Pour cloner un dépôt, il faut décompresser ("résoudre") tous ces deltas. C\'est la raison pour laquelle la commande écrit :',"","`resolving deltas`","","lorsque l'on clone un dépôt.","","C'est beaucoup à absorber, mais pour l'instant vous pouvez considérer les commits comme des snapshots du projet. Les commits sont très légers et passer de l'un à l'autre est très rapide !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons à quoi cela ressemble en pratique. Sur la droite, on peut visualiser un (petit) dépôt git. Il y a pour l'instant deux commits -- le premier commit initial, `C0`, et un commit suivant `C1` qui aurait des changements significatifs.","","Appuyez sur le bouton ci-dessous pour faire un nouveau commit"],afterMarkdowns:["C'est parti ! Super. Nous venons de faire des modifications sur le dépôt et de sauvegarder celles-ci dans un commit. Ce commit que nous venons de faire a un parent, `C1`, qui référence le commit sur lequel il est basé."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Allez-y et essayez par vous-même ! Après la fermeture de cette fenêtre, faites deux commits pour terminer ce niveau."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 커밋","커밋은 Git 저장소에 여러분의 디렉토리에 있는 모든 파일에 대한 스냅샷을 기록하는 것입니다. 디렉토리 전체를 복사하여 붙여넣는것과 유사하지만, 훨씬 유용한 방법입니다!","",'Git은 가능한 한 커밋을 가볍게 유지하고자 하기때문에, 커밋할 때마다 디렉토리 전체를 복사하진 않습니다. 각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역("delta"라고도 함)을 저장합니다. 그래서 대부분의 커밋이 그 커밋 위의 부모 커밋을 가리킵니다. -- 다음 화면에서 곧 살펴보게 될 것입니다.',"","저장소를 복제(clone)하려면 모든 변경분(delta)를 풀어내야 하는데, 이 때문에 명령행 결과로 아래 문구를 볼 수 있습니다.","","`resolving deltas`","","알아야 할 것이 꽤 많습니다만, 일단은 커밋을 프로젝트의 스냅샷들로 생각하면 충분합니다. 커밋은 매우 가볍고 커밋 사이의 전환도 매우 빠르다는 것을 기억해주세요!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["연습할 때 어떻게 보이는지 확인해봅시다. 오른쪽 화면에 git 저장소를 그림으로 표현해 놓았습니다. 현재 두번 커밋한 상태입니다 -- 첫번째 커밋으로 `C0`, 그 다음으로 `C1`이라는 어떤 의미있는 변화가 있는 커밋이 있습니다.","","아래 버튼을 눌러 새로운 커밋을 만들어보세요."],afterMarkdowns:["이렇게 보입니다! 멋지죠. 우리는 방금 저장소 내용을 변경해서 하나의 커밋으로 저장했습니다. 방금 만든 커밋은 부모는 `C1`이고, 어떤 커밋을 기반으로 변경된 것인지를 가리킵니다."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["계속해서 직접 한번 해보세요! 이 창을 닫고, 커밋을 두 번 하면 다음 레벨로 넘어갑니다."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commit","Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！","","Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。","","Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。","","关于提交记录太深入的东西咱们就不再继续探讨了，现在你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们来实际操作一下，看看提交记录是怎样的。右边展示了一个（小型）Git 代码库。当前有两个提交记录 —— 初始提交 `C0` 和其后可能包含某些有用修改的提交 `C1`。","","点击下面的按钮创建一个新的提交记录。"],afterMarkdowns:["好了！非常棒！我们刚才修改了代码库，并把这些修改保存成了一个提交记录 `C2`。`C2` 的父节点是 `C1`，父节点是当前提交中变更的基础。"],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下来自己试一试吧。当前窗口关闭后，完成两次提交就可以过关！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git commit","一個 commit 在 git repo 中會記錄目錄下所有文件的快照。感覺像是大量的複製和貼上，但 git 的速度更快！","",'git 希望 commit 儘可能地不占空間，所以每次進行 commit 的時候，它不會單純地複製整個目錄。實際上它把每次 commit 視為從目前的版本到下一個版本的變化量，或者說一個 "（delta）"。',"","git 會保存 commit 的歷史紀錄，所以，絕大部分的 commit 的上面都會有 parent commit，在我們的圖形表示中，箭頭方向表示從 parent commit 到所對應的 child commit，保存這樣子的一個歷史紀錄是非常有用的。","","要學的東西有很多，但現在你可以把 commit 當作是當下的 project 的快照。commit 不佔空間且可以快速切換！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在實例中學習 commit。右邊是一個（小）git repository。當前有兩個 commit，一開始的 commit `C0` 以及 `C1` 這一個 commit 來表示之後可能的一些修改。","","點擊下面的按鈕生成新的 commit。"],command:"git commit",afterMarkdowns:["看吧！很厲害！我們對於文件做了一些修改，並且把這些修改表示成一個 commit。剛剛做的 commit `C2` 有一個 parent commit `C1`，代表此次修改是從那裡過來的。"],beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下來你可以隨便測試。當目前的視窗關閉之後，輸入兩次 commit 就可以過關！"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Коммиты в GIT","Коммит в git репозитории хранит снимок всех файлов в директории. Почти как огромная копия, только лучше","","Git пытается быть лёгким и быстрым насколько это только возможно, так что он не просто слепо копирует всю директорию каждый раз, а ужимает (когда это возможно) коммит в набор изменений или «дельту» между текущей версией и предыдущей.","","Также Git хранит всю историю о том, когда какой коммит был сделан. Вот почему большинство коммитов имеют предков - мы указываем на предков стрелками при визуализации. Поддержка истории коммитов более чем важна для всех, кто работает над проектом!","","Можно ещё долго рассказывать о коммитах, но для простоты будем считать их полными снимками проекта. Коммиты очень легки, так что переключение между ними происходит предельно быстро!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Посмотрим, как это выглядит на практике. Справа расположена визуализация небольшого git репозитория. Сейчас в нём два коммита: первый, исходный коммит С0 и один коммит С1 после него, содержащий изменения.","","Нажми на кнопку, чтобы совершить коммит"],afterMarkdowns:["Отлично. Мы только что внесли изменения в репозиторий и сохранили их как коммит. У коммита, который мы только что сделали, есть родитель, С1, который указывает на предыдущий коммит."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Пора попробовать! После того, как это окно закроется, сделай два коммита, чтобы пройти этот уровень."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Коміти в Git","Коміт в Git репозиторії зберігає моментальну копію всіх файлів в поточній директорії. Це як гігантська копіпаста, тільки краще.","",'Git намагається зберігати коміти якнайпростіше й ефективніше, тому він не просто копіює всю директорію при кожному коміті. Він може стиснути коміт в набір правок чи "дельту" між двома версіями репозиторію.',"","Git також зберігає історію коли і ким був створений той чи інший коміт. Тому більшість комітів мають комітів-предків, що знаходяться вище в ієрархії — ми це зображуємо стрілочками в нашій візуалізації. Історія — це необхідна річ для кожного, хто працює з конкретним проектом.","","Тут є багато над чим подумати, але наразі ти можеш уявляти коміти як моментальні знімки проекту. Коміти майже невагомі й перемикання між ними дуже швидке."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давай подивимось, як це виглядає на практиці. Справа зображена візуалізація маленького Git-репозиторію. Наразі ми бачимо два коміти: початковий коміт `C0`, та наступний коміт `C1`, який містить якісь змістовні зміни.","","Натисни кнопку нижче, щоб створити новий коміт."],afterMarkdowns:["Чудово. Ми щойно зробили деякі зміни з репозиторієм і зберегли їх як новий коміт. Цей коміт має предка `C1`, який вказує на коміт, з якого він був створений."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Спробуй сам. Після того як це вікно закриється, зроби два коміти, щоб пройти цей рівень."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","Một commit trong một git repository(kho chứa) lưu trữ một ảnh chụp của tất cả các file trong thư mục của bạn. Như kiểu copy và paste cõ bự, thậm chí còn tốt hơn thế!","",'Thế nhưng Git muốn giữ cho các commit nhẹ hết mức có thể, cho nên git không copy tất cả thư mục một cách mù quáng mỗi khi bạn commit. Nó có thể(khi khả dĩ) nén commit như một tập hợp các thay đổi, hay là một "bản so sánh", giũa một phiên bản kho chứa git với phiên bản tiếp theo.',"","Đồng thời Git cũng lưu trữ lịch sử commit nào được tạo ra lúc nào. Đó là tại sao hầu hết các commit có commit tổ tiên phía trên nó -- chúng tôi đã hình tượng hóa mối quan hệ này bằng các mũi tên. Trong cộng tác nhóm thì việc gìn giữ lịch sử là rất có ích!","","Có vẻ là hơi nhiều lý thuyết rồi, bây giờ bạn chỉ cần hiều các commit là các lát cắt của dự án. Các commit rất nhẹ nên việc chuyển qua lại giữa chúng thì nhanh vô cùng!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Thử thực hành chút nào. Ở bên phải chúng ta có mô tả một kho git (nhỏ). Hiện tại đang có 2 commit, một là commit khởi nguyên `C0`, và một commit sau đó `C1` có thể đã có một vài thay đổi.","","Bấm nút bên dưới để tạo một commit mới"],afterMarkdowns:["Đúng rồi! Tuyệt vời. Bạn vừa tạo thay đổi cho kho chứa và lưu vào commit. Cái commit bạn vừa tạo nó có cha, là `C1` đấy, là commit mà nó được tạo ra từ đó."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Nào bây giờ thì thử tự làm bài tập nào! Sau khi đóng cửa sổ này, tạo ra 2 commit để hoàn thành cấp độ"]}}]}}}},{}],118:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C2","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3","C2"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git merge bugFix",name:{en_US:"Merging in Git",de_DE:"Mergen in git",es_AR:"Mergeando en Git",es_ES:"Haciendo merge en Git",pt_BR:"Merge no Git",gl:"Merge en Git",fr_FR:"Faire des 'merge' (fusions de branches) avec Git",ko:"Git에서 브랜치 합치기(Merge)",ja:"ブランチとマージ",zh_CN:"Git Merge",zh_TW:"git 中的 merge",ru_RU:"Слияния веток в Git",uk:"Злиття гілок в Git",vi:"Gộp nhánh trong Git"},hint:{en_US:"Remember to commit in the order specified (bugFix before master)",de_DE:"Denk dran in der angegebenen Reihenfolge zu committen (erst bugFix, dann master)",ja:"指示された順番でコミットすること（masterの前にbugFixで）",es_AR:"Acordate de commitear en el orden especificado (bugFix antes de master)",es_ES:"Acuérdate de hacer commit en el orden especificado (bugFix antes de master)",pt_BR:"Lembre-se de commitar na ordem especificada (bugFix antes de master)",gl:"Lembrate de facer commit na orde específica (bugFix antes de master)",fr_FR:"Pensez à faire des commits dans l'ordre indiqué (bugFix avant master)",zh_CN:"要按目标窗口中指定的顺序进行提交（bugFix 先于 master）",zh_TW:"記住按指定的順序 commit（bugFix 比 master 優先）",ko:"말씀드린 순서대로 커밋해주세요 (bugFix에 먼저 커밋하고 master에 커밋)",ru_RU:"Не забудь делать коммиты в правильном порядке (сначала bugFix, потом master)",uk:"Не забудь робити коміти в правильному порядку (спочатку bugFix, а вже потім master)",vi:"Nhớ là commit theo đúng thứ tự(bugFix trước master)"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! We now know how to commit and branch. Now we need to learn some kind of way of combining the work from two different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.","",'The first method to combine work that we will examine is `git merge`. Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, *and* the set of all their parents."',"","It's easier with visuals, let's check it out in the next view"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows up the commit tree from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's merge `master` into `bugFix`:"],afterMarkdowns:["Since `bugFix` was an ancestor of `master`, git didn't have to do any work; it simply just moved `bugFix` to the same commit `master` was attached to.","","Now all the commits are the same color, which means each branch contains all the work in the repository! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following steps:","","* Make a new branch called `bugFix`","* Checkout the `bugFix` branch with `git checkout bugFix`","* Commit once","* Go back to `master` with `git checkout`","* Commit another time","* Merge the branch `bugFix` into `master` with `git merge`","",'*Remember, you can always re-display this dialog with "objective"!*']}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches und Mergen","","Super! Wir wissen jetzt, wie man committet und einen Branch anlegt. Jetzt müssen wir nur noch rauskriegen, wie man die Arbeit, die in verschiedenen Branches steckt, zusammenführen kann. Dann können wir einen neuen Branch erstellen, darin ein neues Feature entwickeln, und das dann in den ursprünglichen Branch integrieren.","",'Die einfachste Methode, mit der man Branches zusammenführen kann, ist `git merge`. Das Mergen erzeugt in git einen speziellen Commit, der zwei Vorgänger hat. Ein solcher Commit bedeutet im Prinzip "ich möchte alle Arbeit von dem Vorgänger hier und dem dort *und* allen ihren jeweiligen Vorgängern miteinander kombinieren".',"","Grafisch dargestellt ist es einfacher zu verstehen, lass es uns mal ansehen"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir zwei Branches; jeder besteht jeweils aus einem eigenen Commit. Das bedeutet, dass keiner der beiden Branches alle Inhalte des gesamten Repositorys kennt. Das werden wir mit einem Merge ändern.","","Wir werden den Branch `bugFix` in `master` integrieren"],afterMarkdowns:["Wow! Hast du das gesehen? Zunächst mal zeigt `master` jetzt auf einen Commit mit zwei Vorgängern. Wenn du den beiden Pfeilen immer weiter folgst, kommst du an jedem Commit im Repository vorbei. Das heißt `master` enthält jetzt alles, was es im Repository gibt.","","Siehst du außerdem wie sich die Farben der Commits verändert haben? Um die Vorgänge zu verdeutlichen hab ich etwas Farbe ins Spiel gebracht. Jeder Branch hat seine eindeutige Farbe. Jeder Merge Commit bekommt als Farbe eine Mischung aus den Farben seiner Vorgänger.","","Wir sehen also, dass die Farbe des Branch `master` in alle Commits gemischt wurde, die von `bugFix` aber nicht. Ändern wir das ..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mergen wir `master` in `bugFix`:"],afterMarkdowns:["Da `bugFix` ein Vorgänger von `master` war, musste git hier kaum etwas tun; es verschiebt `bugFix` einfach auf den Commit, auf den auch `master` zeigt.","","Jetzt haben alle Commits dieselbe Farbe, das heißt jeder Branch enthält die Informationen des gesamten Repositorys! Juhu!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Führe folgendes aus, um diesen Level zu schaffen:","","* Lege einen neuen Branch `bugFix` an","* Checke `bugFix` aus mittels `git checkout bugFix`","* Mach einen Commit","* Geh mit `git checkout` zum `master` zurück","* Mach noch einen Commit","* Merge den Branch `bugFix` in `master` mit `git merge`","","*Denk dran, du kannst diese Meldung mit dem Befehl `objective` so oft anzeigen, wie du willst!*"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチとマージ","","いい調子ですね。これまでにコミットとブランチについて学びました。そろそろ2つのブランチを1つにまとめるやり方について見ていきましょう。これができれば新しい機能の開発のために新しいブランチを切って、開発が終わったら変更を元のブランチへ統合することができるようになります。","","はじめに紹介するのは、`git merge`を使ったマージのやり方です。mergeコマンドによって、2つの独立した親を持つ特別なコミットを作ることができます。2つの親を持つコミットが持つ意味とは、「全く別々の場所にいる2つの親（*かつ*、それらの親の祖先全て）が持つ全ての変更を含んでいますよ」ということです。","","見てみた方が早いので、次の画面で確認してみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["それぞれ別のコミットを指している2つのブランチがあります。変更が別々のブランチに分散していて統合されていないケースです。これをマージで1つにまとめてみましょう。","","`bugFix`ブランチを`master`ブランチにマージしてみます。"],afterMarkdowns:["わあ、見ましたか？まず初めに、`master`ブランチが2つのコミットを親に持つ新しいコミットを指してますね。`master`から親をたどっていくと、最も古いコミットにたどり着くまでに全てのコミットを含んでいる様が確認できます。これで、全ての変更を含む`master`が完成しました。","","色がどう変わったかにも注目して下さい。学習を助けるために、ブランチ毎に色をつけています。それぞれのブランチは自分の色を持っていて、どのブランチから派生して出てくるか次第でコミットごとの色が決まります。","","今回のコミットには`master`ブランチの色が使われました。しかし`bugFix`ブランチの色がまだ変わってないようなので、これを変えてみましょう。"],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`master`ブランチを`bugFix`ブランチにマージしてみます。"],afterMarkdowns:["`bugFix`ブランチは`master`ブランチの派生元だったので、gitは実際大したことはしていません。`bugFix`ブランチを指していたポインタを`master`が指していたコミットへと移動させただけです。","","これで全てのコミットが同じ色になりました。つまり、リポジトリの中の全ての変更をそれぞれのブランチが持ったことになります。やったね！"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう:","","* `bugFix`という名前で新しいブランチを切る","* `git checkout bugFix`コマンドで`bugFix`ブランチに切り替える","* 一回だけコミット","* `git checkout`で`master`へ戻る","* もう1回コミットする","* `git merge`コマンドを使って、`bugFix`ブランチを`master`ブランチへとマージする","",'*注："objective"コマンドでこのヘルプにいつでも戻ってこれます*']}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mergeando ramas","","¡Genial! Ya sabemos cómo commitear y cómo crear ramas. Ahora tenemos que aprender algún modo de unificar el trabajo de dos ramas diferentes.  Esto nos va a permitir abrir una nueva rama de desarrollo, implementar alguna nueva funcionalidad, y después unirla de nuevo con el trabajo principal.","",'El primer método para combinarlas que vamos a explorar es `git merge`. Mergear en Git crea un commit especial que tiene dos padres diferentes. Un commit con dos padres esencialmente significa "Quiero incluir todo el trabajo de este padre de acá y este otro padre de acá, *y* del conjunto de todos sus ancestros"',"","Es más simple visualizarlo, veámoslo a continuación"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Acá tenemos dos ramas, y cada una tiene un commit que le es único. Esto significa que ninguna de las ramas incluye "todo el trabajo" que hay en nuestro repositorio. Hagamos un merge para solucionar eso.',"","Vamos a `merge`ar la rama `bugFix` a `master`"],afterMarkdowns:["¡Wooow! ¿Viste eso? Primero que nada, `master` ahora apunta a un commit que tiene dos padres. Si seguís las flechas por el árbol de commits empezando desde `master` vas a cruzarte con cada commit del repositorio hasta llegar a la raíz. Esto significa que `master` ahora contiene todo el trabajo que hay en el repositorio.","","Además, ¿viste cómo cambiaron los colores de los commits? Para ayudar al aprendizaje, incluí algunas convenciones de colores. Cada rama tiene un color propio. Cada commmit se vuelve del color resultante de mezclar los colores de todas las ramas que lo contienen.","","Así que acá vemos que el color de la rama `master` participa en la mezcla de todos los commits, pero que el de `bugFix` no. Arreglemos eso..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mergeemos `master` a `bugFix`:"],afterMarkdowns:["Como `bugFix` era un ancestro de `master`, git no tuvo que hacer ningún trabajo; simplemente movió `bugFix` al mismo commit al que estaba anexado `master`.","","Ahora todos los commits son del mismo color, lo que significa que cada rama contiene todo el trabajo que hay en el repositorio. ¡Wiii!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, seguí estos pasos:","","* Creá una nueva rama, llamada `bugFix`","* Checkouteá la rama `bugFix` usando `git checkout bugFix`","* Hacé un commit","* Volvé a `master` con `git checkout`","* Hacé otro commit","* Mergeá la rama `bugFix` a `master` usando `git merge`","",'*Acordate: siempre podés volver a ver este mensaje tipeando "objective"!*']}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo merge en ramas","","¡Genial! Ya sabemos cómo crear un commit y cómo crear ramas. Ahora tenemos que aprender algún modo de unificar el trabajo de dos ramas diferentes.  Esto nos va a permitir abrir una nueva rama de desarrollo, implementar alguna nueva funcionalidad, y después unirla de nuevo con el trabajo principal.","",'El primer método para combinarlas que vamos a explorar es `git merge`. Hacer merge en Git crea un commit especial que tiene dos padres diferentes. Un commit con dos padres escencialmente significa "Quiero incluir todo el trabajo de estos dos padres , *y* del conjunto de todos sus ancestros"',"","Es más simple visualizarlo, veámoslo a continuación"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Aquí tenemos dos ramas, y cada una tiene un commit que le es único. Esto significa que ninguna de las ramas incluye "todo el trabajo" que hay en nuestro repositorio. Hagamos un merge para solucionar eso.',"","Vamos a `merge`ar la rama `bugFix` a `master`"],afterMarkdowns:["¡Caramba! ¿Viste eso? Antes de nada, `master` ahora apunta a un commit que tiene dos padres. Si sigues las flechas por el árbol de commits empezando desde `master` vas a cruzarte con cada commit del repositorio hasta llegar a la raíz. Esto significa que `master` ahora contiene todo el trabajo que hay en el repositorio.","","Además, ¿viste cómo cambiaron los colores de los commits? Para ayudar al aprendizaje, he incluido algunas convenciones de colores. Cada rama tiene un color propio. Cada commmit se vuelve del color resultante de mezclar los colores de todas las ramas que lo contienen.","","Así que aquí vemos que el color de la rama `master` participa en la mezcla de todos los commits, pero que el de `bugFix` no. Arreglemos eso..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hagamos merge de `master` a `bugFix`:"],afterMarkdowns:["Como `bugFix` era un ancestro de `master`, git no tuvo que hacer ningún trabajo; simplemente movió `bugFix` al mismo commit al que estaba anexado `master`.","","Ahora todos los commits son del mismo color, lo que significa que cada rama contiene todo el trabajo que hay en el repositorio. ¡Genial!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, sigue estos pasos:","","* Crea una nueva rama, llamada `bugFix`","* Haz checkout de la rama `bugFix` usando `git checkout bugFix`","* Crea un commit","* Vuelve a `master` con `git checkout`","* Crea otro commit","* Haz merge de la rama `bugFix` a `master` usando `git merge`","",'*Recuerda: siempre puedes volver a ver este mensaje escribiendo "objective"!*']}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches e Merge","","Ótimo! Agora sabemos como commitar e criar ramos. Agora precisamos aprender uma forma de combinar o trabalho de dois ramos diferentes. Isso nos permitirá ramificar, desenvolver um novo recurso, e então combiná-lo de volta.","",'O primeiro método para combinar trabalho que vamos examinar é o `git merge`. O merge do Git cria um commit especial que possui dois pais únicos. Um commit com dois pais essencialmente significa "Quero incluir todo o trabalho deste pai aqui com o daquele outro pai ali, *e* com o do conjunto de todos os seus ancestrais."',"","É mais fácil com uma visualização, vamos ver logo a seguir"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Aqui nós temos dois ramos; cada um tem um commit que é único. Isso significa que nenhum ramo inclui o conjunto do "trabalho" que foi realizado no repositório. Vamos consertar isso com um merge.',"","Vamos juntar o ramo `bugFix` no `master`"],afterMarkdowns:["Uau! Viu isso? Antes de tudo, o `master` agora aponta para um commit que possui dois pais. Se você seguir as setas subindo a árvore de commits a partir do `master`, você será capaz de encontrar, ao longo do caminho até a raiz, qualquer um dos commits. Isso significa que o `master` contém todo o trabalho realizado no repositório até o momento.","","Além disso, viu como as cores dos commits mudaram? Para ajudá-lo a aprender, eu incluí uma legenda. Cada ramo tem uma cor única. Cada commit tem a cor resultante da mistura das cores de todos os ramos que o contém.","","Aqui vemos que a cor do ramo `master` está misturada em todos os commits, mas a cor do `bugFix` não está. Vamos corrigir isso..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos juntar o `master` no `bugFix`:"],afterMarkdowns:["Como o `bugFix` é um ancestral do `master`, o git não teve trabalho nenhum; ele só precisou mover o `bugFix` para o mesmo commit do `master`.","","Agora todos os commits possuem a mesma cor, o que significa que ambos os ramos contém todo o trabalho realizado no repositório! Eba!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, faça o seguinte:","","* Crie um novo ramo chamado `bugFix`","* Faça checkout no ramo `bugFix` com `git checkout bugFix`","* Faça um commit","* Volte ao `master` com `git checkout`","* Faça um novo commit","* Junte o ramo `bugFix` no `master` com `git merge`","",'*Lembre-se, você pode sempre mostrar esta mensagem novamente com o comando "objective"!*']}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas e merges","","¡Xenial! Agora sabemos como facer commits e crear ramas. Agora precisamos aprender unha forma de combinar o traballo de dúas ramas diferentes. Iso permitiríanos ramificar, facer un novo cambio, e entón mesturalo de volta.","",'O primeiro comando para mesturar o traballo que imos ver é `git merge`. O merge de Git crea un commit especial que ten dous pais únicos. Un commit con dous pais significa "Quero incluír todo o traballo deste pai cos cambios do outro pai, *e* o conxunto de tódolos ancestros."',"","É máis doado con unha visualización, ímolo ver na seguinte vista."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Aquí nos temos dúas ramas; cada unha ten un commit que é único. Isto significa que ningunha rama inclúe o conxunto de "traballo" feito no noso repositorio. Imos arranxar esto cun merge.',"","Imos xuntar a rama `bugFix` na `master`"],afterMarkdowns:["¡Uah! ¿Viches? Antes de todo, `master` agora apunta a un commit que ten dous pais. Se ti sigues as frechas subindo a árbore de commits a partir de `master`, serás capaz de ver tódolos commits ata a raíz, calquera de eles. Isto significa que a rama `master` contén todo o traballo realizado no repositorio ata ese momento.","","Ademáis, ¿viches como cambiaron as cores dos commits? Para axudarte a aprender, hai unha lenda. Cada rama ten unha única cor. Cada commit ten a cor resultante de mesturar as cores de tódalas ramas que contén.","","Aquí vemos que a  rama `master` está mesturada en todos os commits, pero a cor da rama `bugFix` non o está. Imos arranxar eso..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Imos mesturar a rama `master` en `bugFix`:"],afterMarkdowns:["Como o `bugFix` é un ancestro de `master`, o git non ten traballo que facer; el só ten que mover o punteiro de `bugFix` para o mesmo commit que `master`.","","Agora tódolos commits teñen a mesma cor, o que significa que ambas ramas teñen o mesmo traballo no repositorios! Iepa!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, fai o seguinte:","","* Crea unha nova ramara chamada `bugFix`","* Fai checkout da rama `bugFix` con `git checkout bugFix`","* Fai un commit","* Volve á rama `master` con `git checkout`","* Fai un novo commit","* Xunta a rama `bugFix` en `master` con `git merge`","",'¡Recorda, podes amosar esta mensaxe novamente co comando "objective"!']}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches et Merges","","Super ! Nous savons désormais comment faire des commits et des branches. Maintenant nous devons apprendre comment combiner ensemble les contenus de deux branches différentes. Ceci nous permettra de créer une nouvelle branche, développer une nouvelle fonctionnalité sur cette dernière, puis intégrer cette fonctionnalité en combinant le contenu de cette branche de développement à la branche d'origine (master par exemple).","","La première méthode que nous allons voir pour combiner le contenu de deux branches est `git merge`. Faire un 'merge' avec Git crée un commit spécial qui a deux parents. Un commit avec deux parents indique en susbtance \"Je veux inclure le contenu de ce parent et le contenu de cet autre parent, *et* l'ensemble de leurs parents.\"","","C'est plus facile en visualisant, regardons dans la vue suivante"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons deux branches ; chacune a un commit qui lui est propre. Cela signifie qu'aucune des deux branches n'inclut la totalité du \"travail\" qui a été fait dans le dépôt. Arrangeons-cela avec merge.","","Nous allons `merge` («fusionner») la branche `bugFix` dans `master`"],afterMarkdowns:["Youhou ! Vous avez vu ça ? Avant tout, `master` pointe donc maintenant sur un commit qui a deux parents. Si vous remontez l'enchaînement des flèches depuis `master`, vous allez passez par tous les commits jusqu'à la racine. Cela signifie que `master` contient maintenant tout le travail du dépôt.","","Par ailleurs, avez-vous remarqué les nouvelles couleurs des commits ? Pour faciliter l'apprentissage, j'ai inclus une certaine logique dans la coloration. Chaque branche a une unique couleur. Chaque commit est de la couleur de toutes les branches qui le contiennent.","","Ici nous voyons que la couleur de `master` est intégrée à tous les commits, sauf ceux de `bugFix`. Réparons-cela ..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Faisons un merge  de `master` dans `bugFix`:"],afterMarkdowns:["Puisque `bugFix` était un descendant de `master`, git n'avait aucun travail à effectuer; il a simplement déplacé `bugFix` au même commit auquel `master` est attaché.","","Maintenant tous les commits sont de la même couleur, ce qui indique que chaque branche contient tout le contenu du dépôt ! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, effectuez les opérations suivantes :","","* Faites une nouvelle branche appelée `bugFix`","* Positionnez-vous sur la branche `bugFix` avec `git checkout bugFix`","* Faites un commit","* Retournez sur la branche `master` (commande `git checkout`)","* Faites un nouveau commit","* Fusionnez la branche `bugFix` dans `master` avec `git merge`","",'*Rappelez-vous que vous pouvez à tout moment réafficher ces indications avec "objective"!*']}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 分支与合并","","太好了! 我们已经知道如何提交以及如何使用分支了。接下来咱们看看如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。","","咱们先来看一下第一种方法 —— `git merge`。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”","","通过图示更容易理解一些，咱们到下一页看一下。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我们准备了两个分支，每个分支上各有一个独有的提交。这意味着没有一个分支包含了我们修改的所有内容。咱们通过合并这两个分支来解决这个问题。","","我们要把 `bugFix` 合并到 `master` 里"],command:"git merge bugFix",afterMarkdowns:["哇哦！看见了吗？首先，`master` 现在指向了一个拥有两个父节点的提交记录。假如从 `master` 开始沿着箭头向上看，在到达起点的路上会经过所有的提交记录。这意味着 `master` 包含了对代码库的所有修改。↓↓↓","","还有，看见各个提交记录的颜色变化了吗？为了帮助学习理解，我引入了颜色搭配。每个分支都有不同的颜色，而每个提交记录的颜色是所有包含该提交记录的分支的颜色混合之后的颜色。","","所以，`master` 分支的颜色被混入到所有的提交记录，但 `bugFix` 没有。下面咱们让它也改变一下颜色。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们再把 `master` 分支合并到 `bugFix`："],command:"git checkout bugFix; git merge master",afterMarkdowns:["因为 `master` 继承自 `bugFix`，Git 什么都不用做，只是简单地把 `bugFix` 移动到 `master` 所指向的那个提交记录。","","现在所有提交记录的颜色都一样了，这表明每一个分支都包含了代码库的所有修改！大功告成！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["要想通过这一关，需要以下几步：","","* 创建新分支 `bugFix`","* 用 `git checkout bugFix` 命令切换到该分支","* 提交一次","* 用 `git checkout master` 切换回 `master`","* 再提交一次","* 用 `git merge` 把 `bugFix` 合并到 `master`","","* 你随时都可以用“objective”命令来打开这个对话框！*"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## branch 以及 merge","","太好了! 我們已經知道怎麼使用 commit 和 branch 了。接下來要學的一招是如何合併（merge）兩個不同 branch 的工作。這讓我們可以建立一個新的 branch ，並且在上面開發新功能，然後合併回 master branch。","","`git merge` 是我們要學習 merge 的第一個方法。該 merge 會產生一個特殊的 commit，它包含兩個唯一 parent commit。一個 commit 如果有兩個 parent commit 的話，那就表示：「我想把這兩個 parent commit 本身及它們的 所有的 parent commit 都包含進來。」","","有圖有真相，看看下面的圖就明白了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在這裡，我們有兩個 branch：各自都有一個唯一的 commit。這意味著沒有一個 branch 包含我們對文件的所有修改。讓我們 merge 這兩個 branch 來解決這個問題。","","我們要 merge `bugFix` 到 `master` "],command:"git merge bugFix",afterMarkdowns:["哇！看見了沒有？首先，`master` 現在指向一個 commit，這個 commit 有兩個 parent commit。假如從 `master` 開始沿著箭頭向上走，在到達起點的路上會經過所有的 commit。這說明了現在 `master` 紀錄了對文件的所有修改。","","還有，看見各個 commit 的顏色變化了嗎？為了幫助學習，我混合了顏色。每個 branch 都有特定的顏色。每個 commit 的顏色都變成了含有此 commit 的所有 branch 的混合色。","","所以，`master` branch 的顏色被混入到所有的 commit，但 `bugFix` 沒有。接下來就改一下這裡吧。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們 merge  `master` branch 到 `bugFix` 吧。"],command:"git checkout bugFix; git merge master",afterMarkdowns:["因為 `bugFix` branch只是 `master` branch 的 parent，git 什麼都不用做，只是簡單地把 `bugfix` branch 移動到 `master` 指向的 commit。","","現在所有的 commit 的顏色都是一樣的啦，這表示每一個 branch 都包含了所有文件的修改！太厲害了啦！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["想完成這一關，執行以下的操作：","","* 建立新的 branch，叫做 `bugFix` ","* 用 `git checkout bugFix` 切換到 `bugFix` branch","* commit 一次","* 用 `git checkout` 切換回 `master` branch","* 再 commit 一次","* 用 `git merge`  將 `bugFix` merge 到 `master`","",'*記住，你可以用 "objective" 指令來重新顯示這個對話框！*']}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치와 합치기(Merge)","","좋습니다! 지금까지 커밋하고 브랜치를 만드는 방법을 알아봤습니다. 이제 두 별도의 브랜치를 합치는 몇가지 방법을 알아볼 차례입니다. 이제부터 배우는 방법으로 브랜치를 따고, 새 기능을 개발 한 다음 합칠 수 있게 될 것입니다.","",'처음으로 살펴볼 방법은 `git merge`입니다. Git의 합치기(merge)는 두 개의 부모(parent)를 가리키는 특별한 커밋을 만들어 냅니다. 두개의 부모가 있는 커밋이라는 것은 "한 부모의 모든 작업내역과 나머지 부모의 모든 작업, *그리고* 그 두 부모의 모든 부모들의 작업내역을 포함한다"라는 의미가 있습니다. ',"","그림으로 보는게 이해하기 쉬워요. 다음 화면을 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기에 브랜치가 두 개 있습니다. 각 브랜치에 독립된 커밋이 하나씩 있구요. 그 말은 이 저장소에 지금까지 작업한 내역이 나뉘어 담겨 있다는 얘기입니다. 두 브랜치를 합쳐서(merge) 이 문제를 해결해 볼까요?","","`bugFix` 브랜치를 `master` 브랜치에 합쳐(merge) 보겠습니다."],afterMarkdowns:["보셨어요? 우선, `master`가 두 부모가 있는 커밋을 가리키고 있습니다. ","","또, 커밋들의 색이 바뀐 것을 눈치 채셨나요? 이해를 돕기위해 색상으로 구분해 표현했습니다. 각 브랜치는 그 브랜치만의 색상으로 그렸습니다. 브랜치가 합쳐지는 커밋의 경우에는, 그 브랜치들의 색을 조합한 색상으로 표시 했습니다.","","그런식으로 여기에 `bugFix`브랜치 쪽을 제외한 나머지 커밋만 `master` 브랜치의 색으로 칠해져 있습니다. 이걸 고쳐보죠..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이제 `master` 브랜치에 `bugFix`를 합쳐(merge) 봅시다:"],afterMarkdowns:["`bugFix`가 `master`의 부모쪽에 있었기 때문에, git이 별다른 일을 할 필요가 없었습니다; 간단히 `bugFix`를 `master`가 붙어 있는 커밋으로 이동시켰을 뿐입니다.","","짜잔! 이제 모든 커밋의 색이 같아졌고, 이는 두 브랜치가 모두 저장소의 모든 작업 내역을 포함하고 있다는 뜻입니다."],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["아래 작업을 해서 이 레벨을 통과하세요:","","* `bugFix`라는 새 브랜치를 만듭니다","* `git checkout bugFix`를 입력해 `bugFix` 브랜치로 이동(checkout)합니다.","* 커밋 한 번 하세요","* `git checkout` 명령어를 이용해 `master`브랜치로 돌아갑니다","* 커밋 또 하세요","* `git merge` 명령어로 `bugFix`브랜치를 `master`에 합쳐 넣습니다.","",'*아 그리고, "objective" 명령어로 이 안내창을 다시 볼 수 있다는 것을 기억해 두세요!*']}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ветки и слияния","","Ок! Мы уже знаем, как создавать ветки и коммитить наши изменения. Теперь надо понять, как объединять изменения из двух разных веток. Очень удобно создать ветку, сделать свою часть работы в ней и потом объединить изменения из своей ветки с общими.","","Первый способ объединения изменений, который мы рассмотрим - это `git merge` - слияние или просто мердж. Слияния в Git создают особый вид коммита, который имеет сразу двух родителей. Коммит с двумя родителями обычно означает, что мы хотим объединить изменения из одного коммита с другим коммитом и всеми их родительскими коммитами.","","Слишком запутанно =) На схеме всё проще и понятнее."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Вот у нас две ветки, каждая содержит по одному уникальному коммиту. Это означает, что ни одна из веток не содержит полный набор "работ", выполненных в этом репозитории. Можно исправить эту ситуацию, выполнив слияние.',"","Мы сделаем `merge` ветки `bugFix` в ветку `master`"],afterMarkdowns:["Что мы видим? Во-первых, ветка `master` теперь указывает на коммит, у которого два родителя. Если проследовать по стрелкам от этого коммита, вы пройдёте через каждый коммит в дереве прямиком к началу. Это означает, что теперь в ветке `master` содержатся все изменения репозитория.","","Во-вторых, обрати внимание, как изменились цвета коммитов. Мы ввели цветовую дифференциацию, чтобы помочь пониманию. У каждой ветки — свой цвет. Каждый коммит становится того цвета, какого его ветка. Если в нём изменения сразу двух веток - он становится цветом, смешанным из цветов родительских веток.","","И вот мы видим, что цвет ветки `master` подмешан к каждому коммиту, а ветки `bugFix` - нет. Это можно поправить."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Смерджим ветку `master` в ветку `bugFix`"],afterMarkdowns:["Так как ветка `bugFix` была предшественницей `master`, Git не делал ничего, только сдвинул `bugFix` на тот же коммит, где находится `master`","","Теперь все коммиты одного цвета, что означает, что каждая ветка содержит все изменения репозитория! Поздравляем!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, сделай следующее:","","* Создай новую ветку под названием `bugFix`","* Переключись на новую ветку `bugFix` командой `git checkout bugFix`","* Сделай один коммит","* Вернись на ветку `master` при помощи `git checkout`","* Сделай ещё один коммит","* Слей ветку `bugFix` с веткой `master` при помощи `git merge`","",'* Если что-то пошло не так - можешь подглядеть в эту шпаргалку командой "objective"!*']}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Гілки та їх Злиття","","Чудово! Ми знаємо як комітити та створювати гілки. Тепер потрібно навчитися в якийсь спосіб поєднувати інфу з двох чи більше гілок. Це дозволить нам відгілкуватись, зробити нову фічу, й потім інтегрувати її назад.","","Перший спосіб об’єднувати робочу інфу з яким ми розберемось це `git merge`. Команда merge (злити) в Git створює спеціальний коміт який має двох унікальних батьків. Коміт з двома батьками в приниципі просто значить що в нього включена інфа з обох батьків і всіх їх попередників.","","Це простіше сприймається візуально, тому розберемо це в наступному слайді"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Тут ми маємо дві гілки; кожна з них містить унікальний коміт. Це означає що жодна з них не містить повного набору "робочої інфи" в цьому репозиторії. Давайте зіллємо всю інфу докупи за допомогою merge.',"","Ми `змержимо` гілку `bugFix` в `master`"],afterMarkdowns:["Нічого собі! Ви це бачили? По-перше, `master` тепер вказує на коміт з двома батьками. Якщо ти піднімешся вверх з цього коміту по дереву, починаючи з `master`, на шляху ти зустрінеш кожен коміт аж до кореневого. Це означає що гілка `master` тепер містить всю інфу в цьому репозиторії.","","А ти помітив як змінилися кольори комітів? Для кращого розуміння процесу я додав певну кольорову диференціацію. Кожен бранч виділено окремим кольором. Колір кожного коміту це суміш кольорів всіх гілок що місять цей коміт.","","Тож ми бачимо що колір гілки `master` містять всі коміти, але не колір `bugFix`. Давайте виправимо це..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давай змержимо `master` в `bugFix`:"],afterMarkdowns:["Так як `bugFix` є нащадком `master`, git'у не потрібно нічого робити; він просто пересунув `bugFix` на тей самий коміт, на якому знаходиться `master`.","","Тепер всі коміти одного кольору, що означає що кожен бранч включає в собі всю корисну інфу яка є в цьому репозиторії! Ура!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень виконай наступні кроки:","","* Зроби нову гілку (branch) з назвою `bugFix`","* Перейди на гілку `bugFix` за допомогою `git checkout bugFix`","* Зроби один коміт","* Повернись до `master` за допомогою `git checkout`","* Зроби ще один коміт","* Змерджи (злий) гілку `bugFix` в `master` за допомогою `git merge`","",'*Не забувай, ти можеш завжди повернутися до цього діалогу за допомогою "objective"!*']}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Nhánh và gộp nhánh","","Tuyệt! Ta đã biết làm sao để commit và tạo nhánh. Giờ ta cần học cách để tập hợp thành quả của 2 nhánh khác biệt lại với nhau. Đây sẽ là cách để ta phân tách để phát triển chức năng, rồi sau đó hợp nhất nó trở lại.","",'Cách đầu tiên để hợp nhất thành quả cần xem xét đến là lệnh `git merge`. Merge trong Git là tạo ra một commit đặc biệt mà có 2 người cha độc nhất. Một commit mà có 2 cha căn bản nghĩa là "Tôi muốn có thành quả của ông này và ông kia nữa, *và* tất cả ông cha của họ."',"","Trực quan thì dễ hiểu hơn, sang trang tiếp theo nào"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Ở đây ta có 2 nhánh; mỗi nhánh có 1 commit độc nhất. Có nghĩa là chẳng nhánh nào có đủ "thành quả" trong kho chứa của ta cả. Sửa nó bằng merge nào.',"","Ta sẽ `merge` nhánh `bugFix` vào `master`"],afterMarkdowns:["Wao! Thấy chứ? Trước tiên, `master` giờ đã trỏ đến commit có 2 cha. Nếu bạn lần theo mũi tên lên trên từ `master`, bạn sẽ gặp tất cả các commit lên đến commit gốc. Có nghĩa là `master` giờ đã chứa tất cả thành quả trong kho.","","Đồng thời, bạn thấy màu commit thay đổi chứ? Để bạn dễ học hơn, tôi đã phối hợp một số bảng màu. Mỗi nhánh có một màu duy nhất. Mỗi commit mang màu pha trộn của tất cả nhánh chứa nó.","","Vì vậy, ở đây chúng ta thấy rằng màu nhánh `master` được pha trộn vào tất cả các commit, nhưng màu` bugFix` thì không. Hãy sửa nó nào ..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy gộp nhánh `master` vào `bugFix` nào:"],afterMarkdowns:["Vì `bugFix` là bậc cha ông của `master`, git chẳng phải làm gì cả; nó đơn giản chỉ chuyển `bugFix` vào commit mà `master` đang trỏ tới.","","Giờ thì tất cả commit đã có cùng màu, nghĩa là mỗi nhánh đã chứa tất cả thành quả trong kho! Ồ hố!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, hãy làm theo các bước bên dưới:","","* Tạo một nhánh mới tên là `bugFix`","* Chuyển sang nhánh `bugFix` với `git checkout bugFix`","* Commit một lần","* Trở về `master` với `git checkout`","* Commit một lần nữa","* Gộp nhánh `bugFix` vào `master` với `git merge`","",'*Nhớ rằng, bạn luôn luôn có thể bật lại hội thoại này với lệnh "objective"!*']}}]}}}},{}],119:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22bugFix%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git checkout bugFix;git rebase master",name:{en_US:"Rebase Introduction",de_DE:"Einführung in Rebase",ja:"Rebaseの解説",es_AR:"Introducción a rebase",es_ES:"Introducción a rebase",pt_BR:"Introdução ao rebase",gl:"Introducción a rebase",fr_FR:"Introduction à rebase",ko:"리베이스(rebase)의 기본",zh_CN:"Git Rebase",zh_TW:"介紹 rebase",ru_RU:"Введение в rebase",uk:"Знайомство з rebase",vi:"Giới thiệu về rebase"},hint:{en_US:"Make sure you commit from bugFix first",de_DE:"Geh vor dem committen sicher, dass du auf bugFix arbeitest",ja:"初めにbugFixを指した状態でコミットする",fr_FR:"Assurez-vous de bien faire votre commit sur bugFix en premier",es_AR:"Asegurate de commitear desde bugFix primero",es_ES:"Asegúrate de hacer commit desde bugFix primero",pt_BR:"O bugFix precisa ser commitado primeiro",gl:"Asegurate de facer o commit dende bugFix primeiro",ko:"bugFix 브랜치에서 먼저 커밋하세요",zh_CN:"先在 bugFix 分支上进行提交",zh_TW:"你要先在 bugFix branch 進行 commit",ru_RU:"Убедись, что сделал коммит в ветке bugFix",uk:"Впевнись, що зробив коміт в гілці bugFix",vi:"Hãy chắc chắn rằng bạn commit từ bugFix trước"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'The second way of combining work between branches is *rebasing.* Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.',"","While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.","","Let's see it in action..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches yet again; note that the bugFix branch is currently selected (note the asterisk)","","We would like to move our work from bugFix directly onto the work from master. That way it would look like these two features were developed sequentially, when in reality they were developed in parallel.","","Let's do that with the `git rebase` command"],afterMarkdowns:["Awesome! Now the work from our bugFix branch is right on top of master and we have a nice linear sequence of commits.","",'Note that the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3\' is the "copy" that we rebased onto master.',"","The only problem is that master hasn't been updated either, let's do that now..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now we are checked out on the `master` branch. Let's go ahead and rebase onto `bugFix`..."],afterMarkdowns:["There! Since `master` was an ancestor of `bugFix`, git simply moved the `master` branch reference forward in history."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following","","* Checkout a new branch named `bugFix`","* Commit once","* Go back to master and commit again","* Check out bugFix again and rebase onto master","","Good luck!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'Der zweite Weg um Inhalte aus verschiedenen Branches zu kombinieren ist `git rebase`. Rebasen nimmt im Prinzip eine Menge von Commits, "kopiert" sie und packt sie auf etwas anderes drauf.',"","Auch wenn das erst mal komisch klingt liegt der Vorteil von Rebase darin, dass man es benutzen kann um hübsch lineare Abfolgen von Commits zu erhalten. Das Commit-Protokoll des Repositorys wird durch Rebase eine ganze Ecke einfacher aussehen, weil Merge Commits vermieden werden.","","Schauen wir's uns mal in Aktion an ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir wieder zwei Branches; wie du siehst ist `bugFix` aktuell ausgewählt (sieht man am `*`).","","Wir würden jetzt gerne unsere Arbeit aus `bugFix` direkt auf den `master` packen. Das Ergebnis wäre, dass alle aktuellen Änderungen in `master` auch im Branch `bugFix` sind.","","Das machen wir mit dem Befehl `git rebase`:"],afterMarkdowns:["Hammer! Was wir in `bugFix` gemacht haben ist jetzt oben auf `master` draufgepackt und wir haben eine schön lineare Abfolge von Commits bekommen.","",'Commit `C3` existiert immer noch irgendwo (deswegen ist er blaß dargestellt) und `C3\'` ist die "Kopie" die wir auf den `master` gepackt haben.',"","Aber `master` ist jetzt nicht aktualisiert worden, lass uns das gerade noch nachholen ..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Jetzt sind wir im `master`. Lass uns den mal auf `bugFix` rebasen ..."],afterMarkdowns:["So! Da `master` ein Vorgänger von `bugFix` war konnte Git hier einfach den Bezeichner `master` auf denselben Commit schieben, auf den auch `bugFix` zeigt."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level abzuschließen musst du folgendes tun:","","* Einen neuen Branch namens `bugFix` auschecken","* Einen Commit machen","* Zurück zum `master` wechseln und noch einmal committen","* `bugFix` auschecken und auf den `master` rebasen","","Viel Erfolg!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","ブランチを一つにまとめる方法として前回はマージを紹介しましたが、今回紹介するリベースを使うこともできます。リベースの動作は、マージするコミットのコピーをとって、どこかにストンと落とすというイメージです。","","ピンと来ないかもしれませんが、リベースのメリットは一本の連続したコミットに整形できることです。リベースだけ使っていると、コミットのログや履歴が非常にクリーンな状態に保たれます。","","早速実際にどう動くのかを見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["前回と同様の2つのブランチを考えます。仮にいまbugFixブランチをチェックアウトしているとします。（アスタリスクつきのもの）","","bugFixに入ってる作業内容をそのまま直接masterブランチ上の内容に移動したいとします。こうすることで、実際には並行して開発された2つの別々のブランチ上の機能のソースを、あたかも1本のブランチ上で連続して開発されていたかのように見せることができます。","","`git rebase`コマンドでそれをやってみましょう。"],afterMarkdowns:["できました！これでbugFixブランチの作業内容はmasterブランチのすぐ先に移動したので、見た目が一本になってスッキリしました。","","気を付けてほしいのは、C3コミットはどこかに残ってるということ（ツリーの中で半透明にしてあります）、そしてC3'は（C1との接続が切れているC3の）コピーがmasterブランチ上に作られているということです。","","一つ問題が残ってて、masterブランチがまだ最新化されていませんね。ちょっと直してみましょう。。"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["masterブランチにチェックアウトしてあります。この状態からmasterブランチを`bugFix`へとリベースしてみましょう。"],afterMarkdowns:["できた！`master`は`bugFix`の直前のコミットだったので、gitは単純に`master`ブランチのポインタを前に進めただけでした。"],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。","","* `bugFix`という名前の新しいブランチをチェックアウトする","* 一回だけコミット","* masterブランチに戻ってもう1回コミット","* bugFixをもう1回チェックアウトして、master上にリベース","","幸運を祈る！"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'El segundo modo de combinar el trabajo de distintas ramas es el *rebase*. Rebasear esencialmente agarra un conjunto de commits, los "copia", y los aplica sobre algún otro lado.',"","Aunque esto pueda sonar confuso, la ventaja de rebasear es que puede usarse para conseguir una secuencia de commits lineal, más bonita. El historial / log de commits del repositorio va a estar mucho más claro si sólo usás rebase.","","Veámoslo en acción..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos dos ramas otra vez. Notar que la rama bugFix está actualmente seleccionada (tiene un asterisco)","","Nos gustaría mover nuestro trabajo de bugFix directamente sobre el trabajo de master. De ese modo, parecería que esas dos tareas se desarrollaron secuencialmente, cuando en realidad se hicieron en paralelo.","","Hagámoslo usando el comando `git rebase`"],afterMarkdowns:["¡Genial! Ahora el trabajo de nuestra rama bugFix está justo encima del de master, y tenemos una secuencia lineal de commits.","",'Notá que el commit C3 sigue existiendo en algún lado (aparece medio desvanecido en el árbol), y C3\' es la "copia" que rebaseamos sobre master.',"","El único problema es que master todavía no se actualizó, resolvámoslo ahora..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora estamos parados sobre la rama `master`. Avancemos y rebaseémosla sobre `bugFix`..."],afterMarkdowns:["¡Ahí está! Como `master` era un ancestro de `bugFix`, git simplemente movió la referencia de `master` hacia adelante en la historia."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, hacé lo siguiente:","","* Checkouteá una nueva rama llamada `bugFix`","* Commiteá una vez","* Volvé a master y commiteå de nuevo","* Checkoutá bugFix otra vez y rebaseala sobre master","","¡Éxitos!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'El segundo modo de combinar el trabajo de distintas ramas es el *rebase*. Hacer rebase escencialmente selecciona un conjunto de commits, los "copia", y los aplica en algún otro lado.',"","Aunque esto pueda sonar confuso, la ventaja de hacer rebase es que puede usarse para conseguir una secuencia de commits lineal, más bonita. El historial / log de commits del repositorio va a estar mucho más claro si sólo usas rebase.","","Veámoslo en acción..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí tenemos dos ramas otra vez. Observa que la rama bugFix está actualmente seleccionada (tiene un asterisco)","","Nos gustaría mover nuestro trabajo de bugFix directamente sobre el trabajo de master. De ese modo, parecería que esas dos tareas se desarrollaron secuencialmente, cuando en realidad se hicieron en paralelo.","","Hagámoslo usando el comando `git rebase`"],afterMarkdowns:["¡Genial! Ahora el trabajo de nuestra rama bugFix está justo encima del de master, y tenemos una secuencia lineal de commits.","",'Nota que el commit C3 sigue existiendo en algún lado (aparece medio desvanecido en el árbol), y C3\' es la "copia" que rebaseamos sobre master.',"","El único problema es que master todavía no se actualizó, resolvámoslo ahora..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora estamos parados sobre la rama `master`. Avancemos y hagamos rebase sobre `bugFix`..."],afterMarkdowns:["¡Ahí está! Como `master` era un ancestro de `bugFix`, git simplemente movió la referencia de `master` hacia adelante en la historia."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, haz lo siguiente:","","* Haz checkout de una nueva rama llamada `bugFix`","* Crea un commit","* Vuelve a la rama master y crea otro commit","* Haz checkout en bugFix otra vez y haz rebase sobre master","","¡Misión cumplida!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase no Git","",'A segunda forma de combinar trabalho entre ramos é o *rebase*. O rebase essencialmente pega um conjunto de commits, "copia" os mesmos, e os despeja em outro lugar.',"","Isso pode parecer confuso, mas a vantagem do rebase é que ele pode ser usado para construir uma sequência mais bonita e linear de commits. O registro de commits (história do repositório) ficará muito mais limpa se for utilizado apenas rebase em vez de merge.","","Vejamo-lo em ação..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui temos dois ramos novamente; note que o ramo bugFix está atualmente ativo (veja o asterisco)","","Queremos mover nosso trabalho do bugFix diretamente dentro do master. Desta forma, vai parecer que esses dois recursos foram desenvolvidos sequencialmente, quando na realidade foram feitos em paralelo.","","Vamos fazê-lo com o comando `git rebase`"],afterMarkdowns:["Incrível! Agora o trabalho do nosso ramo bugFix está logo após o do master, e temos uma linda sequência linear de commits.","",'Perceba que o commit C3 ainda existe em algum lugar (ele está clareado na árvore), e que o C3\' é a "cópia" que rebaseamos no master.',"","O único problema é que o master não foi atualizado também, vamos fazê-lo agora..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora o ramo `master` está ativo. Vamos em frente, fazer rebase no `bugFix`..."],afterMarkdowns:["Aí está! Como o `master` era um ancestral do `bugFix`, o git simplesmente moveu a referência do ramo `master` para frente na história."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, faça o seguinte","","* Faça checkout de um novo branch chamado `bugFix`","* Faça um commit","* Volte ao master e faça um novo commit","* Faça checkout do bugFix novamente e faça rebase no master","","Boa sorte!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase en Git","",'A segunda forma de mesturar traballo entre ramas é o *rebase*. O rebase esencialmente pega un conxunto de commits, "copia" os commits, e os sitúa en outro lugar.',"","Esto pode paracer confuso, pero a vantaxe do rebase é que se pode usar para construír unha secuencia  máis bonita e linial de commits. O rexisto de commits do repositorio estará máis limpo se só se permite facer rebases.","","Ímolo ver en acción..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí temos dúas ramas novamente; decátate de que a rama `bugFix` está seleccionada (olla ó asterisco)","","Queremos mover o noso traballo do `bugFix` directamente dentro da rama `master`. Desta forma, vai parecer que eses dous recursos foron editados secuencialmente, cando a realidade é que se fixeron en paralelo.","","Imos lanzar o comando `git rebase`"],afterMarkdowns:["¡Buah chorvo! Agora o traballo da nosa rama `bugFix` está seguida de master, e temos unha fermosa línea de commits.","",'Percibe que o commit `C3` aínda existe nalgún lugar (el está borrado na árbore), e que `C3\'` é a "copia" que rebasamos en master.',"","O único problema é que a rama master non foi actualizada tamén, ímolo facer agora..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora a rama `master` está ativa. Continuamos facendo o rebase na `bugFix`..."],afterMarkdowns:["¡Xa está! Como `master` era um ancestro de `bugFix`, git simplemente moveu a referencia da rama `master` máis adiante na historia."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, fai o seguinte","","* Fai checkout de un novo branch chamado `bugFix`","* Fai un commit","* Regresa a master e fai un commit novamente","* Móvete á rama bugFix outra vez e fai rebase sobre master","","Boa sorte!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'La seconde façon de combiner les contenus de deux branches est *rebase*. Rebase prend un ensemble de commits, les "recopie", et les ajoute en bout de chaîne à un autre endroit.',"","Bien que cela puisse sembler compliqué, l'avantage de rebase est de permettre d'obtenir une simple séquence linéaire de commits. Les logs/l'historique du dépôt seront bien plus propres si seul rebase est autorisé (plutôt que merge).","","Voyons rebase en action…"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons encore une fois deux branches; notez que nous sommes sur la branche bugFix (cf. l'astérisque)","","Nous voudrions transférer notre travail de la branche 'bugFix' directement sur le travail existant dans 'master'. Ainsi on aurait l'impression que ces deux travaux ont été développés séquentiellement alors qu'en réalité ils ont été réalisés en parallèle.","","Faisons cela avec la commande `git rebase`"],afterMarkdowns:["Super! Désormais, le travail de la branche 'bugFix' est juste en haut de la branche 'master' et nous avons une belle séquence linéaire de commits.","","Notez que le commit C3 existe toujours quelque part (il est en grisé sur l'arbre), et C3' est la  \"copie\" que nous avons créée sur master avec rebase.","","Le seul problème est que master n'a pas été mis à jour, faisons cela maintenant…"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous sommes désormais positionnés sur la branche `master`. Continuons en faisant le rebase sur `bugFix`…","Et voilà ! Puisque `master` était un ascendant de `bugFix`, git a simplement déplacé la référence de la branche `master` en avant dans le temps."],afterMarkdowns:["Voilà vous avez vu comment cela fonctionne","","Continuons et essayons ce niveau !"],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, faites les opérations suivantes","","* Positionnez-vous (checkout) sur une nouvelle branche nommée `bugFix`","* Faites un commit","* Retournez sur master et faites un nouveau commit","* Positionnez-vous à nouveau sur bugFix et faites un rebase sur master","","Bonne chance !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","第二种合并分支的方法是 `git rebase`。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。","","Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。","","咱们还是实际操作一下吧……"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["还是准备了两个分支；注意当前所在的分支是 bugFix（星号标识的是当前分支）","","我们想要把 bugFix 分支里的工作直接移到 master 分支上。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。","","咱们这次用 `git rebase` 实现此目标"],command:"git rebase master",afterMarkdowns:["怎么样？！现在 bugFix 分支上的工作在 master 的最顶端，同时我们也得到了一个更线性的提交序列。","","注意，提交记录 C3 依然存在（树上那个半透明的节点），而 C3' 是我们 Rebase 到 master 分支上的 C3 的副本。","","现在唯一的问题就是 master 还没有更新，下面咱们就来更新它吧……"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在我们切换到了 `master` 上。把它 rebase 到 `bugFix` 分支上……"],command:"git rebase bugFix",afterMarkdowns:["好了！由于 `bugFix` 继承自 `master`，所以 Git 只是简单的把 `master` 分支的引用向前移动了一下而已。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["要完成此关，执行以下操作：","","* 新建并切换到 `bugFix` 分支","* 提交一次","* 切换回 master 分支再提交一次","* 再次切换到 bugFix 分支，rebase 到 master 上","","祝你好运！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase","",'*rebasing* 是 merge branch 的第二種方法。rebasing 就是取出一連串的 commit，"複製"它們，然後把它們接在別的地方。',"","雖然聽起來難以理解，rebasing 的優點是可以建立更線性的 commit history。假如只允許使用 rebasing 的話，則我們的 repo 中的 commit log 或者是 commit history 會更加簡潔好看。","","讓我們親身體會一下..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡，還是有兩個 branch；注意目前我們所在的 branch 是 bugFix（看那顆星啦）","","我們想要把在 bugfix 所做的修改直接移到 master branch上。使用 rebasing 的話，兩個 branch 看起來像是依序按順序進行修改，實際上它們的修改是平行進行的。","","用 `git rebase` 來實現吧"],command:"git rebase master",afterMarkdowns:["很厲害吧！現在 bugFix branch 上的工作在 master branch 的最前端，同時我們也得到了一個更加線性的 commit 順序。","",'注意，本來的 commit C3 沒有消失（在圖上面呈現陰影），而我們"複製" C3，將它的副本 C3\' 接在 master branch 的後面。',"","現在唯一的問題是 master branch 還沒有更新...我們接下來就更新它吧！"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在，切換到 `master` branch。接下來就把它 rebase 到 `bugFix` 上面吧..."],command:"git rebase bugFix",afterMarkdowns:["完成！因為 `master` branch 是 `bugFix` 的 parent，所以 git 只是把 `master` branch 往前移動到 `bugFix` 上。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["想完成這一關，執行以下操作：","","* 建立 `bugFix` branch","* commit 一次","* 切換回 master branch 再 commit 一次","* 再次切換到 bugFix branch，接著 rebase bugFix 這個 branch 到 master branch 上","","祝你好運啦！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 리베이스(Rebase)","","브랜치끼리의 작업을 접목하는 두번째 방법은 *리베이스(rebase)*입니다. 리베이스는 기본적으로 커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것입니다.","","조금 어렵게 느껴질 수 있지만, 리베이스를 하면 커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다는 장점이 있습니다. 리베이스를 쓰면 저장소의 커밋 로그와 이력이 한결 깨끗해집니다.","","어떻게 동작하는지 살펴볼까요..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 또 브랜치 두 개가 있습니다; bugFix브랜치가 현재 선택됐다는 점 눈여겨 보세요 (별표 표시)","","bugFix 브랜치에서의 작업을 master 브랜치 위로 직접 옮겨 놓으려고 합니다. 그렇게 하면, 실제로는 두 기능을 따로따로 개발했지만, 마치 순서대로 개발한 것처럼 보이게 됩니다.","","`git rebase` 명령어로 함께 해보죠."],afterMarkdowns:["오! 이제 bugFix 브랜치의 작업 내용이 master의 바로 위에 깔끔한 한 줄의 커밋으로 보이게 됐습니다.","","C3 커밋은 어딘가에 아직 남아있고(그림에서 흐려짐), C3'는 master 위에 올려 놓은 복사본입니다.","","master가 아직 그대로라는 문제가 남아있는데요, 바로 해결해보죠..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["우리는 지금 `master` 브랜치를 선택한 상태입니다. `bugFix` 브랜치쪽으로 리베이스 해보겠습니다..."],afterMarkdowns:["보세요! `master`가 `bugFix`의 부모쪽에 있었기 때문에, 단순히 그 브랜치를 더 앞쪽의 커밋을 가리키게 이동하는 것이 전부입니다."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["이하 작업을 하면 이번 레벨을 통과합니다","","* `bugFix`라는 새 브랜치를 만들어 선택하세요","* 커밋 한 번 합니다","* master로 돌아가서 또 커밋합니다","* bugFix를 다시 선택하고 master에 리베이스 하세요","","화이팅!"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","Второй способ объединения изменений в ветках - это *rebasing*. При ребейзе Git по сути копирует набор коммитов и переносит их в другое место.","","Несмотря на то, что это звучит достаточно непонятно, преимущество `rebase` в том, что c его помощью можно делать чистые и красивые линейные последовательности коммитов. История коммитов будет чище, если вы применяете `rebase`.","","Посмотрим, как это работает..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["У нас здесь снова две ветки. Обрати внимание, что выбрана ветка `bugFix` (отмечена звёздочкой)","","Хочется сдвинуть наши изменения из `bugFix` прямо на вершину ветки `master`. Благодаря этому всё будет выглядеть, как будто эти изменения делались последовательно, хотя на самом деле - параллельно.","","Применим `git rebase`"],afterMarkdowns:["Супер! Теперь изменения из `bugFix` находятся в конце ветки `master` и являют собой линейную последовательность коммитов.","",'Обрати внимание, что коммит С3 до сих пор существует где-то, а С3\' - это его "копия" в ветке `master`',"","Единственная проблема - ветка `master` не обновлена до последних изменений. Это легко исправить."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Вот мы выбрали ветку `master`. Вперёд - сделаем rebase на `bugFix`"],afterMarkdowns:["Вуаля! Так как `master` был предком `bugFix`, git просто сдвинул ссылку на `master` вперёд."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, сделай следующее:","","* Переключись на ветку `bugFix`","* Сделай коммит","* Вернись на `master` и сделай коммит ещё раз","* Переключись на `bugFix` и сделай rebase на `master`","","Удачи!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'Інший спосіб комбінування змін з різних бранчів називається *rebase*. Rebase по суті бере кілька комітів , "копіює" їх, й кладе їх в інше місце.',"","Це може звучати трохи незрозуміло, але основна перевага rebase в тому, що його використовують щоб створити зручну лінійну послідовність комітів. Коміт лог та історія будуть виглядати набагато чистіша, якщо користуватися лише rebase (а не merge)","","Спробуємо на практиці..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ми знову маємо дві гілки; зауваж, що наразі вибрана гілка bugFix (вважай зірочку)","","Ми хочемо перемістити наші зміни з гілки bugFix прямо до змін з гілки master. Тоді це буде виглядати наче ці зміни були додані одна за одною, хоча насправді вони були додані одночасно.","","Давайте зробимо це за допомогою команди `git rebase`"],afterMarkdowns:["Добре! Тепер зміни з гілки bugFix знаходяться прямо попереду змін з master й ми отримали зручну лінійну послідовність комітів.","",'Вважай що коміт C3 досі десь існує (в дереві він тьмяніший за решту), й C3\' це "копія" яку ми заребейсили в master.',"","Є лише одна проблема: гілка master також не була оновлена, давайте зробимо це наступним кроком..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Тепер ми перейшли (checkout) до гілки `master`. Далі робимо rebase на `bugFix`..."],afterMarkdowns:["Вуаля! Так як `master` це предок `bugFix`, git просто просунув посилання гілки `master` вперед в історії."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень, зроби наступне:","","* Зачекауть (checkout) новий бранч з назвою `bugFix`","* Зроби один коміт","* Повернись на master й зроби ще один коміт","* Зачекауть bugFix знову й заребейсь його на master","","Нехай щастить!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'Cách thứ 2 để kết hợp thành của của 2 nhánh là *rebase.* Rebase về căn bản là chọn một loạt các commit, "sao chép" chúng, và ném chúng sang chỗ khác.',"","Nghe có vẻ phức tạp, lợi thế của rebase là có thể tạo ra cây lịch sử thẳng tuột. Ljch sử commit nhìn sẽ gọn gàng hơn nhiều.","","Xem nó hoạt động thế nào nào..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Giờ ta lại có 2 nhánh; để ý rằng nhánh bugFix đang được chọn (thấy dấu hoa thị chứ?)","","Ta muốn chuyển bugFix trực tiếp sang master. Theo cách đó thì các chức năng nhìn có vẻ được phát triển tuần tự, trong khi thực tế chúng được phát triển song song.","","Dùng lệnh `git rebase` để thử nào"],afterMarkdowns:["Tuyệt vời! Giờ thành quả của nhánh bugFix nằm ngay trên master và ta có các commit nằm thẳng tuột.","",'Để ý rằng commit C3 vẫn nằm đâu đó (đã được làm mờ), và commit C3\' là bản "sao chép" mà ta dán lên nhánh master.',"","Vấn đề duy nhất bây giờ là nhánh master vẫn chưa được cập nhật, làm luôn cho nóng nào..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Giờ thì ta đã chuyển sang nhánh `master`. Tiếp tục dán nó vào `bugFix` nào..."],afterMarkdowns:["Đó! Bởi vì `master` là cha ông của `bugFix`, git đơn giản chuyển tham chiếu của nhánh `master` tiến lên."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, làm theo hướng dẫn sau","","* Chuyển sang nhánh mới tên là `bugFix`","* Commit một lần","* Quay về master và commit lần nữa","* Quay trở lại bugFix và rebase sang master","","Chúc may mắn!"]}}]}}}},{}],120:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"side":{"target":"C4","id":"side","remoteTrackingBranchID":null},"bugFix":{"target":"C7","id":"bugFix","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"tags":{"v0":{"target":"C0","id":"v0","type":"tag"},"v1":{"target":"C3","id":"v1","type":"tag"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git commit ",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"side":{"target":"C4","id":"side","remoteTrackingBranchID":null},"bugFix":{"target":"C6","id":"bugFix","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"tags":{"v0":{"target":"C0","id":"v0","type":"tag"},"v1":{"target":"C3","id":"v1","type":"tag"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{en_US:"Git Describe",fr_FR:"Git describe",de_DE:"Git Describe",ja:"Git Describe",es_AR:"Git Describe",es_ES:"Git Describe",pt_BR:"Git Describe",gl:"Git Describe",zh_TW:"git describe",zh_CN:"Git Describe",ru_RU:"Git describe",ko:"Git describe(묘사)",uk:"Git Describe",vi:"Git Describe(mô tả)"},hint:{en_US:"Just commit once on bugFix when you're ready to move on",fr_FR:"Faites un commit sur bugFix quand vous êtes prêt",de_DE:"Committe nur einmal auf bugFix, wenn du soweit bist",ja:"次に進む準備が整ったなら、bugFixに対して一回commitしてください",es_AR:"Simplemente commiteá una vez en bugFix cuando estés listo para seguir",es_ES:"Simplemente crea un commit en la rama bugFix cuando estés listo para seguir",pt_BR:"Simplesmente commite uma vez em bugFix quando quiser parar de experimentar",gl:"Simplemente fai commit en bugFix cando estés listo para continuar.",zh_TW:"當你要移動的時候，只要在 bugFix 上面 commit 就好了",zh_CN:"当你准备好时，在 bugFix 分支上面提交一次就可以了",ru_RU:"Когда закончишь, просто сделай commit",ko:"다음으로 넘어가고 싶으면 bugFix를 한번 커밋하면 됩니다.",uk:"Просто зроби один коміт в bugFix коли ти будеш готовий іти далі",vi:"Đơn giản là hãy commit một lẩn ở bugFix là xong rồi"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Because tags serve as such great "anchors" in the codebase, git has a command to *describe* where you are relative to the closest "anchor" (aka tag). And that command is called `git describe`!',"","Git describe can help you get your bearings after you've moved many commits backwards or forwards in history; this can happen after you've completed a git bisect (a debugging search) or when sitting down at a coworkers computer who just got back from vacation."]}},{type:"ModalAlert",options:{markdowns:["Git describe takes the form of:","","`git describe <ref>`","","Where `<ref>` is anything git can resolve into a commit. If you don't specify a ref, git just uses where you're checked out right now (`HEAD`).","","The output of the command looks like:","","`<tag>_<numCommits>_g<hash>`","","Where `tag` is the closest ancestor tag in history, `numCommits` is how many commits away that tag is, and `<hash>` is the hash of the commit being described."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at a quick example. For this tree below:"],afterMarkdowns:["The command `git describe master` would output:","","`v1_2_gC2`","","Whereas `git describe side` would output:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["That's pretty much all there is to git describe! Try describing a few of the locations in this level to get a feel for the command.","","Once you're ready, just go ahead and commit once to finish the level. We're giving you a freebie :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git describe","","Parce ce que les tags sont de très bonnes références dans le code, git à une commande pour *décrire* (describe) la différence entre le commit et le tag le plus récent. Cette commande s'appelle `git describe` !","","Git describe peut vous aider lorsque vous vous êtes beaucoup déplacé; cela peut arriver après un git bisect (chercher l'apparition d'un bug) ou lorsque vous revenez de vacances après 3 semaines sur l'ordinateur d'un collègue."]}},{type:"ModalAlert",options:{markdowns:["Git describe s'écrit comme suit :","","`git describe <ref>`","","où `<ref>` est un n'importe quelle chose que git peut résoudre en un commit. Si vous ne spécifiez pas de ref, `HEAD` est pris par défaut.","","Le résultat de la commande ressemble à :","","`<tag>_<numCommits>_g<hash>`","","où `tag` est le tag le plus proche dans l'historique, `numCommits` le nombre de commits avec le tag, et `<hash>` le hash/identifiant du commit décrit."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons un petit exemple. Prenons cet arbre :"],afterMarkdowns:["La commande`git describe master` donne le résultat :","","`v1_2_gC2`","","alors que `git describe side` donne :","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Ceci résume bien git describe ! Amusez-vous à utiliser cette commande avec d'autres endroits dans ce niveau pour bien comprendre describe.","","Lorsque vous serez prêt, faites simplement un commit pour finir le niveau. Un petit niveau bonus :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### git describe","","因為 tag 在 commit tree 上表示的是一個錨點，git 有一個指令可以用來*顯示*離你最近的錨點（也就是 tag），而且這個指令叫做 `git describe`！","","當你已經完成了一個 `git bisect`（一個找尋有 bug 的 commit 的指令），或者是當你使用的是你跑去度假的同事的電腦時， `git describe` 可以幫助你了解你離最近的 tag 差了多少個 commit。"]}},{type:"ModalAlert",options:{markdowns:["`git describe` 的使用方式：","","`git describe <ref>`","","`<ref>` 是任何一個可以被 git 解讀成 commit 的位置，如果你沒有指定的話，git 會以你目前所在的位置為準（`HEAD`）。","","指令的輸出就像這樣：","","`<tag>_<numCommits>_g<hash>`","","`<tag>` 表示的是離 `<ref>` 最近的 tag， `numCommits` 是表示這個 tag 離 `<ref>` 有多少個 commit， `<hash>` 表示的是你所給定的 `<ref>` 所表示的 commit 的前七個 id。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來看一個例子，對於下面的 tree："],afterMarkdowns:["`git describe master` 會輸出：","","`v1_2_gC2`","","`git describe side` 會輸出：","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["`git describe` 就是這樣了！試著在這個關卡指定幾個位置來感受一下這個指令吧！","","當你完成的時候，只要一個 commit 就可以結束這個關卡，我們會給你一個免費贈品:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","","由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来**描述**离你最近的锚点（也就是标签），它就是 `git describe`！","","Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 `git bisect`（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。"]}},{type:"ModalAlert",options:{markdowns:["`git describe` 的​​语法是：","","`git describe <ref>`","","`<ref>` 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（`HEAD`）。","","它输出的结果是这样的：","","`<tag>_<numCommits>_g<hash>`","","`tag` 表示的是离 `ref` 最近的标签， `numCommits` 是表示这个 `ref` 与 `tag` 相差有多少个提交记录， `hash` 表示的是你所给定的 `ref` 所表示的提交记录哈希值的前几位。","","当 `ref` 提交记录上有某个标签时，则只输出标签名称"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们来看一个例子，对于下面的提交树："],afterMarkdowns:["`git describe master` 会输出：","","`v1_2_gC2`","","`git describe side` 会输出：","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["`git describe` 就是这样了！试着在这个关卡指定几个位置来感受一下这个命令吧！","","当你准备进行下一关时，只要提交一次就可以通过这个关卡。算是我们送你的一个小礼物吧 :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Como los tags sirven tanto para marcar "hitos" en el código, git tiene un comando para *describir* (_describe_) dónde estás relativo al "hito" más cercano (digamos, "tag"). Y ese comamndo se llama ¡`git describe`!',"","Git describe puede ayudarte a saber dónde estás después de que te hayas movido varios commits hacia adelante o atrás en la historia. Esto puede pasarte después de que termines un git bisect (una búsqueda que te ayuda a debuggear problemas) o cuando te sentás en la computadora de un compañero de trabajo que recién vuelve de unas vacaciones."]}},{type:"ModalAlert",options:{markdowns:["Git describe tiene la siguiente forma:","","`git describe <ref>`","","Donde `<ref>` es cualquier cosa que git puede resolver a un commit. Si no especificás ninguna referencia, git simplemente usa el commit en que estás parado ahora (`HEAD`).","","La salida de ese comando se ve así:","","`<tag>_<numCommits>_g<hash>`","","Donde `tag` es el tag más cercano en la historia, `numCommits` dice a cuántos commits de ese tag estás, y `<hash>` es el hash del commit que estás describiendo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos un ejemplo breve. Para este árbol de commits:"],afterMarkdowns:["El comando `git describe master` mostraría:","","`v1_2_gC2`","","Mientras que `git describe side` debería mostrar:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["¡Eso es prácticamente todo lo que hay sobre git describe! Probá describiendo algunas referencias en este nivel para amigarte con el comando.","","Cuando estés listo, hacé un commit para terminar el nivel. Te estamos dando una gratis :P"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Como los tags sirven tanto para marcar "hitos" en el código, git tiene un comando para *describir* (_describe_) dónde estás relativo al "hito" más cercano (digamos, "tag"). Y ese comamndo se llama ¡`git describe`!',"","Git describe puede ayudarte a saber dónde estás después de que te hayas movido varios commits hacia adelante o atrás en la historia. Esto puede pasarte después de que termines un git bisect (una búsqueda que te ayuda a debuggear problemas) o cuando te sientas delante de la computadora de un compañero de trabajo que acaba de volver de unas vacaciones."]}},{type:"ModalAlert",options:{markdowns:["Git describe tiene la siguiente forma:","","`git describe <ref>`","","Donde `<ref>` es cualquier cosa que git puede resolver a un commit. Si no especificas ninguna referencia, git simplemente usa el commit en el que estás parado ahora (`HEAD`).","","La salida de ese comando se ve así:","","`<tag>_<numCommits>_g<hash>`","","Donde `tag` es el tag más cercano en la historia, `numCommits` dice a cuántos commits de ese tag estás, y `<hash>` es el hash del commit que estás describiendo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos un ejemplo breve. Para este árbol de commits:"],afterMarkdowns:["El comando `git describe master` mostraría:","","`v1_2_gC2`","","Mientras que `git describe side` debería mostrar:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["¡Eso es prácticamente todo lo que hay sobre git describe! Prueba con algunas referencias en este nivel para familiarizarte con el comando.","","Cuando estés listo, crea un commit para terminar el nivel. Te estamos dando una gratis :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Devido ao fato de as tags servirem como "âncoras" tão boas no código, o Git tem um comando para *descrever* onde você está com relação à "âncora" (tag) mais próxima. Esse comando é chamado `git describe`!',"","O git describe pode ajudar a recuperar a sua orientação depois de você ter se movido muitos commits para trás ou para frente no histórico; isso pode acontecer depois de você completar um git bisect (uma busca para debug) ou quando se sentar no computador de um colega que acabou de voltar de férias."]}},{type:"ModalAlert",options:{markdowns:["O git describe é chamado da seguinte forma:","","`git describe <ref>`","","Onde `<ref>` é qualquer coisa que o git possa resolver como uma referência a um commit. Se você não especificar o ref, o Git usa simplesmente o commit atual (`HEAD`).","","A saída do comando é mais ou menos assim:","","`<tag>_<numCommits>_g<hash>`","","Onde `tag` é a tag ancestral mais próxima no histórico, `numCommits` é o número de commits de distância da tag, e `<hash>` é o hash do commit sendo descrito."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos um exemplo rápido. Para a árvore abaixo:"],afterMarkdowns:["O comando `git describe master` daria a saída:","","`v1_2_gC2`","","Enquanto `git describe side` daria:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["É basicamente disso que se trata o git describe! Tente descrever alguns locais da árvore para sentir como o comando se comporta.","","Uma vez que você estiver satisfeito, apenas faça um commit que o nível será finalizado. Essa é de graça :P"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Como as tags fan a función de "áncora" no repositorio, Git ten un comando para *describir* ónde podes estar ti en relación á "áncora" (tag) máis próxima. Ese comando chámase `git describe`!',"","Git describe pode axudar a recuperar a túa posición despois de mover moitos commits para atrás ou para adiante na historia; esto pode suceder depois de que fagas un git bisect (unha búsqueda para atopar erros) ou cando te sentas no ordenador dun colega que chegou das vacacións."]}},{type:"ModalAlert",options:{markdowns:["Git describe lánzase do seguinte xeito:","","`git describe <ref>`","","Onde `<ref>` é qualquera cousa que git poida resolver como unha referencia a un commit. Se non especificas a ref, git usará o commit actual no que se esté traballando (`HEAD`).","","A resposta do comando é algo semellante a esto:","","`<tag>_<numCommits>_g<hash>`","","Onde `tag` é a tag anterior máis próxima na historia, `numCommits` é o número de commits de distancia ó tag, e `<hash>` é o hash do commit no que estamos."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos un exemplo rápido. Para a árbore de abaixo:"],afterMarkdowns:["O comando `git describe master` daría a saída:","","`v1_2_gC2`","","Mentres que `git describe side` daría:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["¡Básicamente é iso do que trata git describe! Intenta descubrir algúns locais da árbore para sentir como se comporta o comando.","","Cando estés listo, fai un commit para que o nivel remate. Esa é a gracia."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Weil Tags so super als "Anker" im Repository dienen können bietet Git einen Befehl um zu *beschreiben* wo du dich relativ zum nächsten "Anker" (also Tag) befindest. Und der heißt `git describe`.',"","Er hilft dir dabei, dir einen Überblick zu verschaffen nachdem du viele Commits im Log zurück- oder vorgegangen bist; das kann vorkommen nachdem du ein `git bisect` (eine Fehlersuche) abgeschlossen hast oder wenn du dich an den Rechner eines Kollegen setzt, der gerade aus dem Urlaub gekommen ist."]}},{type:"ModalAlert",options:{markdowns:["Der Befehl ist folgendermaßen aufgebaut:","","`git describe <Ref-Name>`","","Dabei ist `<Ref-Name>` jeder beliebige Name, der einem Commit zugeordnet ist (Branch, Tag etc). Wenn du keinen angibst benutzt Git `HEAD`, also den aktuellen Checkout.","","Die Befehlsausgabe sieht so aus:","","`<Tag-Name>_<Anzahl Commits>_g<Hash>`","","`<Tag-Name>` ist dabei der nächstliegende Tag in den Vorgänger-Commits, `<Anzahl Commits>` zeigt an, wieviele Commits dieses Tag entfernt ist und `<Hash>` ist das SHA des Commits, auf den HEAD zeigt.","","**Achtung**: `<Anzahl Commits>` und `<Hash>` erscheint nur, wenn HEAD nicht auf ein Tag zeigt. `git describe` verarbeitet standardmässig nur annotierte Tags. Um nicht annotierte tags zu sehen, verwende bitte`git describe --tags`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das schnell an einem Beispiel an. Für den folgenden Baum:"],afterMarkdowns:["Der Befehl `git describe master` würde folgendes ausgeben:","","`v1_2_gC2`","","Wohingegen `git describe side` dies ausgeben würde:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Das ist so ziemlich alles, was es über `git describe` zu wissen gibt. Versuch ein paar Orte in diesem Level damit auszugeben, um ein Gefühl dafür zu bekommen.","","Sobald du fertig bist, mach einfach einen Commit um den Level abzuschließen. Der geht auf's Haus. :P"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","","タグは、ソースリストの優秀な「アンカー（標識）」として作用するので、Gitには最も近く関係のある「アンカー」（タグの別名）を*記述するため*のコマンドがあります。そして、そのコマンドは`git describe`と呼ばれています！","","Gitの`describe`は、あなたが大量のコミットの中を移動するとき、今どこにいるかを知るのを助けてくれます（このような状況は、例えばあなたがデバッグ検索コマンドの一つ`git bisect`を走らせ終わった後や、同僚が休暇から帰ってきて自分の席に座るときに起こります）。"]}},{type:"ModalAlert",options:{markdowns:["Gitの`describe`は、以下の形式をとります:","","`git describe <参照>`","","`<参照>`には、Gitが解釈可能なコミットの参照表現（ブランチやタグの指定、コミットハッシュなど）をいれます。もし、何も入力しなかった場合、Gitは現在の位置のコミット（`HEAD`）を使います。","","コマンドの結果は以下のようになります:","","`<タグ>_<コミット数>_g<ハッシュ>`","","`<タグ>`には履歴の一番最新のタグ名が、`<コミット数>`にはそのタグから幾つのコミットがあったか、`<ハッシュ>`はそのコミットのハッシュがそれぞれ入ります。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["軽い例を見てみましょう。この木においての例は以下のようになります:"],afterMarkdowns:["コマンド`git describe master`の結果は以下のようになります:","","`v1_2_gC2`","","さらに`git describe side`の結果は以下のようになります:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["`describe`によってGitの情報が簡潔に全て記述されます！このレベルでは、このコマンドの感触をつかむため幾つかの場所で`describe`をしてみてください。","","終わったら、最新のコミットに行き一度コミットを行えばこのレベルを終了することができます。この先では、いくつかの挑戦課題を用意しています :P"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","","Теги являются прекрасными ориентирами в истории изменений, поэтому в git есть команда, которая показывает, как далеко текущее состоянии от ближайшего тега. И эта команда называется `git describe`","","Git describe помогает сориентироваться после отката на много коммитов по истории изменений. Такое может случиться, когда вы сделали `git bisect` или если вы недавно вернулись из отпуска =)"]}},{type:"ModalAlert",options:{markdowns:["Git describe выглядит примерно так:","","`git describe <ref>`","","Где `ref` — это что-либо, что указывает на конкретный коммит. Если не указать `ref`, то git будет считать, что указано текущее положение (`HEAD`).","","Вывод команды выглядит примерно так:","","`<tag>_<numCommits>_g<hash>`","","Где `tag` – это ближайший тег в истории изменений, `numCommits` – это на сколько далеко мы от этого тега, а `hash` – это хеш коммита, который описывается."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Посмотрим на простой пример. Для дерева, показанного ниже:"],afterMarkdowns:["Команда `git describe master` выведет:","","`v1_2_gC2`","","Тогда как `git describe side` выведет:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Это, в общем-то, всё, что можно сказать про `git describe`. Попробуй выполнить команду на нескольких коммитах.","","Как только наиграешься, просто сделай один коммит, и уровень будет пройден."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'커밋 트리에서 태그가 훌륭한 "닻"역할을 하기 때문에, git에는 여러분이 가장 가까운 "닻(태그)"에 비해 상대적으로 어디에 위치해있는지 *describe(묘사)*해주는 명령어가 있습니다. 이 명령어는 `git describe` 입니다!',"","Git describe는 커밋 히스토리에서 앞 뒤로 여러 커밋을 이동하고 나서 커밋 트리에서 방향감각을 다시 찾는데 도움을 줍니다; 이런 상황은 git bisect(문제가 되는 커밋을 찾는 명령어라고 간단히 생각하자)를 하고 나서라던가 휴가를 다녀온 동료의 컴퓨터에 앉는경우가 있습니다."]}},{type:"ModalAlert",options:{markdowns:["Git describe 는 다음의 형태를 가지고 있습니다:","","`git describe <ref>`","","`<ref>`에는 commit을 의미하는 그 어떤것이던 쓸 수 있습니다. 만약 ref를 특정 지어주지 않으면, git은 그냥 지금 체크아웃된곳을 사용합니다 (`HEAD`).","","명령어의 출력은 다음과 같은 형태로 나타납니다:","","`<tag>_<numCommits>_g<hash>`","","`tag`는 가장 가까운 부모 태그를 나타냅니다. `numCommits`은 그 태그가 몇 커밋 멀리있는지를 나타냅니다. `<hash>`는 묘사하고있는 커밋의 해시를 나타냅니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["간단한 예제를 확인해 봅시다. 아래의 트리에서:"],afterMarkdowns:["`git describe master` 명령은 다음을 출력합니다:","","`v1_2_gC2`","","`git describe side`는 다음을 출력합니다:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["이정도면 git describe를 충분히 활용할 수 있습니다! 이 레벨의 몇 지점을 describe 명령어를 통해 확인해보면서 느낌을 익혀 봅시다.","","준비가 되면 커밋을 한번해서 레벨을 종료하세요. 자유롭게 연습해보세요 :P"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Через те, що таги є такими чудовими "орієнтирами" по коду, git також має команду *описати* (describe) де ти є відносно найближчого "орієнтира" (тобто тага). І ця команда називається `git describe`!',"","Git describe допоможе тобі знайти себе після того як ти перестрибнеш на кілька комітів по історії вперед чи назад; це може статися після того як ти закінчив git bisect (пошук-дебаггер) чи коли тебе попросили підійти до колеги, котрий щойно прийшов з відпустки."]}},{type:"ModalAlert",options:{markdowns:["Git describe має наступну форму:","","`git describe <посилання>`","","Де `<посилання>` -- це будь-що, що вказує на конкретний коміт. Якщо ти не вкажеш посилання, git використає поточну локацію (`HEAD`).","","Вивід команди виглядає як:","","`<таг>_<к-ть комітів>_g<хеш>`","","де `таг` -- це найближчий попередній таг з історії; `к-ть комітів` -- це наскільки далеко цей таг в історії, а `<хеш>` -- це хеш коміту, який описується."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Розгляньмо короткий приклад. Для дерева нижче:"],afterMarkdowns:["Команда `git describe master` виведе:","","`v1_2_gC2`","","коли `git describe side` виведе:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Ось і все що ти маєш знати про git describe. Спробуй виконати describe для різних місць в дереві комітів щоб набити руку.","","Як будеш готовий, просто закоміть щось щоб закінчити цей рівень. Трохи шари :P"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["### Mô tả của Git","",'Bởi gì thẻ đóng vai trò như là "mỏ neo" trên cây lịch sử rất tốt rồi, git cũng có lệnh để *mô tả* tương quan của bạn dến vị trí "mỏ neo" (thẻ) gần nhất. Và đó là `git describe`!',"","`git descripe` có thể giúp bạn định hướng sau khi dịch chuyển qua lại nhiều lần trên cây lịch sử; đặc biệt là sau khi sử dụng `git bisect` (công cụ tìm kiếm lỗi của git) hoặc khi sử dụng máy của đồng nghiệp mới đi nghỉ mát về."]}},{type:"ModalAlert",options:{markdowns:["Cú pháp sử dụng Git describe như sau:","","`git describe <thamchiếu>`","","Trong đó `<thamchiếu>` là bất kỳ thứ gì mà git có thể dùng để xác định commit. Nếu bạn không chỉ định tham chiếu, git sẽ dùng vị trí hiện tại của bạn (`HEAD`).","","Đầu ra của câu lệnh sẽ như sau:","","`<thẻ>_<sốLượngCommit>_g<mãBăm>`","","Trong đó `<thẻ>` là thẻ tổ tiên gần nhất, `<sốLượngCommit>` là số lượng commit tính từ tham chiếu đến thẻ, và `<mãBăm>` là mã băm của commit được mô tả."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cùng xem nhanh một ví dụ trên cây lịch sử phía dưới:"],afterMarkdowns:["Câu lệnh `git describe master` sẽ cho kết quả:","","`v1_2_gC2`","","Trong khi `git describe side` sẽ cho kết quả:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Từng đó thông tin là khá đủ về git describe! Hãy thử dùng `git describe` trên vài vị trí để hiểu về lệnh này.","","Một khi bạn đã sẵn sàng thì chỉ cần commit 1 lần là qua bài này. Bài này dễ chơi rồi nhé :P"]}}]}}}},{}],121:[function(e,t,o){o.level={compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C4>e.C1}]},disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22debug%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22debug%22%7D%2C%22printf%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22printf%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i master --solution-ordering C4; git rebase bugFix master",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"debug":{"target":"C2","id":"debug"},"printf":{"target":"C3","id":"printf"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{ko:"딱 한개의 커밋만 가져오기",en_US:"Grabbing Just 1 Commit",fr_FR:"Choisir seulement 1 commit",de_DE:"Einen Commit pflücken",es_AR:"Tomando un único commit",es_ES:"Tomando un único commit",pt_BR:"Pegando um único commit",gl:"Escollendo un único commit",ja:"一つのコミットのみを取得",zh_CN:"只取一个提交记录",zh_TW:"只取一個 commit",ru_RU:"Выберем один коммит.",uk:"Вибираємо всього один коміт",vi:"Chỉ lấy 1 commit"},hint:{en_US:"Remember, interactive rebase or cherry-pick is your friend here",de_DE:"Vergiss nicht: hier kommst du mit interaktivem Rebase oder Cherry-Picking weiter",fr_FR:"Souvenez-vous, les rebases interactifs ou cherry-pick sont vos amis ici.",es_AR:"Acordate, el rebase interactivo o cherry-pick son tus amigos acá",es_ES:"Recuerda, el rebase interactivo y el cherry-pick son tus amigos",pt_BR:"Lembre-se, o rebase interativo ou o cherry-pick são seus amigos aqui",gl:"Recorda, o rebase interativo ou cherry-pick é un dos teus colegas aquí",ja:"このレベルではインタラクティブモードのrebaseやcherry-pickがクリアのカギです",ko:"대화식 리베이스(rebase -i)나 or 체리픽(cherry-pick)을 사용하세요",zh_CN:"你有两个朋友，cherry-pick 和 rebase -i",zh_TW:"記住，使用互動式的 rebase 或者 cherry-pick 會很有幫助",ru_RU:"Не забывай, что интерактивный rebase и cherry-pick – это твои друзья!",uk:"Не забувай, що інтерактивний rebase та cherry-pick -- це твої друзі!",vi:"Hãy nhớ 2 anh bạn tương tác rebase và cherry-pick!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Locally stacked commits","","Here's a development situation that often happens: I'm trying to track down a bug but it is quite elusive. In order to aid in my detective work, I put in a few debug commands and a few print statements.","","All of these debugging / print statements are in their own commits. Finally I track down the bug, fix it, and rejoice!","","Only problem is that I now need to get my `bugFix` back into the `master` branch. If I simply fast-forwarded `master`, then `master` would get all my debug statements which is undesirable. There has to be another way..."]}},{type:"ModalAlert",options:{markdowns:["We need to tell git to copy only one of the commits over. This is just like the levels earlier on moving work around -- we can use the same commands:","","* `git rebase -i`","* `git cherry-pick`","","To achieve this goal."]}},{type:"ModalAlert",options:{markdowns:["This is a later level so we will leave it up to you to decide which command you want to use, but in order to complete the level, make sure `master` receives the commit that `bugFix` references."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les commits empilés localement","","Voici une situation qui arrive souvent : j'ai un bug assez caché à corriger. Pour trouver la source je rajoute des commandes et prints de debug à travers le code.","","Tous ces debug se retrouvent dans une branche particulière. Je trouve le bug et le répare, comme toujours !","","Le seul problème c'est que je ne peux pas faire de merge ou rebase, car tous ces commits de debug seront dans le master. Il doit y avoir une autre façon..."]}},{type:"ModalAlert",options:{markdowns:["Pour réussir ce niveau, nous avons besoin de dire à Git quel commit particulier recopier. C'est comme pour le niveau précédent : nous pouvons utiliser les mêmes commandes :","","* `git rebase -i`","* `git cherry-pick`"]}},{type:"ModalAlert",options:{markdowns:["C'est un niveau avancé, donc à vous de choisir quelle commande utiliser, mais pour réussir ce niveau, assurez-vous que `master` reçoive le même commit que `bugFix` référence."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits localmente stackeados","","Esta es una escena que suele pasar cuando uno desarrolla: estoy tratando de encontrar un bug bastante escurridizo. Para ayudar en mi tarea de detective, agrego un par de comandos de debug, y algunas sentencias para imprimir el estado de mi sistema.","","Todas estas cosas de imprimir y debuggear estan en su propia rama. Finalmente encuentro el problema, lo soluciono, ¡y disfruto!","","El único problema es que ahora necesito llevar mi `bugFix` a la rama `master`. Si simplemente fast-forwardeo `master`, entonces `master` va a tener todos mis agregados de debugging, que es indeseado. Tiene que haber otro modo..."]}},{type:"ModalAlert",options:{markdowns:["Necesitamos decirle a git que sólo copie uno de los commits. Esto es tal como los niveles anteriores de mover commits por ahí -- podemos usar los mismos comandos:","","* `git rebase -i`","* `git cherry-pick`","","Para conseguir este resultado."]}},{type:"ModalAlert",options:{markdowns:["Este es un nivel más avanzado, así que está en vos decidir cuál de los dos comandos querés usar, pero para completar el nivel asegurate de que `master` recibe el commit que `bugFix` referencia."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits localmente stackeados","","Esta es una escena que suele pasar cuando uno desarrolla: estoy tratando de encontrar un bug bastante escurridizo. Para ayudar en mi tarea de detective, agrego un par de comandos de debug, y algunas sentencias para imprimir el estado de mi sistema.","","Todas estas cosas de imprimir y debuggear estan en su propia rama. Finalmente encuentro el problema, lo soluciono, ¡y disfruto!","","El único problema es que ahora necesito llevar mi `bugFix` a la rama `master`. Si simplemente fast-forwardeo `master`, entonces `master` va a tener todos mis agregados de debugging, lo cual no es deseable. Tiene que haber otro modo..."]}},{type:"ModalAlert",options:{markdowns:["Necesitamos decirle a git que sólo copie uno de los commits. Esto es tal como los niveles anteriores de mover commits por ahí -- podemos usar los mismos comandos:","","* `git rebase -i`","* `git cherry-pick`","","Para conseguir este resultado."]}},{type:"ModalAlert",options:{markdowns:["Este es un nivel más avanzado, así que debes decidir cuál de los dos comandos quieres usar, pero para completar el nivel asegurate de que `master` recibe el commit que `bugFix` referencia."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits empilhados localmente","","Aqui está uma situação de acontece frequentemente com desenvolvedores: Estou tentando encontrar um bug, mas ele é escorregadio. Para auxiliar meu trabalho de detetive, eu coloco alguns comandos de debug e prints.","","Todos esses comandos de debug e mensagens estão em seus próprios ramos. Finalmente eu encontro o bug, corrijo, e me regozijo!","","O único problema é que agora eu preciso devolver o meu `bugFix` ao ramo `master`. Se eu simplesmente der um fast-forward no `master`, então o `master` terminará contendo todos os comandos de debug, o que é indesejável. Deve existir alguma outra forma..."]}},{type:"ModalAlert",options:{markdowns:["Precisamos dizer ao git para copiar somente um dos commits. Esta situação é exatamente a mesma dos níveis anteriores a respeito de como mover trabalho -- podemos usar os mesmos comandos:","","* `git rebase -i`","* `git cherry-pick`","","Para alcançar o objetivo."]}},{type:"ModalAlert",options:{markdowns:["Este é um nível avançado, então vamos deixar para você a decisão de qual comando usar, mas para completar este nível, certifique-se de que o `master` receba o commit referenciado por `bugFix`."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits apilados localmente","","Aquí estamos nunha situación que acontece de cotio con desenvolvedores: Estou intentando atopar un erro, mais é escorredizo. Para axudar ó meu traballo de detective, eu coloco algúns comandos de debug e prints.","","¡Todos esos comandos de debug e mensaxes están nas súas ramas propias. Finalmente eu atopo o erro, arránxoo e reorganizo!","","O único problema é que agora eu preciso devolver o meu `bugFix` á rama `master`. Se eu fixera simplemente un fast-forward en `master`, entón o `master` rematará contendo tódolos comandos de debug, o que é indesexable. Debe existir algunha outra forma..."]}},{type:"ModalAlert",options:{markdowns:["Precisamos decirlle a git que copie só os commits que nos interesa. Esta situación é exatamente a mesma dos niveis anteriores respecto de como mover o traballo -- podemos usar os mesmos comandos:","","* `git rebase -i`","* `git cherry-pick`","","Para acadar o objetivo."]}},{type:"ModalAlert",options:{markdowns:["Este é un nivel avanzado, entón imos deixarche a decisión de qué comando empregar, pero para completar este nivel, asegurate de que a rama `master` colla o commit referenciado por `bugFix`."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Lokale Commit-Haufen","","Folgende Situation habe ich beim Entwickeln des öfteren: ich bin auf der Suche nach einem Bug, aber er ist echt schwer zu finden. Um ihm auf die Spur zu kommen schreibe ich mehrere Debug-Kommandos und print-Befehle in den Code.","","Die committe ich auch immer wieder, je weiter die Suche mich trägt; natürlich in einem lokalen Branch. Schließlich finde ich den Bug, fixe ihn und freue mich!","","Einziges Problem ist, dass ich diesen `bugFix` jetzt zurück in den `master` kriegen muss. Wenn ich einfach den `master` vorspule oder meinen Branch hinein merge, bekäme der `master` auch die ganzen Debug-Befehle, was nicht gewünscht ist. Das muss anders gehen ..."]}},{type:"ModalAlert",options:{markdowns:["Wir müssten Git sagen können, dass es nur einen Commit herüber kopieren soll. Das ist genauso wie die Level vorhin zum Code-Verschieben. Wir können dieselben Befehle benutzen:","","* `git rebase -i`","* `git cherry-pick`",""]}},{type:"ModalAlert",options:{markdowns:["Da dies ein späterer Level ist überlasse ich es dir zu entscheiden, welchen Befehl du benutzen willst. Aber um da Level zu schaffen musst du irgendwie sicherstellen, dass `master` den Commit bekommt, auf den `bugFix` zeigt."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ローカルに積み上がったコミット","","実際の開発ではこういうケースがよくあります：「バグの原因調査を試みているがバグの再現性がかなり低い。調査の補助のために、いくつかのデバッグ用の命令やprint文を差し込んでいる。」","","これらのデバッグ用のコードはバグ修正用のブランチにコミットされています。そしてついにバグの原因を突き止めて、修正した！やった！","","あとは`bugFix`ブランチを`master`ブランチに統合できればOK。そこで単純に`master`をfast-forwardすればよいかというと、それでは`master`ブランチの中にデバッグ用のコードも混入してしまいます。"]}},{type:"ModalAlert",options:{markdowns:["ここでGitの魔法が力を発揮します。解決のためにはいくつかの方法がありますが、最も素直な解決方法は2つあって：","","* `git rebase -i`","* `git cherry-pick`","","インタラクティブモードの（`-i`オプションつきの）rebaseによって、保持したいコミットと破棄したいコミットを選り分けることができます。コミットの順序を変更することも可能です。この方法は、一部の変更をどこかへやってしまいたい時に便利です。","","もう一方のcherry-pickを使うと、持っていきたいコミットを選んで`HEAD`の先にストンと落とすことができます。"]}},{type:"ModalAlert",options:{markdowns:["後半の章ですのでどう解決するかをもう自分で考えることができると思います。このレベルをクリアするためには、`bugFix`が持っているコミットを`master`ブランチが受け取る必要がある点には注意してください。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 本地栈式提交","","来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。","","这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！","","最后就差把 `bugFix` 分支里的工作合并回 `master` 分支了。你可以选择通过 fast-forward 快速合并到 `master` 分支上，但这样的话 `master` 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……"]}},{type:"ModalAlert",options:{markdowns:["实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用","","* `git rebase -i`","* `git cherry-pick`","","来达到目的。"]}},{type:"ModalAlert",options:{markdowns:["由于我们刚刚闯过类似的关卡，所以要不要再尝试一次就看你自己了。但是如果你想试一把的话，确保 `master` 分支能得到 `bugFix` 分支上的相关提交。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在 local 的堆疊的 commit","","有一個經常發生的情況：我在追蹤一個有點棘手的 bug，但是它實在太難抓出來了，在不得已的情況下我加入了一些 debug 的指令，並且做了一些 commit。","","所有的這些 debug 的指令都只在 `bugFix` 這個 branch 裡面。最後我終於找到這個 bug，並且 fix 掉它，接著撒花慶祝一下！","","現在唯一的問題就是要把我在 `bugFix` branch 裡面所做的修改 merge 回 `master` branch。我可以簡單地透過 fast-forward 來 merge ，但這樣的話 `master` branch 就會包含這些含有 debug 指令的 commit 了。我相信一定有其它方法..."]}},{type:"ModalAlert",options:{markdowns:["我們需要告訴 git 只去複製其中一個 commit。 這種情況跟之前的關卡有一點類似，我們可以使用一樣的指令","","* `git rebase -i`","* `git cherry-pick`","","來完成這個目的。"]}},{type:"ModalAlert",options:{markdowns:["這一個關卡是比較後面的關卡，你可以隨意決定你要選擇使用哪個指令，但是 `bugFix` 所指向的那個 commit 一定要可以被 `master` branch 包含到。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 로컬에 쌓인 커밋들","","개발중에 종종 이런 상황이 생깁니다: 잘 띄지 않는 버그를 찾아서 해결하려고, 어떤 부분의 문제인지를 찾기 위해 디버그용 코드와 화면에 정보를 프린트하는 코드 몇 줄 넣습니다. ","","디버깅용 코드나 프린트 명령은 그 브랜치에 들어있습니다. 마침내 버그를 찾아서 고쳤고, 원래 작업하는 브랜치에 합치면 됩니다!","","이제 `bugFix`브랜치의 내용을 `master`에 합쳐 넣으려 하지만, 한 가지 문제가 있습니다. 그냥 간단히 `master`브랜치를 최신 커밋으로 이동시킨다면(fast-forward) 그 불필요한 디버그용 코드들도 함께 들어가 버린다는 문제죠."]}},{type:"ModalAlert",options:{markdowns:["여기에서 Git의 마법이 드러납니다. 이 문제를 해결하는 여러가지 방법이 있습니다만, 가장 간단한 두가지 방법 아래와 같습니다:","","* `git rebase -i`","* `git cherry-pick`","","대화형 (-i 옵션) 리베이스(rebase)로는 어떤 커밋을 취하거나 버릴지를 선택할 수 있습니다. 또 커밋의 순서를 바꿀 수도 있습니다. 이 커맨드로 어떤 작업의 일부만 골라내기에 유용합니다.","","체리픽(cherry-pick)은 개별 커밋을 골라서 `HEAD`위에 떨어뜨릴 수 있습니다."]}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해 어떤 방법을 쓰시든 자유입니다만, `master`브랜치가 `bugFix` 브랜치의 커밋을 일부 가져오게 해주세요."]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["Вот ситуация, которая часто случается при разработке: мы пытаемся отследить ошибку, но она не очень очевидна. Для того, чтобы достичь успеха на этом поприще, мы используем несколько команд для отладки и вывода","","Каждая отладочная команда (команды) вывода находится в своём коммите. В итоге мы нашли ошибку, исправили её и порадовались!","","Но проблема в том, что мы хотим добавить в `master` только исправление ошибки из ветки `bugFix`. Если мы воспользуемся простым fast-forward, то в `master` попадут также отладочные команды. Должен быть другой способ..."]}},{type:"ModalAlert",options:{markdowns:["Надо заставить git копировать только один из коммитов. Это почти как в предыдущем уровне – мы можем использовать уже известные нам команды: ","","* `git rebase -i`","* `git cherry-pick`","","Чтобы достичь желаемого результата."]}},{type:"ModalAlert",options:{markdowns:["В этом уровне тебе решать, какую команду использовать, но чтобы закончить уровень, убедись, что в мастер попал коммит, на который ссылается `bugFix`"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Локально складені коміти","","Ось ситуація з життя рядового програміста: я намагаюся відслідкувати баг, але це не завжди вдається. Щоб допомогти собі, я додаю кілька дебаг-команд та ще кілька println'ів.","","Всі ці команди для відлагодження та виводу данних знаходяться в своїх власних комітах. Врешті-решт я знаходжу баг, фікшу його та щиро радію!","","От тільки лишається проблема, що потрібно мій фікс перенести з `bugFix` назад в гілку `master`. Якщо я просто зроблю фастфорвард (fast-forwarded) в `master`, тоді в `master` потраплять всі мої println'и, що є зайвим. Має бути інший шлях..."]}},{type:"ModalAlert",options:{markdowns:["Ми маємо сказати гіту скопіювати лише один коміт. Це все те ж саме, що й у попередніх рівнях, і ми можемо використати ті ж самі команди:","","* `git rebase -i`","* `git cherry-pick`","","для досягнення мети."]}},{type:"ModalAlert",options:{markdowns:["На цьому рівні тобі вирішувати якими командами користуватися, але щоб пройти цей рівень, впевнись що в `master` потрапить коміт, на який посилається `bugFix`."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commit xếp chồng tại địa phương","","Có tình huống thế này thường hay xảy ra trong quá trình phát triển: Tôi dang cố dò lỗi nhưng mà nó lại khá là trúc trắc. Để hỗ trợ cho việc này, thêm vào vài dòng lệnh gỡ lỗi và lệnh in.","","Mấy lệnh gỡ lỗi và in này nằm yên trong commit của chúng. Cuối cùng thì tôi cũng tìm ra lỗi, gỡ xong, ngon rồi!","","Bây giờ thì lại phải đưa `bugFix` trở về nhánh `master`. Nếu mà đơn giản dùng fast-forwarded lên `master`, thì `master` lại có tất cả các lệnh gỡ lỗi kia(chẳng muốn chút nào). Phải có cách khác chứ nhỉ..."]}},{type:"ModalAlert",options:{markdowns:["Ta cần phải bảo git chỉ sao chép 1 commit thôi. Điều này giống với cấp độ trước về điều chỉnh vị trí -- ta có thể dùng các câu lệnh tương tự:","","* `git rebase -i`","* `git cherry-pick`","","Để đạt được mục tiêu này."]}},{type:"ModalAlert",options:{markdowns:["Bây giờ là cấp độ cao hơn rồi nên bạn hãy tự quyết định nên dùng câu lệnh nào, nhưng để hoàn thành được cấp độ, hãy đàm bảo rằng `master` nhận được commit mà `bugFix` tham chiếu tới."]}}]}}}},{}],122:[function(e,t,o){o.level={disabledMap:{"git cherry-pick":!0,"git revert":!0},compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C2>e.C3},function(e){return e.C2>e.C1}]},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C2%27%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i HEAD~2 --solution-ordering C3,C2;git commit --amend;git rebase -i HEAD~2 --solution-ordering C2'',C3';git rebase caption master",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',name:{ko:"커밋들 갖고 놀기",en_US:"Juggling Commits",de_DE:"Jonglieren mit Commits",fr_FR:"Jongler avec les commits",es_AR:"Haciendo malabares con los commits",es_ES:"Haciendo malabares con los commits",pt_BR:"Malabarismo com commits",gl:"Argallando cos commits",ja:"コミットをやりくりする",zh_CN:"提交的技巧 #1",zh_TW:"commit 的戲法",ru_RU:"Жонглируем коммитами",uk:"Жонглюємо комітами",vi:"Tung hứng commit"},hint:{en_US:"The first command is git rebase -i HEAD~2",de_DE:"Der erste Befehl ist git rebase -i HEAD~2",fr_FR:"La première commande est git rebase -i HEAD~2",es_AR:"El primer comando es git rebase -i HEAD~2",es_ES:"El primer comando es git rebase -i HEAD~2",pt_BR:"O primeiro comando é git rebase -i HEAD~2",gl:"O primeiro comando é git rebase -i HEAD~2",ja:"最初に打つコマンドはgit rebase -i HEAD~2",ko:"첫번째 명령은 git rebase -i HEAD~2 입니다",zh_CN:"第一个命令是 `git rebase -i HEAD~2`",zh_TW:"第一個命令是 'git rebase -i HEAD~2'",ru_RU:"Первой командой должна быть git rebase -i HEAD~2",uk:"Перша команда має бути git rebase -i HEAD~2",vi:"Lệnh đầu tiên là git rebase -i HEAD~2"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits","","Here's another situation that happens quite commonly. You have some changes (`newImage`) and another set of changes (`caption`) that are related, so they are stacked on top of each other in your repository (aka one after another).","","The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of `newImage` slightly, even though that commit is way back in our history!!"]}},{type:"ModalAlert",options:{markdowns:["We will overcome this difficulty by doing the following:","","* We will re-order the commits so the one we want to change is on top with `git rebase -i`","* We will `commit --amend` to make the slight modification","* Then we will re-order the commits back to how they were previously with `git rebase -i`","* Finally, we will move master to this updated part of the tree to finish the level (via the method of your choosing)","","There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique.","Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree ","","That being said, I can compare levels now based on structure and relative apostrophe differences. As long as your tree's `master` branch has the same structure and relative apostrophe differences, I'll give full credit"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jongler avec les commits","","Voici une autre situation fréquente. Vous avez certains changements (`newImage`) et un autre groupe de changements (`caption`) qui sont reliés, ils sont donc empilés l'un sur l'autre dans votre dépôt Git (i.e. l'un après l'autre).","","Là où ça se complique c'est lorsque vous devez faire une petite modification dans un commit antérieur. Dans ce cas, les configurations de  `newImage` devront changer un peu, même si ce commit est loin dans notre historique !!"]}},{type:"ModalAlert",options:{markdowns:["Nous allons régler le problème en faisant ceci :","","* Nous allons réordonner les commits pour que celui que nous voulions changer soit sur le dessus `git rebase -i`","* Nous allons utiliser `commit --amend` pour faire les petites modifications","* Nous allons réordonner les commits dans l'ordre original avec `git rebase -i`","* Finalement, nous allons déplacer master vers la nouvelle tête de l'arbre (avec la méthode de votre choix)","","Il y a plusieurs façons d'atteindre ce but (cherry-pick semble très tentant), mais nous allons parler de cherry-pick plus tard, pour le moment concentrez-vous sur cette technique.","","Pour terminer, Faites attention au but -- Dû au fait que nous déplaçons les commits 2 fois, ils se retrouvent tous les deux avec une apostrophe. Une deuxième apostrophe est ajoutée sur le commit que nous modifions, ce qui nous donne la forme finale de l'arbre.","","Ceci étant dit, je peux comparer le résultat avec la structure et les différentes apostrophes. Tant que votre arbre `master` a la même structure et les différentes apostrophes le niveau sera considéré réussi."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo malabares con los commits","","Esta es otra situación algo común. Tenés algunos cambios (`newImage`) y otro conjunto de cambios (`caption`) que están relacionados, entonces están apilados en tu repositorio uno encima del otro (es decir, uno después del otro).","","El tema es que a veces tenés que hacer una pequeña modificación a un commit previo. En este caso, la gente de diseño requiere que cambiemos ligeramente las dimensiones de `newImage`, ¡incluso aunque ese commit ya esté atrás en nuestra historia!"]}},{type:"ModalAlert",options:{markdowns:["Superaremos esta dificultad haciendo lo siguiente:","","* Vamos a reordenar los commits para que el que queremos cambiar quede arriba de todo con `git rebase -i`","* Vamos a hacer `commit --amend` para aplicar la ligera modificación","* Después vamos a reordenar los commits a como estaban con `git rebase -i`","* Finalmente, vamos a mover master a esta parte actualizada de nuestro árbol de commits para terminar el nivel (usando el método que prefieras)","","Hay varias maneras de lograr este objetivo en general (ya te veo haciéndole ojitos al cherry-pick), y veremos algunos más después, pero por ahora concentrémonos en esta técnica.","","Por último, prestá atención al estado final acá -- como movemos los commits dos veces, ambos quedan con un apóstrofe. El commit que corregimos tiene un apóstrofe extra, y así nos queda nuestro árbol final","","Habiendo dicho eso, puedo comparar los niveles basándome ahora en la estructura y las diferencias relativas de apóstrofes. Mientras que tu rama `master` tenga la misma estructura y diferencias relativas de apóstrofes, te voy a dar el puntaje completo"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo malabares con los commits","","Esta es otra situación algo común. Tienes algunos cambios (`newImage`) y otro conjunto de cambios (`caption`) que están relacionados, entonces están apilados en tu repositorio uno encima del otro (es decir, uno después del otro).","","El tema es que a veces tienes que hacer una pequeña modificación a un commit previo. En este caso, la gente de diseño requiere que cambiemos ligeramente las dimensiones de `newImage`, ¡incluso aunque ese commit ya se encuentre atrás en nuestra historia!"]}},{type:"ModalAlert",options:{markdowns:["Superaremos esta dificultad haciendo lo siguiente:","","* Vamos a reordenar los commits para que el que queremos cambiar quede arriba de los demás con `git rebase -i`","* Vamos a hacer `commit --amend` para aplicar la ligera modificación","* Después vamos a reordenar los commits a como estaban con `git rebase -i`","* Finalmente, vamos a mover master a esta parte actualizada de nuestro árbol de commits para terminar el nivel (usando el método que prefieras)","","Hay varias maneras de lograr este objetivo en general (ya te veo haciéndole ojitos al cherry-pick), y veremos algunos más después, pero por ahora concentrémonos en esta técnica.","","Por último, presta atención al estado final -- como movemos los commits dos veces, ambos quedan con un apóstrofe. El commit que corregimos tiene un apóstrofe extra, y así nos queda nuestro árbol final","","Habiendo dicho eso, puedo comparar los niveles basándome ahora en la estructura y las diferencias relativas de apóstrofes. Mientras que tu rama `master` tenga la misma estructura y diferencias relativas de apóstrofes, te voy a dar el puntaje completo"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Malabarismo com commits","","Aqui está outra situação que acontece com bastante frequência. Você fez algumas mudanças (`newImage`), além de um outro conjunto de mudanças (`caption`) que são relacionadas, de forma que elas estão empilhadas uma após a outra no seu repositório.","","O complicado é que algumas vezes você precisa fazer uma pequena modificação em um commit mais antigo. Neste caso, o pessoal do design quer que modifiquemos um pouco as dimensões da imagem introduzida em `newImage`, apesar de esse commit estar mais para trás no nosso histórico!!"]}},{type:"ModalAlert",options:{markdowns:["Superaremos essa dificuldade fazendo o seguinte:","","* Reordenaremos os commits de forma que aquele que desejamos esteja no topo, com `git rebase -i`","* Usaremos o comando `git commit --amend` para fazer uma pequena modificação","* Vamos, então, reordenar os commits na mesma ordem que estavam anteriormente com `git rebase -i`","* Finalmente, moveremos o master para essa parte atualizada da árvore para finalizar o nível (usando o método de sua escolha)","","Há muitas formas de alcançar o objetivo final (eu vejo o cherry-pick passando pela sua mente), e veremos mais delas depois, mas por enquanto foquemos nesta técnica.","",'Por último, preste atenção no estado do "objetivo" aqui -- como nós movemos os commits duas vezes, ambos ficam com um apóstrofo. Um apóstrofo adicional é colocado no commit que sofreu o "amend", o que nos dá a forma final da árvore ',"","Tendo dito isto, posso avaliar a resposta baseado na estrutura e nas diferenças relativas de número de apóstrofos. Desde que o ramo `master` da sua árvore tenha a mesma estrutura, e o número de apóstrofos seja igual a menos de uma constante, darei a você todos os pontos para esta tarefa"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Argallando cos commits","","Aquí está outra situación que acontece con bastante frecuencia. Estás facendo algúns cambios (`newImage`), separado do resto de cambios (`caption`) que están relacionados, deste xeito están apilados un enriba do outro no teu repositorio.","","O complicado é que ás veces, poida que precises facer unha pequena nota nun commit máis antigo. Neste caso, a persoa de deseño quere mudar un pouco as dimensións da imaxe introducida en `newImage`, a pesar de que ese commit está máis abaixo no noso histórico!!"]}},{type:"ModalAlert",options:{markdowns:["Superamos este problema facendo o seguinte:","","* Reordenaremos os commits seleccionando aqueles que desexamos que estén no cambio, con `git rebase -i`","* Empregaremos o comando `git commit --amend` para facer unha pequena modificación","* Imos, entón, reordear os commits na mesma orde na que estaban anteriormente con `git rebase -i`","* Finalmente, moveremos o master para esa parte atualizada da árbore e así finalizar o nivel (usando o método que máis che pete)","","Hai moitas formas de obter o obxectivo final (eu vexo o cherry-pick pasando pola túa cachola), e verémolo máis adiante, pero agora ímonos centrar nesta técnica.","",'Por último, preste atención no estado do "objectivo" aquí -- como movemos os commits dúas veces, ambos teñen o apóstrofo sumado. O apóstrofo engádese polo commit que nos correximos (amend), o cal danos a forma final da árbore.',"","Contado todo esto, a resposta valídase baseándose na estructura e nos diferentes apóstrofes. Cando a rama `master` teña a mesma estructura, e o número de apóstrofos sexa igual, obterás todos os puntos da tarefa."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jonglieren mit Commits","","Eine weitere häufig vorkommende Situation: du hast einige Änderungen in `newImage` und weitere Änderungen in `caption`. Die Änderungen hängen voneinander ab, das heißt in diesem Fall `caption` ist ein Nachfolger von `newImage`.","","Nun kann es vorkommen, dass du einen früheren Commit verändern willst. In unserem Fall will die Design-Abteilung, dass die Abmessungen in `newImage` leicht verändert werden, obwohl das mitten in unserer History liegt!"]}},{type:"ModalAlert",options:{markdowns:["Um das zu schaffen gehen wir wie folgt vor:","","* Wir sortieren die Commits mit `git rebase -i` so um, dass der, den wir ändern wollen, ganz oben liegt.","* Wir verändern den Commit mit `git commit --amend`.","* Dann sortieren wir die Commit mit einem erneuten `git rebase -i` wieder in die alte Reihenfolge.","* Schließlich aktualisieren wir den `master` auf das Ende unseres fertigen Baums, um diesen Level abzuschließen.","","Es gibt sehr viele Wege um das Endziel dieses Levels zu erreichen (ich sehe, du schielst auf `cherry-pick`) und wir werden uns später noch andere ansehen. Aber für's erste lass uns diese Methode ausprobieren.","","Beachte den geschilderten Zielzustand. Da wir die Commits zweimal umsortieren bekommen sie jedesmal ein Apostroph hinzugefügt (weil sie jedesmal kopiert werden). Ein weiteres Apostroph entsteht durch den `commit --amend`.","","Zuguterletzt noch eine Bemerkung: ich kann Level nur auf Struktur und Apostroph-Differenz prüfen. So lange wie dein `master` am Ende dieselbe Struktur und Apostroph-Differenz aufweist wie der Ziel-`master`, ist der Level bestanden."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コミットをやりくりする","","開発中に頻繁に起こるケースをもう1つ考えます。ある変更（`newImage`）とまた別の変更（`caption`）があって、それらに依存関係があるとします。この一連の変更が一列に積み重なっているとします。","","ここでトリッキーなのは、以前のコミットに対して微修正をかけなければならないケースがあるということです。今回の教材でも、過去のコミットであるにも関わらず`newImage`ブランチに僅かな修正を加えるような設計の修正が入ったとしましょう。"]}},{type:"ModalAlert",options:{markdowns:["この困難な状況を、以下の手順で克服することを考えます：","","* `git rebase -i`を使って順番を変更する。これで、変更をかけたいコミットを一番先頭に持ってくる。","* `commit --amend`コマンドで僅かな変更を行う","* `git rebase -i`コマンドを再度使って、先頭に持ってきていたコミットを元に戻す","* 最後に、レベルクリアのためにmasterブランチを先頭に持ってくる","","クリアのための方法はいくつもありますが（cherry-pickを使うこともできます）、別の回答はまた後程の章で見ることにして、今回は上記の方法でやってみることにしましょう。","","最後に、ゴール時点での状態に気を付けてください。今回2回ほどコミットを動かしますから、コミットへのポインタにはアポストロフィ（'）が追加されます。commit --amendコマンドの実行でできたコミットには更にもう1つのアポストロフィが追加されます。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 提交的技巧 #1","","接下来这种情况也是很常见的：你之前在 `newImage` 分支上进行了一次提交，然后又基于它创建了 `caption` 分支，然后又提交了一次。","","此时你想对的某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 `newImage` 中图片的分辨率，尽管那个提交记录并不是最新的了。"]}},{type:"ModalAlert",options:{markdowns:["我们可以通过下面的方法来克服困难：","","* 先用 `git rebase -i` 将提交重新排序，然后把我们想要修改的提交记录挪到最前","* 然后用 `commit --amend` 来进行一些小修改","* 接着再用 `git rebase -i` 来将他们调回原来的顺序","* 最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！","","当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。","最后有必要说明一下目标状态中的那几个`'` —— 我们把这个提交移动了两次，每移动一次会产生一个 `'`；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。","","也就是说，我在对比结果的时候只会对比提交树的结构，对于 `'` 的数量上的不同，并不纳入对比范围内。只要你的 `master` 分支结构与目标结构相同，我就算你通过。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## commit 的戲法","","下面這種情況也是經常出現的。例如你之前已經在 `newImage` branch 上做了一些 commit，然後又開了一個 branch 叫做 `caption` ，並且在上面做了一些相關的 commit ，因此它們看起來是一個接著一個的。","","有點棘手的就是有時候你又想在之前的 commit 裡面做一些修改。在這個例子裡面，我們要去稍微修改一下 `newImage` 所指向的 commit，儘管已經是之前的 commit 了 。"]}},{type:"ModalAlert",options:{markdowns:["為了克服這個困難，我們可以按照下面的方法來做：","","* 先用 `git rebase -i` 將 commit 重新排序，然後把我們想要修改的 commit 移到最前面","* 然後用 `commit --amend` 來進行一些修改","* 接著再用 `git rebase -i` 來將他們按照最開始的順序重新排好","* 最後我們把 master 移到這個修改的最前端（用你自己喜歡的方法），就大功告成啦！","","當然還有許多方法可以完成這個任務（我知道你在想 cherry-pick 啦），之後我們會多點關注這些技巧啦，但現在暫時只注意上面這種方法。","","啊！最後還要提醒你一下最後所產生的 commit tree，因為我們把 commit 移動了兩次，所以會分別產生一個 apostrophe(單引號） commit。還有一個 apostrophe commit 是因為我們修改 commit 而加進來的。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋들 갖고 놀기","","이번에도 꽤 자주 발생하는 상황입니다. `newImage`와 `caption` 브랜치에 각각의 변경내역이 있고 서로 약간 관련이 있어서, 저장소에 차례로 쌓여있는 상황입니다.","","때로는 이전 커밋의 내용을 살짝 바꿔야하는 골치아픈 상황에 빠지게 됩니다. 이번에는 디자인 쪽에서 우리의 작업이력(history)에서는 이미 한참 전의 커밋 내용에 있는 `newImage`의 크기를 살짝 바꿔달라는 요청이 들어왔습니다."]}},{type:"ModalAlert",options:{markdowns:["이 문제를 다음과 같이 풀어봅시다:","","* `git rebase -i` 명령으로 우리가 바꿀 커밋을 가장 최근 순서로 바꾸어 놓습니다","* `commit --amend` 명령으로 커밋 내용을 정정합니다","* 다시 `git rebase -i` 명령으로 이 전의 커밋 순서대로 되돌려 놓습니다","* 마지막으로, master를 지금 트리가 변경된 부분으로 이동합니다. (편하신 방법으로 하세요)","","이 목표를 달성하기 위해서는 많은 방법이 있는데요(체리픽을 고민중이시죠?), 체리픽은 나중에 더 살펴보기로 하고, 우선은 위의 방법으로 해결해보세요.","","최종적으로, 목표 결과를 눈여겨 보세요 -- 우리가 커밋을 두 번 옮겼기 때문에, 두 커밋 모두 따옴표 표시가 붙어있습니다. 정정한(amend) 커밋은 따옴표가 추가로 하나 더 붙어있습니다."]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Жонглируем коммитами","","Вот ещё одна ситуация, которая часто случается. Есть некоторые изменения (`newImage`) и другие изменения (`caption`), которые связаны так, что находятся друг поверх друга в репозитории.","","Штука в том, что иногда нужно внести небольшие изменения в более ранний коммит. В таком случае надо немного поменять `newImage`, несмотря на то, что коммит уже в прошлом!"]}},{type:"ModalAlert",options:{markdowns:["Преодолеть эти трудности можно следующим образом:","","* Переставить коммит так, чтобы нужный находился наверху при помощи `git rebase -i`","* Внести изменения при помощи `commit --amend`","* Переставить всё обратно при помощи `git rebase -i`","* И наконец, переместить master на изменённую часть дерева, чтобы закончить уровень.","","Это задание можно выполнить несколькими способами (и, гляжу, ты посматриваешь на cherry-picking), но сейчас сосредоточься на вышеописанном методе.","","Обрати внимание на итоговое состояние в этом уровне – так как мы дважды перемещаем коммиты, оба они получат по апострофу. Ещё один апостроф добавляется, когда мы делаем `commit --amend`.","","Важно, чтобы совпадало не только дерево коммитов, но и количество апострофов."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Жонглюємо комітами","","Ось інша ситуація, що доволі часто трапляється. В тебе є якісь зміни (`newImage`) та ще якийсь набір комітів (`caption`), які зв’язані між собою, тому вони знаходяться один над одним в твоєму репозиторії (або один за одним).","","Штука в тому що іноді потрібно зробити невелику модифікацію до попереднього коміту. В цьому випадку, дизайнери хочуть щоб ми трохи змінили розміри `newImage`, не зважаючи на те, що цей коміт знаходиться досить глибоко в історії!!"]}},{type:"ModalAlert",options:{markdowns:["Ми поборимо цю складність наступним чином:","","* Ми відсортуємо коміти таким чином, щоб той, який ми хочемо змінити, був останнім за допомогою `git rebase -i`","* Ми виконаємо `commit --amend` щоб внести невелику правку до останнього коміту","* Тоді ми відсортуємо коміти в попередньому порядку, за допомогою `git rebase -i`","* І на останок, ми пересунемо master на змінену частину дерева щоб закінчити цей рівень(ти можеш вибрати метод)","","Насправді є кілька способів як виконати поставлену задачу (Я бачу, ти поглядаєш на cherry-pick), і ми розберемося з ними всіма трохи пізніше, але зараз скористаймося саме цим методом.","Зверни увагу на фінальний стан в цьому рівні -- позаяк ми перемістили коміти двічі, кожен з них отримає по апострофу. Ще один апостроф додасться коли ми виконаємо commit --amend.","","Враховуючи сказане вище, я буду порівнювати дерево як за назвою коміта, так і за кількістю апострофів. Щойно дерево цілей та master співпадуть, ти пройдеш цей рівень."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tung hứng Commit","","Có một tình huống xảy ra khá thường xuyên. Bạn có vài thay đổi trên (`newImage`) và một vài thay đổi khác trên (`caption`) và chúng lại liên quan đến nhau, nên chúng nằm chồng lên nhau trong kho của bạn (một lại nối một).","","Tréo ngoe là bạn lại phải điều chỉnh một chút ở commit trước. Giả sử như tay thiết kết muốn ta đổi chiều của `newImage` một chút, mặc dù commit ấy đã xưa lắm rồi!!"]}},{type:"ModalAlert",options:{markdowns:["Để khắc phục khó khăn này ta có thể làm như sau:","","* Ta sẽ dùng `git rebase -i` sắp xếp lại commit để cái ta cần sửa sẽ nằm trên cùng","* Ta sẽ dùng `commit --amend` tạo ra một điều chỉnh nhỏ","* Sau đó ta sẽ lại sắp xếp lại commit như trước bằng cách dùng `git rebase -i`","* Cuối cùng, ta sẽ chuyển `master` tới phần đã cập nhật để hoàn thành cấp độ (dùng cách nào tùy bạn)","","Có nhiều cách để hoàn thành mục tiêu (Tôi thấy bạn hấp háy sang cherry-pick rồi đấy), rồi ta sẽ thấy chúng nhiều hơn, nhưng giờ hãy cứ tập trung vào kỹ thuật này đã.","Sau cùng thì, để ý các dấu nháy đơn(') chứ?-- vì ta đã chuyển commit 2 lần, nên chúng có thêm một dấu nháy đơn. Và một dấu nữa cho commit mà ta đã sửa đổi, thế là ta có trạng thái cuối cùng của cây lịch sử ","","Nói cách khác, khi tôi so sánh kết quả, tôi chỉ so sánh cấu trúc của cây lịch sử. Sự khác biệt về số lượng `'`  không được bao gồm trong so sánh. Miễn là cấu trúc nhánh `master` của bạn giống với cấu trúc đích, tôi sẽ vẫn để bạn qua bài."]}}]}}}},{}],123:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C2;git commit --amend;git cherry-pick C3",disabledMap:{"git revert":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(e){return e.C2>=e.C3},function(e){return e.C2>e.C1}]},name:{ko:"커밋 갖고 놀기 #2",en_US:"Juggling Commits #2",fr_FR:"Jongler avec les commits #2",es_AR:"Haciendo malabares con los commits #2",es_ES:"Haciendo malabares con los commits #2",pt_BR:"Malabarismo com commits #2",gl:"Argallando cos commits #2",de_DE:"Jonglieren mit Commits Teil 2",ja:"コミットをやりくりする その2",zh_CN:"提交的技巧 #2",zh_TW:"commit 的戲法 #2",ru_RU:"Жонглируем коммитами №2",uk:"Жонглюємо комітами #2",vi:"Tung hứng commit #2"},hint:{en_US:"Don't forget to forward master to the updated changes!",fr_FR:"N'oubliez pas d'appliquer les changements depuis la branche master",es_AR:"¡No te olvides de avanzar master a los cambios actualizados!",es_ES:"¡No te olvides de avanzar master a los cambios actualizados!",pt_BR:"Não se esqueça de avançar a referência do master para as mudanças efetuadas!",gl:"¡Non te esquezas de avanzar master ós cambios actualizados!",de_DE:"Vergiss nicht den master auf die aktuelle Version vorzuspulen",ja:"masterのポインタを先に進めることを忘れずに！",ko:"master를 변경 완료한 커밋으로 이동(forward)시키는 것을 잊지 마세요!",zh_CN:"别忘记了将 master 快进到最新的更新上！",zh_TW:"別忘記了將 master 推到最新的 commit 上面！",ru_RU:"Не забудь переместить master на последние изменения.",uk:"Не забудь перемістити master на останні зміни!",vi:"Đừng quên đẩy nhánh master lên cập nhật mới nhất!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits #2","","*If you haven't completed Juggling Commits #1 (the previous level), please do so before continuing*","","As you saw in the last level, we used `rebase -i` to reorder the commits. Once the commit we wanted to change was on top, we could easily --amend it and re-order back to our preferred order.","","The only issue here is that there is a lot of reordering going on, which can introduce rebase conflicts. Let's look at another method with `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember that git cherry-pick will plop down a commit from anywhere in the tree onto HEAD (as long as that commit isn't an ancestor of HEAD).","","Here's a small refresher demo:"],afterMarkdowns:["Nice! Let's move on"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["So in this level, let's accomplish the same objective of amending `C2` once but avoid using `rebase -i`. I'll leave it up to you to figure it out! :D","","Remember, the exact number of apostrophe's (') on the commit are not important, only the relative differences. For example, I will give credit to a tree that matches the goal tree but has one extra apostrophe everywhere"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jongler avec les commits #2","","*Si vous n'avez pas fait le défi Jongler avec les commits #1 (le niveau précédent), vous devriez le faire avant de continuer*","","Comme vu dans le niveau précédent, nous utilisons `rebase -i` pour réordonner les commits. Une fois que le commit à modifier est celui à la tête, nous pouvons facilement faire un --amend et réordonner dans l'ordre voulu.","","La difficulté ici est qu'il y a beaucoup de changements, ce qui peut introduire des conflits de rebase. Essayons avec l'autre méthode `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["N'oubliez pas que git cherry-pick va prendre un commit de n'importe où dans l'arbre de git et le mettre devant HEAD (sauf s'il est un ancêtre de HEAD).","","Un petit rappel :"],afterMarkdowns:["Bien ! continuons."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Dans ce niveau, nous voulons modifier `C2` sans utiliser `rebase -i`. À vous maintenant de trouver comment ! :D","","Petit rappel, le nombre exact d'apostrophes (') sur le commit n'est pas important. Par exemple, nous donnerons les points à une structure qui colle au résultat mais qui a une apostrophe en trop partout."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo malabares con los commits #2","","*Si no completaste Haciendo malabares con los commits #1 (el nivel anterior), hacelo antes de continuar*","","Como viste en el último nivel, usamos `rebase -i` para reordenar los commits. Una vez que el commit que queríamos cambiar estaba arriba de todo, pudimos `--amend`earlo fácilmente y reordenarlo a como queríamos.","","El único problema con esto es que hay mucho reordenamiento, que puede generar conflictos al rebasear. Veamos otro método usando `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acordate de que git cherry-pick va a traer un commit de cualquier parte del árbol sobre HEAD (siempre que ese otro commit no sea un ancestro de HEAD).","","Una pequeña demo para refrescar la idea:"],afterMarkdowns:["¡Bien! Sigamos..."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Entonces, en este nivel vamos a lograr el mismo objetivo de corregir `C2`, pero sin usar `rebase -i`. Te dejo a vos el darte cuenta cómo :D","","Acordate, la cantidad exacta de apóstrofes (') en el commit no es importante, sólo la diferencia relativa. Por ejemplo, le voy a dar puntaje a un árbol que matchee el objetivo pero cuyos commits tengan todos un apóstrofe extra"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo malabares con los commits #2","","*Si no completaste Haciendo malabares con los commits #1 (el nivel anterior), hazlo antes de continuar*","","Como viste en el último nivel, usamos `rebase -i` para reordenar los commits. Una vez que el commit que queríamos cambiar se encontraba arriba de todo, pudimos `--amend`earlo fácilmente y reordenarlo a como queríamos.","","El único problema con esto es que hay mucho reordenamiento, que puede generar conflictos al rebasear. Veamos otro método usando `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Recuerda que git cherry-pick va a traer un commit de cualquier parte del árbol sobre HEAD (siempre que ese otro commit no sea un ancestro de HEAD).","","Una pequeña demo para refrescar la idea:"],afterMarkdowns:["¡Bien! Sigamos..."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Entonces, en este nivel vamos a lograr el mismo objetivo de corregir `C2`, pero sin usar `rebase -i`. Te dejo a ti el darte cuenta cómo :D","","Recuerda, la cantidad exacta de apóstrofes (') en el commit no es importante, sólo la diferencia relativa. Por ejemplo, le voy a dar una puntuación a un árbol que coincida con el objetivo pero cuyos commits tengan todos un apóstrofe extra"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Malabarismo com commits #2","","*Caso você não tenha completado o nível anterior (Malabarismo com commits #1), por favor faça-o antes de continuar*","","Como você viu no nível anterior, usamos `rebase -i` para reordenar os commits. Uma vez que o commit que queríamos mudar estava no topo, pudemos facilmente usar o `--amend` e depois reordená-lo de volta para obter nossa ordem preferida.","","O único problema aqui é que há muita reordenação ocorrendo, o que pode introduzir conflitos de rebase. Vamos dar uma olhada em outro método, usando o `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lembre-se que o git cherry-pick copiará um commit de qualquer lugar na árvore sob o HEAD (desde que esse commit não seja um ancestral do HEAD).","","Aqui está uma demonstração para refrescar sua memória:"],afterMarkdowns:["Ótimo! Vamos em frente"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:['Então, neste nível, vamos alcançar o mesmo objetivo de fazer "amend" no `C2`, mas evitaremos usar o `rebase -i`. Agora vou deixar com você a tarefa de descobrir como fazer! :D',"","Lembre-se, o número exato de apóstrofos (') nos commits não é importante, apenas as diferenças relativas. Por exemplo, darei todos os pontos nesta tarefa se você obtiver o mesmo resultado da árvore da visualização de objetivo com um apóstrofo extra em todos os commits"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Argallando cos commits #2","","*No caso de non ter rematado o tema anterior (Argallando cos commits #1), por favor faino antes de continuar*.","","Como puideches ver no anterior tema, usamos `rebase -i` para reordear os commits. Unha vez que atopamos o commit que queriamos modificar, puidemos empregar sinxelamente o `--amend`, e depois reordenalo de volta para obter a nosa orde preferida.","","O único problema aquí é que hai moita reordenación ocorrendo, o que pode introducir conflitos no rebase. Imos votar unha ollada a outro método, o uso de `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lembra que `git cherry-pick` copiará un commit de qualquera lugar na árbore enriba do HEAD (sempre e cando non sexa ancestro do HEAD).","","Aquí está unha demostración para que refresques a memoria:"],afterMarkdowns:["¡A tope! Seguimos."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:['Entón, neste nivel, imos completar o mesmo obxectivo que facendo "amend" no `C2`, pero evitando facer o `rebase -i`. Agora deixámoste que lle des os miolos para sacar o exercicio! :D',"","Recorda, o número exacto de apóstrofos (') nos commits non é importante, só as diferencias relativas. Por exemplo, levarás todos os puntos desta tarefa se obtés o mesmo resultado da árbore que se mostra na visualización do exercicio con un apóstrofo extra en tódolos commits."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jonglieren mit Commits Teil 2","",'Du solltest "Jonglieren mit Commits" (den vorherigen Level) bestanden haben, bevor du dich an diesem hier versuchst.',"","Wie du im letzten Level gesehen hast haben wir `git rebase -i` genutzt, um die Commits neu anzuordnen. Sobald der Commit, den wir ändern wollte, ganz oben war, konnten wir das auch einfach mit `git commit --amend` tun. Danach haben wir die alte Reihenfolge wiederhergestellt.","","Das einzige Problem ist hier, dass da eine Menge Umsortieren stattfindet, was zu Rebase-Konflikten führen kann. Schauen wir uns also eine Methode mit `git cherry-pick` an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wie du dich erinnerst macht `git cherry-pick` eine Kopie des angegebenen Commits und fügt sie an `HEAD` an (es sei denn der Commit ist ein Vorgänger von `HEAD`).","","Hier eine kleine Demo zur Erinnerung:"],afterMarkdowns:["Schick! Und weiter geht's."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["In diesem Level geht es also auch um das Ziel den Commit `C2` zu modifizieren, aber ohne `git rebase -i` zu benutzen. Ich überlass es dir herauszufinden, wie das gehen soll. :D","","Nicht vergessen, die genaue Anzahl von Kopien (d.h. Apostrophen) ist nicht ausschlaggebend, nur die Differenz. Der Level ist zum Beispiel auch gelöst, wenn dein fertiger Baum dieselbe Struktur wie der Ziel-Baum hat, aber *überall* ein Apostroph mehr aufweist."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コミットをやりくりする その2","","*注：この一つ前のレベル「コミットをやりくりする」をクリアしていない人は、まずそちらの問題をクリアしてきてください！*","","前回見てきたように、コミット順序の変更のために、私たちは`rebase -i`コマンドを利用しました。ツリーの先頭に変更対象のコミットがあれば、--amendオプションを使うことで容易に変更を書きかえて、元の順序に戻すことができます。","","この場合に心配なことが一つだけあって、それは複数回の順序の変更が行われるので、rebaseのコンフリクト（衝突）が起こりうることです。こういうケースへの対策として、`git cherry-pick`を使った別の解決法について考えてみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pickを使うと、ツリーの中から複数のコミットを選んで、HEADの下に新しく作ることができましたね。","","簡単なデモを見てみましょう："],afterMarkdowns:["できました！次へ進みましょう"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルでは、`C2`をamendすることで前回と同じ目的を達成しましょう。但し`rebase -i`は使わずにクリアしてください。どんな方法で進めるかはあなたにおまかせします！:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 提交的技巧 #2","","*如果你还没有完成“提交的技巧 #1”（前一关）的话，请先通过以后再来！*","","正如你在上一关所见到的，我们可以使用 `rebase -i` 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 `--amend` 修改它，然后把它们重新排成我们想要的顺序。","","但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 `git cherry-pick` 是怎么做的吧。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要在心里牢记 cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上（只要不是 HEAD 上游的提交就没问题）。","","来看看这个例子："],command:"git cherry-pick C2",afterMarkdowns:["看到了吧？我们继续"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["这一关的目标和上一关一样，通过 `--amend` 改变提交记录 `C2`，但你不能用 `rebase -i`。自己想想要怎么解决吧！ :D","","对了，提交记录上面的`'`的数量并不重要，只是引用的不同而已。也就是说如果你的最终结果在某个提交记录上多了个`'`，我也会算你通过的。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## commit 的戲法 #2","","*假如你還沒有完成 commit 的戲法 #1（前面那一個關卡），請先完成之後再來這一關！*","","如你在上一個關卡所看到的，我們使用 `rebase -i` 來重新排列那些 commit。只要把我們想要修改的 commit 移到最前面，我們就可以很容易地重新修改它，然後再把它們重新排成我們想要的順序。","","但唯一的問題就是這樣做就要排很多次，有可能造成 rebase conflict。下面就看看用另外一種方法 `git cherry-pick` 是怎麼做的吧！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要記住喔！ cherry-pick 可以從 commit tree 的任何地方拿一個 commit 來放在 HEAD 上（只要那個 commit 不是 HEAD 的 parent）。","","下面是一個簡單清楚的 demo："],command:"git cherry-pick C2",afterMarkdowns:["太棒了，我們繼續吧！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["在這一關和上一關一樣要去修改一個 commit 叫做`C2`，但你要避免使用 `rebase -i`。自己想想看要怎麼解決吧！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋 갖고 놀기 #2","","*만약 이전 레벨의 커밋 갖고 놀기 #1을 풀지 않으셨다면, 계속하기에 앞서서 꼭 풀어보세요*","","이전 레벨에서 보셨듯이 `rebase -i` 명령으로 커밋의 순서를 바꿀 수 있습니다. 정정할 커밋이 바로 직전(top)에 있으면 간단히 --amend로 수정할 수 있고, 그리고 나서 다시 원하는 순서로 되돌려 놓으면 됩니다.","","이번에 한가지 문제는 순서를 꽤 많이 바꿔야한다는 점인데요, 그러다가 리베이스중에 충돌이 날 수 있습니다. 이번에는 다른 방법인 `git cherry-pick`으로 해결해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pick으로 HEAD에다 어떤 커밋이든 떨어 뜨려 놓을 수 있다고 알려드린것 기억나세요? (단, 그 커밋이 현재 가리키고 있는 커밋이 아니어야합니다)","","간단한 데모로 다시 알려드리겠습니다:"],afterMarkdowns:["좋아요! 계속할게요"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["그럼 이번 레벨에서는 아까와 마찬가지로 `C2` 커밋의 내용을 정정하되, `rebase -i`를 쓰지 말고 해보세요. ^.~"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Жонглируем коммитами №2","","*Перед прохождением этого уровня обязательно надо пройти предыдущий уровень – 'Жонглируем коммитами №1'*","","В прошлом уровне мы использовали `rebase -i`, чтобы переставлять коммиты. Как только нужный нам коммит оказывался в конце, мы могли спокойно изменить его при помощи `--amend` и переставить обратно.","","Единственная проблема тут - это множество перестановок, которые могут спровоцировать конфликты. Посмотрим, как с этой же задачей справится cherry-pick."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Важно помнить, что cherry-pick поместит любой коммит сразу после HEAD (только если этот коммит не является предком HEAD)","","Вот небольшое демо для напоминания:"],afterMarkdowns:["Ок! Едем дальше!"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Итак, в этом уровне нужно достичь того же эффекта, но без использования `rebase -i`. Остальное – по усмотрению.","","Важно, чтобы совпадало не только дерево коммитов, но и количество апострофов."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Жонглюємо комітами #2","","*Якщо ти ще не пройшов Жонглюємо комітами #1 (попередній рівень), будь ласка, зроби це перед тим як продовжити*","","Як ти бачив в попередньому рівні, ми використали `rebase -i` щоб впорядкувати набір комітів. Як тільки потрібний коміт опиняється вгорі, його досить легко змінити за допомогою --amend й потім відсортувати коміти в попередньому порядку.","","Єдина проблема з таким підходом полягає в тому, що виконується досить багато перестановок комітів, що може призвести до конфліктів при виконанні rebase. Спробуймо інший підхід який використовує `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Не забувай, що git cherry-pick вставить коміт з будь-якого місця в HEAD (якщо це не коміт-предок HEAD).","","Ось невелике демо, щоб пригадати:"],afterMarkdowns:["Добре! Продовжуємо"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Отже, в цьому рівні досягнімо тієї ж мети -- модифікації `C2` -- але без використання `rebase -i`. Я думаю, ти розберешся як це зробити! :D","","Зверни увагу, що точне число апострофів (') в коміті не важливе, важлива тільки відносна різниця. Наприклад, якщо кожен коміт буде містити додатковий апостроф, я все одно зарахую такий розв’язок."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tung hứng Commit #2","","*Nếu bạn vẫn chưa hoàn thành Tung hứng Commit #1 (cấp độ trước), hãy làm nó trước khi tiếp tục*","","Như bạn đã thấy ở cấp độ trước, ta dùng `rebase -i` để sắp xếp lại các commit. Một khi commit mà ta muốn sửa đã ở trên cùng, ta có thể dễ dàng --chỉnh sửa(amend) nó và sau đó sắp xếp lại trật tự lúc trước.","","Nhưng mà vẫn tồn tại vấn đề khi mà ta sắp xếp quá nhiều, điều này có thể dẫn đến xung đột khi rebase. Thử dùng cách khác với `git cherry-pick` nào"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy nhớ rằng cherry-pick sẽ thả commit ở bất cứ đâu xuống dưới HEAD (miễn là nó không phải cha ông hay tổ tiên gì của HEAD).","","Hãy xem thử minh họa nhỏ sau:"],afterMarkdowns:["Hay! Tiếp tục nào"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Vậy thì ở cấp độ này, hãy làm hoàn thành mục tiêu tương tự là chỉnh sửa `C2` một lần nhưng hãy tránh dùng `rebase -i`. Tự tìm cách đi nhé! :D","","Nhớ rằng, số lượng dấu nháy dơn (') trên commit không quan trọng, quan trọng là mối tương liên các tham chiếu. Nói cách khác, kể cả bất cứ commit nào của bạn có thêm một đấu(') tôi vẫn công nhận đáp án của bạn"]}}]}}}},{}],124:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":null},"side":{"target":"C3","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C2","C4"],"id":"C5"}},"tags":{"v1":{"target":"C2","id":"v1","type":"tag"},"v0":{"target":"C1","id":"v0","type":"tag"}},"HEAD":{"target":"C2","id":"HEAD"}}',solutionCommand:"git tag v1 side~1;git tag v0 master~2;git checkout v1",startTree:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":null},"side":{"target":"C3","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C2","C4"],"id":"C5"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Git Tags",de_DE:"Git Tags",ja:"Gitのタグ",es_AR:"Tags en git",es_ES:"Tags en git",pt_BR:"Tags no Git",gl:"Etiquetas en git",fr_FR:"Git Tags",zh_CN:"Git Tag",zh_TW:"git tag",ru_RU:"git tag",ko:"Git 태그",uk:"Git Tags",vi:"Tag trong Git"},hint:{en_US:"you can either check out the commit directly or simply checkout the tag!",fr_FR:"Vous pouvez faire le checkout sur le commit ou sur le tag !",de_DE:"Du kannst den Checkout entweder direkt auf den Commit oder das Tag machen.",ja:"コミットを直接チェックアウトできますが、簡単にタグでチェックアウトすることも可能!",es_AR:"Podés checkoutear directamente el commit, ¡o simplemente el tag!",es_ES:"Puedes hacer checkout directamente el commit, ¡o simplemente el tag!",pt_BR:"Você pode fazer checkout diretamente no commit ou na tag correspondente!",gl:"Podes saltar directamente ó commit, ¡ou a etiqueta, que é máis doado!",zh_TW:"你可以直接 checkout 到 commit 上，或是簡單的 checkout 到 tag 上",zh_CN:"你可以直接 checkout 到 commit 上，或是简单地 checkout 到 tag 上",ru_RU:"Можно сделать checkout напрямую на коммит или же на тег",ko:"커밋을 직접 또는 태그를 이용해서 체크아웃할수 있습니다!",uk:"ти можеш або зробити checkout коміта напряму чи просто зачекаутити таг!",vi:"Bạn có thể chuyển trực tiếp sang commit hoặc đơn giản là chuyển sang tag!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","As you have learned from previous lessons, branches are easy to move around and often refer to different commits as work is completed on them. Branches are easily mutated, often temporary, and always changing.","","If that's the case, you may be wondering if there's a way to *permanently* mark historical points in your project's history. For things like major releases and big merges, is there any way to mark these commits with something more permanent than a branch?",""]}},{type:"ModalAlert",options:{markdowns:['You bet there is! Git tags support this exact use case -- they (somewhat) permanently mark certain commits as "milestones" that you can then reference like a branch.',"",'More importantly though, they never move as more commits are created. You can\'t "check out" a tag and then complete work on that tag -- tags exist as anchors in the commit tree that designate certain spots.',"","Let's see what tags look like in practice."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try making a tag at `C1` which is our version 1 prototype"],afterMarkdowns:["There! Quite easy. We named the tag `v1` and referenced the commit `C1` explicitly. If you leave the commit off, git will just use whatever `HEAD` is at"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["For this level just create the tags in the goal visualization and then check `v1` out. Notice how you go into detached `HEAD` state -- this is because you can't commit directly onto the `v1` tag.","","In the next level we'll examine a more interesting use case for tags."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","Comme appris dans les niveaux précédents, les branches sont faciles à manipuler et se réfèrent aux commits qui ont été faits pour compléter le travail fait sur celles-ci. Les branches sont donc constamment en mouvement.","","Dans ce cas, vous vous demandez peut-être s'il y a un moyen d'ajouter une marque *permanente* dans l'historique de votre projet. Pour des commits comme des livraisons majeures ou d'importantes fusions, existe-t-il une façon plus stable qu'une branche de garder l'état d'une branche à un instant précis ?",""]}},{type:"ModalAlert",options:{markdowns:['Vous l\'avez deviné ! Les tags Git offrent cette fonctionnalité : les tags marquent à jamais certains commits comme "milestone" (étape clé) auxquels vous pouvez vous référer comme à des branches.',"","Encore plus important, il sont définitifs. Vous ne pouvez donc pas rajouter de commit dans un tag : les tags sont un peu comme un pointeur définitif dans l'arbre des commits.","","Voyons les tags en pratique."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Essayons de faire un tag sur C1 (qui représente la version 1 de notre prototype)"],afterMarkdowns:["Voila, facile non ? Nous nommons le tag `v1` et il pointe vers le commit `C1`. Si vous ne spécifiez pas le commit, le tag pointera là où se trouve `HEAD`."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour ce niveau, créez simplement les tags visibles dans les objectifs puis faites un checkout sur le tag `v1`. Remarquez comment vous vous retrouvez dans l'état `HEAD` détachée -- c'est parce que vous ne pouvez pas commiter sur le tag `v1`.","","Dans les niveaux suivants vous verrez un cas plus intéressant d'utilisation des tags."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git tag","","就像你之前學到的一樣，branch 很容易被移動，而且當有新的 commit 時，又會再移動，branch 經常指向不同的 commit，branch 很容易改變。","","你可能會有疑問，有沒有什麼方法可以*永遠*有一個指向 commit 的記號，例如，表示重大的軟體釋出，或者是修正很大的 bug，有沒有其它比 branch 更好的方法，可以永遠地指向這些 commit？",""]}},{type:"ModalAlert",options:{markdowns:['你說對了！git tag 可以解決這個問題，它們可以永遠地指向某個特定的 commit，就像是表示一個"里程碑"一樣。',"",'更重要的是，當有新的 commit 時，它們也不會移動，你不可以 "checkout" 到 tag 上面 commit，tag 的存在就像是一個在 commit tree 上的表示特定訊息的一個錨。',"","讓我們來實際看一下 tag 長什麼樣子..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們試著建立一個 tag，指向 commit `C1`，表示這是我們第一個版本。"],afterMarkdowns:["看吧！非常容易，我們命名這個 tag 叫做 `v1`，並且讓它指向 commit `C1`，如果你離開了該 commit，git 會根據 `HEAD` 所指向的位置才分辨。"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["在這個關卡中，建立一個如視覺化目標裡面的 tag，然後 checkout 到 `v1` 上面，要注意你會進到分離 `HEAD` 的狀態，這是因為你不能夠直接在 `v1` 上面做 commit。","","在下個關卡中我們會介紹更多 tag 的應用..."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。","","你可能会问了：有没有什么可以*永远*指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？",""]}},{type:"ModalAlert",options:{markdowns:["当然有了！Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。","","更难得的是，它们并不会随着新的提交而移动。你也不能检出到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。","","咱们来看看标签到底是什么样。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们先建立一个标签，指向提交记录 `C1`，表示这是我们 1.0 版本。"],afterMarkdowns:["很容易吧！我们将这个标签命名为 `v1`，并且明确地让它指向提交记录 `C1`，如果你不指定提交记录，Git 会用 `HEAD` 所指向的位置。"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["在这个关卡中，按照目标建立两个标签，然后检出到 `v1` 上面，要注意你会进到分离 `HEAD` 的状态 —— 这是因为不能直接在`v1` 上面做 commit。","","在下个关卡中我们会介绍更多关于标签的有趣的应用。"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tags en git","","Como aprendiste en lecciones anteriores, las ramas pueden moverse fácilmente, y en general van referenciando distintos commits a medida que el trabajo se va completando en ellas. Las ramas cambian fácilmente, suelen ser temporales, y siempre cambiantes.","","Si ese es el caso, te podrías estar preguntando si hay una manera de marcar *permanentemente* puntos en la historia de tu proyecto. Para cosas como releases mayores o grandes merges, ¿hay algún modo de marcar esos commits con algo más permanente que un branch?",""]}},{type:"ModalAlert",options:{markdowns:['¡Seguro que hay! Los tags de git soportan exactamente este caso de uso -- marcan (bastante) permanentemente determinados commits como "hitos" que podés referenciar como a un branch.',"",'Aún más importante, los tags no avanzan cuando se crean nuevos commits. No podés "checkoutear" un tag y completar el trabajo en ese tag - los tags son marcas fijas en el árbol de commits que designan ciertos puntos.',"","Veamos cómo se ven los tags en práctica..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Creemos un tag en `C1`, que es nuestro prototipo de la versión 1"],afterMarkdowns:["¡Ahí está! Bastante simple. Nombramos al tag `v1` y referenciamos explícitamente al commit `C1`. Si no especificás el commit, git va a usar al apuntado por `HEAD`"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, simplemente creá los tags en la visualización final y después checkouteá `v1`. Notá cómo entrás en el estado detached -- esto es porque no podés commitear directamente sobre el tag `v1`.","","En el próximo nivel vamos a examinar un caso de uso más interesante para los tags."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tags en git","","Como aprendiste en lecciones anteriores, las ramas pueden moverse fácilmente, y en general van referenciando distintos commits a medida que el trabajo se va completando en ellas. Las ramas cambian fácilmente, suelen ser temporales, y siempre cambiantes.","","Si ese es el caso, te podrías estar preguntando si hay una manera de marcar *permanentemente* puntos en la historia de tu proyecto. Para cosas como releases mayores o grandes merges, ¿hay algún modo de marcar esos commits con algo más permanente que un branch?",""]}},{type:"ModalAlert",options:{markdowns:['¡Seguro que hay! Los tags de git soportan exactamente este caso de uso -- marcan (bastante) permanentemente determinados commits como "hitos" que puedes referenciar como a un branch.',"","Aún más importante, los tags no avanzan cuando se crean nuevos commits. No puedes hacer checkout a un tag y completar el trabajo en ese tag - los tags son marcas fijas en el árbol de commits que designan ciertos puntos.","","Veamos cómo se ven los tags en práctica..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Creemos un tag en `C1`, que es nuestro prototipo de la versión 1"],afterMarkdowns:["¡Ahí está! Bastante simple. Nombramos al tag `v1` y referenciamos explícitamente al commit `C1`. Si no especificas el commit, git va a usar al apuntado por `HEAD`"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, simplemente crea los tags en la visualización final y después haz checkout con `v1`. Observa cómo entras en el estado detached -- esto es porque no puedes hacer commit directamente sobre el tag `v1`.","","En el próximo nivel vamos a examinar un caso de uso más interesante para los tags."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tags no Git","","Como você aprendeu nas lições anteriores, ramos são fáceis de mover e geralmente vão se referindo a diferentes commits conforme você vai trabalhando no código. Ramos são facilmente mutáveis, frequentemente temporários, e estão sempre mudando.","","Se este é o caso, você pode estar se perguntando se não existe uma forma de marcar *permanentemente* pontos históricos do projeto. Para coisas como grandes releases ou grandes merges, existe alguma forma de marcar commits com algo mais permanente que um ramo?",""]}},{type:"ModalAlert",options:{markdowns:['Você acertou a aposta, existe sim! As tags do Git foram criadas exatamente para esse caso de uso -- elas marcam de forma (relativamente) permanente certos commits como se fossem "pedras de kilometragem" ("milestones") em uma estrada, e você pode referenciá-las exatamente como faz com ramos.',"",'O mais importante, no entanto, é que elas nunca se movem sozinhas quando novos commits são criados. Você pode fazer "checkout" em uma tag e então completar trabalho nessa tag -- tags existem como âncoras na árvore de commits que estão atreladas a certos pontos.',"","Vejamos como as tags se comportam na prática."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Criemos uma tag em `C1`, que é nosso protótipo da versão 1"],afterMarkdowns:["Aqui! Bem fácil. Nós chamamos a tag de `v1` e referenciamos o commit `C1` explicitamente. Se você chamar o comando sem especificar um commit, o git vai usar seja lá qual commit para o qual o `HEAD` estiver apontando"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:['Para completar esta tarefa, simplesmente crie as tags mostradas na visualização do objetivo, e então faça checkout em `v1`. Veja que você vai para o estado "Detached HEAD" -- isso é devido ao fato de que você não pode commitar diretamente na tag `v1`.',"","No próximo nível, examinaremos mais um caso de uso interessante para as tags."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Etiquetas en Git","","Como aprendiches nas leccións previas, as ramas pódense mover sinxelamente, e xeralmente refírense a distintos commits según vas completando o código. As ramas mutan con facilidade, soen ser temporais, e sempre cambiantes.","","Se estamos nese caso, podes preguntarte se existe unha forma de marcar *permanentemente* puntos históricos no proxecto. Para cousas como grandes entregas ou grandes merges, ¿existe algunha forma de marcar commits con algo máis permanente que unha rama?",""]}},{type:"ModalAlert",options:{markdowns:['Acertaches seguro, ¡si que existe! As etiquetas de git foron creadas para ese propósito -- elas marcan de forma (relativamente) permanente algún commits coma se fosen "marcos das fincas" ("milestones") nun campeiro, e podes facer referencias a elas mellor que o catastro.',"",'É moi importante saber que, as etiquetas non avanzan cando se crean novos commits. Non podes facer "checkout" nun tag e completar o traballo de esa etiqueta cun commit amend ou rebasándoo -- as etiquetas existen como áncoras na árbore de commits que están pegadas a certos puntos.',"","Vexamos como se comportan as etiquetas na práctica."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Creamos un tag na rama `C1`, que é o noso prototipo da versión 1"],afterMarkdowns:["¡Ahí o tes!. Sinxelo. Nomeamos a etiqueta de `v1` e referenciamos o commit `C1` explícitamente. Se non indicas o commit, git vai empregar o commit onde está situado o `HEAD`."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:['Para completar esta tarefa, crea as etiquetas amosadas na visualización do obxectivo, e entón fai checkout en `v1`. Mira que terminas no estado "Detached HEAD" -- eso é porque non podes facer commit directamente na etiqueta `v1`.',"","No próximo nivel, examinaremos un caso de uso máis interesante para as etiquetas."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","Wie du aus den vorhergehenden Levels weißt sind Branches einfach durch die Gegend zu schieben und zeigen auf verschiedene Commits, während die Arbeit in ihnen fortschreitet. Ein Branch wird oft verändert, manchmal nur temporär, und ist ständig in Bewegung.","","Da das so ist fragst du dich vielleicht, ob es nicht eine Möglichkeit gibt, eine bestimmte Stelle in deiner Projekt-History *permanent* zu kennzeichnen. Kann man nicht zum Beispiel für große Releases und Meilensteine nicht einen Commit mit etwas festerem kennzeichnen, als mit einem Branch-Namen?",""]}},{type:"ModalAlert",options:{markdowns:["Aber klar! In Git gibt es genau zu diesem Zweck Tags -- sie kennzeichnen einen Commit (ziemlich) permanent als Meilenstein oder ähnliches, und man kann sie ansprechen wie Branch-Namen.","","Noch viel wichtiger, Tags verändern nicht ihre Position wenn man Commits hinzufügt. Du kannst ein Tag nicht in diesem Sinne auschecken und dann Modifikationen darauf committen. Tags sind Anker im Commit-Baum, die bestimmte Stellen anzeigen.","","Lass uns anschauen wie Tags in der Praxis funktionieren."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lass uns ein Tag bei `C1` anlegen und damit die Version 1 unseres Prototyps markieren."],afterMarkdowns:["Peng! Ziemlich einfach. Wir haben das Tag `v1` genannt und lassen es auf `C1` zeigen. Wenn du den Commit weglässt wird das Tag für den Commit erzeugt, auf den `HEAD` zeigt."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:['Um diesen Level zu schaffen, erstelle einfach die Tags wie sie in der Zielbeschreibung stehen und mach dann einen Checkout auf `v1`. Beachte wie du dabei in den "Detached HEAD" Zustand gehst -- das liegt daran, dass du keine Commits direkt auf das `v1` Tag machen kannst.',"","Im nächsten Level schauen wir uns dann interessantere Anwendungsfälle für Tags an."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのタグ","","私たちは、前回、ブランチが簡単に移動でき、またしばしば異なる作業の完了しているコミットを参照できることを学びました。ブランチは、簡単に変化させることができ、しばしば一時的で、いつも移動しています。","","そのような場合に、もしプロジェクトの歴史的な点に*恒久的*にマークをつける方法があったならと思うかもしれません。例えば、メジャーリリースや大きなマージを行った時などに、そのコミットにブランチより恒久的な印をつける方法はないのでしょうか？",""]}},{type:"ModalAlert",options:{markdowns:["それは存在します！Gitのタグは当にそのような場面で最適です。 -- ブランチのように参照でき、「マイルストーン（標識）」のような確かで（多少）永久的な印をコミットにつけます。","","重要なことは、コミットを新たに作ってもタグは動かないということです。あなたは、タグにチェックアウトしてそのタグで作業を完了させるということはできません -- タグは、コミットツリーの特定の地点を指定する錨のようなものとして機能します。","","では、実際にタグがどのように動作するかを見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["私たちのバージョン1の原本となる`C1`にタグを付けてみましょう"],afterMarkdowns:["見てください！とても簡単ですね。私たちは、`v1`という名前のタグを明示的に`C1`コミットに付与しました。もし、コミットを指定しなかった場合、`HEAD`にあるものにタグがつけられることになります。"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルは、ゴールとして提示されている図のようにタグを作り、`v1`にチェックアウトすることで完了します。そうすると、あなたは`HEAD`分離状態になることに気づくでしょう -- これは、あなたが直接`v1`タグにコミットができないことを意味しています。","","次のレベルでは、タグのより興味深い使い方について学びます。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Теги","","В прошлых уроках мы усвоили, что ветки просто двигать туда-сюда и они часто ссылаются на разные коммиты как на изменения данных в ветке. Ветки просто изменить, они часто временны и постоянно меняют своё состояние.","","В таком случае, где взять *постоянную* ссылку на момент в истории изменений? Для таких вещей, как релиз, большие слияния нужно нечто более постоянное, чем ветка.",""]}},{type:"ModalAlert",options:{markdowns:["Такое средство имеется. Git предоставляет нам теги, чья основная задача – ссылаться постоянно на конкретный коммит.","","Важно, что после создания они никогда не сменят своего положения, так что можно с лёгкостью сделать checkout конкретного момента в истории изменений","","Посмотрим на это на практике."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Создадим тег на `C1`, который будет нашей версией 1"],afterMarkdowns:["Готово! Всё просто. Мы назвали тег `v1` и заставили его ссылаться на `C1` явным образом. Если конкретный коммит не указан, гит пометит тегом `HEAD`"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, просто создай теги так, как показано на визуализации, и потом перейди на тег `v1`. Обрати внимание, что ты перейдёшь в состояние `detached HEAD`, так как нельзя сделать коммит прямо в тег `v1`.","","В следующем уровне мы попробуем более интересные способы применения тегов."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 태그","","이전 강의에서 배웠듯이, 브랜치는 이동하기 쉽습니다. 작업의 완료, 진행에따라 이리저리 이동하면서 서로다른 커밋을 참조하게 됩니다. 브랜치는 쉽게 변하며 임시적인 것입니다 항상 바뀌고 있죠.","","이런 상황에서, 여러분은 여러분의 프로젝트의 역사(작업 이력)에서 중요한 지점들에 *영구적으로* 표시를 할 방법이 없을까 궁금할것입니다. 주요 릴리즈나 큰 브랜치 병합(merge)이 있을때가 그런 상황이겠군요. 이런 상황에 커밋들을 표시할 브랜치보다 영구적인 방법이 있을까요?",""]}},{type:"ModalAlert",options:{markdowns:['당연히 있습니다! Git 태그는 딱 이런 상황을 위해 존재합니다 -- Git 태그는 특정 커밋들을 브랜치로 참조하듯이 영구적인 "milestone(이정표)"으로 표시합니다.',"",'중요한 점은, Git 태그는 커밋들이 추가적으로 생성되어도 절대 움직이지 않는다는 것입니다. 여러분은 태그를 "체크아웃"한 후에 그 태그에서 어떤 작업을 완료할 수 없습니다 -- 태그는 커밋 트리에서 특정 지점을 표시하기위한 닻같은 역할을 합니다.',"","자 태그가 무엇을 하는지 예제를 통해 알아봅시다"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:[" 프로토타입의 첫 버전인 `C1`에 태그를 만들어 봅시다."],afterMarkdowns:["자! 아주 쉽죠. 우리는 태그의 이름을 `v1`이라고 지었고 커밋 `C1`을 지정해서 참조했습니다. 만약 커밋을 지정해주지 않으면 git은 `HEAD`가 있는지점에 태그를 붙일 것입니다."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["이번 레벨에서는 goal에 나타난것과 같이 태그를 만들고 `v1`을 체크아웃하면 됩니다. 분리된 `HEAD` 상태로 변하는것을 확인 해 보십시오 -- 이것은 `v1` 태그에 직접 커밋을 할 수 없기 때문입니다.","","다음 레벨에서는 태그의 더 흥미로운 활용 방법을 확인해 볼 것입니다."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Таги в Git","","Як ти вже знаєш з попередніх уроків, гілки досить просто переносити в інші місця, і вони постійно вказують на різні коміти в процесі того? як ті в них додаються. Гілки легко модифікувати, часто тимчасово, й вони постійно змінюються.","","В такому разі, де взяти *постійне* посилання на момент в історії твого проекту? Для таких речей як релізи чи великі мерджі потрібно щось більш стале ніж гілка.",""]}},{type:"ModalAlert",options:{markdowns:['Є один спосіб! Таги в гіт якраз для цього й були створені -- вони (більш-менш) постійно вказують на певні коміти, й відмічають певні "віхи" в житті проекту, на які ти можеш потім посилатись так само як на гілки.',"",'Але, що важливіше, вони ніколи не переміщуються під час створення нових комітів. Ти не зможеш  "зачекаутити" таг а потім закомітити якісь зміни в цей таг -- таги просто відмічають корисні чи символічні місця в дереві комітів.',"","Розгляньмо це на практиці"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Спробуймо зробити новий таг на  `C1`, що є прототипом нашої першої версії (вигаданого проекту)"],afterMarkdowns:["Ось і маєш! Все досить просто. Ми назвали наш таг `v1` і він явно посилається на `C1`. Якщо пропустити коміт, git просто відмітить те, на чому знаходиться `HEAD` в данний момент"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Для того щоб пройти цей рівень, достатньо створити кілька тагів, як показано на візуалізації цілей, і потім зачекаутити `v1`. Зауваж, що ти потрапиш в стан `detached HEAD` -- це тому що ти не можеш напряму комітити в таг `v1`.","","В наступному рівні ми розглянемо більш цікавий приклад роботи з тагами."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tag trong Git","","Qua các bài học trước, bạn đã biết được rằng rất dễ dàng để di chuyển qua lại giữa các nhánh và chúng thường tham chiếu đến các commit khác nhau trong quá trình ta làm việc trên chúng. Nhánh thường dễ biết đổi, thường chỉ là tạm thời và chúng luôn như vậy.","","Nếu như vậy thì bạn có thể sẽ thắc mắc liệu có cách nào để đánh dấu *vĩnh viễn* một thời điểm nào đó trong lịch sử làm việc không? Khi mà dự án càng ngày càng mở rộng và merge thì diễn ra liên tục, vậy thì có cách nào để đánh dấu những commit đó một cách cố định hơn nhánh không?",""]}},{type:"ModalAlert",options:{markdowns:['Tất nhiên là có chứ! Git có các tag(thẻ) để hỗ trợ vấn đề này -- chúng (bằng cách nào đó) đánh dấu vĩnh viễn một commit cụ thể nào đó như một "cột mốc" mà sau đó bạn có thể tham chiếu đến như với nhánh.',"",'Quan trọng hơn là, khi ta commit thì chúng không hề bị di chuyển. Bạn không thể "check out" một tag rồi làm việc trên đó -- tag giống như là mỏ neo để chỉ định một điểm cụ thể nào dó trên cây lịch sử.',"","Cùng xem tag thực tế là như thế nào nào."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy thử tạo một thẻ ở commit `C1` chỉ định rằng đây là phiên bản thứ nhất của ta"],afterMarkdowns:["Đó! Đơn giản như đan rổ. Ta tạo ra thẻ `v1` và tham chiếu đến commit `C1`. Nếu bạn không chỉ định commit, git sẽ gắn thẻ vào commit mà `HEAD` đang trỏ tới"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Trong cấp độ này hãy tạo ra một thẻ tại vị trí chỉ định và chuyển sang `v1`. Để ý rằng bạn sẽ chuyến sang trạng thái tách biệt `HEAD` -- bởi vì bạn không thể tham chiếu đến thẻ `v1`.","","Sang cấp độ tới ta sẽ xem xét một vài cách hay ho để dùng thẻ."]}}]}}}},{}],125:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git cherry-pick C3 C4 C7",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git rebase":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C5","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C1"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{fr_FR:"Introduction à cherry-pick",en_US:"Cherry-pick Intro",de_DE:"Einführung Cherry-picking",ja:"cherry-pick入門",es_AR:"Introducción a cherry-pick",es_ES:"Introducción a cherry-pick",pt_BR:"Introdução ao cherry-pick",gl:"Introuducción a cherry-pick",zh_CN:"Git Cherry-pick",zh_TW:"介紹 cherry-pick",ru_RU:"Введение в Cherry-pick",ko:"Cherry-pick 소개",uk:"Знайомство з cherry-pick",vi:"Giới thiệu về cherry-pick"},hint:{fr_FR:"git cherry-pick suivi par les noms de commits",en_US:"git cherry-pick followed by commit names!",de_DE:"git cherry-pick gefolgt von Commit-Namen.",ja:"git cherry-pickの後にコミット名を追加",es_AR:"git cherry-pick seguido de los nombres de los commits",es_ES:"git cherry-pick seguido de los nombres de los commits",pt_BR:"git cherry-pick seguido dos nomes dos commits",gl:"git cherry-pick seguido das referencias a commits",zh_CN:"git cherry-pick 后面要跟提交的名字",zh_TW:"git cherry-pick 後面要接著 commit 的名稱",ru_RU:"git cherry-pick основывается на именах коммитов!",ko:"커밋의 이름들로 git cherry-pick 하세요!",uk:"git cherry-pick базується на іменах комітів!",vi:"git cherry-pick sau đó là tên commit!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving Work Around","","So far we've covered the basics of git -- committing, branching, and moving around in the source tree. Just these concepts are enough to leverage 90% of the power of git repositories and cover the main needs of developers.","",'That remaining 10%, however, can be quite useful during complex workflows (or when you\'ve gotten yourself into a bind). The next concept we\'re going to cover is "moving work around" -- in other words, it\'s a way for developers to say "I want this work here and that work there" in precise, eloquent, flexible ways.',"","This may seem like a lot, but it's a simple concept."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","The first command in this series is called `git cherry-pick`. It takes on the following form:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","It's a very straightforward way of saying that you would like to copy a series of commits below your current location (`HEAD`). I personally love `cherry-pick` because there is very little magic involved and it's easy to understand.","","Let's see a demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here's a repository where we have some work in branch `side` that we want to copy to `master`. This could be accomplished through a rebase (which we have already learned), but let's see how cherry-pick performs."],afterMarkdowns:["That's it! We wanted commits `C2` and `C4` and git plopped them down right below us. Simple as that!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["To complete this level, simply copy some work from the three branches shown into master. You can see which commits we want by looking at the goal visualization.",""]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Déplacer votre travail","","Nous avons maintenant pratiqué les bases de git -- commits, branches, et déplacements dans l'arbre des commits. Ces seuls concepts sont suffisants pour utiliser 90% du pouvoir des dépôts git et satisfaire les principaux besoins des développeurs.","",'Les 10% restants, cependant, peuvent être assez utiles pour les systèmes assez complexes (ou quand vous vous êtes mis tout seul dans le pétrin). Le prochain concept que nous allons aborder est "le déplacement de travail" (moving work around) -- en d\'autres termes, c\'est une façon pour les développeurs de dire  "Je veux ce travail ici et cet autre là.".',"","Cela peut sembler compliqué, mais c'est un concept simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","La première commande de cette série est `git cherry-pick`. Elle a le prototype suivant :","","* `git cherry-pick <Commit1> <Commit2> <...>`","","C'est une manière simple de dire qu'on voudrait copier une série de commits en-dessous de notre emplacement actuel (`HEAD`). Personnellement, j'adore `cherry-pick` parce qu'il y a un petit peu de magie dedans, et parce que c'est facile à comprendre.","","Faisons une démonstration !",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici le dépôt que nous avons contient du travail dans la branche `side`, que nous voulons copier dans `master`. Cela pourrait être fait avec un rebase (que nous avons déjà appris), mais voyons comment cherry-pick fonctionne."],afterMarkdowns:["Voilà ! Nous voulions les commits `C2` et `C4` et git les a fait apparaître juste sous nos jambes. Aussi simple que ça !"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, copiez simplement le travail désigné dans la branche master. Vous pouvez voir les commits que nous souhaitons avoir en regardant dans la fenêtre d'objectif.",""]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviendo el trabajo por ahí","","Hasta ahora cubrimos lo básico de git -- commitear, branchear, y movernos por el árbol de commits. Estos conceptos alcanzan para aprovechar el 90% del poder de los repositorios de git y cubrir las necesidades principales de los desarrolladores.","",'El 10% restante, sin embargo, puede ser bastante útil en flujos de trabajo complejos (o cuando te metiste en algún problema complicado). El próximo concepto que vamos a cubrir es el de "mover el trabajo por ahí" -- en otras palabras, una forma que tienen los desarrolladores de decir "Quiero este trabajo allá y este otro allá" de una manera precisa, elocuente y flexible.',"","Puede parecer un montón, pero es un concepto bastante simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","El primer comando en esta serie se llama `git cherry-pick`. Tiene la siguiente forma:",""," `git cherry-pick <Commit1> <Commit2> <...>`","","Es una manera bastante directa de decir que querés copiar una serie de commits sobre tu ubicación actual (`HEAD`). Personalmente amo `cherry-pick` porque hay muy poca magia involucrada y es bastante simple de entender.","","¡Veamos una demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos un repositorio con algo de trabajo en la rama `side` que queremos copiar a `master`. Podríamos lograrlo con un rebase (y ya aprendimos cómo), pero veamos cómo se comporta cherry-pick."],afterMarkdowns:["¡Eso es todo! Queríamos los commits `C2` y `C4` y git los aplicó justo donde estábamos. ¡Tan simple como eso!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente copiá algo de trabajo desde otras tres ramas a master. Podés ver qué commits queremos en la visualización del objetivo.",""]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviendo el trabajo por ahí","","Hasta ahora cubrimos lo básico de git -- hacer commits, crear ramas, y movernos por el árbol de commits. Estos conceptos alcanzan para aprovechar el 90% del poder de los repositorios de git y cubrir las necesidades principales de los desarrolladores.","",'El 10% restante, sin embargo, puede ser bastante útil en flujos de trabajo complejos (o cuando te metiste en algún problema complicado). El próximo concepto que vamos a cubrir es el de "mover el trabajo por ahí" -- en otras palabras, una forma que tienen los desarrolladores de decir "Quiero este trabajo aquí y este otro allí" de una manera precisa, elocuente y flexible.',"","Puede parecer un montón, pero es un concepto bastante simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","El primer comando en esta serie se llama `git cherry-pick`. Tiene la siguiente forma:",""," `git cherry-pick <Commit1> <Commit2> <...>`","","Es una manera bastante directa de decir que quieres copiar una serie de commits sobre tu ubicación actual (`HEAD`). Personalmente amo `cherry-pick` porque hay muy poca magia involucrada y es bastante simple de entender.","","¡Veamos una demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["A continuación tenemos un repositorio con algo de trabajo en la rama `side` que queremos copiar a `master`. Podríamos lograrlo con un rebase (y ya aprendimos cómo), pero veamos cómo se comporta cherry-pick."],afterMarkdowns:["¡Eso es todo! Queríamos los commits `C2` y `C4` y git los aplicó justo donde estábamos. ¡Tan simple como eso!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente copia algo de trabajo desde otras tres ramas a master. Puedes ver qué commits queremos en la visualización del objetivo.",""]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo o trabalho por aí","","Por enquanto nós abordamos o básico do Git -- commitar, criar ramos, e mover-se pela árvore. Apenas esses conceitos já são suficientes para utilizar 90% do poder dos repositórios Git, e cobrem as principais necessidades dos desenvolvedores.","",'Os 10% restantes, entretanto, podem ser extremamente úteis em fluxos de trabalho complexos (ou quando você estiver em uma enrascada). O próximo conceito que vamos abordar é "movendo trabalho por aí" -- em outras palavras, veremos as formas como o desenvolvedor pode dizer "eu quero este trabalho aqui, e aquele ali" de formas precisas, eloquentes e flexíveis.',"","Isso pode parecer muito, mas os conceitos são simples."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","O primeiro comando desta série é o `git cherry-pick`. Ele é chamado da seguinte forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Trata-se de uma forma bastante direta de dizer que você gostaria de copiar uma série de commits abaixo do seu local atual (`HEAD`). Eu pessoalmente amo o  `cherry-pick` porque há muito pouca mágica envolvida e é fácil de entender o funcionamento.","","Vejamos uma demonstração!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui está um repositório onde temos algum trabalho no ramo `side` que desejamos copiar para o `master`. Isso poderia ser obtido por meio de um rebase (que já aprendemos), mas vamos ver como o cherry-pick se sai."],afterMarkdowns:["É isso! Queríamos os commits `C2` e `C4` e o git os inseriu logo abaixo de nós. Simples assim!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente copie algum trabalho dos outros três ramos para o master. Você pode ver quais commits queremos copiar na visualização do objetivo.",""]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo traballo por ahí","","Ata agora cubrimos o uso básico de git -- facer commit, crear ramas, e moverse pola árbore. Estes conceptos chegan para aproveitar o 90% do poder dos repositorios de git e cubrilas necesidades principais dos desenvolvedores.","",'O 10% restante, ademáis, poden ser extremadamente útiles nos fluxos de traballo complexos (ou cando te meteches nalgún problema complicado). O próximo concepto que imos abordar é "movendo o traballo por ahí" -- noutras verbas, unha forma que teñen os desenvolvedores de dicir "eu quero este traballo aquí, e aquel alí" de forma precisa, elocuente e flexible.',"","Eso pode ser moito, pero os conceptos son simples."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","O primeiro comando desta serie é `git cherry-pick`. O comando emprégase da seguinte forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Trátase dunha forma bastante directa de dicir que queres copiar unha serie de commits sobre a túa ubicación actual (`HEAD`). Eu persoalmente adoro `cherry-pick` porque hai moita maxia envolta e é  un funcionamento sinxelo de entender.","","Vexamos unha demostración!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí está un repositorio onde hai algún traballo na rama `side` que desexamos copiar para a rama `master`. Iso podería ser obtido por medio dun rebase (que xa aprendemos), pero imos ver como o resolve cherry-pick."],afterMarkdowns:["¡Eso é! Queríamos os commits `C2` e `C4` e git insertounos por baixo de nós. ¡Moi sinxelo!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, copia algo de traballo das outras ramas na master. Podes ver qué commits queremos copiar na visualización do obxectivo.",""]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["移動 commit","","目前為止我們已經講了 git 的基礎，這些基礎包括 commit、branch 以及在 commit tree 中移動，只要有這些概念你就能發揮 git 90% 的功力，而且對於程式設計師來說，這樣就很夠了。","",'而剩下的 10%，在很複雜的專案上面，是非常有用的（或者當你陷入困惑時），我們下一個要講的概念是 "移動 commit"，換句話說，當你會這個非常有彈性的招數之後，你就可以說"我想要把這個 commit 放這裡，而那個 commit 放在那裡"。',"","這看起來很複雜，但其實它很簡單。"]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","我們要講的第一個指令叫作 `git cherry-pick`，它的用法如下：","","* `git cherry-pick <Commit1> <Commit2> <...>`","","當你想要複製幾個 commit 並且接在你目前的位置（`HEAD`）下面的時候，這會是一個非常直接的方式。我個人非常喜歡用 `cherry-pick`，因為它並不複雜，很容易就可以了解。","","讓我們來看一個例子！",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡有一個 repo，在 `side` branch 中，我們有一些 commit 想要複製到 `master` branch 上，這可以透過一個 rebase 來完成（我們之前已經學到了），但是讓我們看看 `git cherry-pick` 怎麼做。"],afterMarkdowns:["就是那樣！我們複製了 `C2` 以及 `C4` 並且把它們放到我們的後面，很簡單吧！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只需要從三個 branch 複製幾個 commit 到 `master` 下面，你可以從視覺化的目標看到我們需要哪些 commit。",""]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 整理提交记录","","到现在我们已经学习了 Git 的基础知识 —— 提交、分支以及在提交树上移动。 这些概念涵盖了 Git 90% 的功能，同样也足够满足开发者的日常需求 ","","然而, 剩余的 10% 在处理复杂的工作流时(或者当你陷入困惑时）可能就显得尤为重要了。接下来要讨论的这个话题是“整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。","","看起来挺复杂, 其实是个很简单的概念。"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","本系列的第一个命令是 `git cherry-pick`, 命令形式为: ","","* `git cherry-pick <提交号>...`","","如果你想将一些提交复制到当前所在的位置（`HEAD`）下面的话， Cherry-pick 是最直接的方式了。我个人非常喜欢 `cherry-pick`，因为它特别简单。","","咱们还是通过例子来看一下！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里有一个仓库, 我们想将 `side` 分支上的工作复制到 `master` 分支，你立刻想到了之前学过的 `rebase` 了吧？但是咱们还是看看 `cherry-pick` 有什么本领吧。"],afterMarkdowns:["这就是了！我们只需要提交记录 `C2` 和 `C4`，所以 Git 就将被它们抓过来放到当前分支下了。 就是这么简单!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["要通过此关, 只需要简单的将三个分支中的提交记录复制到 master 上就可以了。目标窗口展示了我们想要哪些提交记录，如果你不小心关掉了的话，通过 `show goal` 命令可以打开，左上角也有“显示目标按钮”",""]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Inhalte verschieben","","Bis jetzt haben wir uns die Grundlagen von Git angeschaut -- comitten, verzweigen und sich im Commit-Baum bewegen. Nur damit lässt sich schon 90% der Macht von Git-Repositories nutzen und die meisten Anforderungen von Entwicklern erfüllen.","",'Die übrigen 10% jedoch können in komplexeren Abläufen sehr hilfreich sein (oder wenn man sich in eine schwierige Lage manövriert hat). Das nächste was wir uns anschauen, ist, Inhalte durch den Commit-Baum zu schieben. Es gibt dem Entwickler die Möglichkeit in präziser, eloquenter Manier zu sagen "Ich will diese Inhalte hier und diese dort haben".',"","Das klingt vielleicht nach einer Menge, aber es ist sehr einfach."]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","Der erste Befehl in dieser Serie ist `git cherry-pick`. Er sieht so aus:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Er ist eine einfache Möglichkeit um auszudrücken, dass du eine Folge von Commits unter deinen aktuellen Checkout (also `HEAD`) hängen möchtest. Ich persönlich liebe `cherry-pick`, weil es wenig Magic enthält und einfach zu verstehen ist.","","Schauen wir's uns mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein Repository mit einigem Zeugs im Branch `side`, das wir in den Branch `master` kopieren wollen. Das könnten wir mit einem Rebase machen (wie bereits gesehen), aber schauen wir mal wie das mit `cherry-pick` geht."],afterMarkdowns:["Das war's! Wir wollten die commits `C2` und `C4` und Git hat die einfach unter unseren aktuellen Checkout kopiert. So einfach ist das."],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur einige Commits aus den drei gezeigten Branches in den `master` kopieren. Der Zielbaum zeigt dir, welche.",""]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コードの移動","","今まででは、gitの基本をひたすら見てきました -- コミットしたりブランチを派生したり、そしてソースツリーの中の色々な場所に移動することなどです。これらの概念だけで、gitリポジトリの力を90%使いこなすことができ、開発者の主な需要を満たしています。","","しかし最後の10%はより複雑なワークフローやちょっとトラブった時にとても役にたちます。これから取り上げる次の課題は「作業内容の移動」 –- 詳しく言えば、「この作業はここに置き、その作業はそこに置きたい」と言う開発者のために、優しく具体的で正確にその方法をお教えしましょう。","","ちょっと複雑に聞こえるかもしれませんが、概念は簡単です。"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","このシリーズの一つ目のコマンドは、`git cherry-pick`。このコマンドの使い方は、次の形になります:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","現在の位置(`HEAD`)の下に一連のコミットをコピーしたいという意を単純に表す方法です。分かりにくいところが少ないので、個人的に私がとても好きなコマンドです。","","デモを見ていきましょう!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["このリポジトリには、現在`side`ブランチから`master`にコピーしたいコードがあります。この前に学んだrebaseコマンドでも実現可能ですが、ここではcherry-pickの動作を見ていきましょう。"],afterMarkdowns:["これだけで終わりです！コミット`C2` と `C4`を取得したかったわけですが、gitが現在の位置の直下に落としてくれました。単純ですね！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、３つのブランチからmasterにコードをコピーしてください。どのコミットを取得するかについてはゴールのツリーをみてください。",""]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Поперемещаем изменения","","Итак, мы уже освоили основы Git: коммиты, ветки, перемещение по дереву изменений. Уже этих знаний достаточно, чтобы овладеть 90% мощью Git-репозиториев и покрыть нужды разработчиков.","",'А оставшиеся 10% будут очень полезны при сложных workflow (или если ты попал в сложную ситуацию). Теперь речь пойдёт о перемещении изменений — возможности, позволяющей разработчику сказать "Хочу, чтобы эти изменения были вот тут, а вот эти — вон там" и получить точные, правильные результаты, не теряя при этом гибкости разработки.',"","На первый взгляд запутанно, но на самом деле всё просто."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Первая из таких команд - это `git cherry-pick`. Она выглядит вот так:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Это очень простой и прямолинейный способ сказать, что ты хочешь копировать несколько коммитов на место, где сейчас находишься (`HEAD`). Мы обожаем `cherry-pick` за то, что в нём очень мало магии и его очень просто понять и применять.","","Посмотрим на демонстрацию.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Вот репозиторий, где есть некие изменения в ветке `side`, которые мы хотим применить и в ветку `master`. Мы можем сделать это при помощи команды rebase, которую мы уже прошли, но давай посмотрим, как cherry-pick справится с этой задачей."],afterMarkdowns:["Вуаля! Мы хотели перенести коммиты `C2` и `C4`, Git дал нам их там, где они нужны. Всё просто!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, просто скопируй изменения из этих трёх веток в мастер. Чтобы понять, какие коммиты копировать, посмотри на визуализацию уровня.",""]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 작업을 여기저기로 옮기기","","지금까지 우리는 git의 기초를 배웠습니다. -- 커밋을하고, 브랜치를 만들고, 소스 트리 여기저기를 돌아다녔습니다. 이런 개념들을 아는 것만으로도 git repository의 힘을 90%이상 사용하고 개발자들이 필요로하는 작업의 대부분을 할 수 있습니다.","",'그 나머지 10% 기능이, 복잡한 작업(또는 작업중 막혔을때)중에 꽤 유용할 수 있습니다. 이제 배워 볼 다음 개념은 "작업을 여기저로 올기기" 다시 말해, 개발자들의 언어로 "이 일은 여기에 저 일은 저기에 두고 싶어" 정확하고 우아하고 유연하게.',"","다소 과해 보일 수 있는데, 간단한 개념입니다."]}},{type:"ModalAlert",options:{markdowns:["## Git 체리-픽 (Cherry-pick)","","이 시리즈의 첫 명령어는 `git cherry-pick` 입니다. 다음 과 같은 형태로 사용합니다:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","현재 위치(`HEAD`) 아래에 있는 일련의 커밋들에대한 복사본을 만들겠다는 것을 간단히 줄인 말입니다. 개인적으로 저는 `cherry-pick`을 아주 좋아합니다 왜냐하면 조금의 마법이 첨가되있고 이해하기 쉽기 때문입니다.","","데모를 확인해봅시다",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 repository가 있습니다. `master`와 master로 복사하고 싶은 작업이 있는 브랜치 `side`가 있습니다. 이것은 rebase를 통해서 할 수 있습니다(이미 배운), 하지만 체리-픽이 이 작업을 어떻게 수행하는지 확인해 봅시다."],afterMarkdowns:["됬습니다! 우리는 `C2`와 `C4` 커밋을 원했고 git이 우리가 원하는 곳 바로 밑에 톡 떨어뜨려 줬습니다. 아주 간단하죠!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하기 위해서는 몇개의 작업을 세개의 브랜치들에서 master로 복사해와야합니다. 어떤 커밋들이 필요한지는 goal을 보고 확인하면 됩니다.",""]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Переміщуємо зміни","","Поки що ми розглядали основи git -- як працювати з комітами та гілками й переміщення по дереву комітів. Цього вже достатньо щоб використовувати 90% фунцкій гіт та мати змогу ефективно працювати з гіт як розробник.","",'Решта 10%, тим не менш, можуть бути надзвичайно корисними при роботі зі складними робочими процесами (workflow), чи коли ти чи ще хтось щось зробили не так і ти хочеш це виправити. Наступна концепція з якою ми познайомимось це "перенесення змін" -- іншими словами, це можливість розробника переміщувати коміти між гілками в простий та зручний спосіб.',"","Це може видаватися складним, але насправді це дуже проста концепція."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Перша команда в цій серії називається `git cherry-pick`. Вона має наступну форму:","","* `git cherry-pick <Коміт1> <Коміт2> <...>`","","Це надзвичайно простий спосіб вказати гіту що потрібно скопіювати серію комітів до поточного розташування (`HEAD`). Персонально я обожнюю `cherry-pick` за його прямолінійнсть, це дуже зрозуміла концепція що не використовує прихованої магії","","Давайте подивимось на практиці!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ми бачимо репозиторій де є певні зміни в гілці `side` які ми хочемо скопіювати в  `master`. Для цього можна використати rebase (який ми вже вивчили), але подивимось як з цим впорається cherry-pick."],afterMarkdowns:["Овва! Ми хотіли коміти `C2` та `C4` і git додав їх до поточного розташування. Просто й доступно!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти це рівень, просто скопіюй якісь зміни з трьох гілок показаних на діаграмі в master. В візуалізації видно які коміти потрібно скопіювати.",""]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mang đi kéo về","","Cho đến giờ thì ta đã nắm được cơ bản về git -- commit, rẽ nhánh, và dịch chuyển qua lại trên cây mã nguồn. Chừng ấy khái niệm là đã đủ để tác động đến 90% sức mạnh của kho chứa git và các chức nawmg cần thiết cho nhà phát triển phần mềm.","",'Tuy nhiên 10% còn lại thì lại khá hữu ích trong các quy trình làm việc phức tạp (hoặc khi bạn vướng phải tình huống khó khăn). The next concept we\'re going to cover is "chỉnh lý các bản ghi" -- đó là cách để nhà phát triển nói rằng"Tôi muốn lấy bản ghi ở đây và cả bản ghi ở đó" một cách chính xác, linh hoạt và sống động.',"","Nghe thì có vẻ phức tạp, nhưng thực ra khái niệm này khá đơn giản."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","Lệnh đầu tiên của loạt bài này là `git cherry-pick`, dạng lệnh là::","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Đó là cách rất trực tiếp để copy một loạt commit xuống dưới vị trí hiện tại của bạn (`HEAD`). Cá nhân tôi thì rất thích `cherry-pick` bởi tính tiện dụng và dễ hiểu của nó.","","Hãy xem qua một ví dụ!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ở đây ta có một kho chứa mà ta muốn sao chép thành quả công việc từ nhánh `side` sang nhánh `master`. Có thể dùng rebase để làm việc này (kỹ thuật mà ta đã học), nhưng hãy xem thử cherry-pick làm điều này ra sao."],afterMarkdowns:["Thế thôi! Chúng ta chỉ cần các commit `C2` và` C4`, vì vậy Git sẽ lấy chúng và đặt chúng dưới nhánh hiện tại. Thật đơn giản!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, hãy copy thành quả công việc từ 3 nhánh khác vào master. Bạn có thể nhìn vào mô tả mục tiêu để biết chúng ta cần những commit nào.",""]}}]}}}},{}],126:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"}}',solutionCommand:"git checkout C4",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{en_US:"Detach yo' HEAD",es_AR:"Desatacheá tu HEAD",es_ES:"Desatachea tu HEAD",pt_BR:"Solte a sua cabeça",gl:"Abandona o teu HEAD",fr_FR:"Détacher votre HEAD",zh_CN:"分离 HEAD",zh_TW:"分離 HEAD",de_DE:"Den Kopf abtrennen",ja:"HEADの分離",ru_RU:"Теряем голову, или detached HEAD",ko:"HEAD 분리하기",uk:"Втрачаємо голову чи detached HEAD",vi:"Tháo đầu cái nào"},hint:{en_US:"Use the label (hash) on the commit for help!",es_AR:"¡Usá la etiqueta (hash) sobre el commit para ayudarte!",es_ES:"¡Usa la etiqueta (hash) sobre el commit para ayudarte!",pt_BR:"Use o identificador (hash) sobre o commit para te ajudar!",gl:"¡Usa a etiqueta (hash) sobre o commit para axudarte!",de_DE:"Benutze den Bezeichner (den Hash) des Commits.",ja:"コミットのラベル（hash）を使用",fr_FR:"Utilisez le label (identifiant) du commit pour aider !",zh_TW:"使用 commit 上的標籤（hash）來幫助你！",zh_CN:"使用提交记录上的标签（哈希值）来指定提交记录！",ru_RU:"Ориентируйся по идентификаторам (hash) коммитов.",ko:"커밋에 있는 라벨(hash)을 활용하세요!",uk:"Орієнтуйся по індентифікаторам (hash) комітів.",vi:"Dùng mã băm (hash) của commit để hoàn thành!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving around in Git","","Before we get to some of the more advanced features of Git, it's important to understand different ways to move through the commit tree that represents your project.","","Once you're comfortable moving around, your powers with other git commands will be amplified!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","First we have to talk about \"HEAD\". HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.","","HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes to the working tree will start by changing HEAD.","","Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is visible through HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this in action. Here we will reveal HEAD before and after a commit."],afterMarkdowns:["See! HEAD was hiding underneath our `master` branch all along."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detaching HEAD","","Detaching HEAD just means attaching it to a commit instead of a branch. This is what it looks like beforehand:","","HEAD -> master -> C1",""],afterMarkdowns:["And now it's","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To complete this level, let's detach HEAD from `bugFix` and attach it to the commit instead.","","Specify this commit by its hash. The hash for each commit is displayed on the circle that represents the commit."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviéndose por ahí con Git","","Antes de meternos en algunas de las funcionalidades más avanzadas de git, es importante entender las distintas maneras de moverse por el árbol de commits que representa tu proyecto.","","Una vez que estés cómodo moviendote por ahí, tus poderes con los otros comandos de git ¡van a amplificarse!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Primero tenemos que hablar de "HEAD". HEAD es el nombre simbólico del commit actualmente checkouteado -- es, básicamente, el commit sobre el que estás trabajando.',"","HEAD siempre apunta al commit más reciente, reflejado en el árbol de commits. La mayoría de los comandos de git que hacen cambios al árbol de commits empiezan modificando HEAD.","","Normalmente HEAD apunta al nombre de una rama (como bugFix). Cuando commiteás, el estado de bugFix se altera y este cambio es visible a través de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veámoslo en acción. Acá vamos a ver a HEAD antes y después de un commit."],afterMarkdowns:["¡Ves! HEAD estuvo oculta bajo nuestra rama `master` todo este tiempo."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detacheando HEAD","","Detachear (_des-adjuntar_) HEAD simplemente significa adjuntarla a un commit en lugar de a un branch. Así es como se ve de antemano:","","HEAD -> master -> C1",""],afterMarkdowns:["Y así queda ahora:","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, detacheemos HEAD de `bugFix` y atacheemosla al commit, en cambio.","","Especificá este commit por su hash. El hash de cada commit se muestra en el círculo que lo representa."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviéndote por ahí con Git","","Antes de meternos en algunas de las funcionalidades más avanzadas de git, es importante entender las distintas maneras de moverse por el árbol de commits que representa tu proyecto.","","Una vez que estés cómodo moviendote por ahí, tus poderes con los otros comandos de git ¡van a amplificarse!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Primero tenemos que hablar de "HEAD". HEAD es el nombre simbólico del commit sobre el que hemos hecho checkout -- es, básicamente, el commit sobre el que estás trabajando.',"","HEAD siempre apunta al commit más reciente, reflejado en el árbol de commits. La mayoría de los comandos de git que hacen cambios al árbol de commits empiezan modificando HEAD.","","Normalmente HEAD apunta al nombre de una rama (como bugFix). Cuando creas un commit, el estado de bugFix se altera y este cambio es visible a través de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veámoslo en acción. A continuación vamos a ver a HEAD antes y después de un commit."],afterMarkdowns:["¡Ves! HEAD estuvo oculta bajo nuestra rama `master` todo este tiempo."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detacheando HEAD","","Detachear (_des-adjuntar_) HEAD simplemente significa adjuntarla a un commit en lugar de a un branch. Así es como se ve de antemano:","","HEAD -> master -> C1",""],afterMarkdowns:["Y así queda ahora:","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, detaheemos HEAD de `bugFix` y atacheemosla al commit, en cambio.","","Especifica este commit por su hash. El hash de cada commit se muestra en el círculo que lo representa."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo-se no Git","","Antes de seguirmos para algumas funcionalidades mais avançadas do Git, é importante entender as diferentes formas de se mover através da árvore de commits que representa o seu projeto.","","Uma vez que você estiver confortável em se mover ao redor, seus poderes utilizando outros comandos do Git serão amplificados!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Primeiro temos que conversar sobre a "cabeça" ("HEAD"). HEAD é um nome simbólico para o commit atualmente ativo (que sofreu checkout por último) -- é essencialmente o commit sobre o qual você está trabalhando no momento.',"","O HEAD sempre aponta para o commit mais recentemente copiado sobre a árvore de trabalho (arquivos do projeto). A maioria dos comandos do git que realizam mudanças sobre a árvore de trabalho começarão mudando o HEAD.","","Normalmente o HEAD aponta para o nome de um ramo (por exemplo, bugFix). Quando você commita, o status do bugFix é alterado e essa mudança ocorre também sobre o HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos isto em ação. Aqui vamos mostrar o HEAD antes e depois de um commit."],afterMarkdowns:["Veja! O HEAD estava se escondendo ao lado do nosso `master` esse tempo todo."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Soltando a cabeça","",'Soltar o HEAD significa anexá-lo a um commit em vez de anexá-lo a um ramo. Antes do estado solto ("detached"), é assim como se parece:',"","HEAD -> master -> C1",""],afterMarkdowns:["E agora é","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, vamos soltar o HEAD do `bugFix` e em vez disso anexá-lo ao commit.","","Especifique o commit por meio do hash correspondente. O hash de cada commit é mostrado dentro do círculo que representa o commit (a letra C seguida de um número)."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movéndose en Git","","Antes de seguir con algunhas das funcionalidades máis avanzadas de Git, é importante entender as diferentes formas de se mover a través da árbore de commits que representa o teu proxecto.","","¡Unha vez que te sintas ben ó teu redor, os teus poderes empregando outros comandos de git serán amplificados!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Primeiro temos que falar sobre o "commit actual" ("HEAD"). HEAD é un nome simbólico para o commit atualmente ativo (o último checkout que se fixo) -- é esencialmente o commit sobre o cal estás traballando nese momento.',"","O HEAD sempre apunta para o commit máis recentemente copiado sobre a árbore de traballo (arquivos do proxecto). A maioría dos comandos de git que fan algún cambio sobre a árbore de traballo empezarán movendo o HEAD.","","Normalmente o HEAD apunta para o nome dunha rama (por exemplo, bugFix). Quando fagas commit, o status do bugFix é alterado e ese cambio ocorre tamén sobre o HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos isto en acción. Aquí imos mostrar o HEAD antes e depois dun commit."],afterMarkdowns:["Ves! O HEAD estivo ó lado do noso `master` todo este tempo."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Soltando a cabeza","",'Soltar o HEAD significa apuntar a un commit en vez de apuntar a unha rama. Antes do estado solo ("detached"), é así como aparece:',"","HEAD -> master -> C1",""],afterMarkdowns:["E agora é","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, imos soltar o HEAD de `bugFix` e en vez diso apuntamos ó commit.","","Especifica o commit por medio do hash correspondente. O hash de cada commit está dentro do círculo que representa ó commit (a letra C seguida dun número)."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Se déplacer dans Git","","Avant que nous découvrions quelques-unes des fonctionnalités les plus avancées de Git, il est important de comprendre les différents manières de se déplacer dans l'arbre des commits qui représente votre projet.","","Une fois que ces déplacements seront aisés, votre puissance avec les autres commandes de git sera amplifiée !","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Premièrement nous avons parlé de "HEAD". HEAD est le nom symbolique pour le commit sur lequel nous nous situons actuellement -- plus simplement c\'est le commit sur lequel nous travaillons.',"","HEAD pointe toujours sur le commit le plus récent dans l'arbre des commits. La plupart des commandes git qui modifient l'arbre des commits vont commencer par modifier HEAD.","","Normalement HEAD pointe sur le nom d'une branche (comme bugFix). Quand vous effectuez un commit, le statut de bugFix est modifié et ce changement est visible par le biais de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons cela en action. Ici nous allons indiquer où se situe HEAD avant et après un commit."],afterMarkdowns:["Vous voyez ! HEAD était caché en dessous de la branche `master` tout le long."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Détacher HEAD","","Détacher HEAD signifie simplement que l'on attache HEAD à un commit au lieu d'une branche. Voilà à quoi cela ressemble actuellement :","","HEAD -> master -> C1",""],afterMarkdowns:["Et maintenant c'est","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Pour terminer ce niveau, détacher HEAD de `bugFix` et attachez-le plutôt au commit.","","Spécifiez le commit par son identifiant (hash). Le hash de chaque commit est affiché dans le rond qui représente le commit."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Navigation durch Git","","Bevor wir uns einige fortgeschrittene Konzepte in Git ansehen ist es wichtig, verschiedene Wege zum Navigieren durch den Commit-Baum, der das Projekt enthält, zu kennen.","","Sobald du das drauf hast, vergrößern sich deine Möglichkeiten in allen anderen Git-Befehlen.","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","Erst mal müssen wir über `HEAD` reden. `HEAD` ist ein Alias für den Commit, der gerade ausgecheckt ist -- es ist im Prinzip der Commit, an den du deinen nächsten Commit hängst.","","`HEAD` zeigt immer auf den neuesten Commit. Die meisten Git-Befehle, die den Baum verändern, fangen damit an dass sie `HEAD` verschieben.","","Normalerweise zeigt `HEAD` auf einen Branch-Namen (z.B. `bugFix`). Wenn du einen Commit machst, wird `bugFix` auf diesen Commit geschoben, und `HEAD` (da es auf `bugFix` zeigt) automatisch auch."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das mal in Aktion an. Wir werden hier `HEAD` vor und nach dem Commit anzeigen."],afterMarkdowns:["Siehst du? `HEAD` war die ganze Zeit unter `master` versteckt."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### HEAD abkoppeln","",'`HEAD` abzukoppeln bedeutet, es direkt an einen bestimmten Commit zu hängen, anstatt an einen Branch. Wir gelangen dadurch in den "detached HEAD state". So sieht\'s vorher aus:',"","`HEAD` -> `master` -> `C1`",""],afterMarkdowns:["Und jetzt:","","`HEAD` -> `C1`"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen, lass uns mal `HEAD` von `bugFix` abkoppeln und an den Commit hängen.","","Gib den Commit mit seinem Hash an. Der Hash jedes Commits steht in dem Kreis, der den Commit darstellt."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在提交树上移动","","在接触 Git 更高级功能之前，我们有必要先学习在你项目的提交树上前后移动的几种方法。","","一旦熟悉了如何在 Git 提交树上移动，你驾驭其它命令的能力也将水涨船高！",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","我们首先看一下 “HEAD”。 HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。","","HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。","","HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["下面咱们通过实际操作看一下。我们将会观察提交前后 HEAD 的位置。"],afterMarkdowns:["看到了吗？ HEAD 指向了 `master`，随着提交向前移动。","","（译者注：实际这些命令并不是真的在查看 HEAD 指向，看下一屏就了解了。如果想看 HEAD 指向，可以通过 `cat .git/HEAD` 查看，","如果 HEAD 指向的是一个引用，还可以用 `git symbolic-ref HEAD` 查看它的指向。但是该程序不支持这两个命令）"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分离的 HEAD","","分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示： ","","HEAD -> master -> C1","","HEAD 指向 master， master 指向 C1"],afterMarkdowns:["现在变成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想完成此关，从 `bugFix` 分支中分离出 HEAD 并让其指向一个提交记录。","","通过哈希值指定提交记录。每个提交记录的哈希值显示在代表提交记录的圆圈中。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在 git 中前後移動","","在接觸 git 的更多進階的主題之前，我們先學習用不同的方法在你的 project 中的 commit tree 上面移動。","","一旦能夠熟練地在 commit tree 中隨意地移動，你使用其它的 git 指令也會更厲害！",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'我們首先看一下 "HEAD"，HEAD 是一個 reference，它是指向目前所 checkout 的 commit，基本上，其實就是你目前所在的 commit。',"","在 commit tree 中，HEAD 總是指向最近的一次commit。大部份 git 的指令如果要修改 commit tree 的狀態的話，都會先改變 HEAD 所指向的 commit。","","HEAD 通常指向一個 branch 的名稱（比如 bugFix）。當你 commit 的時候，改變了 bugFix 的狀態，這一個變化可以從 HEAD 的改變中看到。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在實際的例子中。我們將會觀察 commit 前後 HEAD 的位置。"],afterMarkdowns:["看吧！HEAD 一直藏在 `master` 分支的後面。"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分離 HEAD","","分離 HEAD 就是讓其指向一個 commit 而不是 branch 的名稱。這是指令執行之前的樣子：","","HEAD -> master -> C1",""],afterMarkdowns:["現在變成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想要完成這一個關卡，從 `bugFix` 分離出 HEAD 並且讓它指向一個 commit。","","通過 hash 值可以指定 commit。每個 commit 的 hash 值顯示在各自的圓圈中。"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 任意の位置への移動","","Gitの上級機能に進む前に、自分のプロジェクトを表すコミットツリーの中で任意の位置へ移動する様々な方法を知っておく必要があります。","","移動方法が身につけば、他のgitコマンドをよりうまく扱えるようになるでしょう！","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'まずは"HEAD"から始めましょう。HEADとは現在チェックアウトされているコミットを指す単語です -- ようするに今作業中のコミットを表します。',"","HEADはいつも、作業中のツリーに反映されている最新のコミットを指します。作業ツリーへ変更を加える多くのgitコマンドはまずHEADから処理を始めます。","","HEADは普段、ブランチ名（例えば、bugFixなど）を指します。コミットすれば、bugFixの状態が変更され、その変更がHEADから確認できるようになります。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["実際の動作を見てみましょう。ここでは、コミットの前と後のHEADの状態を確認します。"],afterMarkdowns:["ほら、HEADが元から`master`ブランチの下に隠れていたんですね！"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### HEADの分離","","HEADの分離(detached HEAD)とは単に、ブランチではなく特定のコミットにHEADを紐づけることです。実行前の状態は次のようです:","","HEAD -> master -> C1",""],afterMarkdowns:["そして実行後はこう:","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、HEADを`bugFix`から分離し、その代わりに特定のコミットに紐づけましょう。","","このコミットをハッシュで指定します。コミットのハッシュはそのコミットを表す丸に刻まれています。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Прогулка по Git","","Прежде чем перейти к более продвинутым фичам Git, важно понять различные способы перемещения по дереву коммитов вашего проекта.","","Как только вы научитесь свободно передвигаться по дереву коммитов, ваши возможности в Git приумножатся.","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'В первую очередь, поговорим о "HEAD". HEAD - это символическое имя текущего выбранного коммита — это, по сути, тот коммит, над которым мы в данным момент работаем.',"","HEAD всегда указывает на последний коммит из вашего локального дерева. Большинство команд Git, изменяющих рабочее дерево, начнут с изменения HEAD.","","Обычно HEAD указывает на имя ветки (например, `bugFix`). Когда вы делаете коммит, статус ветки `bugFix` меняется и это изменение видно через HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Посмотрим, как это работает. Обратите внимание на то, где находится HEAD до и после коммита."],afterMarkdowns:["Вот! HEAD всё это время скрывался за веткой `master`."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detaching HEAD","","Отделение (detaching) HEAD означает лишь присвоение его не ветке, а конкретному коммиту. Посмотрим, что было до отделения:","","HEAD -> master -> C1",""],afterMarkdowns:["А вот что получилось теперь","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти уровень, давай отделим HEAD от ветки `bugFix` и присвоим его последнему коммиту в этой же ветке.","","Укажи коммит при помощи его идентификатора (hash). Hash для каждого коммита указан в кружке на схеме."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git에서 여기저기로 옮겨다니기","","Git의 고급기능들에 대해 더 알아보기 전에, 여러분의 프로젝트를 표현하는 커밋 트리(commit tree)에서 이동 할 수 있는 여러가지 방법들을 아는것이 중요합니다.","","여기저기 이동하는 것에 익숙해지면, 여러분이 다른 git 명령어들을 사용하는 능력도 아주 좋아질 것입니다!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'먼저"HEAD"에 대해 이야기해 봅시다. HEAD는 현재 체크아웃된 커밋을 가리킵니다. -- 다시 말하자면 현재 작업중인 커밋입니다.',"","HEAD는 항상 작업트리의 가장 최근 커밋을 가리킵니다. 작업트리에 변화를 주는 git 명령어들은 대부분 HEAD를 변경하는것으로 시작합니다.","","일반적으로 HEAD는 브랜치의 이름을 가리키고있습니다(bugFix와 같이). 커밋을 하게 되면, bugFix의 상태가 바뀌고 이 변경은 HEAD를 통해서 확인이 가능합니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["직접 확인해 봅시다. 여기서 우리는 보이지 않던 HEAD를 커밋전, 후에 드러낼 것입니다."],afterMarkdowns:["보세요! HEAD가 `master`브랜치 아래에 숨어 있던 거군요."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### HEAD 분리하기","","HEAD를 분리한다는 것은 HEAD를 브랜치 대신 커밋에 붙이는 것을 의미합니다. 명령을 사용하기 전의 모습은 다음과 같습니다:","","HEAD -> master -> C1",""],afterMarkdowns:["이제는 이렇게 되는군요","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["다음 레벨로 넘어가기 위해서는, HEAD를 `bugfix`에서 분리하고 그 커밋에 붙이세요.","","각 커밋은 그것의 해시값으로 특정지을수 있습니다. 각 커밋의 해시값은 각 커밋을 나타내는 원안에 나타나있습니다."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Прогулянка по Git","","Перед тим як ми перейдемо до складніших можливостей гіта, важливо розуміти різні способи переміщення по дереву комітів твого проекту.","","Дуже важливо щоб тобі було комфортно переміщатись по репозиторію, так як цей навик тобі знадобиться для використання в більшості команд git!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD (голова)","",'Спочатку розберемось з "HEAD". HEAD це символьне ім’я поточного вибраного коміта -- по суті це той коміт з яким ти зараз працюєш.',"","HEAD завжди вказує на найновіший коміт з робочого дерева. Більшість команд що змінюють локальне дерево комітів, також модифікують HEAD.","","Зазвичай HEAD вказує на ім’я бранча (наприклад bugFix). Коли ти комітиш, змінюється статус гілки bugFix й це можна побачити подивившись на  HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Розберемось з цим на практиці. Зараз ми перевіримо HEAD до та після коміту."],afterMarkdowns:["Ти диви! HEAD весь цей час ховався за гілкою `master`."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Відокремлюємо голову","","Detached HEAD (відокремлена голова) просто означає що HEAD посилається на коміт, а не на якусь гілку. Ось як це виглядає спочатку:","","HEAD -> master -> C1",""],afterMarkdowns:["А в стані detached head:","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень, давайте відокремимо голову від гілки `bugFix` й натомість спрямуємо її на якийсь коміт.","","Вкажи цей коміт за його hash (хеш, ідентифікатором). Хеш кожного коміту відображений в кружечку що символізує коміт."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Dịch chuyển trong Git","","Trước khi học thêm vài chức năng nâng cao trong Git, ta cần phải biết cách dịch chuyển qua lại các commit có trong kho chứa.","","Một khi bạn đã thành thao với chuyển dịch, khả năng sử dụng các lệnh git của bạn đã được nâng cao!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","Đầu tiên hãy bàn về 'HEAD'. HEAD là cái tên biểu tượng cho commit iện tại đang được trỏ đến -- về căn bản nó là commit mà bạn đang làm việc.","","HEAD luôn luôn trỏ đến commit gần nhất được phản ánh trong cây làm việc. Hầu hết các lệnh git mà làm thay đổi nội dung cây làm việc thường bắt đầu với HEAD.","","Bình thường HEAD thì trỏ tới tên nhánh (ví dụ bugFix). Khi bạn commit, thì trạng thái của bugFix được thay đổi và thay đổi này được trông thấy thông qua HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Xem thử thực tế nào. Ở đây ta sẽ bộc lộ HEAD trước và sau khi commit."],afterMarkdowns:["Thấy chứ? HEAD đã ẩn dưới nhánh `master` suốt."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Tháo HEAD","","Tháo HEAD đơng giản nghĩa là dán nó vào một commit thay vì một nhánh. Lúc trước thì nó trông như thế này:","","HEAD -> master -> C1",""],afterMarkdowns:["Và bây giờ thì nó thế này","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, hãy tháo HEAD khỏi `bugFix` thay vì đó hãy dán nó vào commit.","","Chỉ rõ commit bằng mã băm (hash) của nó. Mã băm của mỗi commit nằm trong trong vòng tròn biểu thị commit đó."]}}]}}}},{}],127:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22overHere%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22overHere%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i overHere --solution-ordering C3,C5,C4",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git cherry-pick":!0},startTree:'{"branches":{"master":{"target":"C5","id":"master"},"overHere":{"target":"C1","id":"overHere"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"you can use either branches or relative refs (HEAD~) to specify the rebase target",es_AR:"podés usar tanto ramas como referencias relativas (HEAD~) para especificar el objetivo del rebase",es_ES:"puedes usar tanto ramas como referencias relativas (HEAD~) para especificar el objetivo del rebase",pt_BR:"Você pode usar ou ramos ou referências relativas (HEAD~) para especificar o alvo do rebase",gl:"Podes usar ramas ou referencias relativas (HEAD~) para especificar o obxectivo do rebase",de_DE:"Du kannst entweder Branches oder relative Ref-Angaben (z.B. HEAD~) benutzen, um das Ziel des Rebase anzugeben.",fr_FR:"Vous pouvez utiliser soit les branches, soit les références relatives (HEAD~) pour spécifier la cible à rebaser",zh_CN:"branch 或者是相对位置（HEAD~）都可以用來指定 rebase 的目标",zh_TW:"你可以指定 branch 或者是相對位置（HEAD~）來表示 rebase 的目標",ru_RU:"Можно использовать либо ветки, либо относительные ссылки (HEAD~), чтобы указать цель для Rebase",ja:"リベースする対象の指定には、ブランチ名や相対リファレンス(HEAD~)が使えます",ko:"리베이스할 타겟으로 브랜치나 상대 참조(HEAD~)를 사용할 수 있습니다",uk:"ти можеш використовувати гілки чи відносні посилання (HEAD~) щоб вказувати ціль для rebase",vi:"bạn có thể sử dụng tham chiếu tương đối (HEAD~) hoặc nhánh để chỉ định mục tiêu rebase"},name:{en_US:"Interactive Rebase Intro",es_AR:"Introducción al rebase interactivo",es_ES:"Introducción al rebase interactivo",pt_BR:"Introdução ao rebase interativo",gl:"Introducción ó rebase interativo",de_DE:"Einführung Interactive Rebase",ja:"インタラクティブrebase入門",fr_FR:"Introduction à rebase",zh_CN:"交互式 rebase",zh_TW:"介紹互動式的 rebase",ru_RU:"Введение в интерактивный Rebase",ko:"인터랙티브 리베이스 소개",uk:"Знайомство з інтерактивним rebase",vi:"Giới thiệu về tương tác rebase"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick is great when you know which commits you want (_and_ you know their corresponding hashes) -- it's hard to beat the simplicity it provides.","","But what about the situation where you don't know what commits you want? Thankfully git has you covered there as well! We can use interactive rebasing for this -- it's the best way to review a series of commits you're about to rebase.","","Let's dive into the details..."]}},{type:"ModalAlert",options:{markdowns:["All interactive rebase means is using the `rebase` command with the `-i` option.","","If you include this option, git will open up a UI to show you which commits are about to be copied below the target of the rebase. It also shows their commit hashes and messages, which is great for getting a bearing on what's what.","",'For "real" git, the UI window means opening up a file in a text editor like `vim`. For our purposes, I\'ve built a small dialog window that behaves the same way.']}},{type:"ModalAlert",options:{markdowns:["When the interactive rebase dialog opens, you have the ability to do 3 things:","","* You can reorder commits simply by changing their order in the UI (in our window this means dragging and dropping with the mouse).","* You can choose to completely omit some commits. This is designated by `pick` -- toggling `pick` off means you want to drop the commit.","* Lastly, you can squash commits. Unfortunately our levels don't support this for a few logistical reasons, so I'll skip over the details of this. Long story short, though -- it allows you to combine commits.","","Great! Let's see an example."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["When you hit the button, an interactive rebase window will appear. Reorder some commits around (or feel free to unpick some) and see the result!"],afterMarkdowns:["Boom! Git copied down commits in the exact same way you specified through the UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always `undo` or `reset` to fix mistakes :D"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick est pratique quand vous savez exactement quels commits vous voulez (_et_ que vous connaissez leurs identifiants) -- il est difficile de battre la simplicité qu'il procure.","","Mais que faire quand vous ne connaissez pas les identifiants des commits ? Heureusement git a pensé à vous pour ce cas-là ! Nous pouvons utiliser un rebase interactif pour cela -- c'est la meilleure façon de reconsidérer une série de commits que vous vous apprêtez à rebaser.","","Allons un peu plus dans les détails ..."]}},{type:"ModalAlert",options:{markdowns:["Tout rebase interactif signifie utiliser la commande `rebase` avec l'option `-i`.","","Si vous mettez cette option, git va ouvrir une interface graphique pour vous montrer quels commits vont être copiés en dessous de la cible sur laquelle vous rebasez. Elle vous montre aussi les identifiants et commentaires des commits, ce qui est pratique pour s'orienter parmi les commits.","","Pour le \"vrai\" git, l'interface graphique correspond en fait à ouvrir un fichier dans un éditeur de texte comme `vim`. Pour notre exemple, j'ai construit une petite fenêtre de dialogue qui se comporte de la même façon."]}},{type:"ModalAlert",options:{markdowns:["Quand le rebase interactif s'ouvre, vous avez la possibilité de faire 3 choses :","","* Vous pouvez réarranger les commits simplement en changeant leur ordre dans l'interface graphique (dans notre fenêtre de dialogue, cela signifie déplacer les objets dedans avec la souris -- drag and drop).","* Vous pouvez omettre certains commits. Cela est désigné par `pick` : cliquer sur `pick` désélectionne/resélectionne le commit.","* Enfin, vous pouvez écraser des commits. Malheureusement notre niveau ne supporte pas cette option, nous allons donc sauter les détails concernant cette possibilité. Pour faire court, cela vous permet de mélanger des commits.","","Super ! Voyons un exemple."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quand vous activez le bouton, une fenêtre de rebase interactif va s'ouvrir. Reordonnez quelques commits (ou supprimez-en certains) et regardez le résultat !"],afterMarkdowns:["Boum ! Git a copié les commits de la même manière que vous l'aviez spécifié."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faites un rebase interactif et atteignez l'ordre indiqué dans le fenêtre d'objectif. Souvenez-vous que vous pouvez toujours exécuter les commandes `undo` ou `reset` pour réparer vos erreurs :D"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git interactive rebase","","當你知道你要複製哪些 commit（而且你也知道他們所對應的 hash 值），那麼 `git cherry-pick`  很適合你。","","但是如果你不知道你要的是哪些 commit 呢？ 很幸運的是，git 也有考慮到這個問題喔！我們可以用互動式的 rebase 來做到，當你想要檢查你想要的 commit 的時候，這會是最好的方法。","","讓我們來看一下這些細節..."]}},{type:"ModalAlert",options:{markdowns:["互動式的 rebase 相當於使用 rebase 這個指令的時候，後面加上一個 `-i` 的選項。","","如果你有包含了這個選項，git 就會打開一個 UI，讓你知道說有哪些 commit 會被複製下來，它也會告訴你它們的 hash 值以及可以讓你知道它們是什麼的訊息。","",'在"實務上"，UI 會利用一個編輯器（例如 vim）打開一個檔案，對於我們來說，我已經設計了一個有同樣功能的對話視窗。']}},{type:"ModalAlert",options:{markdowns:["當互動式的 rebase 的對話視窗打開之後，你就可以做到三件事情：","","* 你可以藉由改變這些 commit 在 UI 的位置（在我們的視窗中，可以透過滑鼠去拖拉），來重新排序它們的順序。","* 你可以選擇完全忽略掉某些 commit，可以用滑鼠按一下，使它變暗，就表示你要忽略掉該 commit。","* 最後, 你可以把 commit 合併在一起，但基於某些理由，在我們的關卡裡面並沒有這個功能。","","太棒了！讓我們來看一個例子！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["當你按下按鈕的時候，一個互動式的 rebase 的視窗就會跳出來，重新排序一些 commit（大膽忽略掉某些 commit），然後看一下結果吧！"],afterMarkdowns:["看吧！ git 根據你所選擇的 commit，把它們複製了下來。"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，使用互動式的 rebase，並且完成視覺化目標所表示 commit 的順序，記住！你可以經常使用 `undo` 或者 `reset` 來修正你的一些錯誤:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 交互式的 rebase","","当你知道你所需要的提交记录（**并且**还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。","","但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了","","咱们具体来看一下……"]}},{type:"ModalAlert",options:{markdowns:["交互式 rebase 指的是使用带参数 `--interactive` 的 rebase 命令, 简写为 `-i`","","如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。","","在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。 考虑到课程的初衷，我弄了一个对话框来模拟这些操作。"]}},{type:"ModalAlert",options:{markdowns:["当 rebase UI界面打开时, 你能做3件事:","","* 调整提交记录的顺序（通过鼠标拖放来完成）","* 删除你不想要的提交（通过切换 `pick` 的状态来完成，关闭就意味着你不想要这个提交记录）","* 合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。","","接下来咱们看个实例"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当你点击下面的按钮时，会出现一个交互对话框。对提交记录做个排序（当然你也可以删除某些提交），点击确定看结果"],afterMarkdowns:["Git 严格按照你在对话框中指定的方式进行了复制。"],command:"git rebase -i HEAD~4",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要通过本关, 做一次交互式的 rebase，整理成目标窗口中的提交顺序。 记住，你随时都可以用 `undo`、`reset` 修正错误，这是不会记入步数的 :D"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase interactivo","","git cherry-pick es genial cuando sabés cuáles commits querés (_y_ sabés sus hashes) -- es dificil superar la simpleza que provee.","","Pero ¿qué pasa cuando no sabés qué commits querés? Por suerte ¡git te cubre en esta situación, también! Podemos usar el rebase interactivo para esto -- es la mejor manera de revisar una serie de commits que estás por rebasear.","","Entremos en los detalles..."]}},{type:"ModalAlert",options:{markdowns:["Todo rebase interactivo significa usar el comando `rebase` con la opción `-i`.","","Si incluís esta opción, git abrirá una UI para mostrarte qué commits están a punto de ser copiados sobre el objetivo del rebase. También muestra sus hashes y mensajes, que ayuda mucho para saber qué es cada commit.","",'Para el git "de verdad", la UI significa abrir un archivo en un editor de textos como `vim`. Para nuestro propósito, hice una pequeña interfaz que se comporta de ese mismo modo.']}},{type:"ModalAlert",options:{markdowns:["Cuando el diálogo de rebase interactivo se abre, tenés la capacidad de hacer 3 cosas:","","* Podés reordenar los commits con solamente cambiar su orden en la UI (en nuestra ventana, eso significa hacer drag & drop con el mouse).","* Podés elegir ignorar completamente algunos commits. Esto se designa con `pick` -- no hacerle `pick` a algún commit significa que querés ignorarlo.","* Finalmente, podés _squashear_ commits. Desafortunadamente, nuestros niveles no soportan esto por cuestiones logísticas, por lo que voy a ahorrarte los detalles. Haciéndola corta, te permite combinar varios commits en uno solo.","","¡Genial! Veamos un ejemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cuando apretes el botón, va a aparecer una ventana de rebase interactivo. Reordená los commits (sentite libre de ignorar alguno, también) ¡y mirá el resultado!"],afterMarkdowns:["¡Boom! Git copió los commits exactamente de la misma manera que lo especificaste en la UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar el nivel, hacé un rebase interactivo y alcanzá el orden que se muestra en la visualización objetivo. Acordate que siempre podés hacer `undo` y `reset` para arreglar errores :D"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase interactivo","","git cherry-pick es genial cuando sabes qué commits quieres (_y_ sabes sus hashes) -- es dificil superar la simpleza que provee.","","Pero ¿qué pasa cuando no sabes qué commits quieres? Por suerte ¡git te cubre en esta situación, también! Podemos usar el rebase interactivo para esto -- es la mejor manera de revisar una serie de commits que estás a punto de rebasear.","","Entremos en los detalles..."]}},{type:"ModalAlert",options:{markdowns:["Todo rebase interactivo significa usar el comando `rebase` con la opción `-i`.","","Si incluyes esta opción, git abrirá una UI para mostrarte qué commits están a punto de ser copiados sobre el objetivo del rebase. También muestra sus hashes y mensajes, que ayuda mucho para saber qué es cada commit.","",'Para el git "de verdad", la UI signfica abrir un archivo en un editor de textos como `vim`. Para nuestro propósito, hice una pequeña interfaz que se comporta de ese mismo modo.']}},{type:"ModalAlert",options:{markdowns:["Cuando el diálogo de rebase interactivo se abre, tienes la capacidad de hacer 3 cosas:","","* Puedes reordenar los commits con solamente cambiar su orden en la UI (en nuestra ventana, eso significa hacer drag & drop con el mouse).","* Puedes elegir ignorar completamente algunos commits. Esto se designa con `pick` -- no hacerle `pick` a algún commit significa que quieres ignorarlo.","* Finalmente, puedes _squashear_ commits. Desafortunadamente, nuestros niveles no soportan esto por cuestiones logísticas, por lo que voy a ahorrarte los detalles. Resumiendo, te permite combinar varios commits en uno solo.","","¡Genial! Veamos un ejemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cuando aprietes el botón, va a aparecer una ventana de rebase interactivo. Reordena los commits (siéntete libre de ignorar alguno, también) ¡y observa el resultado!"],afterMarkdowns:["¡Zas! Git copió los commits exactamente de la misma manera que lo especificaste en la UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar el nivel, haz un rebase interactivo y alcanza el orden que se muestra en la visualización objetivo. Recuerda que siempre puedes hacer `undo` y `reset` para arreglar errores :D"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase Interativo do Git","","O cherry-pick é ótimo quando você sabe de antemão quais commits você quer (_e_ você sabe os hashes correspondentes) -- é difícil bater a simplicidade que ele oferece.","","Mas e quando você não sabe quais commits você quer? Felizmente o git pode te ajudar nesta situação também! Podemos usar o rebase interativo para isso -- trata-se da melhor forma de rever uma série de commits sobre os quais você está prestes a fazer um rebase.","","Mergulhemos nos detalhes..."]}},{type:"ModalAlert",options:{markdowns:["O rebase interativo é simplesmente o comando `rebase` com a opção `-i`.","","Se você incluir essa opção, o git abrirá uma interface para mostrar quais commits estão prestes a serem copiados abaixo do alvo do rebase. Ele também mostra os hashes e as mensagens dos commits, o que é ótimo para ter noção do que é o que.","",'No git "de verdade", a interface nada mais é que um arquivo aberto em um editor de texto (por exemplo o `vim`). Para os nossos propósitos, eu montei uma pequena janela que se comporta da mesma forma.']}},{type:"ModalAlert",options:{markdowns:["Quando a janela de rebase interativo abrir, você pode fazer 3 coisas diferentes:","","* Você pode reordenar os commits simplesmente mudando sua ordem na interface (na nossa janela isso significa arrastar e soltar com o mouse).","* Você pode escolher simplesmente omitir alguns commits. Para isso, clique no botão `pick` -- deixar o `pick` desligado significa que você quer descartar o commit.",'* Por fim, você pode "esmagar" (fazer squash) nos commits. Infelizmente, nosso tutorial não será capaz de cobrir essa funcionalidade por alguns motivos logísticos, então vamos pular os detalhes disto. Em resumo, no entanto, o squash permite que você combine commits.',"","Ótimo! Vejamos um exemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quando você clicar o botão, uma janela de rebase interativo se abrirá. Reordene alguns commits da forma como você preferir (ou sinta-se livre para desmarcar o `pick` de alguns) e veja o resultado!"],afterMarkdowns:["Boom! O Git copiou alguns commits exatamente da mesma forma que você os especificou na janela"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para finalizar este nível, faça um rebase interativo e obtenha a ordem mostrada na visualização do objetivo. Lembre-se que você pode usar os comandos `undo` ou `reset` para corrigir erros :D"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase Interativo en Git","","Empregar cherry-pick é xenial cando coñeces qué commits queres (_e_ coñeces os seus códigos hash) -- é difícil mellorar a súa simplicidade.","","Pero ¿qué pasa cando non sabes qué commits son os que queres? Por sorte, ¡git cúbrete nesta situación tamén! Podemos empregar o rebase interactivo para esto -- é a mellor forma de revisar unha serie de commits que estás a rebasar.","","Mergullémonos nos detalles..."]}},{type:"ModalAlert",options:{markdowns:["O rebase interativo é o comando `rebase` coa opción `-i`.","","Se ti inclúes esta opción, o git abrirá unha interfaz para mostrar qué commits están hábiles para ser copiados sobre o obxectivo do rebase. Tamén amosa os seus códigos hash e mensaxes dos commits, o cal axuda moito para saber qué é cada commit.","",'En git "de verdade", a interfaz significa abrir un arquivo de texto nun editor (por exemplo `vim`). Para os nosos propósitos, aquí aparecerá unha pequena ventá que se comporta do mesmo xeito.']}},{type:"ModalAlert",options:{markdowns:["Cando a xanela de rebase interativo abra, poderás facer 3 cousas distintas:","","* Podes reordenar os commits simplemente cambiando a súa orde na interface (na nosa ventá significa arrastrar e soltar os commits).","* Podes escoller a opción de omitir algúns commits. Para iso, pincha no botón `pick` -- deixar o `pick` desligado significa que queres descartar o commit.",'* Ademáis, ti podes "esmagar" (fazer squash) nos commits. Tristemente, este tutorial non será capaz de cubrir esa funcionalidade por algúns motivos loxísticos, entón imos pulir algúns detalles ó respecto. Resumindo, o squash permite combinar commits.',"","¡Xenial! Vexamos un exemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cando pinches o botón, unha ventá de rebase interativo abrirase. Reordena algúns commits da forma que ti prefieras (ou se o prefires desmarca o `pick` de algúns) e mira o seu resultado!"],afterMarkdowns:["¡Veña! Git copiou algúns commits exatamente da mesma forma que o indicaches na ventá"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para finalizar este nivel, fai un rebase interativo e obteñaa a orde amosada na visualización do obxectivo. Lembra que podes usar os comandos `undo` ou `reset` para correxir erros :D"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Interaktiver Rebase","","Cherry-pick ist großartig wenn du genau weißt, welche Commits du willst (_und_ ihre jeweiligen Hashes kennst) -- es ist dann schwer an Einfachheit zu überbieten.","","Aber wie sieht es aus, wenn du die Commits nicht genau kennst, die du brauchst? Zum Glück bietet Git auch dafür eine Lösung an. Das können wir mit interaktivem Rebase machen -- die beste Art sich eine Serie von Commits in einem Rebase genau anzusehen.","","Schauen wir uns die Details an ..."]}},{type:"ModalAlert",options:{markdowns:["Interaktives Rebase bedeutet einfach nur, dass man dem `rebase` Befehl die Option `-i` hinzufügt.","","Wenn du das machst, zeigt Git dir jeden einzelnen Commit, der durch den Rebase kopiert werden würde. Es zeigt dir die Hashes und Kommentare, was gut ist um einen Überblick zu bekommen.","","In echtem Git besteht dieser Dialog daraus, die Commits in einem Text-Editor angezeigt zu bekommen. Für unsere Zwecke hab ich ein kleines Dialog-Fenster gebaut, dass sich ähnlich verhält."]}},{type:"ModalAlert",options:{markdowns:["Wenn sich der Dialog für den interaktiven Rebase öffnet, kannst du drei Dinge tun:","","* Du kannst die Reihenfolge der Commits durch Ziehen und Ablegen ändern.","* Du kannst Git sagen, einen Commit beim Rebase zu ignorieren -- im Dialog durch die Schaltfläche `pick` dargestellt.","* Außerdem kannst du Commit zusammenfassen (squash). Leider wird das hier nicht unterstützt, aber in echtem Git fasst es Commits zu einem zusammen.","","Super! Schauen wir uns ein Beispiel an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn du die Schaltfläche anklickst wird sich der Rebase-Dialog öffnen. Veränder die Reihenfolge der Commits oder klick bei einigen auf `pick` und schau dir das Ergebnis an."],afterMarkdowns:["Bämm! Git hat die Commits genau so kopiert, wie du es ausgewählt hast."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen mach einen interaktiven Rebase, um genau die Reihenfolge zu erzeugen die im Ziel-Baum angezeigt wird. Denk daran, dass du jederzeit mit `undo` oder `reset` Fehler rückgängig machen kannst. :D"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git インタラクティブrebase","","どのコミットを操りたいか（そしてそれを指定するハッシュ）がわかる時に`git cherry-pick`はとても便利で、その簡単さはとてもありがたいです。 ","","しかし、どのコミットを操りたいかがわからない時はどうでしょう？ありがたいことに、そんな時にぴったりのコマンドがgitに備わっています。このためにgitのインタラクティブrebaseを使えます。rebaseしたい一連のコミットを一括で見るベストな方法です。","","具体的に見てみましょう..."]}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseとは単に、`rebase`コマンドに`-i`オプションを合わせて使うことです。","","このオプションをつければ、gitがインタフェースを開き、どのコミットがrebase対象の下にコピーされるかを確認できます。それらのコミットのハッシュやメッセージも表示され、rebaseの概要を一眼で見るのに便利です。","",'"ホンモノ"のgitでは、その「インターフェース」とは`vim`などのテキストエディタの中でファイルが開くだけです。ここでコンセプトを見せるために同じような動作をする小さなダイアログウィンドウを作りました。']}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseダイアログが開くと、３つの操作から選べます:","","* UIウィンドウのなかで順番を調整するだけでコミットの順番を変えられます（こちらのダイアログでは、マウスでドラッグアンドドロップで操作します）。","* 特定のコミットを丸ごと除くこともできます。除きたいコミットを指定するには`pick`をオフにします。","* 最後に、コミットを組み合わせられます。技術的に制限があり再現できないのでその詳細な説明を省きますが、短く言いますと、複数のコミットを一つにまとめることができる機能です。","","さて、例を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["ボタンを押せば、インタラクティブrebaseウィンドウが現れます。コミットの順番を変更したり、`pick`を外したりしてみて、その結果を見てみましょう！"],afterMarkdowns:["よっしゃー。gitがUIで指定されたようにコミットをコピーしました！"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするにはインタラクティブrebaseを実行し、ゴールのビジュアライズに表示されている順番を実現しましょう。ミスがあれば`undo`や`reset`で修正できるのをお忘れなく。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick прекрасен, когда точно известно, какие коммиты нужны (и известны их точные хеши)","","Но как быть в случае, когда точно не известно какие коммиты нужны? К счастью, Git позаботился о таких ситуациях! Можно использовать интерактивный rebase для этого - лучший способ отобрать набор коммитов для rebase.","","Углубимся в детали."]}},{type:"ModalAlert",options:{markdowns:["Всё, что нужно для интерактивного rebase - это опция `-i`","","Если добавить эту опцию, Git откроет интерфейс просмотра того, какие коммиты готовы к копированию на цель rebase (target). Также показываются хеши коммитов и комментарии к ним, так что можно легко понять что к чему.","",'Для "реального" Git, этот интерфейс означает просто открытие файла в редакторе типа vim. Для этой обучалки, я сделал небольшое диалоговое окно, которое по сути делает то же, что и редактор.']}},{type:"ModalAlert",options:{markdowns:["После открытия окна интерактивного rebase есть три варианта для каждого коммита:","","* Можно сменить положение коммита по порядку, переставив строчку с ним в редакторе (у нас в окошке строку с коммитом можно перенести просто мышкой).",'* Можно "выкинуть" коммит из ребейза. Для этого есть `pick` - переключение его означает, что нужно выкинуть коммит.',"* Наконец, можно соединить коммиты. В этом уровне игры у нас не реализована эта возможность, но, вкратце, при помощи этой функции можно объединять изменения двух коммитов.","","Ну что ж, посмотрим на примеры!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["После нажатия на эту кнопку появится окно интерактивного rebase. Переставь несколько коммитов (или удали кое-какие) и посмотри, что получится в итоге!"],afterMarkdowns:["Бах! Git скопировал коммиты в точности так, как было указано через интерфейс!"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, переставь коммиты при помощи интерактивного rebase в таком порядке, как указано на визуализации. На всякий случай, помни, что всегда можно исправить ошибку, вызвав команду undo или reset."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 인터렉티브 리베이스(Interactive Rebase)","","Git 체리-픽은 여러분이 원하는 커밋이 무엇인지 알때(각각의 해시값도) 아주 유용합니다 -- 체리-픽이 제공하는 간단함은 아주 매력적입니다.","","하지만 원하는 커밋을 모르는 상황에는 어쩌죠? 고맙게도 git은 이런상황에 대한 대안이 있습니다. 우리는 이럴 때 인터렉티브 리베이스를 사용하면됩니다 -- 리베이스할 일련의 커밋들을 검토할 수 있는 가장 좋은 방법입니다.","","자세히 알아보죠..."]}},{type:"ModalAlert",options:{markdowns:["인터렉티브 리베이스가 의미하는 뜻은 `rebase` 명령어를 사용할 때 `-i` 옵션을 같이 사용한다는 것입니다.","","이 옵션을 추가하면, git은 리베이스의 목적지가 되는 곳 아래에 복사될 커밋들을 보여주는 UI를 띄울것 입니다. 각 커밋을 구분할 수 있는 각각의 해시들과 메시지도 보여줍니다.","",'"실제"git 에서는 UI창을 띄우는것 대신에 `vim`과 같은 텍스트 편집기에서 파일을 엽니다. 저희는 배우는것이 목적이기에 같은 역할을 하는 작은 대화창을 만들어서 대신했습니다.']}},{type:"ModalAlert",options:{markdowns:["인터렉티브 리베이스 대화창이 열리면, 3가지를 할 수 있습니다:","","* 적용할 커밋들의 순서를 UI를 통해 바꿀수 있습니다(여기서는 마우스 드래그앤 드롭으로 가능합니다)","* 원하지 않는 커밋들을 뺄 수 있습니다. 이것은 `pick`을 이용해 지정할 수 있습니다(여기서는 `pick`토글 버튼을 끄는것으로 가능합니다)","* 마지막으로, 커밋을 스쿼시(squash)할 수 있습니다. 불행히도 저희 레벨은 몇개의 논리적 문제들 때문에 지원을 하지 않습니다. 이거에 대해서는 넘어가겠습니다. 요약하자면 커밋을 합칠 수 있습니다","","자! 예시를 확인해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["버튼을 누르면 인터렉티브 리베이스 대화창이 뜰것 입니다. 커밋들의 순서를 바꿔보고(커밋을 빼 봐도 됩니다) 결과를 확인해봅시다!"],afterMarkdowns:["Boom! Git이 UI를 통해 명시한 그대로 커밋들을 복사했습니다."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해서 goal에 나타난 순서대로 만들기 위해 인터렉티브 리베이스를 사용해봅시다. `undo`와 `reset`을 통해 했던 실수들은 되돌릴 수 있습니다 :D"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Інтерактивний Rebase","","Git cherry-pick зручно користуватись, коли ти знаєш які коміти тобі потрібні (_і_ ти знаєш їхні хеші) -- важко вигадати щось простіше.","","Але що робити в ситуації, коли ти не знаєш які коміти потрібні? На щастя git може впоратись і з цим! Для цього випадку використовують інтерактивний rebase -- це найкращий спосіб перевірити серію комітів які потрібно заребейсити.","","Розглянемо це детальніше..."]}},{type:"ModalAlert",options:{markdowns:["Інтерактивний rebase це насправді команда  `rebase` з опцією `-i`.","","Якщо додати цю опцію, git відкриє діалог в якому покаже які коміти будуть скопійовані до кінцевого призначення. Він також покаже хеші комітів та їхні повідомлення, що допоможе розібратися що й до чого.","",'В "справжньому" git, замість UI вікна відкриється файл в сконфігурованому текстовому редакторі, можливо `vim`. Для цього туторіалу я створив невеличке діалогове вікно що поводиться приблизно так само.']}},{type:"ModalAlert",options:{markdowns:["Коли відкриється вікно інтерактивного rebase ти можеш зробити три речі:","","* Ти можеш переставити коміти між собою просто змінивши їх порядок в діалозі (в нашому вікні ти зможеш перетягнути їх мишкою).","* Ти можеш повністю пропустити якісь коміти. В туторіалі потрібно вимкнути опцію `pick`, але в справжньому гіт потрібно просто видалити відповідний рядок.","* Також можна розчавити (squash) якісь коміти. На жаль наш туторіал не підтримує цю фічу (так як ми не підтримуємо роботу з файлами), але це дуже зручна опція в справжньому гіт. За її допомогою можна декілька різніх комітів об’єднати в один.","","Чудово! Розгляньмо це на прикладі"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Коли ти натиснеш кнопку, відкриється вікно інтерактивного rebase. Перестав якісь коміти (можеш пропустити якісь якщо хочеш), і подивись що вийде!"],afterMarkdowns:["Ка-бум! Git cкопіював коміти відповідно до того що було вказано в UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень за допомогою інтерактивного rebase впорядкуй коміти як показано на візуалізації. Пам’ятай що ти завжди можеш використати `undo` чи `reset` щоб виправити помилку :D"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase Tương tác","","Khi bạn biết rõ mình muốn những commit nào (và mã băm tương ứng của chúng) thì Git cherry-pick là công cụ tuyệt vời -- nó đơn giản đến bất ngờ.","","Nhưng mà lỡ như bạn không biết mình cần commit nào thì sao? May mà git cũng có công cụ cho việc này! Ta có thể dùng rebase tương tác cho việc này -- đó là cách tốt nhất để cân nhắc lựa chọn các commit mà bạn muốn rebase.","","Hãy đi sâu vào chi tiết nào..."]}},{type:"ModalAlert",options:{markdowns:["Rebase tương tác nghĩa là dùng lệnh `rebase` với tùy chọn `-i`.","","Nếu lệnh của bạn có bao hàm tùy chọn này, git sẽ mở một giao diện người dùng để cho bạn biết những commit nào sẽ được sao chép xuống dưới mục tiêu rebase. Nó cũng đồng thời thể hiện mã băm và thông điệp của commit, điều này là tuyệt vời bởi nhờ đó ta có thể phân biệt được chúng.","",'Với git "thật", cửa sổ UI (giao diện người dùng) sẽ được mở thông qua một tệp nhờ công cụ chỉnh sửa văn bản như là `vim`. Vì mục đích học tập, tôi đã xây dựng một cửa sổ hội thoại nhỏ mà nó hành xử cũng tương tự như vậy.']}},{type:"ModalAlert",options:{markdowns:["Khi hội thoại tương tác rebase bật lên, bạn có thể làm được 3 điều:","","* Bạn có thể sắp xếp lại commit một cách đơn giản thông qua UI (bạn có thể làm điều này bằng cách kéo thả trên công cụ của chúng tôi).","* Bạn có thẻ bỏ qua một vài commit. Điều này được thể hiện qua nút `pick` -- tắt nút `pick` nghĩa là bạn bỏ qua commit đó.","* Cuối cùng, bạn có thể nén các commit. Đáng tiếc là trình độ của chúng tôi chưa hỗ trợ được chức năng này do vài vấn đề logic, cho nên tôi sẽ bỏ qua phần này. Nói dơn giản thì -- nó cho phép bạn kết hợp các commit.","","Tuyệt! Cùng xem qua một ví dụ nào."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Khi bạn bấm nút, một cửa sổ tương tác rebase sẽ xuất hiện. Sắp xếp lại một vài commit (hoặc thậm chí bỏ qua một vài cái) và xem thử kết quả!"],afterMarkdowns:["BÙÙM! Git sao chép chính xác các commit mà bạn chọn thông qua UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always `undo` or `reset` to fix mistakes :D"]}}]}}}},{}],128:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C3","id":"HEAD"}}',solutionCommand:"git checkout bugFix^",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Relative Refs (^)",fr_FR:"Références relatives (^)",ja:"相対リファレンス (^)",zh_CN:"相对引用（^）",zh_TW:"相對引用（^）",es_AR:"Referencias relativas (^)",es_ES:"Referencias relativas (^)",pt_BR:"Referências relativas (^)",gl:"Referencias relativas (^)",de_DE:"Relative Referenzen (^)",ru_RU:"Относительные ссылки (^)",ko:"상대 참조 (^) (Relative Refs)",uk:"Відносні посилання",vi:"Tham chiếu tương đối (^)"},hint:{en_US:"Remember the Caret (^) operator!",fr_FR:"Rappelez-vous de l'opérateur circonflexe (^)",ja:"相対リファレンス(^)を思い出して！",de_DE:"Denk an den Dach-Operator (^)!",es_AR:"¡No te olvides del operador ^!",es_ES:"¡No te olvides del operador ^!",pt_BR:"Não se esqueça do operador circunflexo (^)",gl:"Non se esqueza do operador circunflexo (^)",zh_CN:"记住操作符（^）！",zh_TW:"不要忘記插入（^）符號！",ru_RU:"Не забудь оператор `^`",ko:"(^)연산자를 기억하세요!",uk:"Не забудь оператор `^`",vi:"Đừng quên dấu mũ (^)!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Refs","","Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use `git log` to see hashes.","","Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced the previous level is `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Doesn't exactly roll off the tongue...","","The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely identifies the commit. So I can type `fed2` instead of the long string above."]}},{type:"ModalAlert",options:{markdowns:["Like I said, specifying commits by their hash isn't the most convenient thing ever, which is why Git has relative refs. They are awesome!","","With relative refs, you can start somewhere memorable (like the branch `bugFix` or `HEAD`) and work from there.","","Relative commits are powerful, but we will introduce two simple ones here:","","* Moving upwards one commit at a time with `^`","* Moving upwards a number of times with `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.","",'So saying `master^` is equivalent to "the first parent of `master`".',"","`master^^` is the grandparent (second-generation ancestor) of `master`","","Let's check out the commit above master here"],afterMarkdowns:["Boom! Done. Way easier than typing the commit hash"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also reference `HEAD` as a relative ref. Let's use that a couple of times to move upwards in the commit tree"],afterMarkdowns:["Easy! We can travel backwards in time with `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, check out the parent commit of `bugFix`. This will detach `HEAD`.","","You can specify the hash if you want, but try using relative refs instead!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Références relatives","","Se déplacer dans Git en spécifiant des identifiants de commits (hashes) peut être un peu agaçant. Dans le monde réel vous n'aurez pas une vue sur un joli arbre des commits à côté de votre terminal, ainsi vous aurez à utiliser `git log` pour connaître les identifiants.","","De plus, les identifiants sont plus longs dans le vrai monde de Git qu'ici. Par exemple, l'identifiant du commit introduit au précédent niveau était `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Difficilement mémorisable ...","","Le côté positif est que Git est intelligent avec les identifiants. Vous avez seulement à spécifier les premiers caractères de l'identifiant jusqu'à ce qu'il reconnaisse exactement le commit. Ainsi je peux taper `fed2` au lieu de la longue chaîne ci-dessus."]}},{type:"ModalAlert",options:{markdowns:["Comme je l'ai dit, spécifier un commit par son identifiant n'est pas très pratique, c'est pourquoi Git a des références relatives. Elles sont géniales !","","Avec les références relatives vous pouvez commencer par vous placer à un endroit mémorisable (comme la branche `bugFix` ou `HEAD`) et travailler depuis ici.","","Les commits relatifs sont puissants, et on va en introduire deux simples ici :","","* Revenir d'un commit en arrière avec `^`","* Revenir de plusieurs en arrière avec `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons l'opérateur circonflexe (^) d'abord. Chaque fois que vous le faites suivre un nom de référence, vous êtes en train de demander à Git de trouver le parent du commit spécifié.","",'Ainsi, `master^` est équivalent à "le premier parent de `master`".',"","`master^^` est le grand-parent (ancêtre de seconde génération) de `master`","","Faisons un checkout du commit avant master."],afterMarkdowns:["Boum ! Fini. Bien plus facile qu'écrire l'identifiant du commit."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vous pouvez aussi utiliser `HEAD` comme une référence relative. Utilisons cela plusieurs fois pour remonter l'arbre des commits."],afterMarkdowns:["Facile ! Nous pouvons voyager dans le temps avec `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour compléter ce niveau, faites un checkout du commit parent de `bugFix`. Cela va détacher `HEAD`.","","Vous pouvez spécifier l'identifiant du commit si vous voulez, mais essayez plutôt d'utiliser les références relatives !"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Referenzen","","Es kann etwas mühselig werden, sich in einem Commit-Baum mittels Angabe der Hashes zu bewegen. Im echten Leben hat man normalerweise keine hübsche Visualisierung des Baumes neben seinem Terminal, also benutzt man `git log` um die Hashes zu sehen.","","Außerdem sind die echten Hashes sehr viel länger und nicht fortlaufend nummeriert. Beispielsweise heißt der Hash, mit dem ich den letzten Level committet habe, in echt `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Nicht gerade einprägsam ...","","Zum Glück ist Git intelligent wenn es um die Hashes geht. Du musst nur soviele Zeichen eines Hashes angeben, bis der Hash eindeutig ist. Ich kann also `fed2` eingeben anstatt die komplette Zeichenkette tippen zu müssen."]}},{type:"ModalAlert",options:{markdowns:["Wie ich schon sagte: Commits über ihren Hash zu referenzieren ist nicht gerade der bequemste Weg. Weshalb es in Git relative Referenzen gibt. Welche super sind!","","Mit relativen Referenzen kann man bei einem leicht zu merkenden Bezeichner anfangen (zum Beispiel dem Branch-Namen `bugFix` oder der Referenz `HEAD`) und sich von dort vorarbeiten.","","Relative Referenzierung von Commits kann komplex sein, aber wir starten mit zwei einfachen Beispielen:","","* Geh einen Commit zurück mit `^`","* Geh eine bestimmte Anzahl von Commits zurück mit `~<Anzahl>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns zuerst den Dach-Operator (`^`) an. Jedes mal wenn du ihn hinter einen Referenz-Namen setzt, sagst du Git damit, dass es zum Vorgänger des angegebenen Commits gehen soll.","",'Das heißt `master^` ist gleichbedeutend mit "direkter Vorgänger des Commits, auf den `master` zeigt".',"","`master^^` ist also der Vorgänger des Vorgängers von `master`.","","Wir checken jetzt mal den Commit vor `master` aus:"],afterMarkdowns:["Bämm! Fertig. Einfacher, als den Commit-Hash zu tippen (oder zu kopieren)."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Du kannst auch `HEAD` als Basis für relative Referenzen benutzen. Lass uns das ein paar Mal verwenden, um uns im Commit-Baum nach oben zu bewegen."],afterMarkdowns:["Das war einfach. Wir reisen mit `HEAD^` in der Zeit zurück."],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level abzuschließen musst du den direkten Vorgänger von `bugFix` auschecken. Dadurch wirst du `HEAD` von `bugFix` abkoppeln.","","Du kannst natürlich den Hash angeben, aber versuch doch relative Referenzen zu benutzen!"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Referencias relativas","","Moverse por git usando los hashes de los commits puede volverse un tanto tedioso. En el mundo real no vas a tener una visualización de commits tan linda en la terminal, así que vas a tener que usar `git log` para ver los hashes.","","Peor aún, los hashes en general son mucho más largos en el git real, también. Por ejemplo, el hash del commit que introduje en el nivel anterior es `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. No es algo particularmente fácil de nombrar...","","Lo copado es que git es bastante astuto con los hashes. Sólo requiere que especifiques una cantidad de caracteres suficientes para identificar unívocamente al commit. Entonces, yo podría simplemente tipear `fed2` en lugar de esa cadena larga de arriba."]}},{type:"ModalAlert",options:{markdowns:["Como ya dije, especificar los commits por su hash no es la manera más conveniente, y por eso git tiene referencias relativas. ¡Son geniales!","","Con las referencias relativas podés arrancar de algún lugar recordable (como la rama `bugFix`, o `HEAD`) y manejarte desde ahí.","","Los commits relativos son poderosos, pero ahora vamos a presentar sólo dos formas simples:","","* Moverse un commit atrás con `^`","* Moverse una cantidad de commits atrás con `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos el operador ^ primero. Cada vez que le agregás eso al nombre de una referencia, le estás diciendo a git que use el padre del commit especificado.","",'Entonces, decir `master^` es equivalente a "el primer padre de `master`".',"","`master^^` es el _abuelo_ (segunda generación de ancestros) de `master`","","Veamos el commit que está antes de master acá"],afterMarkdowns:["¡Boom! Ahí está. Mucho más simple que tipear el hash de ese commit"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["También podés referenciar a `HEAD` como una referencia relativa. Usémoslo un par de veces para movernos hacia atrás en nuestro árbol"],afterMarkdowns:["¡Fácil! Podemos volver en el tiempo con `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, checkouteá el padre del commit de `bugFix`. Esto va a detachear a `HEAD`.","","Podés especificar el hash si querés, pero mejor ¡tratá de usar la referencia relativa!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Referencias relativas","","Moverse por git usando los hashes de los commits puede volverse un tanto tedioso. En el mundo real no vas a tener una visualización de commits tan linda en la terminal, así que vas a tener que usar `git log` para ver los hashes.","","Peor aún, los hashes en general son mucho más largos en el git real, también. Por ejemplo, el hash del commit que introduje en el nivel anterior es `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. No es algo particularmente fácil de nombrar...","","Lo interesante es que git es bastante astuto con los hashes. Sólo requiere que especifiques una cantidad de caracteres suficientes para identificar unívocamente al commit. Entonces, yo podría simplemente tipear `fed2` en lugar de esa cadena larga de arriba."]}},{type:"ModalAlert",options:{markdowns:["Como ya dije, especificar los commits por su hash no es la manera más conveniente, y por eso git tiene referencias relativas. ¡Son geniales!","","Con las referencias relativas puedes arrancar de algún lugar recordable (como la rama `bugFix`, o `HEAD`) y trabajar desde ahí.","","Los commits relativos son poderosos, pero ahora vamos a presentar sólo dos formas simples:","","* Moverse un commit hacia atrás con `^`","* Moverse una cantidad de commits hacia atrás con `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos el operador ^ primero. Cada vez que le agregas eso al nombre de una referencia, le estás diciendo a git que use el padre del commit especificado.","",'Entonces, decir `master^` es equivalente a "el primer padre de `master`".',"","`master^^` es el _abuelo_ (segunda generación de ancestros) de `master`","","Veamos el commit que está antes de master aquí"],afterMarkdowns:["¡Zas! Ahí está. Mucho más simple que escribir el hash de ese commit"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["También puedes referenciar a `HEAD` como una referencia relativa. Usémoslo un par de veces para movernos hacia atrás en nuestro árbol"],afterMarkdowns:["¡Fácil! Podemos volver en el tiempo con `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, haz checkout sobre el padre del commit de `bugFix`. Esto va a detachear a `HEAD`.","","Puedes especificar el hash si quieres, pero mejor ¡trata de usar la referencia relativa!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Referências relativas","","Mover-se pela árvore do Git especificando o hash do commit pode se tornar um pouco entediante. No mundo real, você não terá à sua disposição essa bonita visualização da árvore ao lado do seu terminal, então você terá de usar o comando `git log` para ver os hashes.","","Além disso, os hashes são geralmente muito maiores no mundo real. Por exemplo, o hash do commit que introduziu o nível de exercícios anterior é `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Não é algo exatamente fácil de lembrar.","","O que salva é que o Git é inteligente com os hashes. Ele só exige que você especifique a quantidade de caracteres do hash suficiente para identificar unicamente o commit. Então eu posso digitar apenas `fed2` em vez da grande string acima."]}},{type:"ModalAlert",options:{markdowns:["Como eu disse, especificar commits pelo hash não é a sempre o mais conveniente, e é por isso que o Git suporta referências relativas. Elas são fantásticas!","","Com referências relativas, você pode começar a partir de um ponto fácil de lembrar (como o ramo `bugFix` ou o `HEAD`) e referenciar a partir dali.","","Commits relativos são poderosos, mas vamos introduzir apenas dois tipos simples aqui:","","* Mover para cima um commit por vez com `^`","* Mover para cima um número de vezes com `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos dar uma olhada no operador circunflexo (^) primeiro. Cada vez que você adicioná-lo a um nome de referência, você está dizendo ao Git para encontrar o pai do commit especificado.","",'Então, dizer `master^` é equivalente a "o primeiro pai do `master`".',"","`master^^` é o avô (ancestral de segunda geração) do `master`","","Vamos fazer checkout do commit logo acima do master"],afterMarkdowns:["Boom! Pronto. Muito mais fácil que digitar o hash do commit"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Você também pode usar o `HEAD` como parte de uma referência relativa. Vamos usar isso para nos mover para cima algumas vezes na árvore de commits"],afterMarkdowns:["Fácil! Podemos viajar para trás no tempo com `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar esse nível, faça checkout do commit pai de `bugFix`. Isso soltará o `HEAD`.","","Você pode especificar o hash se quiser, mas tente usar referências relativas em vez disso!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Referencias relativas","","Moverse por a árbore de git usando os códigos hash dos commits pode volverse un pouco tedioso. Neste mundo real non vas ter unha visualización dos commits tan bonita no terminal, así que vas ter que usar `git log` para ver cada código hash.","","Inda peor, os códigos hash són xeralmente moito máis grandes no mundo real. Por exemplo, o hash do commit que introduxemos no nivel anterior é `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Non é algo sinxelo de lembrar.","","O bo é que git aínda afina cos hashes. El só precisa que expecifiques a cantidade mínima de caracteres suficientes para identificar unívocamente ó commit. Entón eu podo escribir `fed2` e non o hash completo."]}},{type:"ModalAlert",options:{markdowns:["Como xa dixemos, indicar os commits polo seu código hash non é a forma máis convinte, e é por eso que git ten referencias relativas. ¡Son a caña!","","Cas referencias relativas, podes comezar por un punto sinxelo de lembrar (como a rama `bugFix` ou o `HEAD`) e referenciar a partir de ahí.","","Os commits relativos son poderosos, pero agora imos presentar só dous formas sinxelas:","","* Moverse un commit por riba con `^`","* Mover unha cantidade de commits atrás con `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Votémoslle unha ollada o operador (^) primeiro. Cada vez que o engadimos a unha referencia, estaslle dicindo a commit que queres o pai de esa referencia.","",'Entón, dicir `master^` é equivalente a "o primeiro pai do `master`".',"","`master^^` é o avó (ancestral de segunda xeración) do `master`","","Imos facer checkout do commit que está enriba de master"],afterMarkdowns:["Boom! Ahí o tes. Moito máis rápido que por o hash do commit"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Tamén podes usar o `HEAD` como parte dunha referencia relativa. Ímolo utilizar para nos mover uns commits cara arriba na árbore."],afterMarkdowns:["¡Chupado! Podemos viaxar cara atrás no tempo con `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, fai checkout do commit pai de `bugFix`. Iso soltará o `HEAD`.","","¡Podes indicar o hash que queiras, pero intenta empregar as referencias relativas, é moito mellor!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相对引用","","通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 `git log` 来查查看提交记录的哈希值。","","并且哈希值在真实的 Git 世界中也会更长（译者注：基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。舌头都快打结了吧...","","比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我可以仅输入`fed2` 而不是上面的一长串字符。"]}},{type:"ModalAlert",options:{markdowns:["正如我前面所说，通过哈希值指定提交记录很不方便，所以 Git 引入了相对引用。这个就很厉害了!","","使用相对引用的话，你就可以从一个易于记忆的地方（比如 `bugFix` 分支或 `HEAD`）开始计算。","","相对引用非常给力，这里我介绍两个简单的用法：","","* 使用 `^` 向上移动 1 个提交记录","* 使用 `~<num>` 向上移动多个提交记录，如 `~3`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看操作符 (^)。把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。","","所以 `master^` 相当于“`master` 的父节点”。","","`master^^` 是 `master` 的第二个父节点","","现在咱们切换到 master 的父节点"],afterMarkdowns:["搞定。这种方式是不是比输入哈希值方便多了？！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以将 `HEAD` 作为相对引用的参照。下面咱们就用 `HEAD` 在提交树中向上移动几次。"],afterMarkdowns:["很简单吧？！我们可以一直使用 `HEAD^` 向上移动。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，切换到 `bugFix` 的父节点。这会进入分离 `HEAD` 状态。","","如果你愿意的话，使用哈希值也可以过关，但请尽量使用相对引用！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相對引用","","如果要在 git 中移動，透過指定 commit 的 hash 值的方式會變得比較麻煩。在實際例子中，你的終端機上面不會出現漂亮且具備視覺效果的 commit tree，所以你不得不用 `git log` 來查詢 hash 值。","","另外，hash 值的長度在真實的 git 環境中很長。舉個例子，前一個關卡的介紹中的 commit 的 hash 值是 `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。舌頭不要打結了...","","幸運的是，git 對於處理 hash 值很有一套。你只需要提供能夠唯一辨識出該 commit 的前幾個字元就可以了。所以，我可以只輸入 `fed2` 而不是上面的一長串字元。"]}},{type:"ModalAlert",options:{markdowns:["我說過，透過 hash 值來指定 commit 不是很方便，所以 git 加入了相對引用。這個就很厲害了!","","使用相對引用，你可以從一個易於記憶的地方（比如說 branch 名稱 `bugFix` 或 `HEAD`）開始工作。","","相對引用非常好用，這裡我介紹兩個簡單的用法：","","* 使用 `^` 向上移動一個 commit","* 使用 `~<num>` 向上移動多個 commit"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看插入（^）這一個符號。把這個符號接在某一個 reference 後面，就表示你告訴 git 去找到該 reference 所指向的 commit 的 parent commit。","",'所以 `master^` 相當於 "`master` 的 parent commit"。',""," `master^^` 是 `master` 的 grandparent commit（往前推兩代）","","切換到 master的 parent commit"],afterMarkdowns:["看吧！完成了。這種方式比輸入代表 commit 的 hash 值簡單多了！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以把 `HEAD` 當作相對引用。以下指令使用 `HEAD` 在 commit tree 中向上移動數次。"],afterMarkdowns:["簡單吧！我們可以一直使用 `HEAD^` 向上移動。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，切換到 `bugFix` 的 parent commit。這會分離出 `HEAD`。","","如果你願意的話，透過直接指定 hash 值的方式也可以過關，但是還是試試看相對引用吧！"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相対リファレンス","","コミットのハッシュを利用してgitの中で移動するのも少し疲れる時もあります。現実の世界では、このチュートリアルのようにターミナルの隣に見やすいツリーのビジュアライズがないので、ハッシュを見るには`git log`を使う必要があります。","","その上、実際のハッシュはこちらで見たものよりずっと長いです。例えば、先ほどのレベルの紹介のコミットハッシュは`fed2da64c0efc5293610bdd892f82a58e8cbc5d8`です。少し覚えにくいですね...","","そのため、gitでは手短くコミットを指定する方法があります。ユニークな存在だと確認できるだけのハッシュの字数を入力すれば良いです -- 上記の長い文字列の代わりに`fed2`を入力するだけで済みます。"]}},{type:"ModalAlert",options:{markdowns:["先ほど言いましたように、ハッシュでコミットを指定するのがめんどくさくなる時もあるので、gitには相対リファレンスという素晴らしい機能があります。","","相対リファレンスを使うことで、覚えやすい位置（例えば`bugFix`ブランチや`HEAD`）から始め、そのところから相対的な位置を指定できます。","","相対コミットは強力ですが、ここでは二つをご紹介します:","","* 一つずつ上へ移動させる`^`（カレット）","* 複数回上へ移動させる `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["まずはカレット(^)から始めましょう。リファレンス名にカレットを追加すると、指定コミットの親コミットを見つけるようにとgitに命令を出しています。","",'なので `master^`と記述すれば、"`master`の一個上の親"、という意味になります。',"","そして`master^^`とはその親の一つの上のコミット(２代前の親)を指します。","","masterの上のコミットをここで見てみましょう"],afterMarkdowns:["やりました！コミットハッシュを書くよりずっと簡単ですね。"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`HEAD`を相対リファレンスとして参照することもできます。 ここで数回そのコマンドを使い、コミットツリーの中で上へと移動しましょう。"],afterMarkdowns:["簡単ですね!`HEAD^`で時間を巻き戻せます。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、`bugFix`の親コミットをチェックアウトしてください。その操作により`HEAD`が分離されます。","","ハッシュを使用してもいいですが、その代わりに相対リファレンスを試してみましょう！"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Относительные ссылки","","Передвигаться по дереву Git при помощи указания хешей коммитов немного неудобно. В реальной ситуации у вас вряд ли будет красивая визуализация дерева в терминале, так что придётся каждый раз использовать `git log`, чтобы найти хеш нужного коммита","","Более того, хеши в реальном репозитории Git намного более длинные. Например, хеш для коммита, который приведён в предыдущем уровне - `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Не очень просто для произношения =)","","Хорошая новость в том, что Git достаточно умён в работе с хешами. Ему нужны лишь первые несколько символов для того, чтобы идентифицировать конкретный коммит. Так что можно написать просто `fed2` вместо колбасы выше."]}},{type:"ModalAlert",options:{markdowns:["Как мы уже говорили, указание на коммит при помощи его хеша - не самый удобный способ, поэтому Git поддерживает относительные ссылки и они прекрасны!","","С относительными ссылками можно начать с какого-либо удобного места (например, с ветки `bugFix` или от HEAD) и двигаться от него","","Относительные ссылки - мощный инструмент, но мы покажем два простых способа использования:","","* Перемещение на один коммит назад `^`","* Перемещение на <num> коммитов назад `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Для начала рассмотрим оператор каретки (^). Когда мы добавляем его к имени ссылки, Git воспринимает это как указание найти родителя указанного коммита.","",'Так что `master^` означает "первый родитель ветки `master`".',"","`master^^` означает прародитель (родитель родителя) `master`","","Давайте переключимся на коммит Выше `master`"],afterMarkdowns:["Опачки! Готово. Сильно проще, чем поиск и указание хеша."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Можно также использовать `HEAD` как относительную ссылку. Попробуем пройти несколько раз назад по дереву коммитов"],afterMarkdowns:["Изи! Мы можем путешествовать во времени при помощи `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, переместись на первого родителя ветки `bugFix`. Это отделит `HEAD` от ветки.","","Конечно, можно указать хеш, но надо попробовать использовать относительные ссылки!"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 상대 참조","","Git에서 여기저기 이동할 때 커밋의 해시를 사용하는 방법은 조금 귀찮습니다. 실제로 Git을 사용할 때는 터미널화면 옆에 예쁘장하게 커밋트리가 보이진 않으니까요. 매번 해시를 확인하려고 `git log` 명령어를 치고 있을 겁니다.","","나아가서, 실제 Git에서는 해시들이 훨씬 더 깁니다. 예를 들어  이전 레벨에 소개했던 커밋의 해시는 `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`입니다. 쓰기 쉬워 보이진 않네요....","","다행히도, Git은 똑똑합니다. 해시가 커밋의 고유한 값임을 보여줄 수 있을 만큼만 명시해주면 됩니다. 위의 긴 문자열 대신 `fed2`만 입력해도 되는 겁니다."]}},{type:"ModalAlert",options:{markdowns:["말했듯이, 커밋들을 해시로 구분하고 사용하는것이 아주 편하다고 볼 수는 없습니다. Git의 상대 참조(Relative Ref)가 여기서 등장합니다. 굉장한 기능입니다.","","상대 참조로 우리가 기억할 만한 지점(브랜치 `bugFix`라던가 `HEAD`라던가)에서 출발해서 이동하여 다른 지점에 도달해 작업을 할 수 있습니다.","","상대 커밋은 강력한 기능인데, 여기서 두가지 간단한 방법을 소개하겠습니다.","","* 한번에 한 커밋 위로 움직이는 `^`","* 한번에 여러 커밋 위로 올라가는 `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["먼저 캐럿 (^) 연산자 부터 알아보겠습니다. 참조 이름에 하나씩 추가할 때마다, 명시한 커밋의 부모를 찾게 됩니다.","",'`master^`는 "`master`의 부모"와 같은 의미 입니다.',"",'`master^^` 는 "`master`의 조부모(부모의 부모)"를 의미합니다',"","master 위에 있는 부모를 체크아웃 해 봅시다."],afterMarkdowns:["Boom! 됬습니다. 커밋의 해시를 입력하는 것보다 훨씬 쉬운 방법입니다."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["또한 참조인 `HEAD`도 상대참조를 위해 사용할 수 있습니다. 커밋트리 위쪽으로 움직이기위해 여러번 사용 해 봅시다."],afterMarkdowns:["쉽군요! 이제 우린 `HEAD^`를 통해 시간을 거슬러 올라갈 수 있습니다."],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 완료하기 위해서는, `bugFix`의 부모 커밋을 체크아웃 하십시오. 이렇게 하면 `HEAD`가 분리 될 것입니다.","","해시를 이용해서도 할 수 있지만, 상대 참조를 활용하는 것을 연습해 보세요!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Відносні посилання","","Пересуватися по гіту використовуючи хеш комітів може бути трохи напряжно. В справжньому гіті в тебе не буде візуалізації дерева комітів в терміналі, тому доведеться використовувати `git log` щоб подивится хеші комітів.","","Більше того, хеші як правило набагато довші в справжньому гіті. Типовий хеш виглядає як `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Без мнемонік не обійтися)...","","З іншого боку git дуже розумно працює з хешами. Він просить вказати рівно стільки літер, скільки потрібно щоб відрізнити один коміт від іншого. Отже, замість довгого хеша зверху можна просто набрати `fed2`."]}},{type:"ModalAlert",options:{markdowns:["Як було сказано, вказувати коміти за хешем не найзручніша річ, через це git підтримує відносні посилання. Вони реально круті!","","З відносними посиланнями ти можеш почати з якогось зручного місця  (наприклад гілки `bugFix` чи посилання `HEAD`) й вказати потрібний коміт відносно цього посилання","","Відносні коміти є дуже потужним інструментом, але ми почнемо з двох простих прикладів:","","* Йдемо вверх на один коміт за допомогою `^`","* Йдемо вверх на кілька комітів за допомогою `~<число>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Розберемось спочатку з оператором каретки (^). Кожна каретка додана до посилання (напр. до імені коміту) вказує git що потрібно знайти батька посилання до якого застосована каретка.","",'Тож `master^` тотожнє до "перший предок посилання `master`".',"","`master^^` це дідусь (предок другого покоління) посилання `master`","","Давайте перейдемо на коміт трохи вище від master:"],afterMarkdowns:["Бум! Готово. Трохи простіше ніж набирати хеш коміту"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ти також можеш використовувати `HEAD` з відносними посиланнями. Давай використаємо це щоб трошки піднятися по дереву."],afterMarkdowns:["Просто! Ми можемо переміщуватись назад в часі з `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень перемістись на першого предка гілки `bugFix`. Ти опинишся в стані `detach HEAD`.","","Ти, звичайно, можеш вказати хеш, але натомість спробуй користуватися відносними посиланнями!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tham chiếu tương đối","","Dịch chuyển trong Git bằng cách chỉ định mã băm(hash) của commit cỏ vẻ hơi buồn tẻ. Trong đời thực thì sẽ không có mô tả git trực quan ngay bên cạnh terminal của bạn đâu, nên nếu bạn muốn nhìn mã băm của commit thì phải dùng `git log` thôi.","","Hơn nữa, mã băm thực tế thường dài hơn rất nhiều. Ví dụ, mã băm của commit được giới thiệu trong phần trước là `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Đọc mà xoắn hết cả lưỡi...","","Được cái là Git cũng khá thông minh về mã băm. Nó chỉ yêu cầu bạn chỉ định mã băm đủ để xác định commit. Cho nên tôi có thể đơn giản chỉ cần gõ `fed2` thay vì cái chuỗi dài ngoằng phía trên."]}},{type:"ModalAlert",options:{markdowns:["Như tôi đã nói, xác định commit bằng mã băm của nó chẳng hề thuận tiện tẹo nào, đó là tại sao Git có những `tham chiếu tương đối`. Chúng rất tuyệt vời!","","Với tham chiếu tương đối, bạn có thể bắt đầu từ những nơi có thể ghi nhớ được (như là nhánh `bugFix` hoặc `HEAD`) và làm việc trên đó.","","Những commits tương đối rất mạnh mẽ, nhưng chúng tôi sẽ chỉ giới thiệu 2 loại đơn giản sau:","","* Dịch chuyển 1 commit lên trên trong 1 lần với `^`","* Dịch chuyển nhiều commit lên trên trong 1 lần với `~<số>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Xem thử cái dấu mũ (^) trước nào. Mỗi lần bạn nối nó với một cái tên tham chiếu, bạn đang ra lệnh cho Git tìm kiếm cha của một commit cụ thể.","",'Cho nên `master^` nghĩa là "cha đầu tiên của `master`".',"","`master^^` là ông nội (tổ tiên thế hệ 2) của `master`","","Thử nhảy sang commit trước master nào"],afterMarkdowns:["BÙUM! Đã xong. Đơn giản hơn gõ mã băm nhiều"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bạn cũng có thể dùng `HEAD` như là tham chiếu tương đối. Thử dùng nó để leo commit vài lần nào"],afterMarkdowns:["Game là dễ! Du hành ngược thời gian với `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, nhảy sang cha của `bugFix`. Tức là tháo `HEAD`.","","Nếu muốn thì bạn có thể dùng mã băm, nhưng thế thì còn gì vui nữa dùng tham chiếu tương đối đi!"]}}]}}}},{}],129:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master"},"bugFix":{"target":"C0","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C1","id":"HEAD"}}',solutionCommand:"git branch -f master C6;git checkout HEAD~1;git branch -f bugFix HEAD~1",startTree:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C5","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C2","id":"HEAD"}}',hint:{en_US:"You'll need to use at least one direct reference (hash) to complete this level",fr_FR:"Vous aurez besoin d'utiliser au moins une référence directe (hash) pour compléter ce niveau.",zh_CN:"这一关至少要用到一次直接引用 (即哈希值)",zh_TW:"這一關至少要用到一次直接參考（hash）",es_AR:"Vas a necesitar usar al menos una referencia directa (hash) para completar este nivel",es_ES:"Vas a necesitar usar al menos una referencia directa (hash) para completar este nivel",pt_BR:"Você precisará usar pelo menos uma referência direta (hash) para completar este nível",gl:"Precisarás usar polo menos unha referencia directa (hash) para completar este nivel",de_DE:"Du musst mindestens einen Hash benutzen, um dieses Level zu schaffen",ja:"このレベルをクリアするには少なくとも一つの直接リファレンス（hash）を使用する必要があります",ru_RU:"Понадобится использовать как минимум одну прямую ссылку (хеш), чтобы пройти этот уровень",ko:"이번 레벨을 완료하려면 최소 한번은 직접 참조(해시)를 사용해야 합니다.",uk:"Тобі потрібно використати як мінімум одне пряме посилання (хеш) щоб пройти цей рівень",vi:"Bạn sẽ cần dùng ít nhất một tham chiếu trực tiếp (mã băm) để hoàn thành cấp độ này"},name:{en_US:"Relative Refs #2 (~)",de_DE:"Relative Referenzen #2 (~)",ja:"相対リファレンス　その２ (~)",es_AR:"Referencias relativas #2 (~)",es_ES:"Referencias relativas #2 (~)",pt_BR:"Referências relativas #2 (~)",gl:"Referencias relativas #2 (~)",fr_FR:"Références relatives #2 (~)",zh_CN:"相对引用2（~）",zh_TW:"相對引用二（~）",ru_RU:"Относительные ссылки №2",ko:"상대 참조 #2 (~)",uk:"Відносні посилання №2",vi:"Tham chiếu tương đối #2 (~)"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","Say you want to move a lot of levels up in the commit tree. It might be tedious to type `^` several times, so Git also has the tilde (~) operator.","","","The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend. Let's see it in action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's specify a number of commits back with `~`."],afterMarkdowns:["Boom! So concise -- relative refs are great."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","You're an expert on relative refs now, so let's actually *use* them for something.","","One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the `-f` option. So something like:","","`git branch -f master HEAD~3`","","moves (by force) the master branch to three parents behind HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see that previous command in action."],afterMarkdowns:["There we go! Relative refs gave us a concise way to refer to `C1` and branch forcing (`-f`) gave us a way to quickly move a branch to that location."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Now that you have seen relative refs and branch forcing in combination, let's use them to solve the next level.","","To complete this level, move `HEAD`, `master`, and `bugFix` to their goal destinations shown."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:['### El operador "~"',"","Digamos que querés moverte un montón de niveles atrás en tu árbol de commits. Podría ser tedioso tipear `^` muchas veces, por lo que git tiene el operador ~.","","","El operador ~ (opcionalmente) toma una cantidad que especifica la cantidad de padres que querés volver hacia atrás. Veámoslo en acción"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especifiquemos una cantidad de commits hacia atrás con `~`."],afterMarkdowns:["¡Boom! Bien conciso -- las referencias relativas la rompen."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forzando los branches","","Ahora que sos un experto en las referencias relativas, *usémoslas* para algo.","","Una de las formas más comunes en que uso las referencias relativas es para mover las ramas. Podés reasignar directamente una rama a un commit usando la opción `-f`. Así que algo como:","","`git branch -f master HEAD~3`","","Mueve (forzadamente) la rama master tres padres atrás de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos ese comando previo en acción"],afterMarkdowns:["¡Ahí vamos! Las referencias relativas nos dieron una manera concisa de referenciar a `C1`, y forzar la rama (`-f`) nos dio una manera rápida de mover la rama a esa ubicación"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Ahora que viste las referencias relativas y el forzar ramas combinados, usémoslos para resolver el siguiente nivel.","","Para completar este nivel, mové `HEAD`, `master` y `bugFix` a sus destinos finales."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:['### El operador "~"',"","Digamos que quieres moverte un montón de niveles atrás en tu árbol de commits. Podría ser tedioso escribir `^` muchas veces, por lo que git tiene el operador ~.","","","El operador ~ (opcionalmente) toma una cantidad que especifica la cantidad de padres que quieres volver hacia atrás. Veámoslo en acción"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especifiquemos una cantidad de commits hacia atrás con `~`."],afterMarkdowns:["¡Zas! Bien conciso -- las referencias relativas la rompen."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forzando las ramas","","Ahora que eres un experto en las referencias relativas, *usémoslas* para algo.","","Una de las formas más comunes en que uso las referencias relativas es para mover las ramas. Puedes reasignar directamente una rama a un commit usando la opción `-f`. Algo así como:","","`git branch -f master HEAD~3`","","Mueve (forzadamente) la rama master tres padres por detrás de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos ese comando previo en acción"],afterMarkdowns:["¡Allá vamos! Las referencias relativas nos proporcionaron una manera concisa de referenciar a `C1`, y forzar la rama (`-f`) nos dio una manera rápida de mover la rama a esa ubicación"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Ahora que viste las referencias relativas y el forzar ramas combinados, usémoslos para resolver el siguiente nivel.","","Para completar este nivel, mueve `HEAD`, `master` y `bugFix` a sus destinos finales."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:['### O operador "~"',"","Digamos que você queira se mover vários níveis para cima na árvore de commits. Pode ser entediante digitar `^` várias vezes, e por isso o Git possui também o operador til (`~`).","","","Um número pode ser passado (opcionalmente) após o operador til, especificando o número de ancestrais que você deseja subir. Vamos vê-lo em ação"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos especificar um número de commits para trás com `~`."],afterMarkdowns:["Boom! Tão conciso -- referências relativas são incríveis."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forçando os ramos","","Agora que você é um especialista em referências relativas, vamos *usá-las* de fato para alguma coisa.","","Uma das situações mais comuns na qual eu uso referências relativas é quando quero trocar ramos de lugar. Você pode redefinir diretamente o commit para o qual um ramo aponta com a opção `-f`. Desta forma, o seguinte comando:","","`git branch -f master HEAD~3`","","Move (à força) o ramo master 3 ancestrais acima do HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos o comando anterior em ação"],afterMarkdowns:["Aqui vamos nós! As referências relativas nos deram uma forma concisa de nos referirmos ao `C1`, e a movimentação de ramos (com `-f`) nos deu uma forma de apontar rapidamente um ramo para esse local"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Agora que você viu referências relativas e movimentação de ramos combinadas, vamos usá-las para resolver o próximo nível.","","Para completar este nível, mova o `HEAD` e os ramos `master` e `bugFix` para os destinos mostrados no objetivo."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:['### O operador "~"',"","Digamos que queres moverte un montón de commits cara atrás nunha árbore de git. Sería moi tedioso escribir `^` moitas veces, e por iso que git tamén ten o operador (`~`).","","","Pódeselle pasar un número (opcionalmente) despois da tilde, especificando o número de commits que se quere mover cara atrás. Mira como é en acción."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Imos especificar un número de commits cara atrás con `~`."],afterMarkdowns:["¡Veeeña! Ben apuntado -- as referencias relativas son a leche."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forzando as ramas","","Agora que eres un especialista en referencias relativas, imos *usalas* para algunha cousiña.","","Un dos usos máis comúns para o uso das referencias relativas é para movelas ramas de lugar. Ti podes reasignar directamente unha rama a un commit usando a opción `-f`. Así que con algo coma:","","`git branch -f master HEAD~3`","","Move (de forma forzosa) a rama master 3 commits enriba do HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos o comando anterior en acción"],afterMarkdowns:["¡Agora é o a nosa quenda! As referencias relativas nos darán unha forma concisa de nos referír a `C1`, e forzar a rama (con `-f`) deunos unha forma rápida de movela rama `master` a esa posición."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Xa viches as referencias relativas e o movemento de ramas combinadas, ímolas usar para resolver o próximo exercicio.","","Para completar este nivel, mova o `HEAD` e as ramas `master` e `bugFix` para os destinos mostrados no obxectivo."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:['### L\'opérateur "~"',"","Disons que vous souhaitez remonter beaucoup de niveaux dans l'arbre des commits. Cela peut être ennuyeux d'utiliser `^` plusieurs fois, ainsi Git a aussi l'opérateur tilde (~).","","","L'opérateur tilde prend optionnellement à sa suite un nombre qui spécifie le nombre de parents que vous souhaitez remonter. Voyons cela en action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Spécifions le nombre de commits en arrière avec `~`."],afterMarkdowns:["Boum ! Tellement rapide ! Les références relatives sont géniales."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forcer les branches","","Vous êtes maintenant un expert des références relatives, alors servons-nous en.","","L'une des principales façons dont j'utilise les références relatives est pour réorganiser les branches. Vous pouvez directement réassigner les branches à un commit avec l'option `-f`. Ainsi quelque chose comme :","","`git branch -f master HEAD~3`","","bouge (de force) la branche master à trois parents derrière HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons l'effet de la précédente commande"],afterMarkdowns:["On y est ! Les références relatives nous donnent une méthode concise pour référencer `C1` et le forçage de branche (`-f`) nous donne une méthode rapide pour bouger une branche à cet emplacement."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Maintenant que vous avez vu les références relatives et le forçage de branche, utilisons-les pour résoudre le niveau suivant.","","Pour compléter ce niveau, bouger `HEAD`, `master`, et `bugFix` à leurs destinations désignées."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:['### Der "~"-Operator',"","Nehmen wir an du willst viele Schritte im Commit-Baum zurückgehen. Dann wird es schnell mühsam immer wieder `^` einzugeben; deswegen gibt es in Git den Tilde-Operator `~`.","","Der Tilde-Operator akzeptiert optional eine Zahl, mit der du angeben kannst, wieviele Vorgänger du zurückgehen willst. Keine Anzahl anzugeben, bewirkt dasselbe wie `~1`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Geben wir mit `~` an wieviele Commits wir zurückgehen wollen"],afterMarkdowns:["Peng! So einfach -- relative Referenzen sind super."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Erzwungene Branches","","Du bist jetzt Experte in Sachen relative Referenzen, also lass sie uns mal richtig einsetzen.","","Das Verschieben von Branches ist einer der häufigsten Anwendungsfälle dafür. Du kannst einen Branchnamen direkt auf einen bestimmten Commit setzen (_ohne_ ihne vorher ausgecheckt haben zu müssen!) indem du den Parameter `-f` benutzt. So in etwa:","","`git branch -f master HEAD~3`","","Das bewegt (erzwungenermaßen) den `master` auf den Commit drei Vorgänger vor `HEAD`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das mal in Aktion an:"],afterMarkdowns:["Das war's schon! Relative Referenzen ermöglichen es uns den Commit `C1` sehr einfach anzugeben und `git branch -f` ermöglicht es uns, den Branch sehr schnell auf diesen Commit zu setzen."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Jetzt wo du relative Referenzen und erzwungenes Branching in Kombination gesehen hast können wir damit den nächsten Level bewältigen.","","Bewege `HEAD`, `master` und `bugFix` an die jeweils angegebenen Positionen, um diesen Level abzuschließen."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### “~”操作符","","如果你想在提交树中向上移动很多步的话，敲那么多 `^` 貌似也挺烦人的，Git 当然也考虑到了这一点，于是又引入了操作符 `~`。","","","该操作符后面可以跟一个数字（可选，不跟数字时与 `^` 相同，向上移动一次），指定向上移动多少次。咱们还是通过实际操作看一下吧"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们用 `~<num>` 一次后退四步。"],afterMarkdowns:["多么的简洁 —— 相对引用就是方便啊！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### 强制修改分支位置","","你现在是相对引用的专家了，现在用它来做点实际事情。","","我使用相对引用最多的就是移动分支。可以直接使用 `-f` 选项让分支指向另一个提交。例如:","","`git branch -f master HEAD~3`","","上面的命令会将 master 分支强制指向 HEAD 的第 3 级父提交。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在咱们来演示一下刚才的命令："],afterMarkdowns:["这就对了! 相对引用为我们提供了一种简洁的引用提交记录 `C1` 的方式， 而 `-f` 则容许我们将分支强制移动到那个位置。"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["既然你已经看过相对引用与强制移动分支的演示了，那么赶快使用这些技巧来挑战这一关吧！","","要完成此关，移动 `HEAD`，`master` 和 `bugFix` 到目标所示的位置。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:['### "~" 符號',"","假設需要在 commit tree 中向上移動多個 commit。使用太多 `^` 會非常討人厭，所以 Git 也加入了波浪（~）符號。","","","波浪符號後面可以選擇一個數字（你也可以不選擇），該數字可以告訴 Git 我要向上移動多少個 commit 。舉個例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用 `~` 一次往上移動多個 commit。"],afterMarkdowns:["哇！太簡潔了 -- 相對引用真的很好用！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","你現在是相對引用的高手了，現在用它來實際做點事情。","","我使用相對引用最多的就是移動分支。你可以使用 `-f` 選項直接讓分支指向另一個 commit。舉個例子:","","`git branch -f master HEAD~3`","","（強制）移動 master 指向從 HEAD 往上數的第三個 parent commit。"]}},{type:"ModalAlert",options:{markdowns:["要完成這一關，移動 `HEAD`，`master` 和 `bugFix` 到目標所示的位置。"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:['###"~" 演算子',"","コミットツリーの中で複数の段階上へ移動したいとします。毎回毎回`^`と打つのは面倒くさくなるかもしれませんので、gitにはチルダの演算子も備わっています。","","","チルダ演算子のあとには、上へ移動したい親コミットの数を表す数字もオプションでつけられます。実際の動作を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["遡る前のコミット数を`~`で指定しましょう。"],afterMarkdowns:["よっしゃ！効率が良いですね -- 相対リファレンスはなんと便利です。"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["###ブランチの強制","","今はあなたも相対リファレンスの達人なので、実践的な使い方を覚えましょう。","","相対リファレンスのよくある使い方としてあるのは、ブランチの移動です。`-f`オプションを使ってブランチを直接コミットに関連付けられます。次のようになります","","`git branch -f master HEAD~3`","","masterブランチを（強制的に）HEADより親三代前へと移動します。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["先ほどのコマンドの動作を見てみましょう。"],afterMarkdowns:["できました！相対リファレンスを使うことで、手短く`C1`を指定することができ、`-f`でブランチを強制的にそこへ移動することができました。"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["相対リファレンスとブランチの強制関連付けを見ましたので、いまここでそれらの方法を使ってみましょう。","","このレベルをクリアするには`HEAD`、`master`、`bugFix`をゴールで指定されている目的位置まで移動してください。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:['### Оператор "~"',"","Предположим, нужно переместиться на много шагов назад по дереву. Было бы неудобно печатать `^` несколько раз (или несколько десятков раз), так что Git поддерживает также оператор тильда (~).","","","К тильде (опционально) можно добавить количество родительских коммитов, через которые нужно пройти. Посмотрим, как это работает."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Укажем после `~` число коммитов, через которые надо пройти."],afterMarkdowns:["Оп! Очевидно, относительные ссылки прекрасны."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Перемещение ветки (branch forcing)","","Теперь мы разбираемся в относительных ссылках, так что можно реально использовать их для дела.","","Одна из наиболее распространённых целей, для которых используются относительные ссылки - это перемещение веток. Можно напрямую прикрепить ветку к коммиту при помощи опции `-f`. Например, команда:","","`git branch -f master HEAD~3`","","Переместит (принудительно) ветку `master` на три родителя назад от `HEAD`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Посмотрим, как работает эта команда"],afterMarkdowns:["Вуаля! Относительная ссылка дала нам возможность просто сослаться на `C1`, а branch forcing (`-f`) позволил быстро переместить указатель ветки на этот коммит."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Мы рассмотрели относительные ссылки и branch forcing вкупе, так что теперь пришло время пройти следующий уровень.","","Чтобы пройти этот уровень, передвинь `HEAD`, `master` и `bugFix` так, как показано на визуализации."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:['### "~" 연산자',"","커밋트리에서 위로 여러 단계를 올라가고 싶을 수 있습니다. `^`를 계속 입력해서 올라가는것 말고 좋은 방법이 있습니다. Git 에는 틸드 (~) 연산자가 있습니다.","",""," (~) 틸드 연산자는 (선택적) 올라가고 싶은 부모의 갯수가 뒤에 숫자가 옵니다. 직접 확인해 보죠."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["돌아가고 싶은 커밋의 갯수를 `~`뒤의 숫자로 명시해 줍시다."],afterMarkdowns:["Boom! 아주 간결합니다. -- 상대 참조는 대단해요."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### 브랜치 강제로 옮기기","","이제 여러분은 상대 참조의 전문가 입니다. 이제 이걸로 무언가를 해봅시다.","","제가 상대 참조를 사용하는 가장 일반적인 방법은 브랜치를 옮길 때 입니다. `-f` 옵션을 이용해서 브랜치를 특정 커밋에 직접적으로 재지정 할 수 있습니다. 이런 식으로 말이죠:","","`git branch -f master HEAD~3`","","(강제로) master 브랜치를 HEAD에서 세번 뒤로 옮겼습니다. (three parents behind HEAD)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["방금의 커맨드를 직접 확인해 봅시다."],afterMarkdowns:["됬네요! 우리는 상대 참조를 통해 `C1`을 간결한 방법으로 참조할 수 있었고 브랜치 강제(`-f`)를 통해 브랜치를 저 위치로 빠르게 옮길 수 있었습니다."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["자 이제 상대 참조와 브랜치 강제의 조합을 봤으니 다음 레벨을 해결해 봅시다.","","이 레벨을 통과하기 위해서, `HEAD`와 `master`와 `bugFix`를 제시되는 골지점으로 옮겨 주십시오."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:['### Оператор "~"',"","Уявімо, що тобі потрібно піднятися досить високо вгору в дереві комітів. Було б трохи напряжно набирати `^` багато разів, тому Git також має оператор тильда(~).","","","До оператор тильда (не обов’язково) можна дописати справа число, що вказує на яку кількість предків потрібно піднятися вверх. Подивимось на практиці"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте вкажемо на яку кількість комітів повернутися з `~`."],afterMarkdowns:["Ка-бум! Так коротко -- відносні посилання прекрасні."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Форсуємо гілку","","Тепер ти експерт в відносних посиланнях, давай же *використаємо* їх для справи.","","Один з найуживаніших прийомів де я використовую відносні посилання це переміщення гілок. Ти можеш напряму переспрямувати бранч на якийсь коміт використавши опцію `-f` (force, тобто насильно). Щось на зразок:","","`git branch -f master HEAD~3`","","Переміщує (насильно) гілку master на три предки позад HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте подивимось на попередню команду в дії"],afterMarkdowns:["Ось і маєш! Відносні посилання дають нам зручний спосіб доступу до коміту`C1` крім того форсування бранчів (`-f`) дає нам можливість швидко перемістити гілку на цей коміт"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Тепер, коли ти побачив відносні посилання та форсування гілок в купі, давай використаємо це щоб пройти поточний рівень.","","Щоб пройти цей рівень, перемісти `HEAD`, `master` та `bugFix` так як показано в візуалізації."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:['### Toán tử "~"',"","Giả sử bạn muốn leo lên nhiều cấp trong git. Dùng `^` vài lần thì tù lắm, nên Git đã có dấu ngã (~) cho việc đó.","","","Theo sau toán tử ngã (~) là số lượng cha ông mà bạn muốn leo lên(không bắt buộc). Xem thử làm thật thì thế nào nào"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy chỉ định số lượng commit với `~`."],afterMarkdowns:["BÙUM! Quá chuẩn luôn -- tham chiếu tương đối tuyệt vời."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","Giờ thì bạn là cao thủ về tham chiếu tương đối rồi, *làm* thật thôi chứ nhỉ.","","Tôi thì hay thường dùng tham chiếu tương đối để dịch chuyển nhánh. Bạn có thể trực tiếp gán lại nhánh cho commit với cú pháp `-f`. Kiểu như thế này:","","`git branch -f master HEAD~3`","","dịch chuyển (ép buộc) nhánh master lên 3 commit phía trên HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Xem thử cái lệnh trên hoạt động sao nào."],afterMarkdowns:["Đóóóó! Tham chiếu tương đối cho chúng ta một cách chuẩn xác để trỏ tới `C1` và ép nhánh bằng (`-f`) thì dịch chuyển nhanh chóng nhánh tới đó."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Giờ thì bạn đã thấy cách kết hợp tham chiếu tương đối và ép nhánh, dùng chúng để vượt level tiếp thôi.","","Để hoàn thành cấp độ này, chuyển `HEAD`, `master`, và `bugFix` đến mục tiêu được xác định của chúng."]}}]}}}},{}],130:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%7D%2C%22pushed%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22pushed%22%7D%2C%22local%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22local%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22pushed%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git reset HEAD~1;git checkout pushed;git revert HEAD",compareOnlyBranches:!0,startTree:'{"branches":{"master":{"target":"C1","id":"master"},"pushed":{"target":"C2","id":"pushed"},"local":{"target":"C3","id":"local"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"local","id":"HEAD"}}',name:{en_US:"Reversing Changes in Git",de_DE:"Änderungen in Git rückgängig machen",ja:"変更を元に戻す",fr_FR:"Annuler des changements avec Git",es_AR:"Revirtiendo cambios en git",es_ES:"Revirtiendo cambios en git",pt_BR:"Revertendo mudanças no Git",gl:"Revertindo cambios en git",ko:"Git에서 작업 되돌리기",zh_CN:"撤销变更",zh_TW:"在 git 中取消修改 ",ru_RU:"Отмена изменений в Git",uk:"Відміна змін в Git",vi:"Hoàn tác thay đổi trong Git"},hint:{en_US:"Notice that revert and reset take different arguments.",de_DE:"Beachte, dass revert und reset unterschiedliche Argumente benötigen",fr_FR:"Notez que `revert` et `reset` n'ont pas les mêmes arguments.",es_AR:"Notá que revert y reset toman parámetros distintos",es_ES:"Observa que revert y reset utilizan parámetros distintos",pt_BR:"Lembre que revert e reset recebem parâmetros diferentes",gl:"Lembra que revert e reset usan parámetros distintos",zh_CN:"注意 revert 和 reset 使用的参数不同。",zh_TW:"注意 revert 和 reset 使用不同的參數。",ko:"revert와 reset이 받는 인자가 다름을 기억하세요",ja:"revertとresetとで引数が異なることに注意。",ru_RU:"Обрати внимание, что revert и reset принимают разные параметры.",uk:"Зверни увагу на те що revert та reset приймають різні параметри",vi:"Lưu ý rằng hoàn tác(revert) và đặt lại(reset) có những đối số khác nhau."},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Reversing Changes in Git","","There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.","","There are two primary ways to undo changes in Git -- one is using `git reset` and the other is using `git revert`. We will look at each of these in the next dialog",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` reverts changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" `git reset` will move a branch backwards as if the commit had never been made in the first place.',"","Let's see what that looks like:"],afterMarkdowns:["Nice! Git moved the master branch reference back to `C1`; now our local repository is in a state as if `C2` had never happened."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'While resetting works great for local branches on your own machine, its method of "rewriting history" doesn\'t work for remote branches that others are using.',"","In order to reverse changes and *share* those reversed changes with others, we need to use `git revert`. Let's see it in action"],afterMarkdowns:["Weird, a new commit plopped down below the commit we wanted to reverse. That's because this new commit `C2'` introduces *changes* -- it just happens to introduce changes that exactly reverses the commit of `C2`.","","With reverting, you can push out your changes to share with others."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, reverse the most recent commit on both `local` and `pushed`. You will revert two commits total (one per branch).","","Keep in mind that `pushed` is a remote branch and `local` is a local branch -- that should help you choose your methods."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Revirtiendo cambios en git","","Hay varias maneras de revertir cambios en git. Y, tal como al commitear, revertir cambios en git tiene tanto un componente de bajo nivel (indexar archivos o fragmentos individualmente) como un componente de alto nivel (cómo son efectivamente revertidos los cambios). Nuestra aplicación se va a concentrar en esto último.","","Hay dos formas principales de deshacer cambios en git -- uno es usando `git reset` y el otro es usando `git revert`. Vamos a ver cada uno de esos a continuación",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` revierte los cambios moviendo la referencia de una rama hacia atrás en el tiempo a un commit anterior. En este sentido podés pensarlo como "reescribir la historia". `git reset` va a mover la rama hacia atrás, como si el commit nunca se hubiera hecho.',"","Veamos cómo es eso:"],afterMarkdowns:["¡Genial! git simplemente movió la referencia de la rama master atrás hacia `C1`. Ahora tu repositorio local está en un estado como si `C2` nunca hubiera ocurrido"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Mientras que resetear los cambios funciona genial para ramas locales en tu máquina, su método de "reescribir la historia" no funciona para ramas remotas que otros están usando.',"","Para revertir cambios y *compartir* esa _revertida_ con otros, necesitamos usar `git revert`. Veámoslo en acción"],afterMarkdowns:["Extraño. Hay un nuevo commit aplicado sobre el que queríamos revertir. Eso es porque este nuevo commit `C2'` introduce *cambios* - sólo que esos cambios son exactamente los necesarios para revertir los que introdujo `C2`.","","Cuando usás revert, podés pushear ese cambio para compartirlo con otros."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, revertí los dos commits más recientes, tanto en `local` como en `pushed`.","","Tené en cuenta que `pushed` es una rama remota y `local` es una rama local -- eso debería ayudarte a elegir qué métodos usar."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Revirtiendo cambios en git","","Hay varias maneras de revertir cambios en git. Y, tal como al commitear, revertir cambios en git tiene tanto un componente de bajo nivel (indexar archivos o fragmentos individualmente) como un componente de alto nivel (cómo son efectivamente revertidos los cambios). Nuestra aplicación se va a concentrar en esto último.","","Hay dos formas principales de deshacer cambios en git -- uno es usando `git reset` y el otro es usando `git revert`. Vamos a ver cada uno de ellos a continuación",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` deshace los cambios moviendo la referencia de una rama hacia atrás en el tiempo a un commit anterior. En este sentido puedes imaginarlo como "reescribir la historia". `git reset` va a mover la rama hacia atrás, como si el commit nunca se hubiera hecho.',"","Veamos cómo es eso:"],afterMarkdowns:["¡Genial! git simplemente movió la referencia de la rama master atrás hacia `C1`. Ahora tu repositorio local está en un estado como si `C2` nunca hubiera ocurrido"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Mientras que resetear los cambios funciona estupendamente para ramas locales en tu máquina, su método de "reescribir la historia" no funciona para ramas remotas que otros están usando.',"","Para revertir cambios y *compartir* esa _revertida_ con otros, necesitamos usar `git revert`. Veámoslo en acción"],afterMarkdowns:["Extraño. Hay un nuevo commit aplicado sobre el que queríamos revertir. Eso es porque este nuevo commit `C2'` introduce *cambios* - sólo que esos cambios son exactamente los necesarios para revertir los que introdujo `C2`.","","Cuando utilices revert, puedes hacer push sobre ese cambio para compartirlo con otros."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, deshaz los dos commits más recientes, tanto en `local` como en `pushed`.","","Ten en cuenta que `pushed` es una rama remota y `local` es una rama local -- eso debería ayudarte a elegir qué métodos usar."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Revertendo Mudanças no Git","","Existem várias maneiras de reverter mudanças no Git. E assim como o ato de commitar, reverter mudanças no Git também tem um componente de baixo nível (a preparação, ou staging, de arquivos ou trechos de arquivos individuais) e um componente de alto nível (como as mudanças são, de fato, revertidas). Aqui vamos focar neste último ponto.","","Há duas maneiras principais de desfazer mudanças no Git -- uma delas é usando `git reset`, e a outra é usando `git revert`. Vamos olhar cada uma delas na próxima janela",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'O comando `git reset` reverte mudanças movendo para trás no tempo (para um commit mais antigo) a referência do ramo. Desta forma, você pode pensar nessa operação como uma "reescrita do histórico"; o `git reset` vai mover o ramo para trás como se o commit nunca tivesse existido.',"","Vejamos como funciona:"],afterMarkdowns:["Legal! O Git simplesmente moveu a referência do ramo master de volta para `C1`; agora o nosso repositório local está em um estado como se o `C2` nunca tivesse acontecido"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Embora o reset funcione muito bem em ramos locais no seu próprio computador, o método utilizado de "reescrever o histórico" não funciona com ramos remotos que outras pessoas estejam usando.',"","Para reverter mudanças e conseguir *compartilhar* essas mudanças com os outros, precisamos usar o `git revert`. Vejamo-lo em ação"],afterMarkdowns:["Estranho, um novo commit surgiu abaixo do commit que queríamos reverter. Isso é porque o novo commit `C2'` introduz *mudanças* -- acontece que as mudanças que ele introduz revertem exatamente aquelas do commit `C2`.","","Com o `revert`, você pode fazer `push` das suas mudanças para compartilhá-las com os outros."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, reverta os dois commits mais recentes tanto em `local` como em `pushed`.","","Tenha em mente que `pushed` é um ramo remoto, e `local` é um ramo local -- isso deve ajudá-lo a escolher o método apropriado."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Revertindo cambios en Git","","Existen varias formas de revertir os cambios en git. E, como cando se fai commit, desfacer cambios supon unha operación de baixo nivel (a indexación de arquivos ou trozos de eles) e unha operación de alto nivel (desfacer os cambios xa aplicados). Aquí ímonos enfocar neste último punto.","","Hai dúas formas de desfacer os cambios en git -- unha delas é `git reset`, e a outra é usando `git revert`. Imos comparalas na próxima ventá.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'O comando `git reset` desfai os cambios movendo a referencia dunha rama cara un commit máis antigo na rama. Desta forma, podes pensar nesta operación como "reescritura do histórico"; o `git reset` vai movela rama cara atrás, como se ós commits nunca antes se fixeran.',"","Vexamos o seu funcionamento:"],afterMarkdowns:["¡Bye bye! Git moveu a referencia da rama master cara atrás, ata o commit `C1`; agora o teu repositorio local está coma se o commit `C2` nunca acontecera."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Mentres que resetear os cambios funciona xenial para as ramas locales na túa máquina, o método utilizado de "reescribir o histórico" non funciona con ramas remotas que outra xente usa.',"","Para revervir os cambios e *compartir* eses cambios ca outra xente, precisamos usar `git revert`. Atende a cómo funciona"],afterMarkdowns:["Estrano, xurdíu un novo commit por baixo do commit que queriamos desfacer. Iso é porque o novo commit `C2'` engadíu *cambios* -- o que pasa é que o commit desfai exactamente os cambios feitos no commit `C2`.","","Con `revert`, ti podes facer `push` dos teus cambios para compartilos cos outros."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, reverte os dous commits máis recentes tanto en `local` como en `pushed`.","","Ten en mente que `pushed` é unha rama remota, e `local` é unha rama local -- Iso poida que te axude a aplicar o método apropriado."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Änderungen in Git rückgängig machen","","Es gibt viele Möglichkeiten, Änderungen in Git zurückzunehmen. Und ebenso wie das Committen hat auch das rückgängig Machen eine Basis-Komponente (Dateien und Inhalte vormerken) und einen übergeordneten Aspekt (wie die Änderungen tatsächlich zurückgenommen werden). Diese Applikation beschäftigt sich wiederum mit den übergeordneten Vorgängen.","","Es gibt grundsätzlich zwei Arten in Git etwas rückgängig zu machen -- einerseits `git reset` und andererseit `git revert`. Wir schauen uns beide mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` nimm Änderungen zurück, indem es eine Branch-Referenz auf einen anderen Commit setzt. Es ist ein bisschen (aber nicht wirklich) wie "Geschichte umschreiben"; `git reset` bewegt einen Branch auf einen anderen Commit, als hätte er nie anders ausgesehen.',"","Schauen wir, wie das aussieht:"],afterMarkdowns:["Schick! Git hat den `master` einfach auf `C1` gesetzt; unser lokales Repository sieht nun so aus, als hätte `C2` nie stattgefunden."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Obwohl `git reset` super im lokalen Kontext funktioniert, ist der Ansatz vom "Umschreiben" der Commit-Geschichte nicht geeignet für Branches, die auf einem Server liegen und auch von anderen benutzt werden.',"","Um Änderungen rückgängig zu machen und das mit anderen zu *teilen* müssen wir `git revert` benutzen. Schauen wir uns das in Aktion an."],afterMarkdowns:["Komisch, es ist ein neuer Commit entstanden. Das liegt daran, dass `C2'` genau die *Änderungen* enthält, die die Änderungen aus `C2` aufheben.","","Durch Reverten kannst du das Zurücknehmen von Änderungen mit anderen teilen."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen musst du sowohl auf `local` also auch auf `pushed` jeweils die zwei letzten Commits zurücknehmen.","","Vergiss nicht, dass `pushed` auch auf einem Server liegt und `local` ein rein lokaler Branch ist -- das sollte dir helfen, die richtige Methode zu wählen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 変更を元に戻す","","Gitでは変更を元に戻す方法がたくさんあります。コミットと同じように、低レベルな動作（ファイル別だったりファイルの中の一部だったり）も高レベルな動作（変更のまとまりのキャンセル）もできます。このアプリケーションでは後者の方法について紹介します。","","基本的な巻き戻しの方法は2つあります -- 一つは`git reset`を使う方法で、もう1つは`git revert`を使う方法です。次のダイアログで一つ一つを見ていきます。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset`はブランチのポインタを後方に移動することで変更のキャンセルを実現します。履歴を上書きするような動作だと思うと良いでしょうか。`git reset`はそもそも前のコミットなんかなかったかのように、ブランチのポインタを元に戻してくれます。","","どういう感じか見てみましょう。"],afterMarkdowns:["いいですね！Gitは単純にmasterブランチへのポインタを`C1`へ戻しました。これでこのローカルリポジトリにはまるで`C2`なんて無かったかのように変更をキャンセルできました。"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","自分のマシン上のブランチではさっきの`git reset`でうまくいきましたが、この「履歴を上書きする」手段は、他の人も使っているリモートにあるリポジトリに対しては使うことができません。","","変更を巻き戻して他の人とそれを共有するためには、`git revert`を使う必要があります。今度はこれを見てみましょう。"],afterMarkdowns:["あれ、おかしいな。巻き戻したいと思ってたコミットの下に新しいコミットが出来上がってしまったみたいです。なぜか。これは、この新しい`C2'`コミットは`C2`へ戻すのに必要な内容を確かに変更して巻き戻していたのです。","","こんな風にして、巻き戻した内容を他人と共有するためにはrevertを使います。"],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["この章の仕上げに、`local`と`pushed`の両方の直近のコミットを巻き戻してみましょう。","","`pushed`はリモートのブランチで、`local`はローカルであることに注意。正しくコマンドを使い分けましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Annuler des changements avec Git","","Il y a de nombreuses façons d'annuler des changements avec Git. De même que pour les commits, annuler des changements avec Git est à la fois un aspect bas-niveau (gestion des fichiers et morceaux de fichiers) et un aspect de plus haut niveau (comment les changements sont effectivement annulés). Nous allons nous intéresser à ce dernier point.","","Il y a principalement deux façons d'annuler des changements avec Git : l'une est `git reset` et l'autre est `git revert`. Nous allons maintenant voir chacune de ces façons.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset` annule des changements en déplaçant la référence en arrière dans le temps sur un commit plus ancien. En ce sens, on peut considérer cela comme une façon de \"réécrire l'histoire\"; `git reset` fait remonter une branche en arrière comme si le(s) commit(s) n'avait jamais eu lieu.","","Regardons à quoi cela ressemble :"],afterMarkdowns:["Bravo ! Git a simplement déplacé la référence de la branche master en la faisant revenir sur `C1`; désormais notre dépôt est dans le même état que si `C2` n'avait jamais eu lieu"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","Bien que le reset marche parfaitement pour les branches locales sur notre propre machine, cette façon de \"réécrire l'histoire\" ne marche pas avec les banches distantes (remote) que d'autres personnes utilisent.","","Pour pouvoir annuler des changements et *partager* ces annulations avec d'autres, nous devons utiliser `git revert`. Regardons comment cela fonctionne"],afterMarkdowns:["Étrangement, un nouveau commit est apparu en bas sous le commit que nous voulions annuler. C'est parce que ce nouveau commit `C2'` introduit des *modifications* -- celles qui correspondent justement à l'annulation de celles du commit `C2`.","","Avec revert, vous pouvez diffuser (push) vos modifications et les partager avec tout le monde."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, annulez les derniers commits à la fois sur `local` et sur `pushed`. Vous devez annuler en tout 2 commits (un pour chaque branche).","","Ayez à l'esprit que `pushed` est une branche distante et `local` est une branche locale ; cela devrait vous guider dans le choix de la méthode à employer."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 撤销变更","","在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。","","主要有两种方法用来撤销变更 —— 一是 `git reset`，还有就是 `git revert`。接下来咱们逐个进行讲解。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset` 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。`git reset` 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。","","让我们来看看演示："],command:"git reset HEAD~1",afterMarkdowns:["漂亮! Git 把 master 分支移回到 `C1`；现在我们的本地代码库根本就不知道有 `C2` 这个提交了。","","（译者注：在reset后， `C2` 所做的变更还在，但是处于未加入暂存区状态。）"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","虽然在你的本地分支中使用 `git reset` 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！","","为了撤销更改并**分享**给别人，我们需要使用 `git revert`。来看演示："],command:"git revert HEAD",afterMarkdowns:["奇怪！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录 `C2'` 引入了**更改** —— 这些更改刚好是用来撤销 `C2` 这个提交的。也就是说 `C2'` 的状态与 `C1` 是相同的。","","revert 之后就可以把你的更改推送到远程仓库与别人分享啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，分别撤销 `local` 分支和 `pushed` 分支上的最近一次提交。共需要撤销两个提交（每个分支一个）。","","记住 `pushed` 是远程分支，`local` 是本地分支 —— 这么说你应该知道用分别哪种方法了吧？"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 取消 git 的修改","","在 git 裡面取消修改的方法很多。和 commit 一樣，在 git 裡面取消修改同時具有底層的部份（暫存一些獨立的文件或者片段）和高層的部份（修改是如何被取消）。我們主要講的重點是後者。","","在 git 裡主要用兩種方法來取消修改，一種是 `git reset`，另外一種是 `git revert`。讓我們在下一個對話視窗中逐一瞭解它們。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` 把分支的參考點退回到上一個 commit 來取消修改。你可以認為這是在"重寫歷史"。`git reset` 往回移動 branch，原來的 branch 所指向的 commit 好像從來沒有存在過一樣。',"","讓我們來看看要怎麼操作："],command:"git reset HEAD~1",afterMarkdowns:["太好了! Git 把 master branch 簡單地移回到 `C1`；現在在我們的 local 已經退回到沒有 commit 過 `C2` 的狀態了。"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","雖然在你的 local branch 中使用 `git reset` 很方便，但是這種「改寫歷史」的方法對別人的 remote branch 是無效的哦！","","為了取消修改並且把這個狀態*分享*給別人，我們需要使用 `git revert`。舉個例子"],command:"git revert HEAD",afterMarkdowns:["很奇怪吧！在我們要取消的 commit 後面居然多了一個新的 commit！這是因為新的 commit `C2'` 引入了*修改*——用來表示我們取消 `C2` 這個 commit 的修改。","","多虧了 revert，現在可以把你的修改分享給別人啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，分別取消 `local` branch 和 `pushed` branch 上的最近的一次 commit。","","記住 `pushed` 是一個 remote branch，`local` 是一個 local branch，有了這麼明顯的提示應該知道要用哪種方法了吧？"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git에서 작업 되돌리기","","Git에는 작업한 것을 되돌리는 여러가지 방법이 있습니다. 변경내역을 되돌리는 것도 커밋과 마찬가지로 낮은 수준의 일(개별 파일이나 묶음을 스테이징 하는 것)과 높은 수준의 일(실제 변경이 복구되는 방법)이 있는데요, 여기서는 후자에 집중해 알려드릴게요.","","Git에서 변경한 내용을 되돌리는 방법은 크게 두가지가 있습니다 -- 하나는 `git reset`을 쓰는거고, 다른 하나는 `git revert`를 사용하는 것입니다. 다음 화면에서 하나씩 알아보겠습니다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리셋(reset)","",'`git reset`은 브랜치로 하여금 예전의 커밋을 가리키도록 이동시키는 방식으로 변경 내용을 되돌립니다. 이런 관점에서 "히스토리를 고쳐쓴다"라고 말할 수 있습니다. 즉, `git reset`은 마치 애초에 커밋하지 않은 것처럼 예전 커밋으로 브랜치를 옮기는 것입니다.',"","어떤 그림인지 한번 보죠:"],afterMarkdowns:["그림에서처럼 master 브랜치가 가리키던 커밋을 `C1`로 다시 옮겼습니다; 이러면 로컬 저장소에는 마치 `C2`커밋이 아예 없었던 것과 마찬가지 상태가 됩니다."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리버트(revert)","",'각자의 컴퓨터에서 작업하는 로컬 브랜치의 경우 리셋(reset)을 잘 쓸 수 있습니다만, "히스토리를 고쳐쓴다"는 점 때문에 다른 사람이 작업하는 리모트 브랜치에는 쓸 수 없습니다.',"","변경분을 되돌리고, 이 되돌린 내용을 다른 사람들과 *공유하기* 위해서는, `git revert`를 써야합니다. 예제로 살펴볼게요."],afterMarkdowns:["어색하게도, 우리가 되돌리려고한 커밋의 아래에 새로운 커밋이 생겼습니다. `C2`라는 새로운 커밋에 *변경내용*이 기록되는데요, 이 변경내역이 정확히 `C2` 커밋 내용의 반대되는 내용입니다.","","리버트를 하면 다른 사람들에게도 변경 내역을 밀어(push) 보낼 수 있습니다."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하려면, `local` 브랜치와 `pushed` 브랜치에 있는 최근 두 번의 커밋을 되돌려 보세요.","","`pushed`는 리모트 브랜치이고, `local`은 로컬 브랜치임을 신경쓰셔서 작업하세요 -- 어떤 방법을 선택하실지 떠오르시죠?"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Отмена изменений в Git","","Есть много путей для отмены изменений в Git. Так же как и коммит, отмена изменений в Git возможна и на низком уровне (добавление в коммит отдельных файлов и наборов строк), и на высоком (как изменения реально отменяются). Сейчас сфокусируемся на высокоуровневой части.","","Есть два основных способа отмены изменений в Git: первый - это `git reset`, а второй - `git revert`. Попробуем оба на следующем шаге.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` отменяет изменения, перенося ссылку на ветку назад, на более старый коммит. Это своего рода "переписывание истории"; `git reset` перенесёт ветку назад, как будто некоторых коммитов вовсе и не было.',"","Посмотрим, как это работает:"],afterMarkdowns:["Неплохо! Git просто перенёс ссылку на `master` обратно на коммит `C1`. Теперь наш локальный репозиторий в состоянии, как будто `C2` никогда не существовал."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","Reset отлично работает на локальных ветках, в локальных репозиториях. Но этот метод переписывания истории не сработает на удалённых ветках, которые используют другие пользователи.","","Чтобы отменить изменения и поделиться отменёнными изменениями с остальными, надо использовать `git revert`. Посмотрим, как это работает"],afterMarkdowns:["Забавно, появился новый коммит. Дело в том, что новый коммит `C2'` просто содержит изменения, полностью противоположные тем, что сделаны в коммите `C2`.","","После `revert` можно сделать `push` и поделиться изменениями с остальными."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, отмени два последних коммита и в `local`, и в `pushed`","","Помни, что `pushed` - это remote ветка, а `local` - это локальная ветка. Это поможет выбрать способ отмены изменений."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Відміна змін в Git","","Є декілька шляхів відмини змін в Git. І так само як і коміти, зміни в гіт можна відміняти використовуючи або низькорівневі методи (додавання в коміт окремих файлів) так і високорівневі. Ми зосередемось на останніх.","","Є два основні шляхи відміни змін в Git -- перший це використовувати `git reset` й інший це `git revert`. В наступному слайді ми подивимося на кожний з них",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` відміняє зміни переміщуючи вказівник гілки назад в історії на старіший коміт. В принципі, можна вважати що це певне "переписування історії;" Коли `git reset` перемістить гілку назад буде здаватися, що відмінений коміт взагалі ніколи не створювався.',"","Давайте подивимося, як це виглядає:"],afterMarkdowns:["Чудово! Git перемістив посилання гілки master назад до `C1`; тепер наш локальний репозиторій в такому стані, наче коміту `C2` ніколи не було."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Команда reset чудово працює для локальних бранчів на власному комп’ютері, але так як вона спричиняє "переписування історії", її не можна використовувати в ситуації коли кілька користувачів працюють з цим бранчем',"","Для того щоб відкотити зміни й потім *поділитися* цими відкоченими змінами з друзями, потрібно використовувати `git revert`. Давай подивимось на прикладі"],afterMarkdowns:["Дивно, був створений новий коміт, нижче того коміту який ми хотіли відкотити. Це сталося тому що новий коміт `C2'` містить *зміни*  які повністю протилежні змінам `C2`.","","Після revert, ти зможеш зробити push щоб поділитися гілкою з іншими."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень відміни два останні коміти на гілках `local` та `pushed`.","","Зауваж, що `pushed` це віддалена гілка, а `local` це локальна гілка -- це має допомогти з вибором методу."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Hoàn tác trong Git","","Có rất nhiều cách để hoàn tác thay đổi trong Git. Và cũng tương tự như commit, hủy thay đổi trong Git có cả thành phần bậc thấp (tạm thời lưu trữ một số tệp hoặc đoạn độc lập) và thành phần bậc cao (cách mà các thay đổi thực sự bị hủy). Ứng dụng của chúng tôi tập trung vào cái sau.","","Có 2 cách nguyên thủy để hủy thay đổi trong Git -- một là dùng `git reset` và cách khác là dùng `git revert`. Chúng ta sẽ xem xét từng cái trong hội thoại sau",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` hoàn tác bằng cách chuyển tham chiếu của nhánh ngược lên commit cũ hơn. Bạn có thể hiểu nó như kiểu "viết lại lịch sử;" `git reset` sẽ dịch chuyển nhánh lên trên như thể commit chưa bao giờ được tạo ra vậy.',"","Cùng xem thử nó trông thế nào nào:"],afterMarkdowns:["Hay! Git chuyển tham chiếu của master trở lại `C1`; bây giờ kho cá nhân của ta trông như thể commit `C2` chưa bao giờ xảy ra vậy."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Trong khi git reset hoạt động rất tốt tại nhánh cục bộ trên máy cá nhân, cách thức "viết lại lịch sử" chẳng hề có tác dụng lên nhánh ở phương xa mà người khác sử dụng.',"","Để có thể hoàn tác và *chia sẻ* hoàn tác đó với người khác, thì ta cần sử dụng `git revert`. Xem thử cách thức nó hoạt động nào"],afterMarkdowns:["Lạ nhỉ, một commit mới được thả vào bên dưới commit mà ta muốn hoàn tác. Đó là bởi vì commit mới `C2'` này có chứa *thay đổi* -- đó là những thay đổi về hoàn tác commit `C2`.","","Dùng revert thì bạn có thể đẩy thay đổi mình lên và chia sẻ với người khác."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, hoàn tác commit gần nhất trên cả `local` (`cục bộ`) và `pushed` (`được đẩy`). Bạn sẽ hoàn tác tổng cộng 2 commit(một trên mỗi nhánh).","","Nhớ rằng `pushed` là nhánh ở phương xa và `local` là nhánh địa phương -- như thế thì bạn sẽ chọn được phương án phù hợp."]}}]}}}},{}],131:[function(e,t,o){o.level={compareOnlyMasterHashAgnostic:!0,disabledMap:{"git revert":!0,"git cherry-pick":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C6%27%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase master bugFix;git rebase bugFix side;git rebase side another;git rebase another master",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C6","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C0"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C5"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Rebasing over 9000 times",de_DE:"10000 Rebases unter dem `HEAD`",es_AR:"Rebaseando más de 9000 veces",es_ES:"Rebaseando más de 9000 veces",pt_BR:"Fazendo mais de 9000 rebases",gl:"Facendo máis de 9000 rebases",fr_FR:"Rebaser plus de 1000 fois",ko:"9천번이 넘는 리베이스",ja:"9000回以上のrebase",zh_CN:"多次 Rebase",zh_TW:"N次Rebase",ru_RU:"Rebase over 9000 раз",uk:"Rebase over 9000 разів",vi:"Rebase hơn 9000 lần"},hint:{en_US:"Remember, the most efficient way might be to only update master at the end...",de_DE:"Nicht vergessen: die effizienteste Möglichkeit könnte sein, schließlich einfach nur den master zu aktualisieren ...",es_AR:"Acordate, la manera más eficiente podría ser actualizar master sólo al final...",es_ES:"Recuerda, la manera más eficiente podría ser actualizar master sólo al final...",pt_BR:"Lembre-se, a forma mais eficiente pode ser atualizar o master por último...",gl:"Lembra, a forma máis eficiente pode ser actualizar a rama master ó final...",fr_FR:"Rappelez-vous, la façon la plus efficace peut être de mettre à jour master seulement à la fin ...",ja:"最も効率的なやり方はmasterを最後に更新するだけかもしれない・・・",ko:"아마도 master를 마지막에 업데이트하는 것이 가장 효율적인 방법일 것입니다...",zh_CN:"记住，最后更新 master 分支可能是最高效的方法……",zh_TW:"要記住喔! 把 master branch 留到最後更新可能是最有效率的方法。",ru_RU:"Не забудь, что лучше всего сдвинуть мастер в самом конце...",uk:"Не забувай, що краще всього буде перемістити master в самому кінці... ",vi:"Hãy nhớ rằng, cách tốt nhất có lẽ là nên cuối cùng mới cập nhật nhánh `master`... "},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebasing Multiple Branches","","Man, we have a lot of branches going on here! Let's rebase all the work from these branches onto master.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, and so on, all in order.","","If you mess up along the way, feel free to use `reset` to start over again. Be sure to check out our solution and see if you can do it in fewer commands!"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebaseando múltiples ramas","","Man, ¡hay un montón de ramas acá! Rebaseemos todo el trabajo de esas ramas sobre master.","","La gente de administración nos está haciendo las cosas un poco complicadas, igual -- quieren que nuestros commits estén todos en orden secuencial. Esto significa que nuestro árbol final tendría que tener `C7` al final, `C6` antes de ese, y así siguiendo, todos en orden.","","Si hacés líos en el camino, sentite libre de usar `reset` para empezar de nuevo. ¡Asegurate de verificar tu solución y ver si podés hacerla en alguna cantidad menor de commandos!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebaseando múltiples ramas","","Fíjate, ¡hay un montón de ramas aquí! Rebaseemos todo el trabajo de esas ramas sobre master.","","La gente de administración nos está haciendo las cosas un poco complicadas, igual -- quieren que nuestros commits estén todos en orden secuencial. Esto significa que nuestro árbol final tendría que tener `C7` al final, `C6` antes de ese, y así siguiendo, todos en orden.","","Si te haces un lío durante el proceso, siéntete libre de usar `reset` para empezar de nuevo. ¡Asegúrate de verificar tu solución y ver si puedes realizarla en un número inferior de commandos!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Fazendo rebase em múltiplos ramos","","Cara, temos um monte de ramos aqui! Vamos fazer um rebase de todo o trabalho contido nesses ramos para o master.","","No entanto, a cúpula da administração está tornando as coisas mais difíceis -- eles querem que os commits estejam todos em ordem sequencial. Isso significa que a nossa árvore final precisa ter o `C7'` por último, `C6'` acima disso, e assim por diante, tudo ordenado.","","Se você fizer besteira, sinta-se livre para usar o comando `reset` para recomeçar do zero. Depois lembre de olhar nossa solução do gabarito para ver se consegue resolver a tarefa usando menos comandos!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["### Fazendo rebase en múltiples ramas","","Neno, temos unha chea de ramas aquí! Imos facer rebase de todo o traballo contido nesas ramas para a master.","","A xente de administración estanos a facer as cousas complicadas, igual eles queren que os commits estén todos en orde secuencial. Isto significa que a nosa árbore final precisa ter `C7'` de último, `C6'` inda por riba, está por adiante, todo ordeado.","","Se te fas un lio polo camiño, síntete ceibe para usar o comando `reset` para comezar de cero outra vez. Despois lembra ollar a nosa solución para ver se consegues resolver a tarefa usando menos comandos!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebaser plusieurs branches","","Dis-donc, nous avons beaucoup de branches par ici ! Rebasons tout le travail de ces branches dans master.","","Les patrons rendent cela encore plus compliqué -- ils veulent que les commits soient fait de manière séquentielle. Cela signifie donc que dans votre arbre final `C7'` est tout en bas, `C6'` juste au-dessus, et ainsi de suite, tout dans cet ordre.","","Si vous faites une erreur en chemin, n'hésitez pas à utiliser `reset` pour recommencer. Pensez à comparer votre solution à la notre et voyez si vous pouvez le faire en moins de commandes !"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Mehrere Branches rebasen","","Wow, wir haben hier ja eine Menge Branches! Lass uns mal die ganze Arbeit, die in diesen Branches steckt, auf den `master` packen, um sie auf Stand zu bringen.","","Die Führungsetage macht die Sache allerdings etwas trickreicher -- die möchten, dass alle Commits in aufsteigender Reihenfolge geordnet sind. Das heißt unser fertiger Baum sollte `C7` ganz unten haben, darüber `C6` und so weiter und so fort.","","Wenn du irgendwo einen Fehler machst, benütze ruhig `reset` um wieder von vorne anzufangen oder `undo` um einen Schritt zurückzugehen. Schau dir die Lösung an und versuch es in weniger Schritten hinzubekommen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### 複数のブランチをリベースする","","さあ、いくつものブランチが出てきます。このブランチたち全てをmasterブランチにリベースしましょう。","","おエライさん方が今回の仕事を少しトリッキーにしてくれました -- コミットはすべて一列の連続した状態にしてほしいそうです。つまり私たちが作るリポジトリの最終的なツリーの状態は、`C7'`が最後に来て、`C6'`がその一つ上に来て、、と順に積み重なるイメージです。","","試行錯誤してツリーが汚くなってきたら、`reset`コマンドを使ってツリーの状態を初期化してください。模範解答をチェックして、それよりも簡単なコマンドで済ませられるかどうかを考えるのも忘れずに！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 多分支 rebase","","哥们儿，我们准备了很多分支！咱们把这些分支 rebase 到 master 上吧。","","但是你的领导给你提了点要求 —— 他们希望得到有序的提交历史，也就是我们最终的结果应该是 `C6'` 在 `C7'` 上面， `C5'` 在 `C6'` 上面，依此类推。","","即使你搞砸了也没关系，用 `reset` 命令就可以重新开始了。记得看看我们提供的答案，看你能否使用更少的命令来完成任务！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### rebase 多個 branch","","嗨！現在我們有很多 branch 了啦！讓我們做一下 rebase，將這些分支接到 master branch 上吧。","","但是你的主管找了點麻煩，他們希望得到有序的 commit history，也就是我們最終的結果是 `C7'` 在最下面，`C6'` 在它上面，以此類推。","","假如你搞砸了，沒有關係啦！你用 `reset` 就可以重新開始！記得看看我們提供的答案，看你是否能夠使用更少的指令完成這一關！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 여러 브랜치를 리베이스(rebase)하기 ","","음, 여기 꽤 여러개의 브랜치가 있습니다! 이 브랜치들의 모든 작업내역을 master에 리베이스 해볼까요?","","윗선에서 일을 복잡하게 만드네요 -- 그 분들이 이 모든 커밋들을 순서에 맞게 정렬하라고 합니다. 그럼 결국 우리의 최종 목표 트리는 제일 아래에 `C7'` 커밋, 그 위에 `C6'` 커밋, 또 그 위에 순서대로 보여합니다.","","만일 작업중에 내용이 꼬인다면, `reset`이라고 쳐서 처음부터 다시 시작할 수 있습니다. 모범 답안을 확인해 보시고, 혹시 더 적은 수의 커맨드로 해결할 수 있는지 알아보세요!"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebase на нескольких ветках","","У нас тут куча веток! Было бы круто перенести все изменения из них в мастер.","","Но начальство усложняет нашу задачу тем, что желает видеть все коммиты по порядку. Так что коммит `С7'` должен идти после коммита `С6'` и так далее.","","Если что-то пойдёт не так – не надо стесняться использовать `reset`, чтобы начать всё с чистого листа. Постарайся сделать как можно меньше манипуляций!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["### Ребейсимо кілька гілок","","В нас тут до біса гілок! Перенесімо всі зміни з різних гілок в master.","","Але вище керівництво нам не полегшує життя -- вони хочуть, щоб всі коміти були впорядковані. Це означає, що в результаті коміт `C7'` має бути з самого низу, `C6'` трохи вище, і так далі, все за порядком.","","Якщо ти щось зробиш не так, сміливо використовуй `reset` щоб почати спочатку. Подивись на наш розв’язок і подумай, чи ти можеш обійтись меншою кількістю команд!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebase nhiều nhánh","","Giời ạ, sao mà nhiều nhánh thế khôn biết! Chuyển hết chúng vào `master` thôi.","","Nhưng mà cha quản lý lại muốn oái oăm hơn cơ -- hắn muốn tất cả commit xếp thẳng hàng. Nghĩa là cây lịch sử của ta sẽ có `C7'` ở cuối, phía trên là`C6'`, và cứ thế theo đúng thứ tự.","","Nếu mà nhỡ may bạn làm nhầm thì có thể dùng lệnh `reset` để bắt đầu lại. Hãy nhớ đối chiếu với đáp án của chúng tôi xem bạn có thể hoàn thành với ít câu lệnh hơn không!"]}}]}}}},{}],132:[function(e,t,o){o.level={compareAllBranchesHashAgnostic:!0,disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22master%22%7D%2C%22one%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22one%22%7D%2C%22two%22%3A%7B%22target%22%3A%22C2%27%27%22%2C%22id%22%3A%22two%22%7D%2C%22three%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22three%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C4%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22two%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout one; git cherry-pick C4 C3 C2; git checkout two; git cherry-pick C5 C4 C3 C2; git branch -f three C2",startTree:'{"branches":{"master":{"target":"C5","id":"master"},"one":{"target":"C1","id":"one"},"two":{"target":"C1","id":"two"},"three":{"target":"C1","id":"three"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{ko:"브랜치 스파게티",en_US:"Branch Spaghetti",fr_FR:"Branche spaghetti",de_DE:"Branch-Spaghetti",es_AR:"Enslada de branches",es_ES:"Ensalada de ramas",pt_BR:"Espaguete de ramos",gl:"Espaguete de ramas",ja:"ブランチスパゲッティ",zh_CN:"纠缠不清的分支",zh_TW:"branch 漿糊",ru_RU:"Спутанные ветки",uk:"Макарони з гілок",vi:"Nhánh rối như canh hẹ"},hint:{en_US:"Make sure to do everything in the proper order! Branch one first, then two, then three",fr_FR:"Faites attention à tout faire dans le bon ordre ! La branche one d'abord, puis la seconde, puis la troisième",de_DE:"Stelle sicher, dass du alles in der richtigen Reihenfolge machst! Branche erst one, dann two, dann three.",es_AR:"¡Asegurate de hacer las cosas en el orden correcto! Brancheá `one` primero, después `two`, y después `three`.",es_ES:"¡Asegúrate de hacer las cosas en el orden correcto! Crea primero la rama `one`, después `two`, y después `three`.",pt_BR:"Certifique-se de fazer tudo na ordem correta! Crie o ramo `one` primeiro, depois `two`, depois `three`.",gl:"¡Afiánzate de facer as cousas no orde correcto! Crea ramas `one` de primeiras, e logo `two` e `three`.",ja:"全て正しい順番で処理すること！oneが最初で、次がtwo、最後にthreeを片付ける。",ko:"이 문제를 해결하는 방법은 여러가지가 있습니다! 체리픽(cherry-pick)이 가장 쉽지만 오래걸리는 방법이고, 리베이스(rebase -i)가 빠른 방법입니다",zh_CN:"确保你是按照正确的顺序来操作！先操作分支 `one`, 然后 `two`, 最后才是 `three`",zh_TW:"確認你是按照正確的順序來操作！先操作 branch  `one`, 然後 `two`, 最後才是 `three`",ru_RU:"Убедись, что у нас всё по порядку! Сначала ветка `one`, потом `two` и только потом `three`",uk:"Переконайся, що все йде за порядком! Спершу гілка `one`, потім `two`, і тільки потім `three`",vi:"Hãy chắc chắn rằng bạn làm đúng thứ tự! Nhánh `one` trước, rồi `two`, rồi mới đến `three`"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","WOAHHHhhh Nelly! We have quite the goal to reach in this level.","","Here we have `master` that is a few commits ahead of branches `one` `two` and `three`. For whatever reason, we need to update these three other branches with modified versions of the last few commits on master.","","Branch `one` needs a re-ordering and a deletion of `C5`. `two` needs pure reordering, and `three` only needs one commit!","","We will let you figure out how to solve this one -- make sure to check out our solution afterwards with `show solution`. "]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branche spaghetti","","WOAHHHhhh ! Nous avons pas mal d'objectifs dans ce niveau.","","Actuellement nous avons `master` qui se situe quelques commits devant les branches `one` `two` et `three`. Pour une raison quelconque, nous avons besoin de mettre ces trois branches à jour avec les modifications des derniers commits sur master.","","La branche `one` a besoin d'une réorganisation et de la suppression de `C5`. `two` doit simplement être réordonnée, et `three` ne nécessite qu'un commit !","","Nous vous laissons imaginer la solution pour ce niveau; comparez avec notre solution après-coup avec la commande `show solution`. "]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ensalada de branches","","¡WOAHHHhhh Nelly! Tenemos un _pequeño_ objetivo al que llegar en este nivel.","","Tenemos un `master` que está algunos commits adelante de `one`, `two` y `three`. Por alguna razón, necesitamos actualizar esas tres ramas con versiones modificadas de los últimos commits de master.","","La rama `one` necesita reordenarse, y eliminar `C5`. `two` necesita sólo reordenamiento, y `three` ¡sólo necesita un commit!","","Te vamos a dejar darte cuenta cómo resolver este -- asegurate de mirar la solución, después, usando `show solution`. "]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ensalada de ramas","","¡Vaya, vaya! Tenemos un _pequeño_ objetivo al que llegar en este nivel.","","La rama `master` se encuentra algunos commits por delante de `one`, `two` y `three`. Por alguna razón, necesitamos actualizar esas tres ramas con versiones modificadas de los últimos commits de master.","","La rama `one` necesita reordenarse, y eliminar `C5`. `two` necesita sólo reordenamiento, y `three` ¡sólo necesita un commit!","","Vamos a dejar que intentes resolver este -- asegúrate de mirar la solución, después, usando `show solution`. "]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Espaguete de ramos","","Uhuuuuu Nelly! Temos um belo de um objetivo para alcançar neste nível.","","Temos aqui um `master` que está alguns commits atrás dos ramos `one`, `two` e `three`. Seja lá por qual razão, precisamos atualizar esses três outros ramos com versões modificadas dos últimos commits do master.","","O ramo `one` precisa de uma reordenação e da exclusão do `C5`. O `two` precisa apenas de reordenação. O `three` precisa de um único commit!","","Vamos deixar você descobrir como resolver esta tarefa -- mas não deixe de ver a nossa solução depois com o comando `show solution`. "]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Espaguete de ramas","","¡Íscalle lura! Temos un _pequeno_ obxectivo que acadar neste nivel.","","Temos aquí un `master` que está algúns commits por detrás das ramas `one`, `two` e `three`. Por algunha razón, precisamos atualizar esas tres ramas con versións modificadas dos últimos commits de master.","","A rama `one` precisa de unha reordenación, e votar fora a `C5`. O `two` precisa apenas de reordenacións. O `three` precisa dun único commit!","","Ímoste deixar resolver o problema por ti mesmo -- pero non deixes de ver a nosa solución, para eso escrebe `show solution`. "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch-Spaghetti","","Puh! Wir haben ein ganz schön schweres Ziel für dieses Level.","","Wir haben hier einen `master`, der ein paar Commits weiter ist als die Branche `one`, `two` und `three`. Aus welchem Grund auch immer müssen wir diese drei anderen Branches mit modifizierten Versionen der paar letzten Commits von `master` aktualisieren.","","Branch `one` benötigt eine Umsortierung und `C5` muss gelöscht werden. `two` muss nur umsortiert werden und `three` braucht nur einen Commit!","","Ich lass dich diese Aufgabe selbst lösen -- schau dir hinterher auf jeden Fall die Lösung mit `show solution` an."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチスパゲッティ","","なんということでしょう。今回のレベルクリアのために、やることがたくさんあります。","","いま`master`が指しているコミットの数個前のコミットに、ブランチ`one`、`two`それから`three`があります。何か事情があって、これらの3つのブランチをmasterが指している最新の状態に更新したいケースを考えます。","","ブランチ`one`に対しては、順序の変更と`C5`の削除が必要です。`two`では順序の変更のみ、`three`に対しては1回だけコミットすればOKです。","","`show solution`コマンドで模範解答を確認できますから、こちらも利用してください。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 纠缠不清的分支","","哇塞大神！这关我们要来点不同的！","","现在我们的 `master` 分支是比 `one`、`two` 和 `three` 要多几个提交。出于某种原因，我们需要把 `master` 分支上最近的几次提交做不同的调整后，分别添加到各个的分支上。","","`one` 需要重新排序并删除 `C5`，`two` 仅需要重排排序，而 `three` 只需要提交一次。","","慢慢来，你会找到答案的 —— 记得通关之后用 `show solution` 看看我们的答案哦。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","哇塞大神！這關我們要來點不同的！","","現在我們的 `master` branch 是比 `one` `two` 和 `three` 這三個 branch 多了幾個 commit。由於某種原因，我們需要將 master 所新增的幾個 commit 套用到其它三個 branch 上面。","","`one` branch 需要重新排序和取消 `C5` 這一個 commit， `two` 需要完全重排，而 `three` 只需要再一個 commit。","","我們會讓你知道如何解決這個問題，之後請記得用 `show solution` 看看我們的答案喔。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치 스파게티","","음, 이번에는 만만치 않습니다!","","여기 `master` 브랜치의 몇 번 이전 커밋에 `one`, `two`,`three` 총 3개의 브랜치가 있습니다. 어떤 이유인지는 몰라도, master의 최근 커밋 몇 개를 나머지 세 개의 브랜치에 반영하려고 합니다.","","`one` 브랜치는 순서를 바꾸고 `C5`커밋을 삭제하고, `two`브랜치는 순서만 바꾸며, `three`브랜치는 하나의 커밋만 가져옵시다!","","자유롭게 이 문제를 풀어보시고 나서 `show solution`명령어로 모범 답안을 확인해보세요."]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Спутанные ветки","","УОУ! В этом уровне придётся попотеть!","","У нас тут по несколько коммитов в ветках `one`, `two` и `three`. Не важно почему, но нам надо видоизменить эти три ветки при помощи более поздних коммитов из ветки `master`.","","Ветка `one` нуждается в изменении порядка и удалении `C5`. `two` требует полного перемешивания, а `three` хочет получить только один коммит","","Как пройти этот уровень – решать тебе, а как найдёшь решение – сравни его с нашим при помощи `show solution`."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Макарони з гілок","","Ооо Неля! Ну й завданнячко.","","Ми маємо гілку `master`, яка на кілька комітів попереду гілок `one`, `two` та `three`. З незрозумілих причин, нам потрібно оновити ці гілки більш пізніми змінами з мастеру.","","Гілку `one` потрібно впорядкувати і видалити `C5`. Гілку `two` також потрібно впорядкувати, а в гілку `three` потрібно додати ще один коміт!","","Ми повністю покладаємось на тебе -- порівняй свій розв’зок з нашим, який можна подивитись командою `show solution`. "]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Nhánh rối như canh hẹ","","Chààà, anh bạn! Thử thách lần này hơi khoai đây.","","Hiện tại thì nhánh `master` đang có nhiều commit hơn các nhánh `one`, `two` và `three`. Vì một lý do nào đó, ta cần cập nhật những commit trên nhánh `master` lên các nhánh còn lại kèm với một vài điều chỉnh .","","Nhánh `one` thì cần sắp xếp lại và xóa commit `C5`, trong khi đó nhánh `two` thì đơn giản sắp xếp, còn `three` thì chỉ cần một commit!","","Cố gắng động não tìm ra cách đi nhé -- khi bạn làm xong thì nhớ so sánh với đáp án của chúng tôi bằng lệnh `show solution`. "]}}]}}}},{}],133:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone",name:{en_US:"Clone Intro",fr_FR:"Introduction à clone",de_DE:"Clone Einführung",ja:"Clone入門",es_AR:"Introducción a clone",es_ES:"Introducción a clone",pt_BR:"Introdução à clonagem",gl:"Introducción a clone",zh_CN:"Git Clone",zh_TW:"介紹 clone",ru_RU:"Введение в клонирование",ko:"Clone 소개",uk:"Знайомство з clone",vi:"Giới thiệu về clone"},hint:{en_US:"Just git clone!",fr_FR:"Simplement git clone !",de_DE:"Einfach git clone ausführen!",ja:"単にgit clone!",zh_CN:"只要 git clone 就可以了!",es_AR:"Simplemente hacé git clone!",es_ES:"¡Simplemente escribe `git clone`!",pt_BR:"Basta fazer um git clone!",gl:"¡Chega con facer git clone!",zh_TW:"只要 git clone 就好了",ru_RU:"Простой git clone!",ko:"그냥 git clone 하세요!",uk:"Просто git clone!",vi:"Đơn giản là `git clone`!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Remote repositories aren't actually that complicated. In today's world of cloud computing it's easy to think that there's a lot of magic behind git remotes, but they are actually just copies of your repository on another computer. You can typically talk to this other computer through the Internet, which allows you to transfer commits back and forth.","","That being said, remote repositories have a bunch of great properties:","","- First and foremost, remotes serve as a great backup! Local git repositories have the ability to restore files to a previous state (as you know), but all that information is stored locally. By having copies of your git repository on other computers, you can lose all your local data and still pick up where you left off.","","- More importantly, remotes make coding social! Now that a copy of your project is hosted elsewhere, your friends can contribute to your project (or pull in your latest changes) very easily.","","It's become very popular to use websites that visualize activity around remote repos (like [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), but remote repositories _always_ serve as the underlying backbone for these tools. So it's important to understand them!"]}},{type:"ModalAlert",options:{markdowns:["## Our Command to create remotes","","Up until this point, Learn Git Branching has focused on teaching the basics of _local_ repository work (branching, merging, rebasing, etc). However now that we want to learn about remote repository work, we need a command to set up the environment for those lessons. `git clone` will be that command","","Technically, `git clone` in the real world is the command you'll use to create _local_ copies of remote repositories (from github for example). We use this command a bit differently in Learn Git Branching though -- `git clone` actually makes a remote repository out of your local one. Sure it's technically the opposite meaning of the real command, but it helps build the connection between cloning and remote repository work, so let's just run with it for now.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets start slow and just look at what a remote repository looks like (in our visualization).",""],afterMarkdowns:["There it is! Now we have a remote repository of our project. It looks pretty similar except for some visual changes to make the distinction apparent -- in later levels you'll get to see how we share work across these repositories."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply `git clone` your existing repository. The real learning will come in following lessons."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Les dépôts distants (remote repositories) ne sont pas si compliqués que ça. Dans l'ère actuelle du cloud computing il est facile de croire qu'il y a un peu de magie derrière les branches distantes, mais elles sont en fait juste des copies de votre dépôt local sur un autre ordinateur. Vous pouvez donc vous connecter à cet ordinateur par Internet, ce qui vous permet de transférer les commits en retard et en avance.","","Cela dit, les branches distantes ont plusieurs propriétés puissantes :","","- Avant toute chose, le dépôt distant sert de sauvegarde ! Le dépôt local de git a la capacité de restaurer des fichiers à un état précédent (comme vous le savez), mais toutes les informations sont stockées localement. En ayant des copies de votre dépôt git sur d'autres ordinateurs, vous pouvez perdre vos données et toujours repartir de là où vous en étiez resté.","","- Plus important encore, les dépôts distants sociabilisent le projet ! Maintenant qu'il est hébergé quelque part ailleurs, vos amis peuvent y contribuer facilement (ou récupérer vos derniers changements).","","Il est devenu courant de visualiser l'activité sur dépôt distant via des sites internet (comme [Github](https://github.com/) ou [Phabricator](http://phabricator.org/)), mais les dépôts distants servent _toujours_ de colonne vertébrale à ce système. C'est donc important de les comprendre !"]}},{type:"ModalAlert",options:{markdowns:["## Les commandes pour créer des dépôts distants","","Jusqu'à maintenant, Learn Git Branching s'est surtout concentré sur l'apprentissage des bases du travail sur un dépôt _local_ (branch, merge, rebase, etc). Cependant maintenant nous voulons savoir comment travailler sur les dépôts distants, nous avons besoin d'une commande pour l'environnement de ces leçons. `git clone` sera cette commande.","","Techniquement, `git clone` dans le monde réel sera la commande que vous utiliserez pour créer des copies _locales_ des dépôts distants (de github par exemple). Nous utilisons cette commande un peu différemment dans Learn Git Branching car `git clone` crée ici un dépôt distant à partir de votre dépôt local. Il est certain qu'il s'agit donc du sens opposé de la commande originale, mais cela aide à construire la connexion entre le clonage et le travail sur le dépôt distant, travaillons donc avec cela pour l'instant.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Commençons doucement et regardons à quoi ressemble un dépôt distant (dans notre visualisation).",""],afterMarkdowns:["Nous y sommes ! Maintenant nous avons un dépôt distant de notre projet. Cela ressemble fortement à d'habitude, en dehors de quelques changements pour rendre compte des différences -- dans les niveaux suivants vous allez voir comment partager le travail entre ces dépôts."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faites simplement un `git clone` du dépôt existant. Le réel apprentissage arrivera dans les prochaines leçons."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Los repositorios remotos no son _tan_ complicados. En el mundo actual de la computación en la nube es bastante facil pensar que hay un montón de magia detrás de los remotes de git, pero en realidad sólo son copias de tu repositorio en otra computadora. Típicamente vas a hablar con esta otra computadora a través de Internet, lo que permite transferir commits de un lado a otro.","","Habiendo dicho eso, los repositorios remotos tienen un par de propiedades copadas:","","- Primero y principal, los remotos ¡son un genial backup! Los repositorios locales de git tienen la habilidad de restaurar archivos a un estado previo (como ya sabés), pero toda esa información está almacenada localmente. Al tener copias de tu repositorio git en otras computadoras, podés perder todos tus datos locales y aún así retomar de donde habías dejado.","","- Más importante, ¡los remotos sociabilizan la programación! Ahora que hay una copia de tu proyecto hosteada en otro lugar, tus amigos pueden contribuir a tu proyecto (o bajarse los últimos cambios) de un modo muy sencillo.","","Se volvió bastante popular el uso de sitios web que muestran la actividad de los repositorios (como [Github](https://github.com/) o [Phabricator](http://phabricator.org/)), pero esos repositorios remotos _siempre_ sirven como la base subyacente de esas herramientas. Así que ¡es importante entenderlos!"]}},{type:"ModalAlert",options:{markdowns:["## Nuestro comando para crear remotos","","Hasta este punto, Learn Git Branching se centró en enseñar las bases del trabajo _local_ con repositorios (branchear, mergear, rebasear, etc). Sin embargo, ahora que queremos aprender sobre el trabajo con repositorios remotos, necesitamos un comando para inicializar nuestro entorno para esas lecciones. Ese comando será `git clone`","","Técnicamente, `git clone` en el mundo real es el comando que usarías para crear copias _locales_ de un repositorio remoto (uno de GitHub, por ejemplo). Acá usamos este comando de un modo un tanto distinto, en cambio -- `git clone` va a crear un repositorio remoto a partir del tuyo local. Estamos de acuerdo en que es el significado técnicamente opuesto al del comando real, pero ayuda bastante a entender la conexión entre el clonado y el trabajo en un repositorio remoto, así que vamos a vivir con ello por ahora.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Comencemos despacio y simplemente veamos cómo se ve un repositorio remoto en nuestra visualización.",""],afterMarkdowns:["¡Ahí está! Ahora tenemos un repositorio remoto de nuestro proyecto. Parece bastante similar, salvando algunos cambios visuales para hacer evidente la distinción -- en niveles posteriores vas a ver cómo compartir trabajo entre estos repositorios."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente hacé `git clone` de tu repositorio existente. El verdadero aprendizaje viene en las próximas lecciones."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Los repositorios remotos no son _tan_ complicados. En el mundo actual de la computación en la nube es bastante facil pensar que hay un montón de magia detrás de los remotes de git, pero en realidad sólo son copias de tu repositorio en otra computadora. Típicamente vas a hablar con esta otra computadora a través de Internet, lo que permite transferir commits de un lado a otro.","","Habiendo dicho eso, los repositorios remotos tienen un par de propiedades interesantes:","","- Primero y principal, los remotos ¡son un backup genial! Los repositorios locales de git tienen la habilidad de restaurar archivos a un estado previo (como ya sabes), pero toda esa información se encuentra almacenada localmente. Al tener copias de tu repositorio git en otras computadoras, puedes perder todos tus datos locales y aún así retomar el trabajo en el punto donde lo habías dejado.","","- Más importante, ¡los remotos sociabilizan la programación! Ahora que hay una copia de tu proyecto hosteada en otro lugar, tus amigos pueden contribuir a tu proyecto (o bajarse los últimos cambios) de un modo muy sencillo.","","Se volvió bastante popular el uso de sitios web que muestran la actividad de los repositorios (como [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), pero esos repositorios remotos _siempre_ sirven como la base subyacente de esas herramientas. Así que ¡es importante entenderlos!"]}},{type:"ModalAlert",options:{markdowns:["## Nuestro comando para crear remotos","","Hasta este punto, Learn Git Branching se centró en enseñar las bases del trabajo _local_ con repositorios (crear ramas, mergear, rebasear, etc). Sin embargo, ahora que queremos aprender sobre el trabajo con repositorios remotos, necesitamos un comando para inicializar nuestro entorno para esas lecciones. Ese comando será `git clone`","","Técnicamente, `git clone` en el mundo real es el comando que usarías para crear copias _locales_ de un repositorio remoto (uno de GitHub, por ejemplo). Aquí usamos este comando de un modo un tanto distinto, en cambio -- `git clone` va a crear un repositorio remoto a partir del tuyo local. Estamos de acuerdo en que es el significado técnicamente opuesto al del comando real, pero ayuda bastante a entender la conexión entre el clonado y el trabajo en un repositorio remoto, así que vamos a vivir con ello por ahora.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Comencemos despacio y simplemente veamos cómo se ve un repositorio remoto en nuestra visualización.",""],afterMarkdowns:["¡Ahí está! Ahora tenemos un repositorio remoto de nuestro proyecto. Parece bastante similar, salvando algunos cambios visuales para hacer evidente la distinción -- en niveles posteriores vas a ver cómo compartir trabajo entre estos repositorios."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente ejecuta `git clone` en tu repositorio existente. El verdadero aprendizaje viene en las próximas lecciones."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Remotos no Git","","Repositórios remotos não são algo muito complicado. Nos dias atuais de computação em nuvem, seria fácil pensar que existiria muita mágica por trás dos remotos do Git, mas não é o caso -- eles são na verdade apenas cópias do seu repositório em outro computador. Você pode geralmente comunicar-se com esse outro computador por meio da Internet, o que permite que você transfira commits de um lado para o outro.","","Tendo dito isto, repositórios remotos tem uma série de propriedades interessantes:","","- Primeiro e antes de tudo, repositórios remotos servem como um ótimo backup! Repositórios Git locais possuem a habilidade de restaurar um arquivo para um estado anterior (como você sabe), mas toda a informação está guardada localmente. Tendo cópias do seu repositório Git em outros computadores, mesmo se você perder todos os seus dados locais, ainda terá como recomeçar do mesmo ponto de onde você tinha parado.","","- Ainda mais importante, repositórios remotos tornam o desenvolvimento uma atividade social! Agora que uma cópia do seu projeto está hospedada em outro lugar, seus amigos podem contribuir para o seu projeto (ou obter as suas últimas alterações) de uma forma bastante simples.","","Está se tornando bastante popular o uso de websites para visualizar a atividade em repositórios (como o [Github](https://github.com/) ou o [Phabricator](http://phabricator.org/)), mas o recurso de repositórios remotos _sempre_ serve como mecanismo base para essas ferramentas. Então é importante entender como ele funciona!"]}},{type:"ModalAlert",options:{markdowns:["## Nosso comando para criar remotos","","Até este ponto, o Learn Git Branching focou em ensinar o básico a respeito de trabalho em repositórios _locais_ (branch, merge, rebase, etc). Entretanto, agora que queremos aprender como repositórios remotos funcionam, precisamos de um comando para configurar o ambiente para essas lições. Esse comando será o `git clone`.","","Tecnicamente, o `git clone` do mundo real é um comando que se usa para criar cópias _locais_  de repositório remotos (do GitHub para o seu computador, por exemplo). Todavia, por motivos logísticos, nós usaremos esse comando de uma forma um pouco diferente no Learn Git Branching -- aqui o `git clone` criará um repositório remoto a partir do repositório local. Certamente, esse comportamento é exatamente o oposto do comando real, mas apesar disso ele ajuda a formar a conexão mental entre a clonagem e a forma como repositórios remotos funcionam, então vamos usá-lo dessa forma mesmo por enquanto.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos começar devagar e apenas olhar como um repositório remoto se parece na nossa visualização.",""],afterMarkdowns:["Aqui está ele! Agora temos um repositório remoto do nosso projeto. Ele é muito parecido exceto por algumas mudanças visuais para tornar a distinção factível -- nas tarefas a seguir veremos como compartilhar trabalho entre esses repositórios."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente chame o comando `git clone`. Você aprenderá algo de verdade somente nas próximas lições."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Repositorios remotos en Git","","Os repositorios remotos non son complicados en git. Actualmente ca computación na nube, pódese pensar que hai moita maxia tras os repositorios remotos de git, pero para nada é así -- en verdade son copias do repositorio, pero noutra máquina. Ti podes comunicarte xeralmente con esa outra máquina por medio de internet, o que permite que mandes commits de un repositorio cara o outro.","","Dito isto, os repositorios remotos teñen propiedades interesantes:","","- Primeiro e antes de todo, os repositorios remotos serven como unha copia de seguranza! Os repositorios locais posúen a habilidade de restaurar un arquivo nun estado anterior (como xa sabes), pero toda á información está gardada. Tendo copias do repositorio noutras máquinas, incluso poderías perder tódolos datos da túa computadora, e comenzar a traballar no punto onde o deixaches no último commit.","","- Máis importante aún, ¡os repositorios remotos fan que o desenvolvemento sexa social! Agora que existe unha copia do teu código noutro lugar, os teus amigos poden contribuír no teu proxecto (ou obter os últimos cambios) dunha forma moi simple.","","Hai webs moi populares onde se pode ver a actividade dos repositorios (como [Github](https://github.com/) ou [Phabricator](http://phabricator.org/)), pero estes recursos remotos _sempre_ axudan como mecanismo de base para esas ferramentas. ¡Entón é importante saber cómo funcionan!"]}},{type:"ModalAlert",options:{markdowns:["## O noso comando para crear remotos","","Ata este punto, Learn Git Branching enfocouse en ensinar o básico respecto do traballo en repositorios _locais_ (branch, merge, rebase, etc). Entretanto, agora que queremos aprender como os repositorios remotos funcionan, precisamos dun comando para configurar o entorno para esas leccións. Este comando será `git clone`.","","Técnicamente, `git clone` no mundo real é un comando que fai copias _locais_ de repositório remotos (de GitHub para a túa máquina, por exemplo). Todavía, por motivos loxísticos, nós usaremos ese comando dunha forma un pouco diferente, Learn Git Branching -- aquí `git clone` creará un repositorio remoto a partir do repositorio local. Certamente, ese comportamento é exactamente o oposto do comando real, pero a pesares de iso axudarate a formar unha conexión mental entre a clonación e como funcionan os repositorios remotos, entón imos usalo desa forma.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Imos comenzar a modo, e só ollar cómo un repositorio remoto semellase á nosa visualización.",""],afterMarkdowns:["¡Aquí o tes! Agora temos un respositorio remoto do noso proxecto. El é moi parecido exceto por algúns cambios visuais para ter a unha distinción visible -- nas tarefas a seguir veremos como compartir o traballo entre eses repositorios."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, escribe o comando `git clone`. Aprenderás algo de verdade sóamente nas próximas leccións."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","remote (遠端) repository 並不會很難了解. 藉由現在的雲端運算，可以很輕易地了解到在 git remote 裡面有很多有趣的事情，但它們其實其實就只是你的或者是其它電腦上的 repository 的副本。你可以輕易地透過網路去發送你的 commit 給其它的電腦。","","也就是說，remote repository 有很多有趣的地方：","","- 第一，remote 是用來備份的! 本地端的 git 有能力可以回復文件到前一個狀態 (你知道的)，但是全部的資訊還是儲存在本地端。如果你在其它的電腦上面有你的 git repository 的副本，則你可以在資料不小心遺失的時候進行救援備份","","- 更重要的是, remote 讓大家一起來 coding！現在你的 project 放在 remote 上面，你的朋友可以很容易地對你的 project 做出貢獻（或者是 pull 你最後的修改） 。","","使用網站去對 remote repository 做視覺化非常流行（例如 [Github](https://github.com/） 或者是 [Phabricator]（http://phabricator.org/）），但這背後最大的功臣是 remote repository，因此我們務必要了解它。"]}},{type:"ModalAlert",options:{markdowns:["## 我們去建立 remotes 的指令","","到目前為止，Learn Git Branching 著重在解釋本地端的工作（branching, merging, rebasing 以及其它指令）， 但是我們現在想要學習針對 remote 的指令，我們需要一個指令去建立環境，`git clone` 就是我們需要的指令","","技術上來說， `git clone` 表示你想要把遠端的 repository 複製一份下來放在本地端（ 例如從 github 複製）。 雖然 `git clone` 實際上是把遠端的 repository 複製下來放在本地端，在 Learn Git Branching 中，我們用的這個指令會有一點不同。雖然他跟真實的指令的意思相反，但是它可以建立起本地端以及遠端的一個連結，現在讓我們看看如何使用它吧。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們慢慢來，並且看看 remote repository 是長什麼樣子（在我們的視覺化圖形中）。",""],afterMarkdowns:["就是那樣！現在我們有了一個放置了我們 project 的 remote repository。除了一些視覺上的改變之外，它們看起來很像，在之後的關卡中你就會看到我們如何分享我們的工作到這些 repository 上面。"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只要打 `git clone，其它的學習會在後面的關卡中出現。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 远程仓库","","远程仓库并不复杂, 在如今的云计算盛行的世界很容易把远程仓库想象成一个富有魔力的东西, 但实际上它们只是你的仓库在另个一台计算机上的拷贝。你可以通过因特网与这台计算机通信 —— 也就是增加或是获取提交记录","","话虽如此, 远程仓库却有一系列强大的特性","","- 首先也是最重要的的点, 远程仓库是一个强大的备份。本地仓库也有恢复文件到指定版本的能力, 但所有的信息都是保存在本地的。有了远程仓库以后，即使丢失了本地所有数据, 你仍可以通过远程仓库拿回你丢失的数据。","","- 还有就是, 远程让代码社交化了! 既然你的项目被托管到别的地方了, 你的朋友可以更容易地为你的项目做贡献(或者拉取最新的变更)","","现在用网站来对远程仓库进行可视化操作变得越发流行了(像 [Github](https://github.com/) 或 [Phabricator](http://phabricator.org/)), 但远程仓库**永远**是这些工具的顶梁柱, 因此理解其概念非常的重要!"]}},{type:"ModalAlert",options:{markdowns:["## 我们创建远程仓库的命令","","直到现在, 教程都聚焦于**本地**仓库的操作（branch、merge、rebase 等等）。但我们现在需要学习远程仓库的操作 —— 我们需要一个配置这种环境的命令, 它就是 `git clone`。","从技术上来讲，`git clone` 命令在真实的环境下的作用是在**本地**创建一个远程仓库的拷贝（比如从 github.com）。 但在我们的教程中使用这个命令会有一些不同 —— 它会在远程创建一个你本地仓库的副本。显然这和真实命令的意思刚好相反，但是它帮咱们把本地仓库和远程仓库关联到了一起，在教程中就凑合着用吧。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们慢慢来，先看看远程仓库（在图示中）的样子。",""],afterMarkdowns:["就是它了! 现在我们有了一个自己项目的远程仓库。除了远程仓库使用虚线之外, 它们几乎没有什么差别 —— 在后面的关卡中, 你将会学习怎样在本地仓库和远程仓库间分享工作成果。"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["要完成本关, 用 `git clone` 复制下你的仓库就可以了。后续的课程我们会正式地学习"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Entfernte Repositorys sind nicht weiter kompliziert. In dieser Welt des Cloud Computings könnte man vielleicht glauben, dass hinter entfernten Git-Repositorys eine Menge Magie steckt, aber es sind einfach nur Kopien eines Repositorys auf einem anderen Rechner. Du kannst mit diesem Rechner typischerweise über das Internet kommunizieren, was es dir ermöglicht Commits hin und her zu schicken.","","Nichts desto weniger haben entfernte Repositorys eine Menge toller Eigenschaften:","","- Vor allem: sie sind ein super Backup! Lokale Git-Repositorys können deine Arbeitskopie ein jeden beliebigen früheren Zustand versetzen (wie du ja weißt), aber all diese Informationen liegen eben bei dir lokal. Wenn es Kopien von deinem Repository auf anderen Rechnern gibt, kannst du ruhig all deine Daten verlieren und trotzdem genau da weitermachen, wo du aufgehört hast.","","- Noch wichtiger: Remotes geben dem Entwickeln eine soziale Komponente! Wenn eine Kopie deines Projekts woanders liegt können deine Freunde sehr einfach etwas zu dem Projekt beitragen (oder sich deine neuesten Änderungen holen).","","Websites, die die Aktivitäten um diese entfernten Repositorys darstellen (wie [Github](https://github.com/) oder [Phabricator](http://phabricator.org/)) erfreuen sich zunehmender Beliebtheit, aber entfernte Repositorys sind _immer_ das Rückgrat für diese Werkzeuge. Deshalb ist es wichtig, sie zu verstehen."]}},{type:"ModalAlert",options:{markdowns:["## Der Befehl um ein Remote zu erstellen","","Bis jetzt hat sich Learn Git Branching darauf konzentriert, die Grundlagen der _lokalen_ Arbeit mit Repositorys zu vermitteln (Branche anlegen, zusammenführen, Rebasen etc). Jetzt wollen wir allerdings lernen mit entfernten Repositorys zu arbeiten und brauchen für die Level eine entsprechende Umgebung. Die schaffen wir mit `git clone`.","",'In der Realität ist `git clone` eigentlich der Befehl, mit dem du eine _lokale_ Kopie eines _entfernten_ Repositorys erstellst (das zum Beispiel auf Github liegt). Wir benutzen diesen Befehl in Learn Git Branching allerdings ein wenig anders -- hier macht `git clone` tatsächlich eine Kopie von deinem lokalen Repository auf einem "entfernten Server". Klar, das ist eigentlich genau das Gegenteil von dem was der echte Befehl macht, aber es hilft den Zusammenhang zwischen Cloning und der Arbeit mit entfernten Repositorys herzustellen, also machen wir\'s einfach so.',""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Fangen wir langsam an und schauen nur wie ein entferntes Repository in unserer Darstellung aussieht.",""],afterMarkdowns:["Da ist es! Jetzt haben wir ein entferntes Repository unseres Projektes. Es sieht so aus wie das lokale, nur mit ein paar Änderungen in der Darstellung -- in späteren Leveln wirst du sehen, wie man Änderungen zwischen den Repositorys austauschen kann."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen führ einfach `git clone` auf deinem bestehenden Repository aus. Alles weitere kommt in den nächsten Leveln."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitリモート","","リモートのリポジトリというのはそんなに複雑なものでもありません。クラウドコンピューティングが普及している現在の世界では、gitリモートの裏には何か不思議な仕組みが動いていると思いやすいのですが、実は別のコンピュータ上に保存されているあなたのリポジトリのコピーにすぎません。通常、インターネットを媒体に使って別のコンピュータと対話し、コミットを交互にやり取りすることができます。","","とはいえ、リモートリポジトリにはいくつかの素晴らしい特徴があります:","","- まず、リモートはバックアップの役割を果たします。ご存知の通り、ローカルのgitリポジトリは以前の状態にファイルを復帰する機能を持っているのですが、その情報はすべてローカルに保存されています。gitリポジトリを別のコンピュータにも保存することで、ローカルのデータがすべて失われたとしても、保存状態からコーディングを続けられます。","","- それよりも大切なこととして、リモートではコードをより一般的に公開できます！プロジェクトのコピーが別の場所に保存されているため、友達などが簡単にそのプロジェクトに参加したり最近の変更をpullしたりできます。","","最近ではリモートリポジトリに関するデータをビジュアル的に表示するウェブサイト([Github](https://github.com/)や[Phabricator](http://phabricator.org/)など)の使用が人気を集めていますが、リモートリポジトリは_そのいずれの_ウェブサイトの裏にも使われています。なので理解する必要があります。"]}},{type:"ModalAlert",options:{markdowns:["## リモートを作成するコマンド","","今までLearn Git Branchingでは_ローカル_リポジトリの様々な作業（branch, merge, rebaseなど）に焦点を当ててきました。しかし、これからはリモートリポジトリの作業を学びますので、レッスンのために環境をセットアップする必要があります。そのコマンドは`git clone`になります。","","通常、`git clone`はリモートリポジトリ（githubなどから）を_ローカル_にコピーする時に使います。しかしLearn Git Branchingでは少し違ったように使います -- ここでは`git clone`が_ローカルリポジトリ_をリモートにコピーします。本当のコマンドの逆の動作になっているのですが、学んでいくうちにcloneとリモートリポジトリのつながりが見えてくるはずです。なので、今はとりあえず例として使ってみましょう。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["最初の一歩として、ビジュアライズでリモートリポジトリを見てみましょう。",""],afterMarkdowns:["できました! プロジェクトのリモートリポジトリが保存されました。結構似ているのですが、その違いを明らかにするために少しだけビジュアルを工夫しました -- これからのレベルではこれらのリポジトリの間で作業をどう共有するか見ていきます。"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、`git clone`で既存のリポジトリのクローンを作成します。次のレッスンでより詳細に見ていきます。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Удалённые репозитории в Git","","На самом деле удалённые репозитории в Git не так сложны, как кажутся на первый взгляд. Кажется, что в современном мире облачных вычислений под термином «удалённый репозиторий» подразумевается что-то сложное и загадочное. Однако, удалённые репозитории — это всего-навсего копии вашего репозитория, хранящиеся на другом компьютере. Обычно вы можете связываться с этим другим компьютером через Интернет, что позволяет вам передавать коммиты туда и сюда.","","Как уже было сказано, удалённые репозитории обладают рядом замечательных свойств:","","- В первую очередь, удалённые репозитории - это замечательное средство резервного копирования! Насколько вам известно, локальные репозитории способны восстанавливать файлы, используя предыдущие состояния, но вся эта информация хранится локально. Потеряв все свои локальные данные, вы способны восстановить их при наличии копии своего репозитория на другом компьютере.","","- Что ещё более важно, удалённые репозитории позволяют сделать процесс разработки более социальным! Теперь, когда копия вашего проекта размещена в другом месте, ваши друзья запросто могут внести свой вклад в ваш проект или забрать последние и актуальные изменения.","","Набирает популярность использование web-сайтов для визуализации активности удалённых репозиториев (например, [GitHub](https://github.com/) или [Phabricator](http://phabricator.org/)), однако удалённые репозитории _всегда_ выступают в качестве базы для таких инструментов. Поэтому так важно понимать, как устроены удалённые репозитории!"]}},{type:"ModalAlert",options:{markdowns:["## Наша команда для создания удалённого репозитория","","До настоящего момента мы были сфокусированы на изучении основ работы с _локальным_ репозиторием (ветвление, слияние, перемещение и т.д.). Однако теперь, когда мы хотим научиться работать с удалёнными репозиториями, нам нужны новые команды для настройки рабочей среды для этих упражнений. Такой командой нам послужит `git clone`","","Технически, `git clone` в реальной жизни - это команда, которая создаст _локальную_ копию удалённого репозитория (например, с GitHub). На наших занятиях в Learn Git Branching мы используем эту команду немного иначе - `git clone` создаёт удалённый репозиторий на основе вашего локального репозитория. На самом деле, это является полной противоположностью реальной команды, однако такой подход поможет нам наладить связь между склонированным и удалённым репозиторием. Давайте просто запустим эту команду.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте начнём постепенное изучение и взглянем на то, что собой представляет удалённый репозиторий (в нашем представлении).",""],afterMarkdowns:["Вот так! Теперь у нас есть удалённый репозиторий нашего проекта. Выглядит всё довольно одинаковым за исключением некоторых визуальных различий - в последующих уровнях вы увидите, как мы разделяем работу по этим репозиториям."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Чтобы завершить уровень, просто выполните `git clone` на своём существующем репозитории. Настоящее обучение появится в последующих уроках."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remote(원격)","","원격 저장소라는것이 사실 그다지 복잡한 개념은 아닙니다. 오늘날의 클라우드 컴퓨팅을 떠올리면 git remote의 이면에 수많은 마법이 부려지고 있을것 같지만, 사실 git remote 또 하나의 컴퓨터에 있는 여러분의 저장소의 복사본일 뿐입니다. 여러분은 일반적으로 인터넷을 통해서 이 또 하나의 컴퓨터와 커밋을 주고 받는등 대화를 할 수 있습니다.","","소개한김에 자랑까지 하자면 원격 저장소는 수많은 장점들이 있습니다:","","- 무엇보다 먼저, 원격 저장소는 백업으로서의 역할을 훌륭하게 수행합니다! 로컬 git 저장소는 파일들을 이전의 상태로 되돌리는 기능을 가지고 있습니다(아시다시피). 하지만 그 모든 정보가 로컬(내PC)에 저장되어 있습니다. 여러분의 git 저장소를 다른 컴퓨터에 복사본을 가지고있으면 로컬 데이터를 다 잃더라도 다른 컴퓨터에 남아있는 복사본으로 다시 출발 할 수 있습니다.","","- 더 중요한 것은, 원격 저장소를 통해 코딩을 다른 사람들과 함께 할 수 있다는것입니다. 여러분의 프로젝트의 복사본이 어느곳에선가 호스트되기때문에 여러분의 친구가 프로젝트에 아주 쉽게 기여할 수 있게됩니다(최근의 변화를 pull하거나).","","원격 저장소에서의 활동을 시각화해주는 웹 사이트들을 사용하는것이 추세입니다 ([Github](https://github.com/) 또는 [Phabricator](http://phabricator.org/)등이 있습니다). 원격 저장소가 _항상_ 이러한 도구들의 중심 뼈대를 이루고있습니다. 그래서 잘 아는것이 중요해요!"]}},{type:"ModalAlert",options:{markdowns:["## 원격 저장소를 생성하는 명령어","","지금까지, Git 브랜치 배우기는 _로컬_ 저장소가 어떻게 활용되는지에 대해 중점적으로 소개해 왔습니다(브랜치, 합병, 리베이스 등등). 이제 원격 저장소를 어떻게 활용하는지에 대해 배워보려고 합니다. 앞으로 이어질 레슨의 환경을 마련할 명령어가 필요합니다. `git clone`가 바로 그 명령어 입니다.","","실제로 `git clone`은 원격 저장소의 복사본을 _로컬_에 생성할때 사용하는 명령어 입니다(github에서 가져올때 라던가). Git 브랜치 배우기에서는 이 명령어를 살짝 다르게 사용합니다 -- `git clone`이 당신의 로컬 저장소에서 원격 저장소를 생성해냅니다. 물론 실제 명령어와 반대로 작동하는 것이지만 클론과 원격 저장소 사이의 연결관계를 이해하는데 도움이되서 이렇게 했습니다. 일단은 그냥 해봅시다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["천천히 시작해봅시다. 일단 원격저장소가 우리 시각화 자료에서 어떻게 보이는지부터 봅시다.",""],afterMarkdowns:["자! 이제 우리 프로젝트의 원격 저장소를 가지게 되었습니다. 구분을 하기위해 조금 모양이 다른것 말고는 둘이 똑같게 생긴걸 알 수 있습니다 -- 뒤의 레벨에서는 우리가 이 저장소들 사이에서 어떻게 작업을 공유하는지 알아보겠습니다."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하기 위해서 `git clone`을 입력하세요. 뒤의 레슨에서 더많은 것들을 배워볼 것입니다."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Віддалені репозиторії","",'Віддалені репозиторії не є дуже складними. В сучасному світі, де на кожному кроці можна зустріти "хмарні обчислення", може видатися, що концепція віддалених репозиторіїв є дуже складною, але насправді вони -- просто звичайні копії твого репозиторію на віддаленому комп’ютері. Зазвичай з цим віддаленим комп’ютером можна зв’язатися через інтернет, що дозволяє обмінюватись комітами.',"","Приймаючи до уваги все сказане вище, віддалені репозиторії мають купу чудових властивостей:","","- В першу чергу, віддалені сервери -- це завжди чудова резевна копія (бекап)! Локальний репозиторій дає можливість відкотитися до попереднього стану, але вся інформація зберігається локально. Маючи копії свого репозиторію на віддалених машинах, ти можеш пережити втрату жорсткого диску чи пошкодження данних і продовжити працювати з того місця, на якому закінчив.","","- Що не менш важливо, віддалені репозиторії роблять програмування соціальним! Коли копія твого проекту розміщена в мережі, твої друзі мають змогу допомогти твоєму проекту (чи стягнути останні зміни) без зайвих зусиль.","","Стало дуже популярним користуватися веб-сайтами, що візуалізують активність на віддалених репозиторіях (наприклад [Github](https://github.com/) чи [Phabricator](http://phabricator.org/)), але віддалені репозиторії _завжди_ слугують як основа цих сервісів. Тому важливо розуміти їх!"]}},{type:"ModalAlert",options:{markdowns:["## Команда, що створює віддалені репозиторії","","До цього моменту, Learn Git Branching концентрувало увагу на основах роботи з _локальним_ репозиторієм (гілкування, злиття гілок, ребейс, тощо). Однак тепер, коли ми вчимо віддалені репозиторії, нам потрібно налаштувати середовище для подальших уроків. `git clone` впорається з цим завданням.","","В принципі, `git clone` в справжньому git -- це команда для створення _локальної_ копії віддаленого репозиторію (наприклад з github). Але у Learn Git Branching ми використовуватимемо цю команду по-іншому -- `git clone` буде створювати віддалений репозиторій з локального. Я згодний, що це виходить трохи догори-дригом, але це допоможе створити зв’язок в голові між клонуванням та роботою з віддаленми репо, тому поки що будемо використовувати її таким чином.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Низький старт - просто подивімося, як віддалений репозиторій виглядає (в нашій візуалізації).",""],afterMarkdowns:["Ось і все! Тепер ми маємо віддалений репозиторій нашого проекту. Він виглядає досить схоже, хіба що деякі візуальні елементи інші, щоб краще показати різницю -- в наступних рівнях ти навчишся ділитися роботою між цими репозиторіями."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень, просто зроби `git clone` свого поточного репозиторію. Справжні знання ти отримаєш в подальших рівнях."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes(Kho lưu trữ từ xa)","","Thực ra thì kho remote cũng không khó hiểu lắm đâu. Giờ đây đâu đâu cũng thấy điện toán đám mây nên ai ai cũng tưởng git remote nó là cái gì đó ma thuật lắm, nhưng chúng thực ra chỉ là những bản sao chép ko chứa của bạn lên máy tính khác. Bạn có thể giao tiếp với chúng qua internet, tù đó mà chuyển giao commit qua lại.","","Vì lẽ đó mà kho remote có những đặc tính tuyệt vời:","","- Trước hết, có tác dụng như là bản sao dự phòng! Bạn đã biết rằng kho địa phương có thể khôi phục trở lại trạng thái trước đó, nhưng tất cả thông tin đó chỉ được lưu trữ cục bộ. Bằng cách sao chép toàn bộ kho chứa của bạn lên máy tính ở xa, bạn hoàn toàn có thể mất hết dữ liệu tại máy tính mà vẫn tiếp tục làm việc như chưa có gì xảy ra.","","- Quạn trọng hơn nữa, kho remote khiến lập trình có tính cộng đồng hơn! Bây giờ bản sao dự án của bạn đã được lưu trũ ở nơi khác, bạn bè của bạn có thể đóng góp (hoặc kéo về cập nhật mới nhất) dự án của bạn rất dễ dàng.","","Trực quan hóa các kho lưu trữ từ xa bằng cách sử dụng các trang web đang trở nên phổ biến hơn (như [Github] (https://github.com/) hoặc [Photypeator] (http://phovenator.org/)), nhưng các kho lưu trữ từ xa * * Luôn luôn ** là trụ cột của các công cụ này, vì vậy điều quan trọng là phải hiểu khái niệm này!"]}},{type:"ModalAlert",options:{markdowns:["## Câu lệnh của chúng tôi để tạo kho lưu trữ từ xa","","Cho đến bây giờ, Learn Git Branching đã tập trung dạy về làm việc trên kho chứa _địa phương_ (rẽ nhánh `branch`, hợp nhánh `merge`, dịch chuyển nhánh `rebase`, vân vân ...). Nhưng bây giờ ta lại muốn học về làm việc trên kho lưu trữ từ xa, ta cần một câu lệnh để cài đặt môi trường cho những bài học này. Đó là `git clone`","","Về mặt kỹ thuật, thì `git clone` thực tế là câu lệnh dùng để tạo một bản sao chép _địa phương_ của khó chứa từ xa (ví dụ từ github chẳng hạn). Nhưng trong Learn Git Branching ta sẽ dùng câu lệnh này hơi khác biệt một chút -- `git clone` sẽ tạo ra một bản sao chép lên kho lưu trữu từ xa dựa trên kho chứa cục bộ của bạn. Điều này hoàn toàn ngược lại với câu lệnh thực tế, nhưng nó giúp ta nhân bản và làm việc với kho lưu trữ từ xa, nên ta sẽ dùng nó trong quá trình học.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nào cùng khởi động bằng cách nhìn xem kho lưu trữ từ xa trông như thế nào (trong mô tả của chúng tôi).",""],afterMarkdowns:["Nó đây rồi! Giờ ta đã có kho lưu trữ dự án chúng ta từ xa. Nhìn nó cũng khá tương tự chỉ là được minh họa khác biệt một chút -- đến các cấp độ sau ta sẽ tìm hiểu thêm về cách thức trao đổi nội dung giữa các kho chứa này."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này chỉ cần đơn giản gõ lệnh `git clone` để sao chép kho chứa hiện tại. Ta sẽ học sâu hơn ở các bài học sau."]}}]}}}},{}],134:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C5":{"parents":["C3","C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone;git fakeTeamwork 2;git commit ;git pull",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Faking Teamwork",fr_FR:"Simulation du travail d'équipe",de_DE:"Teamarbeit simulieren",ja:"擬似的なチーム作業",es_AR:"Simulando el trabajo en equipo",es_ES:"Simulando el trabajo en equipo",pt_BR:"Simulando trabalho em equipe",gl:"Simulando o traballo no repositorio",zh_CN:"模拟团队合作",zh_TW:"模擬團隊合作",ru_RU:"Коллективная работа",uk:"Симуляція колективної роботи",ko:"가짜 팀워크",vi:"Giả lập làm việc nhóm"},hint:{en_US:"remember you can specify the number of commits to fake",fr_FR:"rappelez-vous que vous pouvez spécifier le nombre de commits à simuler",de_DE:"Nicht vergessen, du kannst angeben wieviele Commits simuliert werden sollen.",ja:"擬似的に作成するコミット数を指定できるのをお忘れなく",es_AR:"Acordate que podés especificar cuántos commits simular",es_ES:"Recuerda que puedes especificar cuántos commits simular",pt_BR:"Lembre-se que você pode especificar quantos commits quer simular",gl:"Lembra que podes especifar cantos commits queres simular",zh_CN:"记住你可以指定仿真提交的个数",zh_TW:"你要記得指定要送多少個 commit 出去",ru_RU:"помните, Вы можете указать количество фейковых коммитов",uk:"пам’ятай що ти можеш вказати кількість фейкових комітів",ko:"가장할 커밋의 갯수를 조절할 수 있습니다.",vi:"Nhớ rằng bạn có thể chỉ định số lượng commit để giả lập."},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulating collaboration","","So here is the tricky thing -- for some of these upcoming lessons, we need to teach you how to pull down changes that were introduced in the remote.","",'That means we need to essentially "pretend" that the remote was updated by one of your coworkers / friends / collaborators, sometimes on a specific branch or a certain number of commits.',"","In order to do this, we introduced the aptly-named command `git fakeTeamwork`! It's pretty self explanatory, let's see a demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The default behavior of `fakeTeamwork` is to simply plop down a commit on master"],afterMarkdowns:["There we go -- the remote was updated with a new commit, and we haven't downloaded that commit yet because we haven't run `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also specify the number of commits or the branch by appending them to the command"],afterMarkdowns:["With one command we simulated a teammate pushing three commits to the `foo` branch on our remote"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["The upcoming levels are going to be pretty difficult, so we're asking more of you for this level.","","Go ahead and make a remote (with `git clone`), fake some changes on that remote, commit yourself, and then pull down those changes. It's like a few lessons in one!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simuler la collaboration","","C'est là que cela devient compliqué : pour certaines des leçons à venir, nous avons besoin de vous enseigner comment récupérer les changements effectués sur le dépôt distant.","",'Cela signifie que nous devons "prétendre" que le dépôt distant a été modifié par un collègue / ami / collaborateur, et parfois même sur une branche spécifique ou avec plusieurs commits.',"","Pour faire cela, nous introduisons à point nommé la commande `git fakeTeamwork` ! Elle devrait vous paraître assez intuitive, voyons une démo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Le comportement par défaut de `fakeTeamwork` est tout simplement de faire apparaître un commit sur le master distant :"],afterMarkdowns:["Voilà : le dépôt distant a été mis à jour avec un nouveau commit, et nous n'avons pas encore téléchargé ce commit parce que nous n'avons pas exécuté la commande `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vous pouvez aussi spécifier le nombre de commits ou la branche en les ajoutant à la fin de la commande."],afterMarkdowns:["Avec une seule commande, nous avons simulé un collègue ayant pushé 3 commits sur la branche `foo` de notre dépôt distant"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Les niveaux suivants vont devenir assez difficiles, donc nous augmentons un peu la difficulté de cet exercice.","","Vous devrez créer un dépôt distant (avec `git clone`), simuler quelques changements sur ce dépôt, commiter les vôtres, et enfin appliquer les changements distants dans votre dépôt local (pull). C'est presque plusieurs leçons en une !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulando la colaboración","","Entonces, hay algo medio tramposo acá -- para algunas de las lecciones siguientes, necesitamos explicarte cómo bajar cambios introducidos en el repositorio remoto.","",'Eso significa que esencialmente tenemos que "hacer de cuenta" que el repositorio remoto fue actualizado por algún colega, amigo o colaborador tuyo, incluso a veces en alguna rama específica o una cantidad determinada de commits.',"","Para lograr esto, introdujimos el bien llamado comando ¡`git fakeTeamwork`! Es bastante auto-explicativo: simula trabajo de nuestros colegas. Veamos una demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["El comportamiento por default de `fakeTeamwork` es simplemente crear un commit en master"],afterMarkdowns:["Ahí está: el remoto se actualizó con un nuevo commit, y todavía no nos bajamos ese commit porque aún no hicimos `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["También podés especificar la cantidad de commits o la ramma agregándolos al comando"],afterMarkdowns:["Con un único comando simulamos que un compañero de equipo pusheó tres commits a la rama `foo` de nuestro remoto"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Los niveles siguientes van a ser algo difíciles, así que vamos a exigirte un poco más en este nivel.","","Animate y creá un remoto (con `git clone`), simulá algunos cambios en ese remoto, commiteá en tu repo local, y luego pulleate esos cambios. ¡Es como varias lecciones en una!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulando la colaboración","","Entonces, hay algo un poco tramposo -- para algunas de las lecciones siguientes, necesitamos explicarte cómo descargar cambios introducidos en el repositorio remoto.","",'Eso significa que escencialmente tenemos que "tener en cuenta" que el repositorio remoto fue actualizado por algún colega, amigo o colaborador tuyo, incluso a veces en alguna rama específica o una cantidad determinada de commits.',"","Para lograr esto, introdujimos el bien llamado comando ¡`git fakeTeamwork`! Es bastante autoexplicativo: simula trabajo de nuestros colegas. Veamos una demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["El comportamiento por default de `fakeTeamwork` es simplemente crear un commit en master"],afterMarkdowns:["Ahí está: el remoto se actualizó con un nuevo commit, y todavía no nos bajamos ese commit porque aún no hicimos `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["También puedes especificar la cantidad de commits o la ramma agregándolos al comando"],afterMarkdowns:["Con un único comando simulamos que un compañero de equipo pusheó tres commits a la rama `foo` de nuestro remoto"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Los niveles siguientes van a ser algo difíciles, así que vamos a exigirte un poco más en este nivel.","","Anímate y crea un remoto (con `git clone`), simula algunos cambios en ese remoto, haz commit en tu repo local, y luego haz pull de esos cambios. ¡Es como si fueran varias lecciones en una!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulando colaboração","","Neste ponto, temos uma pequena dificuldade -- para algumas das lições a seguir, precisaremos ensinar como fazer pull de mudanças que foram introduzidas no repositório remoto.","",'Isso significa que precisaremos essencialmente "fingir" que o repositório remoto foi atualizado por algum de seus colegas / amigos / colaboradores, algumas vezes em um ramo específico ou com um certo número de commits.',"","Para esta finalidade, criamos o comando fictício `git fakeTeamwork`! Ele é bastante auto-explicativo, vejamos uma demonstração..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["O comportamento padrão do `fakeTeamwork` é simplesmente fazer aparecer um commit no master"],afterMarkdowns:["Aqui vamos nos -- o repositório remoto foi atualizado com um novo commit, e ainda não baixamos esse commit porque não executamos um `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Você também pode especificar o número de commits ou o ramo, anexando-os ao comando"],afterMarkdowns:["Com um único comando, nós simulamos um colega enviando 3 commits para o ramo `foo` do repositório remoto"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Os níveis posteriores serão mais difíceis, então estamos pedindo um pouco mais de você neste nível.","","Vá em frente e crie um repositório remoto (chamando `git clone`), simule algumas mudanças no repositório remoto, commite no repositório local, e então faça um pull das mudanças que haviam sido simuladas. É como se fossem várias lições em uma só!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulando o traballo no repositorio","","Entón, hai algo con trampa aquí -- para algunhas das leccións  seguintes, precisamos explicarche cómo baixar os cambios introducidos no repositorio remoto.","",'Eso significa que escencialmente temos que "finxir" que o repositorio remoto foi actualizado por algún compañeiro, amigo ou  incluso nalgunha rama específica a cantidade de commits feitos.',"","Para acadar esto, introduxemos o ben chamado comando `git fakeTeamwork`! É bastante auto-explicativo: semella traballo dos nosos colegas. Vexamos una demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["O comportamento por defecto de `fakeTeamwork` é simplemente crear un commit en master na rama remota"],afterMarkdowns:["Ahí o tes: a rama remota actualizouse cun novo commit, e aínda non nos baixamos ese commit porque inda non fixemos `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Tamén podes especificar a cantidad de commits ou a rama agregándoos ó comando"],afterMarkdowns:["Cun único comando simulamos que un colega do equipo empurrou tres commits á rama `foo` do noso remoto"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Os niveis seguintes van ser un pouco máis complicados, así que imos a esixirte un pouco máis neste nivel.","","Anímate e crea unha rama remota (con `git clone`), e simula algúns cambios no repositorio remoto, logo desto, fai commit do teu repo local, e logo descarga os cambios. ¡É coma varias leccións nunha soa!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 模擬合作","","接下來的課程有一個很難的事情，我們需要讓你學會如何 pull remote 上的更新。","",'這就表示我們必須要 "假裝" remote 被你其中一個同事/ 朋友/ 合作的人在某個特定的 branch 上面送了一些特定的 commit。',"","為了要做到這件事情,我們要介紹一個自己設計的指令 `git fakeTeamwork`！ 從字面上就可以很容易地看出來它在幹嘛，讓我們來看一個範例..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`fakeTeamwork` 的預設行為是在送一個 commit 給 master 分支"],afterMarkdowns:["我就說吧！remote 已經藉由一個新的 commit 而更新了，而且因為我們還沒有用 `git fetch`，所以表示我們還沒有下載該 commit。"],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你可以在命令的後面指定你要送幾個 commit 或是要送給哪個 branch。"],afterMarkdowns:["我們利用一個指令將三個 commit 送給在 remote 上面的 `foo` branch。"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["接下來的關卡會很困難，所以我們在這個關卡中會問你更多問題。","","現在先把 remote 下載下來（利用 `git clone`），假裝送幾個 commit 給 remote 做更新，然後 pull 這些 commit 下來 。這就好像是幾個教學中的指令的總結！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 模拟团队合作","","这里有一件棘手的事 —— 为了接下来的课程, 我们需要先教你如何制造远程仓库的变更。","","这意味着，我们需要“假装”你的同事、朋友、合作伙伴更新了远程仓库，有可能是某个特定的分支，或是几个提交记录。","","为了做到这点，我们引入一个自造命令 `git fakeTeamwork`！它的名称已经说明了一切，先看演示.."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`fakeTeamwork` 默认操作就是在远程仓库的 master 分支上做一次提交。"],afterMarkdowns:["完成了 —— 远程仓库增加了一个新提交，我们还没有下载它，因为我们还没有执行 `git fetch`。"],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你还可以指定提交的分支或是数量，只需要在命令后加上它们就可以了。"],afterMarkdowns:["通过一个命令，我们就模拟队友推送了 3 个提交记录到远程仓库的 foo 分支。"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["接下来的关卡会相当的困难，所以在本关会让你做许多事情，先来热热身。","","克隆一个远程仓库（用 `git clone`），再在刚创建的远程仓库中模拟一些修改，然后在你自己的本地分支上做一些提交，再拉取远程仓库的变更。这看起来像是包含了好几节的课程。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Zusammenarbeit simulieren","","Hier ist das Problem -- für einige der folgenden Level müssen wir lernen, wie man Änderungen vom entfernten Server holt.","",'Das heißt wir müssen im Grunde "so tun" also ob der Server von einem Kollegen / Freund / Mitarbeiter aktualisiert worden wäre, manchmal ein bestimmter Branch oder eine bestimmte Anzahl von Commits.',"","Um das zu tun führen wir den passend benannten Befehl `git fakeTeamwork` ein! Er ist ziemlich selbsterklärend, schauen wir uns ihn an ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Das normale Verhalten von `fakeTeamwork` ist es, einen Commit auf den entfernten `master` zu machen."],afterMarkdowns:["Da haben wir's -- der Server ist mit einem neuen Commit aktualisiert worden und wir haben ihn noch nicht lokal, weil wir nicht `git fetch` oder `git pull` ausgeführt haben."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Du kannst auch angeben wieviele Commits oder auf welchem Branch sie gemacht werden sollen, indem du das an den Befehl anhängst."],afterMarkdowns:["Mit einem Befehlt haben wir simuliert, dass ein Kollege drei Commits auf den  Branch `foo` gepackt hat."],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Die kommenden Level werden recht anspruchsvoll, daher verlangen wir auch in diesem Level schon etwas mehr.","","Leg los und erstelle ein Remote (mit `git clone`), simuliere ein paar Änderungen auf dem Server, committe lokal und dann zieh dir die Änderungen vom Server. Das ist wie mehrere Level in einem!"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Симуляция совместной работы","","В данном уроке мы находимся в немного затруднительном положении - для выполнения ряда упражнений нам нужно обучить вас скачивать наработки и изменения, которые были сделаны в удалённом репозитории.","",'Это означает, что нам следует "сделать вид", как будто мы знаем о том, что наш удалённый репозиторий, с которым мы работаем, был изменён одним из ваших коллег / друзей / единомышленников. Это может быть какая-то ветка, либо же какой-то конкретный коммит.',"","Для того, чтобы добиться своих целей, нам предоставляется команда со звучным именем `git fakeTeamwork`! Имя команды однозначно даёт понять, что она выполняет. Давайте ознакомимся с демо..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Поведение команды `fakeTeamwork` по умолчанию заключается в том, чтобы просто "инициировать" коммит на master-е'],afterMarkdowns:["Ну вот - удалённый репозиторий был изменён при помощи добавления нового коммита, и мы ещё не скачали этот коммит, потому что не запустили команду `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["В данной команде вам доступна возможность указать ветку и количество добавляемых коммитов"],afterMarkdowns:["С помощью одной лишь команды мы симулируем добавление трёх коммитов в ветку `foo` на удалённом репозитории"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Последующие уровни будут довольно сложными, поэтому в этом упражнении от вас больше ничего не требуется.","",'Вперёд! Склонируйте удалённый репозиторий (с помощью `git clone`), симулируйте любые изменения на этом удалённом репозитории, сделайте какие-нибудь свои коммиты и затем скачайте "чужие" изменения. Это выглядит как несколько уроков в одном!']}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 連携のシミュレーション","","ここでは少し奇怪なものを取り扱います -- これは次回以降の幾つかのレッスンのためのもので、リモートセクションで変更点の反映方法を教えるのに必要なものです。","","つまり、私たちには時にはリモートの特定のブランチや特定の数のコミットを、同僚/友人/共同開発者の一人が更新した「ふりをする」ことが必要だというわけです。","","これを行うために、私たちは適切に選んだ名前のコマンド`git fakeTeamwork`を導入しました！とても明白でしょう？では、デモを見てみましょう。","","*注：もちろん、本当のgit上にこのようなコマンドは存在しません！変更は、「実在する」同僚や友人が行ってくれるでしょうから！ここではレッスンのために「擬似的に」導入しているにすぎません！*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`fakeTeamwork`のデフォルトの動作は、単にmasterの上にコミットを乗っけるだけです"],afterMarkdowns:["ではいってみましょう -- リモートには新しいコミットが更新され、それはまだ私たちの手元にはダウンロードされていません。なぜなら、`git fetch`を走らせていませんからね。"],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["さらに特定の数のコミット、または追加するブランチをコマンドで指定することもできます。"],afterMarkdowns:["一つのコマンドで、チームメイトが3個のコミットをリモートの`foo`ブランチにプッシュするという動作を再現することができました。"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["今後のレベルはどんどん難しくなっていくでしょうから、このレベルでも私たちはあなたに少々多くのことを求めます。","","先に行くには、リモートを作り（`git clone`で）、リモートに幾つかの変更を再現して、自身のリポジトリにコミットし、変更を取り込む必要があります。これは、このリモートのセクションでやった幾つかのレッスンの内容と似ていますね！"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Симулюємо співпрацю","","Зараз ми знаходимося в незручному становищі -- в деяких із наступних уроків нам потрібно буде пояснити як витягнути зміни з віддаленого репозиторію, що були туди додані іншим учасником.","",'Це означає, що нам треба "вдавати", що віддалений репозиторій був модифікований твоїм колегою / друзями / небайдужими, іноді на специфічній гілці чи коміті.',"","Щоб зробити це, ми додали влучно названу команду `git fakeTeamwork` (симуляціяКолективноїРоботи)! Насправді, з симуляцією колективної роботи стикався мабуть кожен, хто працював в колективі, тож перейдімо до прикладів..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["За замовчуванням `fakeTeamwork` просто додасть коміт в гілку `master`"],afterMarkdowns:["Є -- до віддаленого репозиторію додався ще один коміт, проте ми ще його не звантажили, оскільки ще не виконали `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ти також можеш вказати кількість комітів чи гілку, в яку потрібно додати коміти."],afterMarkdowns:["Виконавши одну команду ми симулювали колегу, що запушив три коміти в гілку `foo` на віддаленому репозиторії."],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Наступні рівні будуть доволі складними, тому, щоб підготуватись, на цьому рівні теж доведеться не солодко.","","Створи віддалений репозиторій (за допомогою `git clone`), зроби кілька фіктивних змін, зроби кілька комітів локально, й підвантаж віддалені зміни. Це як кілька уроків в одному!"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 협동 가장하기","","조금 곤란한일이 생겨버렸습니다 -- 앞으로 배울 레슨들에서 원격 저장소에서 일어난 변경들을 어떻게 로컬로 가져올것인지에 대해 배워 볼것입입니다.","",'그런데 여기서 우리는 불가피하게 그 _변경_들을 만들어야 되는데, 원격 저장소가 동료 / 친구 / 협력자등에 의해 특정 브랜치나 여러개의 커밋이 갱신되는 경우를 표현할 필요가 있습니다. 즉 우리는 팀워크를 "가장"할 필요가 있는것 입니다.',"","이런 문제를 해결하기 위해서 `git fakeTeamwork` 명령을 만들었습니다! 이름이 참 적절하죠? 예시를 통해 확인해봅시다..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`fakeTeamwork`의 기본 행동은 원격 master에 간단히 하나의 커밋을 하는것 입니다."],afterMarkdowns:["자 됬습니다 -- 원격 저장소에 새로운 커밋이 갱신되었습니다. 아직 `git fetch`를 하지 않았기 때문에 로컬로 내려받아지지는 않았습니다."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["명령어에 추가할 커밋의 갯수나 어떤 브랜치에 추가할지 지정하는것도 가능합니다. 다음과 같이 명령어 뒤에 추가하면 됩니다."],afterMarkdowns:["하나의 명령어로 팀원이 원격저장소의 `foo` 브랜치에 세개의 커밋을 push한것처럼 가장했습니다."],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["뒤의 레벨들이 조금 어렵기 때문에, 이번 레벨에서 여러분에게 조금 많은것을 요구하려고 합니다.","","원격 저장소를 하나 만들고(`git clone`), 원격 저장소에 몇가지 가짜 변경을 만들고 로컬에서 커밋하고 원격의 변경들을 가져오세요. Goal과 같은 결과가 나오면 됩니다. 몇개의 레슨이 하나에 있다고 보면 되겠네요! 도전해봅시다."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mô phỏng hợp tác","","Bây giờ khó đây -- để chuẩn bị cho những bài học tới, chúng tôi cần chỉ bạn cách kéo về những cập nhật có trên kho chứa từ xa.","",'Có nghĩa là ta cần "giả vờ" kho chứa từ xa được cập nhật bởi đồng nghiệp / bạn / cộng tác viên của bạn, có khi là một nhánh xác định hoặc là một số commit.',"","Để làm điều này, chúng tôi sẽ giới thiệu cho bạn một lệnh tự tạo `git fakeTeamwork`! Cái tên nói lên tất cả, cùng xem thử bản giới thiệu..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hành xử mặc định của `fakeTeamwork` đơn giản là tạo ra một commit ở trên nhánh master từ xa"],afterMarkdowns:["Đó -- kho chứa từ xa đã được cập nhật thêm một commit, và ta chưa tải commit đó xuống vì ta chưa hề chạy lệnh `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bạn cũng có thể chỉ định số lượng commit bằng cách thêm con số đằng sau câu lệnh"],afterMarkdowns:["Chỉ với một câu lệnh ta có thể giả lập tạo ra 3 commit trên nhánh `foo` từ xa của ta"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Các cấp độ tới sẽ khá là khó, nên ở cấp độ này chúng tôi sẽ yêu cầu bạn thêm một chút.","","Sao chép một kho chứa từ xa (sử dụng `git clone`), sau đó mô phỏng một số thay đổi trong kho chứa từ xa mà bạn vừa tạo, sau đó thực hiện một số commit trên nhánh cục bộ của riêng bạn, sau đó kéo các thay đổi từ kho chứa từ xa. Nhiều bài học trong một bài."]}}]}}}},{}],135:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"o/master":{"target":"C5","id":"o/master"},"o/bugFix":{"target":"C7","id":"o/bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C6":{"parents":["C3"],"id":"C6"},"C5":{"parents":["C4"],"id":"C5"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C5","id":"master"},"bugFix":{"target":"C7","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C3"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"}}}',solutionCommand:"git fetch",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"o/master":{"target":"C2","id":"o/master"},"o/bugFix":{"target":"C3","id":"o/bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bugFix","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C5","id":"master"},"bugFix":{"target":"C7","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C3"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"}}}',name:{en_US:"Git Fetchin'",fr_FR:"Git fetch",de_DE:"Git Fetch",ja:"Git Fetch",es_AR:"git fetch",es_ES:"git fetch",pt_BR:"Git Fetch",gl:"Git Fetch",zh_CN:"Git Fetch",zh_TW:"git fetch",ru_RU:"Git fetch",uk:"Git fetch",ko:"Git Fetch",vi:"Git Fetch"},hint:{en_US:"just run git fetch!",fr_FR:"Exécuter juste git fetch",de_DE:"Einfach git fetch ausführen!",ja:"単にgit fetchを実行！",es_AR:"Simplemente ¡hacé git fetch!",es_ES:"Simplemente ¡escribe git fetch!",pt_BR:"Simplesmente chame git fetch!",gl:"¡Sinxelamente fai git fetch!",zh_CN:"只需要运行 git fetch 命令!",zh_TW:"只要下 git fetch 指令",ru_RU:"Просто выполните git fetch!",uk:"Просто виконай git fetch!",ko:"그냥 git fetch를 하세요!",vi:"Gõ git fetch là được!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Working with git remotes really just boils down to transferring data _to_ and _from_ other repositories. As long as we can send commits back and forth, we can share any type of update that is tracked by git (and thus share work, new files, new ideas, love letters, etc.).","","In this lesson we will learn how to fetch data _from_ a remote repository -- the command for this is conveniently named `git fetch`.","","You'll notice that as we update our representation of the remote repository, our _remote_ branches will update to reflect that new representation. This ties into the previous lesson on remote branches"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Before getting into the details of `git fetch`, let's see it in action! Here we have a remote repository that contains two commits that our local repository does not have."],afterMarkdowns:["There we go! Commits `C2` and `C3` were downloaded to our local repository, and our remote branch `o/master` was updated to reflect this."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### What fetch does","","`git fetch` performs two main steps, and two main steps only. It:","","* downloads the commits that the remote has but are missing from our local repository, and...","* updates where our remote branches point (for instance, `o/master`)","","`git fetch` essentially brings our _local_ representation of the remote repository into synchronization with what the _actual_ remote repository looks like (right now).","","If you remember from the previous lesson, we said that remote branches reflect the state of the remote repositories _since_ you last talked to those remotes. `git fetch` is the way you talk to these remotes! Hopefully the connection between remote branches and `git fetch` is apparent now.","","`git fetch` usually talks to the remote repository through the Internet (via a protocol like `http://` or `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### What fetch doesn't do","","`git fetch`, however, does not change anything about _your_ local state. It will not update your `master` branch or change anything about how your file system looks right now.","","This is important to understand because a lot of developers think that running `git fetch` will make their local work reflect the state of the remote. It may download all the necessary data to do that, but it does _not_ actually change any of your local files. We will learn commands in later lessons to do just that :D","","So at the end of the day, you can think of running `git fetch` as a download step."]}},{type:"ModalAlert",options:{markdowns:["To finish the level, simply `git fetch` and download all the commits!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Travailler avec les dépôts gits distants se résume en pratique à transférer nos données _depuis_ et _vers_ ces autres dépôts. Du moment que nous pouvons envoyer des commits en avance et en retard, nous pouvons partager tous les types de mises à jour qui sont gérées par git (et donc partager notre travail, de nouveaux fichiers, de nouvelles idées, des lettres d'amour, etc.).","","Dans cette leçon nous allons apprendre comment rapporter (fetch) des données _depuis_ un dépôt distant vers le nôtre : la commande pour cela est astucieusement dénommée `git fetch`.","","Vous allez remarquer qu'au moment où nous mettons à jour notre version du dépôt distant, nos branches _distantes_ vont se mettre à jour pour refléter cette nouvelle représentation. Cela est lié à la leçon précédente sur les branches distantes."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Avant d'aller dans les détails de `git fetch`, voyons-le en action ! Ici nous avons un dépôt distant qui contient deux commits que notre dépôt local n'a pas."],afterMarkdowns:["Voilà ! Les commits `C2` et `C3` ont été téléchargés dans notre dépôt local, et notre branche distante `o/master` a été mise à jour pour refléter cela."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Ce que fetch fait","","`git fetch` procède en deux étapes principales, ni plus ni moins. Cela :","","* télécharge les commits que le dépôt distant possède mais qui ne sont pas dans le nôtre, puis...","* met à jour nos branches distantes (par exemple, `o/master`).","","`git fetch` prend en fait notre représentation _locale_ du dépôt distant pour la synchroniser avec ce à quoi le dépôt distant ressemble _réellement_ (à ce moment-là).","","Si vous vous rappelez de la précédente leçon, nous avons dit que les branches distantes reflètent l'état du dépôt distant _depuis_ la dernière fois où vous avez parlé à ces branches distantes. `git fetch` est le moyen de parler à ces branches distantes ! La relation entre `git fetch` et les branches distantes devrait vous apparaître clairement maintenant.","","`git fetch` contacte le dépôt distant par Internet (via un protocole comme `http://` ou `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Ce que fetch ne fait pas","","`git fetch`, cependant, ne change rien à _votre_ état local. Il ne met pas à jour votre branche `master` et ne va pas changer quelque chose aux fichiers qui se trouvent actuellement dans votre répertoire de travail.","","C'est important à comprendre car un nombre important de développeurs pensent qu'exécuter `git fetch` va mettre leur dépôt local dans le même état que le distant. Cela peut télécharger toutes les données nécessaires pour faire cela, mais cela ne change en réalité _rien_ sur vos fichiers locaux. Les prochains niveaux seront justement dédiés aux commandes qui permettent de faire cela :D","","Au bout du compte, vous pouvez vous représenter `git fetch` comme une étape de téléchargement."]}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, exécuter simplement `git fetch` et téléchargez tous les commits !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Trabajar con remotos en git en realidad se reduce a transferir datos _de_ y _hacia_ otros repositorios. Mientras podamos mandar commits de un lado al otro, podemos compartir cualquier tipo de actualización registrada por git (y, por ende, compartir trabajo, archivos nuevos, ideas nuevas, cartas de amor, etc).","","En esta lección aprenderemos cómo traer (hacer `fetch`) datos _desde_ un repositorio remoto - el comando para esto se llama, convenientemente, `git fetch`).","","Vas a notar que a medida que actualicemos nuestra representación de nuestro repositorio remoto, nuestras ramas _remotas_ van a actualizarse para reflejar esa nueva representación. Esto está ligado a la lección anterior sobre ramas remotas"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Antes de entrar en los detalles de `git fetch`, veámoslo en acción. Acá tenemos un repositorio remoto que contiene dos commits que nuestro repositorio local no tiene."],afterMarkdowns:["¡Ahí vamos! Bajamos los commits `C2` y `C3` a nuestro repositorio local, y nuestra rama remota `o/master` fue actualizada para reflejar este cambio."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### ¿Qué hace fetch?","","`git fetch` hace dos simples pasos, y sólo dos simples pasos:","","* baja los commits que el remoto tiene pero no están en nuestro repositorio local, y...","* actualiza a dónde apuntan nuestras ramas remotas (por ejemplo, `o/master`)","","`git fetch` esencialmente sincroniza nuestra representación _local_ del repositorio remoto con el _verdadero_ estado del repositorio remoto (en este momento).","","Si recordás la lección anterior, dijimos que las ramas remotas reflejan el estado de los repositorios remotos _desde_ la última vez que hablaste con ellos. ¡`git fetch` es la manera en que hablás con esos remotos! Espero que ahora esté clara la conexión entre las ramas remotas y `git fetch`.","","Usualmente, `git fetch` habla con el repositorio a través de internet (usando un protocolo como `http://` o `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué *no* hace fetch?","","Sin embargo, `git fetch` no modifica en absoluto _tu_ estado local. No va a actualizar tu rama `master` ni va a cambiar nada sobre cómo se ve tu sistema de archivos en este momento.","","Es importante entender esto, porque un montón de desarrolladores piensan que correr `git fetch` hará que su estado local refleje el estado del remoto. `git fetch` puede descargar los datos necesarios para hacerlo, pero *no* cambia ninguno de tus archivos locales. Vamos a aprender otros comandos para hacer eso más adelante :D","","Entonces, después de todo, podés pensar a `git fetch` como un paso de descarga."]}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente corré `git fetch` y bajate todos los commits"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Trabajar con remotos en git en realidad se reduce a transferir datos _de_ y _hacia_ otros repositorios. Mientras podamos mandar commits de un lado al otro, podemos compartir cualquier tipo de actualización registrada por git (y, por ende, compartir trabajo, archivos nuevos, ideas nuevas, cartas de amor, etc).","","En esta lección aprenderemos cómo traer (hacer `fetch`) datos _desde_ un repositorio remoto - el comando para esto se llama, convenientemente, `git fetch`).","","Vas a notar que a medida que actualicemos nuestra representación de nuestro repositorio remoto, nuestras ramas _remotas_ van a actualizarse para reflejar esa nueva representación. Esto está ligado a la lección anterior sobre ramas remotas"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Antes de entrar en los detalles de `git fetch`, veámoslo en acción. Aquí tenemos un repositorio remoto que contiene dos commits que nuestro repositorio local no tiene."],afterMarkdowns:["¡Allá vamos! Bajamos los commits `C2` y `C3` a nuestro repositorio local, y nuestra rama remota `o/master` fue actualizada para reflejar este cambio."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### ¿Qué hace fetch?","","`git fetch` hace dos simples pasos, y sólo dos simples pasos:","","* baja los commits que el remoto tiene pero no están en nuestro repositorio local, y...","* actualiza a dónde apuntan nuestras ramas remotas (por ejemplo, `o/master`)","","`git fetch` escencialmente sincroniza nuestra representación _local_ del repositorio remoto con el _verdadero_ estado del repositorio remoto (en este momento).","","Si recuerdas la lección anterior, dijimos que las ramas remotas reflejan el estado de los repositorios remotos _desde_ la última vez que hablaste con ellos. ¡`git fetch` es la manera en la que hablas con esos remotos! Espero que ahora esté clara la conexión entre las ramas remotas y `git fetch`.","","Usualmente, `git fetch` habla con el repositorio a través de internet (usando un protocolo como `http://` o `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué *no* hace fetch?","","Sin embargo, `git fetch` no modifica en absoluto _tu_ estado local. No va a actualizar tu rama `master` ni va a cambiar nada sobre cómo se ve tu sistema de archivos en este momento.","","Es importante entender esto, porque un montón de desarrolladores piensan que correr `git fetch` hará que su estado local refleje el estado del remoto. `git fetch` puede descargar los datos necesarios para hacerlo, pero *no* cambia ninguno de tus archivos locales. Vamos a aprender otros comandos para hacer eso más adelante :D","","Entonces, después de todo, puedes pensar sobre `git fetch` como un proceso de descarga."]}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente ejecuta `git fetch` y bájate todos los commits"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Trabalhar com remotos no Git, no final das contas, se resume a transferir dados _de_ e _para_ outros repositórios. Desde que possamos enviar commits para um lado e para o outro, poderemos compartilhar qualquer tipo de atualização que seja gerenciada pelo Git (e portanto compartilhar trabalho, novos arquivos, novas ideias, cartas de amor, etc).","","Nesta lição vamos aprender como baixar dados _de_ um repositório remoto -- o comando para isso é convenientemente chamado de `git fetch`.","","Você perceberá que conforme atualizarmos a representação do repositório remoto, nossos ramos _remotos_ atualizar-se-ão para refletir essa nova representação. Isso tem a ver com o que vimos na lição anterior sobre ramos remotos"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Antes de entrar nos detalhes do `git fetch`, vejamo-no em ação! Aqui temos um repositório remoto que contém dois commits que nosso repositório local não possui."],afterMarkdowns:["Lá vamos nós! Os commits `C2` e `C3` foram baixados para o nosso repositório local, e nosso ramo remoto `o/master` foi atualizado para refletir esse fato."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### O que o fetch faz","","O `git fetch` realiza dois passos principais, e somente estes dois passos principais. Ele:","","* Baixa os commits que o repositório remoto possui mas que estão faltando no repositório local, e...","* Atualiza a referência para a qual os ramos remotos (por exemplo, `o/master`) estão apontando","","O `git fetch` essencialmente faz com que nossa representação _local_ do repositório remoto fique sincronizada com a forma com que o repositório remoto _de fato_ se parece (naquele momento).","","Se você lembrar da lição anterior, nós dissemos que os ramos remotos refletem o estado dos repositórios remotos _desde a última vez_ na qual você falou com esses repositórios. O `git fetch` é a única forma de falar com esses repositórios remotos! Espero que a conexão entre os ramos remotos e o `git fetch` esteja clara agora.","","O `git fetch` geralmente conversa com o repositório remoto por meio da Internet (usando um protocolo como `http://` ou `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### O que o fetch NÃO faz","","O `git fetch`, no entanto, não muda nada do estado _local_ do repositório. Ele não atualiza o seu ramo `master` nem muda nada na forma como o seu sistema de arquivos está no momento.","","É importante entender isso, pois muitos desenvolvedores pensam que executar `git fetch` fará com que o trabalho local reflita o estado do repositório remoto. Ele pode até baixar todos os dados necessários para fazê-lo, mas ele _não_ muda de fato nenhum dos arquivos locais. Vamos aprender comandos para fazê-lo nas lições a seguir :D","","No final das contas, você pode pensar no `git fetch` como um passo de download."]}},{type:"ModalAlert",options:{markdowns:["Para terminar este nível, simplesmente execute `git fetch` e baixe todos os commits!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Traballar con respositorios remotos en Git, a fin de contas, resúmese en transferir datos _dun_ repositorio _cara_ outros repositorios. Dende que podemos enviar commits dun lado cara o outro, poderemos compartir calquera tipo de actualización que sexa xerada por git (e polo tanto compartir o traballo, novos arquivos, novas ideas, cartas de amor, etc).","","Nesta lección imos aprender como baixar os cambios _dun_ repositorio remoto -- o comando para iso é `git fetch`.","","Percibirás que conforme atualizamos a representación do repositorio remoto, as nosas ramas _remotas_ actualizaranse para reflexar a nova representación. Iso ten que ver co que vimos na lección anterior sobre as ramas remotas"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ántes de entrar nos detalles de `git fetch`, vexámolo en acción! Aquí temos un repositorio remoto que contén dous commits que o noso repositorio local non ten."],afterMarkdowns:["Alá imos! Os commits `C2` e `C3` baixáronse ó noso repositorio local, e a nosa rama `o/master` actualizouse para reflexar ese cambio."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### O que fai o fetch","","`git fetch` fai dous pasos pasos principais, e soamente estes dous pasos princpipais. Son:","","* Baixa os commits que o repositório remoto contén pero non temos nos no noso repositoiro local, e...","* Actualiza a referencia nas ramas remotas (por exemplo, `o/master`) nas que se está apuntando","","`git fetch` esencialmente fai que a nosa representación _local_ do repositorio remoto se sincronice ca forma que posúe o repositorio remoto, _de feito_ parecese (nese momento).","","Se ti lembras a lección anterior, nos dixemos que as ramas remotas reflexan o estado dos repositorios remotos _dende a última vez_ na que ti fixeches un commit dese repositorio. O `git fetch` é a única forma de falar con eses repositorios remotos! Agardo que a conexión entre as ramas remotas e o `git fetch` esté clara dabondo agora.","","`git fetch` xeralmente fala co repositorio remoto por medio da rede (usando un protocolo como `http://`, `git://` ou `ssh`).",""]}},{type:"ModalAlert",options:{markdowns:["### O que fetch NON fai","","`git fetch`, por agora, non cambia nada no estado _local_ do repositorio. El solo actualiza a rama `master` sen facer cambios na forma de cómo está o teu sistema de arquivos nese momento.","","É importante entender iso, xa que moitos desenvolvedores pensan que executar `git fetch` fará que o traballo local se vexa modificado polo repositorio remoto. El pode que baixara todos os cambios necesarios para facelo, pero, o comando _non_ cambia cómo están os teus arquivos locais. Imos aprender comandos para facer esas conexións :D","","A fin de contas, ti podes pensar en `git fetch` como unha descarga."]}},{type:"ModalAlert",options:{markdowns:["Para rematar este nivel, so executa `git fetch` e baixa todos os commits!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git fetch","","透過 git remote 其實就是把資料接收或傳送到其它的 repository，只要我們可以將資料傳進及傳出，我們就可以分享任何被 git 所追蹤的 repository 的更新（例如分享工作進度，新的檔案，新的想法，以及情書等等...）。","","在這個教學中，我們會學習到如何從 remote repository 來 fetch （抓取）資料，這個指令叫作 `git fetch`。","","你將會注意到當我們的 remote repository 更新的時候，相對應的 _remote_ branch 也會反應該更新，這個跟我們之前所提到的 remote branch 的特性是吻合的。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在講到 `git fetch` 的細節之前，我們要先來看一下例子！在這裡我們有一個新增了兩個 commit 的 remote repository，而且我們的 local repository 並沒有包含這兩個 commit。"],afterMarkdowns:["看吧！commit `C2` 以及 `C3` 已經被下載到我們的 local repository，而且我們的 remote branch `o/master` 也更新了。"],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### fetch 做了什麼","","`git fetch` 只有執行了兩個主要步驟，包含：","","* 下載 remote 有的 commit，但是在我們的 local repository 是沒有該 commit。還有...","* 更新我們 remote branch 所指向的地方（例如， `o/master`）","","基本上，`git fetch` 同步了我們的 local repository 以及 remote repository 的最新狀態。","","假如你還記得之前的教學的話，我們說過 remote branch 反應了 remote repository 的狀態，原因在於說你最後接觸的是這些 remote repository，而你就是利用 `git fetch` 來接觸這些 remote repository！現在 remote branch 跟 `git fetch` 的關係已經很明顯了。","","`git fetch` 通常是透過網路來跟 remote 溝通（透過一個 protocol （協定），例如 `http://` 或者是 `git://`）。",""]}},{type:"ModalAlert",options:{markdowns:["### fetch 沒有做的事情","","然而，`git fetch` 並不會影響到在你的 local repository 中的 `master` branch，他並不會將你的 `master` branch 更新到最新的狀態。","","這個觀念很重要，因為很多程式設計師以為 `git fetch` 可以讓他們在 local repository 上面的工作跟 remote repository 的工作可以同步。它是會下載同步所需的資料，但是不會更新任何的檔案，我們會在後面的教學中提到如何做到這件事情。:D","","因此，你可以把 `git fetch` 想成是在下載資料。"]}},{type:"ModalAlert",options:{markdowns:["要完成這一關，只要透過 `git fetch` 並且下載全部的 commit 即可！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Git 远程仓库相当的操作实际可以归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。既然我们能与远程仓库同步，那么就可以分享任何能被 Git 管理的更新（因此可以分享代码、文件、想法、情书等等）。","","本节课我们将学习如何从远程仓库获取数据 —— 命令如其名，它就是 `git fetch`。","","你会看到当我们从远程仓库获取数据时, 远程分支也会更新以反映最新的远程仓库。在上一了我们已经提及过这一点了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在解释 `git fetch` 前，我们先看看实例。这里我们有一个远程仓库, 它有两个我们本地仓库中没有的提交。"],afterMarkdowns:["就是这样了! `C2`,`C3` 被下载到了本地仓库，同时远程分支 `o/master` 也被更新，反映到了这一变化"],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### git fetch 做了些什么","","`git fetch` 完成了仅有的但是很重要的两步:","","* 从远程仓库下载本地仓库中缺失的提交记录","* 更新远程分支指针(如 `o/master`)","","`git fetch` 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。","","如果你还记得上一节课程中我们说过的，远程分支反映了远程仓库在你**最后一次与它通信时**的状态，`git fetch` 就是你与远程仓库通信的方式了！希望我说的够明白了，你已经了解 `git fetch` 与远程分支之间的关系了吧。","","`git fetch` 通常通过互联网（使用 `http://` 或 `git://` 协议) 与远程仓库通信。",""]}},{type:"ModalAlert",options:{markdowns:["### git fetch 不会做的事","","`git fetch` 并不会改变你本地仓库的状态。它不会更新你的 `master` 分支，也不会修改你磁盘上的文件。","","理解这一点很重要，因为许多开发人员误以为执行了 `git fetch` 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是**并没有**修改你本地的文件。我们在后面的课程中将会讲解能完成该操作的命令 :D","","所以, 你可以将 `git fetch` 的理解为单纯的下载操作。"]}},{type:"ModalAlert",options:{markdowns:["要完成本关，只需用 `git fetch` 下载所有的提交！"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","In Git mit entfernten Repositorys zu arbeiten lässt sich wirklich auf das Hin- und Zurückübertragen von Daten reduzieren. Solange wir Commits hin und her schicken können, können wir jede Art Update teilen, das von Git getrackt wird (und somit Arbeit, neue Dateien, neue Ideen, Liebesbriefe etc. teilen).","","In diesem Level werden wir lernen, wie man Daten _von_ einem entfernten Repository holt -- der entsprechende Befehl heißt praktischerweise `git fetch`.","","Dir wird auffallen, dass mit der Aktualisierung unserer Darstellung des entfernten Repositorys die _Remote_ Branches auf den neuesten Stand gebracht werden. Das passt zum vorherigen Level über Remote Branches."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bevor wir uns die Einzelheiten von `git fetch` ansehen wollen wir es mal in Aktion sehen. Wir haben hier ein entferntes Repository, das zwei Commits hat die in unserem lokalen Repository fehlen."],afterMarkdowns:["Das war's! Die Commits `C2` und `C3` wurden zu unserem Repository heruntergeladen und unser Remote Branch `o/master` wurde aktualisiert."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Was Fetch tut","","`git fetch` führt genau zwei Schritte aus:","","* Es lädt die Commits herunter, die im lokalen Repository fehlen, und ...","* aktualisiert die Remote Branches wo nötig (zum Beispiel, `o/master`).","","`git fetch` synchronisiert im Prinzip unsere _lokale_ Abbildung des entfernten Repositorys mit dem wie das entfernte Repository _tatsächlich_ aussieht (in diesem Moment).","","Wie du dich vielleicht erinnerst, haben wir im letzten Level gesagt, dass die Remote Branches den Zustand der Branches auf dem entfernten Repository darstellen _seit_ du das letzte Mal dieses Repository angesprochen hast. `git fetch` ist die Methode mit der du das Repository ansprichst! Der Zusammenhang zwischen Remote Branches und `git fetch` ist damit hoffentlich klar.","","`git fetch` kommuniziert mit dem entfernten Repository in der Regel über das Internet (über ein Protokoll wie `http://` oder `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Was Fetch nicht tut","","`git fetch` ändert allerdings überhaupt nichts an _deinen_ lokalen Branches. Es aktualisiert nicht deinen `master` oder ändert irgendetwas an deinem Checkout.","","Das ist wichtig zu wissen, denn eine Menge Entwickler glauben, wenn sie `git fetch` ausführen würden ihre lokalen Branches auf den Stand des entfernten Repositorys gebracht. Es lädt zwar alle Daten herunter, damit man diese Aktualisierung durchführen kann, aber es ändert _nichts_ an deinen lokalen Branches. Wir werden in späteren Level Befehle genau dafür kennenlernen. :D","","Am Ende des Tages kannst du dir `git fetch` also als den Download-Schritt vorstellen."]}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur `git fetch` ausführen, um alle Commits herunterzuladen!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","リモートGitを用いた作業は、本当にただ単なる他のリポジトリ_への_、または他のリポジトリ_からの_データの転送に集約されます。コミットを転送できる限り、Gitで管理されている全ての種類の更新が共有できます（例えば作業や、新しいファイル、新しいアイデア、ラブレターなどです）。","","このレベルでは、リモートリポジトリ_から_データを取ってくる方法を学びます -- このコマンドは`git fetch`と名付けられています。","","リモートリポジトリの情報を私たちが更新するように、_リモート_ブランチも情報を更新することができることが分かるでしょう。これは前のレッスンでのリモートブランチの働きに結びつきます。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`git fetch`の説明に入る前に、その動作を見てみましょう。ここに、ローカルリポジトリにない二個のコミットを含んでいるリモートブランチがあります。"],afterMarkdowns:["やりました！`C2`、`C3`コミットがローカルリポジトリにダウンロードされ、`o/master`リモートブランチに反映されました。"],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### fetchとはどのようなものか","","`git fetch`は、主に二つのステップだけで動作します。それは以下のようなものです:","","* リモートにあってローカルリポジトリにないコミットをダウンロードする","* リモートブランチの位置を更新する（例えば、`o/master`）","","`git fetch`は本質的には、_実際_のリモートリポジトリと同じように見えるような形でリモートリポジトリの_ローカル_の情報に同期します（ちょうど今のように）。","","前のレッスンでのことを覚えていると思いますが、リモートブランチはリモートと最後に同期した時点での状態を保持しているという話をしました。`git fetch`はそのリモートと同期する方法なのです！これでリモートブランチと`git fetch`の関係性は明らかになったでしょう？","","`git fetch`は、通常インターネットを通してリモートリポジトリと対話します（`http://`または`git://`プロトコル経由で）。",""]}},{type:"ModalAlert",options:{markdowns:["### fetchがしてくれないもの","","`git fetch`は、しかしながら、_あなたの_ローカルの状態は変更しません。あなたの`master`ブランチや他のもの、今現在のあなたのファイルシステムが見せているものを更新しないのです。","","これは理解する上で重要なことです。なぜなら、多くの技術者は`git fetch`がリモートの状態をローカルの作業場に反映してくれると思っているからです。必要なデータはダウンロードされるかもしれませんが、ローカルのファイルを実際に変更するというようなことは_してくれない_のです。私たちは、この後のレッスンでもこのようなコマンドを学びます :D","","なので、この1日が終わる頃には、あなたは`git fetch`のダウンロードステップの動作が分かるようになるでしょう。"]}},{type:"ModalAlert",options:{markdowns:["このレベルを終えるには、単に`git fetch`を実行し、全てのコミットをダウンロードしてください。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Работа с удалёнными git репозиториями сводится к передаче данных _в_ и _из_ других репозиториев. До тех пор, пока мы можем отправлять коммиты туда-обратно, мы можем делиться любыми изменениями, которые отслеживает git (следовательно, делиться новыми файлами, свежими идеями, любовными письмами и т.д.).","","В этом уроке вы научитесь тому, как извлекать данные _из_ удалённого репозитория - и для этого у нас есть соответствующая команда `git fetch`.","","Вы увидите, что как только мы изменим представление нашего удалённого репозитория, наши _удалённые_ ветки обновятся соответствующим образом и отобразят это представление. Это связывает воедино предыдущий урок про удалённые репозитории."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Прежде чем углубляться в детали команды `git fetch`, давайте взглянем на её визуализацию в действии! Здесь у нас имеется удалённый репозиторий, который содержит в себе два коммита, отсутствующих в нашем локальном репозитории."],afterMarkdowns:["Вот и всё! Коммиты `C2` и `C3` были успешно скачаны в наш локальный репозиторий, и наша удалённая ветка `o/master` отобразила эти изменения соответствующим образом."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Что делает fetch","","`git fetch` выполняет две и только две основные операции. А именно:","","* связывается с указанным удалённым репозиторием и забирает все те данные проекта, которых у вас ещё нет, при этом...","* у вас должны появиться ссылки на все ветки из этого удалённого репозитория (например, `o/master`)","","Фактически, `git fetch` синхронизирует _локальное_ представление удалённых репозиториев с тем, что является _актуальным_ на текущий момент времени.","","Насколько вы помните, в предыдущем уроке мы сказали, что удалённые ветки отображают состояние удалённых репозиториев _на тот момент_ когда вы 'общались' с ними в последний раз. `git fetch` является тем механизмом, который даёт вам возможность общаться с удалёнными репозиториями! Надеюсь, что связь между удалёнными ветками и командой `git fetch` теперь прояснилась.","","`git fetch` обычно 'общается' с удалёнными репозиториями посредством Интернета (через такие протоколы, как `http://` или `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Чего fetch не делает","","Важно отметить, что команда `git fetch` забирает данные в ваш _локальный_ репозиторий, но не сливает их с какими-либо вашими наработками и не модифицирует то, над чем вы работаете в данный момент.","","Важно это помнить и понимать, потому что многие разработчики думают, что, запустив команду `git fetch`, они приведут всю свою локальную работу к такому же виду, как и на удалённом репозитории. Команда всего лишь скачивает все необходимые данные, но вам потребуется вручную слить эти данные с вашими, когда вы будете готовы. В следующих уроках мы научимся это делать :D","","Одним словом, вы можете относиться к `git fetch` как к процедуре скачивания."]}},{type:"ModalAlert",options:{markdowns:["Чтобы выполнить уровень, просто запустите `git fetch` и скачайте все коммиты!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Робота з віддаленими git-репозиторіями зводиться до передачі данних _до_ та _з_ інших репозиторіїв. Можливість передавати коміти дозволяє нам ділитися будь-якою інформацією, що відслідковується gitом (а отже, виконаною роботою, новими файлами, ідеями, листами, тощо).","","На цьому уроці ми навчимося витягати дані _з_ віддаленого репозиторію -- команда, що відповідає за це, зручно називається `git fetch` (fetch - англ. витягнути чи дістати).","","Зауваж, що коли ми оновлюємо наш віддалений репозиторій, наші _віддалені_ гілки теж оновляться. Про це ми говорили на попередньому уроці."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Перед тим, як почати розбиратися з `git fetch`, спробуймо його в дії! Тут ми маємо віддалений репозиторій, що містить два коміти, яких немає в нашому локальному сховищі."],afterMarkdowns:["Ось, маєш! Коміти `C2` та `C3` було завантажено до нашого локального сховища й наша віддалена гілка `o/master` була відповідно оновлена."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Що робить fetch","","`git fetch` виконує дві основні дії, і тільки дві дії. Він:","","* звантажує коміти, які містить віддалене сховище, але яких немає в локальному сховищі, та...","* оновлює посилання віддаленого бранчу (наприклад, `o/master`)","","Якщо коротко, `git fetch` приводить репрезентацію віддаленого репозиторію в локальному сховищі до _актуального_ стану справжнього віддаленого репозиторію.","","Якщо ти пам’ятаєш з попереднього уроку, ми тоді зауважили, що віддалені гілки відображають стан віддаленого репозиторію _від_ останнього разу, коли ми синхронізувались з віддаленим репозиторієм. `git fetch` якраз і відповідає за синхронізацію з віддаленим сховищем! Сподіваюсь, що зв’язок між віддаленими гілками `git fetch` тепер є очевидним.","","Як правило, `git fetch` працює з віддаленими сховищами через інтернет (через протоколи `http://` чи `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Чого не робить fetch","","Тим не менш, `git fetch` нічого не змінює в _твоєму_ локальному стані. Він не оновить твою гілку `master` і не змінить того, як наразі виглядає локальна файлова система.","","Це важливо зрозуміти, тому що багато розробників думають, що `git fetch` оновить їхні локальні данні до стану віддаленого репозиторію. Він дійсно звантажить всі потрібні дані, щоб це зробити, але він _не змінить_ автоматично жодних локальних файлів. Ми вивчимо команди, які це роблять, в наступних уроках :D","","Отже, зрештою, ти можеш вважати що `git fetch` просто звантажує нову інформацію з віддаленого сховища."]}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень просто виконай `git fetch` і звантаж всі коміти!"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","git 원격 작업들은 결국 서로다른 저장소에서 데이터를 _주고_ _받는_것에 불과하다는것을 알 수 있습니다. 우리가 커밋들을 주고 받을수 있는 한, git을 바탕으로하는 모든 종류의 업데이트를 공유할 수 있습니다(작업, 새로운 파일들, 새로운 아이디어, 러브레터 등...).","","이번 레슨에서는 원격 저장소_에서_ 데이터를 가져오는 방법을 배워볼 것입니다 -- 이를 위한 명령어는 `git fetch`라고 불립니다.","","먼저 알아두고 넘어갈것이 있는데 우리가 원격 저장소와 작업을 해서 상태가 변하면 _원격_브랜치들 또한 그 변경들을 반영합니다. 원격 브랜치에대한 이전 레슨을 참고하세요."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`git fetch`의 세부사항을 알아보기 전에 일단 눈으로 먼저 확인해 봅시다! 여기 로컬 저장소에는 없는 두개의 커밋이 있는 원격 저장소가 있습니다."],afterMarkdowns:["됐습니다! 커밋 `C2` 와 `C3`가 우리의 로컬 저장소로 다운로드 되었고, 원격 브랜치 `o/master`가 이것을 반영하기 위해 업데이트 되었습니다."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### fetch는 무엇을 하는가","","`git fetch`는 두가지의 중요한 단계를 수행합니다. 사실 이 두 단계만을 진행합니다. 그것은 :","","* 원격 저장소에는 있지만 로컬에는 없는 커밋들을 다운로드 받습니다. 그리고... ","* 우리의 원격 브랜치가 가리키는곳을 업데이트합니다 (예를들어, `o/master`)","","`git fetch`는 본질적으로 _로컬_에서 나타내는 원격 저장소의 상태를 _실제_ 원격 저장소의 (지금)상태와 동기화합니다.","","이전 레슨을 기억한다면, 원격 브랜치는 가장 최근 원격 원격저장소와 작업을 했을때를 기준으로 원격 저장소의 상태를 반영한다고 했습니다. `git fetch`가 그러한 작업중에 하나입니다!(역: 원문에서는 talk with remote라고 표현합니다. 원격 저장소와 대화한다고 번역하기 어색해서 의역했습니다.) 원격 브랜치와 `git fetch`의 관계를 분명하게 알게되셨으면 좋겠습니다.","","`git fetch`는 일반적으로 원격 저장소와 인터넷을 통해 접근합니다(`http://` 또는 `git://`와같은 프로토콜로).",""]}},{type:"ModalAlert",options:{markdowns:["### fetch는 무엇을 하지 않는가","","`git fetch`는 그러나, _여러분의_ 로컬 상태는 전혀 바꾸지 않는습니다. 여러분의 `master` 브랜치도 업데이트하지 않고 파일 시스템의 모습이던 그 어떤것도 바꾸지 않습니다.","","이것을 이해하는게 아주 중요한데, 왜냐하면 수 많은 개발자들이 `git fetch`를 하면 자신의 로컬 작업이 변경되어 원격 저장소의 모습을 반영해 업데이트 될것이라고 생각하기 때문입니다. 앞의 과정에 필요한 데이터를 다운로드는 하지만, 실제로 로컬 파일들이나 브랜치를 변경하지는 않습니다. 이것을 하기위한 명령어들은 뒤에서 배우겠습니다 :D","","간단하게 `git fetch`를 다운로드 단계로 생각할 수 있습니다."]}},{type:"ModalAlert",options:{markdowns:["레벨을 마치기 위해, `git fetch`를 수행하고 모든 커밋들을 내려 받으세요!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Lam việc với git remote về căn bản là chuyển giao dữ liệu _qua_ và _lại_ giữa các kho chứa. Miễn là ta có thể chia sẻ qua lại các commit, ta có thể chia sẻ bất kỳ cập nhật gì được theo dõi bở git (và từ đó chia sẻ thành quả, tập tin mới, ý tưởng mới, thư tình, các kiểu con đà điểu.).","","Ở bài học này ta sẽ học cách lấy dữ liệu về _từ_ một kho chứa từ xa -- lệnh đó là `git fetch`.","","Bạn sẽ nhận thấy rằng khi ta cập nhật đại điện kho chứa từ xa, Nhánh _từ xa_ của ta cũng được cập nhật để phản ánh đại diện đó. Điều này liên quan đến bài học trước về nhánh từ xa"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Trước khi đi vào chi tiết về `git fetch`, hãy xem cách nó hoạt động! Ở đây ta có một kho chứa từ xa trong đó chứa 2 commit mà kho chứa địa phương của ta không có."],afterMarkdowns:["Đó! Commit `C2` và `C3` đã được tải xuống kho chứa cục bộ của ta, và nhánh từ xa `o/master` của ta đã được cập nhật để phản ánh điều này."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Fetch làm gì","","`git fetch` thực hiện 2 bước chính, và chỉ 2 bước chính. Nó:","","* tải xuống commit có trên kho chứa từ xa mà kho chứa cục bộ của ta không có, và...","* cập nhật nơi mà nhánh từ xa của ta trỏ tới (ví dụ nhánh `o/master`)","","Về căn bản thì `git fetch` đưa đại diện _địa phương_ của kho chứa từ xa của ta về trạng thái đồng bộ với trạng thái _thực tế_ của kho chứa từ xa (ngay lúc này).","","Nếu bạn còn nhớ thì trong bài học trước, chúng tôi có đề cập rằng nhánh từ xa phản ánh trạng thái của kho chứa từ xa _kể từ_ kể từ lần cuối bạn tương tác với các nhánh từ xa đó. `git fetch` chính là cách để tương tác với cách nhánh từ xa! Hi vọng chúng tôi đã làm sáng tỏ sự liên kết giữa nhánh từ xa và `git fetch`.","","`git fetch` thường tương tác với kho chứa từ xa bằng Internet (thông qua các giao thức như `http://` hoặc `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### fetch không làm gì","","Tuy nhiên, `git fetch` không hề thay đổi trạng thái kho chứa _địa phương_ của bạn. Nó sẽ không cập nhật nhánh `master` hay thay đổi bất kỳ điều gì trong hệ thống tập tin hiện tại của bạn.","","Điều này rất quan trọng, vì nhiều nhà phát triển nghĩ rằng `git fetch` sẽ làm kho chứa địa phương của họ phản ánh trạng thái của kho chúa từ xa. Nó có thể tải xuống tất cả dữ liệu cần thiết, nhưng nó thực tế _không_ thay đổi bất cứ thứ gì trên tập tin địa phương của bạn. Ta sẽ học lệnh để làm điều đó sau :D","","Nói tóm lại, bạn có thể coi `git fetch` thuần túy như một bước tải xuống."]}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, đơn giản hãy gõ `git fetch` để tải xuống tất cả commit!"]}}]}}}},{}],136:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C7","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C3","C6"],"id":"C7"}},"HEAD":{"target":"foo","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C6","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"foo","id":"HEAD"}}}',solutionCommand:"git fetch origin master~1:foo;git fetch origin foo:master;git checkout foo;git merge master",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"C1","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C6","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"foo","id":"HEAD"}}}',name:{en_US:"Fetch arguments",fr_FR:"Arguments de fetch",zh_CN:"Git fetch 的参数",zh_TW:"fetch 的參數",es_AR:"Parámetros de fetch",es_ES:"Parámetros de fetch",pt_BR:"Parâmetros do fetch",gl:"Parámetros de fetch",de_DE:"Optionen für Fetch",ja:"Fetchの引数",ru_RU:"Аргументы для fetch",ko:"Fetch의 인자들",uk:"Аргументи для fetch",vi:"Tham số fetch"},hint:{en_US:'Pay attention how the commit ids may have swapped! You can read slides again with "help level"',fr_FR:'Faites attention à la façon dont les ids des commits ont été intervertis ! Vous pouvez lire une nouvelle fois les slides avec "help level"',zh_CN:"注意下提交对象的 id 是如何交换的! 你可以通过 `help level` 重新阅读本关卡的所有对话框!",zh_TW:"注意 commit 的 id 是怎麼被交換的！你可以透過 `help level` 來閱讀對話視窗！",es_AR:'¡Prestá atención a cómo podrían haberse invertido los ids de los commits! Podés volver a leer toda la lección usando "help level"',es_ES:'¡Presta atención a cómo podrían haberse invertido los ids de los commits! Puedes volver a leer toda la lección usando "help level"',pt_BR:'Preste atenção em como os identificadores dos commits podem ter trocado! Você pode ler os slides novamente com "help level"',gl:'Preste atención en como poderían invertirse os ids dos commits! Podes volver ler toda a lección usando "help level"',de_DE:'Beachte wie die Commit IDs getauscht wurden! Du kannst den Einführungsdialog mit "help level" erneut anzeigen',ja:"コミットIDの入れ替わりに注意！スライドを復習するには`help level`を実行",ru_RU:'Обратите внимание на то, как номера коммитов могут меняться! Вы можете прочесть слайды вновь, воспользовавшись командой "help level"',ko:'커밋 ID가 바뀔수도있으니 주의하세요! "help level"을 입력하면 슬라이드들을 다시 읽어볼수 있습니다.',uk:'Зверни увагу на те, що номери комітів можуть змінюватися! Слайди уроку можна переглянути ще раз командою "help level"',vi:'Lưu ý id của các commit bị tráo đổi, bạn có thể dùng "help level" để đọc lại hội thoại'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git fetch arguments","","So we've just learned all about git push arguments, this cool `<place>` parameter, and even colon refspecs (`<source>:<destination>`). Can we use all this knowledge for `git fetch` as well?","","You betcha! The arguments for `git fetch` are actually *very, very* similar to those for `git push`. It's the same type of concepts but just applied in the opposite direction (since now you are downloading commits rather than uploading).","","Let's go over the concepts one at a time..."]}},{type:"ModalAlert",options:{markdowns:["### The `<place>` parameter","","If you specify a place with git fetch like in the following command:","","`git fetch origin foo`","","Git will go to the `foo` branch on the remote, grab all the commits that aren't present locally, and then plop them down onto the `o/foo` branch locally.","","Let's see this in action (just as a refresher)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["By specifying a place..."],afterMarkdowns:["We download only the commits from `foo` and place them on `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["You might be wondering -- why did git plop those commits onto the `o/foo` remote branch rather than just plopping them onto my local `foo` branch? I thought the `<place>` parameter is a place that exists both locally and on the remote?","","Well git makes a special exception in this case because you might have work on the `foo` branch that you don't want to mess up!! This ties into the earlier lesson on `git fetch` -- it doesn't update your local non-remote branches, it only downloads the commits (so you can inspect / merge them later).",""]}},{type:"ModalAlert",options:{markdowns:['"Well in that case, what happens if I explicitly define both the source and destination with `<source>:<destination>`?"',"","If you feel passionate enough to fetch commits *directly* onto a local branch, then yes you can specify that with a colon refspec. You can't fetch commits onto a branch that is checked out, but otherwise git will allow this.","","Here is the only catch though -- `<source>` is now a place on the *remote* and `<destination>` is a *local* place to put those commits. It's the exact opposite of git push, and that makes sense since we are transferring data in the opposite direction!","","That being said, developers rarely do this in practice. I'm introducing it mainly as a way to conceptualize how `fetch` and `push` are quite similar, just in opposite directions."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this craziness in action:"],afterMarkdowns:["Wow! See, git resolved `foo~1` as a place on the origin and then downloaded those commits to `bar` (which was a local branch). Notice how `foo` and `o/foo` were not updated since we specified a destination."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if the destination doesn't exist before I run the command? Let's see the last slide but without `bar` existing beforehand."],afterMarkdowns:["See, it's JUST like git push. Git made the destination locally before fetching, just like git will make the destination on remote before pushing (if it doesn't exist)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["No args?","","If `git fetch` receives no arguments, it just downloads all the commits from the remote onto all the remote branches..."],afterMarkdowns:["Pretty simple, but worth going over just once."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, enough talking! To finish this level, fetch just the specified commits in the goal visualization. Get fancy with those commands!","","You will have to specify the source and destination for both fetch commands. Pay attention to the goal visualization since the IDs may be switched around!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les arguments de git fetch","","Nous savons maintenant tout ce qu'il y a à savoir sur les arguments de git push, y compris le paramètre `<place>` et la ponctuation pour refspecs (`<source>:<destination>`). Pouvons-nous utiliser ces connaissances avec `git fetch` également ?","","Bien sûr ! Les arguments de `git fetch` sont en fait *très, très* similaires à ceux de `git push`. Il s'agit des mêmes concepts mais simplement appliqués dans le sens opposé (puisque maintenant vous récupérez des commits plutôt que de les envoyer).","","Voyons ces concepts un par un..."]}},{type:"ModalAlert",options:{markdowns:["### Le paramètre `<place>`","","Si vous spécifiez un emplacement à git fetch, comme dans la commande suivante :","","`git fetch origin foo`","","Git va aller à la branche distante `foo`, récupérer tous les commits qui ne sont pas présents localement, puis les rapatrier dans la branche locale `o/foo`.","","Voyons cela en action (juste pour réviser)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["En spécifiant un emplacement..."],afterMarkdowns:["Nous téléchargeons uniquement les commits de `foo` et les plaçons dans `o/foo`."],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Vous vous posez peut-être la question : pourquoi git a-t-il fait apparaître ces commits dans la branche distante `o/foo` plutôt que les placer directement dans ma branche locale `foo` ? Je croyais que le paramètre `<place>` était un emplacement qui existait à la fois localement et sur le dépôt distant ?","","En fait git fait une exception dans ce cas parce que vous pourriez avoir du travail en cours dans la branche `foo` que vous ne voulez pas écraser !! Cela provient de ce que nous avions vu dans la leçon précédente sur `git fetch` : cette commande ne met pas à jour vos branches locales, elle télécharge uniquement les commits (pour que vous puissiez les inspecter et/ou les fusionner plus tard).",""]}},{type:"ModalAlert",options:{markdowns:['"Bon, mais dans ce cas, que se passe-t-il si je spécifie explicitement la source et la destination avec `<source>:<destination>` ?"',"","Si vous vous sentez assez déterminé pour rapatrier (fetch) des commits *directement* dans votre branche locale, alors oui vous pouvez préciser cela avec la notation refspec. Vous ne pouvez cependant pas rapatrier les commits dans la branche courante.","","Il y a un petit piège cependant : dans ce cas précis `<source>` est l'emplacement sur le dépôt *distant* et `<destination>` l'emplacement sur le dépôt *local* où seront placés ces commits. C'est l'exact opposé de git push, et cela se tient puisque nous transférons des données dans le sens opposée !","","Cela dit, les développeurs utilisent rarement cette syntaxe en pratique. Je l'introduis principalement pour concrétiser le fait que `fetch` et `push` sont très similaires, fonctionnant simplement dans des sens opposées."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons ce délire en action :"],afterMarkdowns:["Wow ! Vous voyez, git a résolu `foo~1` comme un emplacement sur origin et a ensuite téléchargé les commits dans `bar` (qui était une branche locale). Remarquez aussi que `foo` et `o/foo` n'ont pas été mises à jour puisque nous avons spécifié une destination."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Que se passe-t-il si l'emplacement n'existe pas avant que j'exécute la commande ? Voyons cela dans ce dernier slide, en nous mettant dans la situation où `bar` n'existe pas encore."],afterMarkdowns:["Vous voyez, c'est COMME un git push. Git a créé la destination localement avant le fetch, exactement comme avec push il crée au préalable la destination sur le dépôt distant (si elle n'existe pas)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Pas d'arguments ?","","Si `git fetch` ne reçoit pas d'arguments, cela télécharge simplement tous les commits du dépôt distant au sein de toutes les branches distantes..."],afterMarkdowns:["Assez simple, mais ce n'était pas inutile de voir en action."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, assez parlé ! Pour finir ce niveau, faites simplement un fetch des commits indiqués dans la fenêtre de visualisation de l'objectif. Faites-vous plaisir !","","Vous devrez préciser la source et la destination pour les deux commandes fetch. Faites attention à l'objectif puisque les IDs peuvent avoir été intervertis !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git fetch","","Entonces, recién aprendimos todo sobre los parámetros de push, este parámetro `<lugar>` copado, e incluso las referencias separadas por dos puntos (`<origen>:<destino>`). ¿Podremos usar todo ese conocimiento para `git fetch`, también?","","¡Dalo por hecho! Los parámetros para `git fetch` son realmente *muy, muy* similares a los de `git push`. Es el mismo tipo de conceptos, pero aplicados en la dirección opuesta (dado que ahora estás bajando commits en lugar de subirlos).","","Veamos los conceptos de a uno a la vez..."]}},{type:"ModalAlert",options:{markdowns:["### El parámetro `<lugar>`","","Si especificás un lugar con git fetch como en el comando siguiente:","","`git fetch origin foo`","","Git va a ir a la rama `foo` en el remoto, va a traer todos los commits que no estén presentes localmente, y luego los aplicará sobre la rama `o/foo` localmente.","","Veámoslo en acción (refresquemos el concepto)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especificando un lugar..."],afterMarkdowns:["Sólo bajamos los commits de `foo` y los ubicamos en `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:['Te podrás estar preguntando "¿Por qué git aplicó esos commits sobre la rama `origin/foo` en lugar de aplicarlos sobre la rama `foo` local? Pensé que el parámetro `<lugar>` era un lugar que existía tanto local como remotamente"',"","Bueno, git hace una excepción especial en este caso, porque vos podrías tener trabajo en la rama `foo` que no quieras mezclar. Esto refiere a la lección anterior sobre `git fetch` - no actualiza tus ramas locales no-remotas, sólo descarga los commits (para que pueadas verlos o mergearlos después).",""]}},{type:"ModalAlert",options:{markdowns:['"Bueno, y, en ese caso, ¿qué pasa si explícitamente defino el origen y destino con `<origen>:<destino>`?"',"","Si te sentís lo suficientemente seguro como para traer commits *directamente* a una rama local, entonces, sí, podés especificarlo usando una referencia con dos puntos. No podés traer commits a una rama que tengas checkouteada, pero en cualquier otro caso git te lo va a permitir.","","Este es el único problemita, igual: `<origen>` es ahora un lugar en el *remoto*, y `<destino>` es un lugar *local* en donde poner esos commits. Es exactamente lo opuesto a git push, y eso tiene sentido dado que ¡estamos transfiriendo los datos en la dirección opuesta!","","Habiendo dicho esto, difícilmente alguien use esto en la práctica. Lo estoy presentando principalmente como un modo de conceptualizar que `fetch` y `push` son bastante similares, sólo que en direcciones opuestas."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos esta locura en acción:"],afterMarkdowns:["¡Wow! Mirá: git resolvió `foo~1` como un lugar en el origin y bajó esos commits a `bar` (que era una rama local). Notá como `foo` y `o/foo` no fueron actualizados, dado que especificamos un destino."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasa si el destino no existe antes de que corra este comando? Veamos el último ejemplo pero sin que `bar` exista de antemano."],afterMarkdowns:["Mirá: es IGUAL que git push. Git creó el destino localmente antes de hacer el fetch, tal como git creará el destino en el remoto antes de pushear (si no existiera)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Sin argumentos?","","Si `git fetch` no recibe ningún argumento, simplemente descarga todos los commits del remoto a todas las ramas remotas..."],afterMarkdowns:["Bastante simple, pero vale la pena verlo al menos una vez."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Bueno, demasiada charla. Para completar este nivel, fetcheáte sólo los commits especificados en la visualización del objetivo. ¡Amigate con esos comandos!","","Vas a tener que especificar el origen y el destino para ambos comandos fetch. Prestá atención al objetivo dado que ¡los IDs pueden estar invertidos!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git fetch","","Acabamos de aprender todo sobre los parámetros de push, como el parámetro `<lugar>`, e incluso las referencias separadas por dos puntos (`<origen>:<destino>`). ¿Podremos usar todo ese conocimiento para `git fetch`, también?","","¡Dalo por hecho! Los parámetros para `git fetch` son realmente *muy, muy* similares a los de `git push`. Es el mismo tipo de conceptos, pero aplicados en la dirección opuesta (dado que ahora estás bajando commits en lugar de subirlos).","","Veamos los conceptos de a uno en uno..."]}},{type:"ModalAlert",options:{markdowns:["### El parámetro `<lugar>`","","Si especificas un lugar con git fetch como en el comando siguiente:","","`git fetch origin foo`","","Git va a ir a la rama `foo` en el remoto, va a traer todos los commits que no estén presentes localmente, y luego los aplicará sobre la rama `o/foo` localmente.","","Veámoslo en acción (refresquemos el concepto)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especificando un lugar..."],afterMarkdowns:["Sólo bajamos los commits de `foo` y los ubicamos en `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:['Te podrás estar preguntando "¿Por qué git aplicó esos commits sobre la rama `origin/foo` en lugar de aplicarlos sobre la rama `foo` local? Pensé que el parámetro `<lugar>` era un lugar que existía tanto local como remotamente"',"","Bueno, git hace una excepción especial en este caso, porque podrías tener trabajo en la rama `foo` que no quieras mezclar. Esto hace referencia a la lección anterior sobre `git fetch` - no actualiza tus ramas locales no-remotas, sólo descarga los commits (para que pueadas verlos o mergearlos después).",""]}},{type:"ModalAlert",options:{markdowns:['"Bueno, y, en ese caso, ¿qué pasa si explícitamente defino el origen y destino con `<origen>:<destino>`?"',"","Si te sientes lo suficientemente seguro como para traer commits *directamente* a una rama local, entonces, sí, puedes especificarlo usando una referencia con dos puntos. No puedes traer commits a una rama que sobre la que hayas hecho checkout, pero en cualquier otro caso git te lo va a permitir.","","Este es el único problema, igual: `<origen>` es ahora un lugar en el *remoto*, y `<destino>` es un lugar *local* en donde poner esos commits. Es exactamente lo opuesto a git push, y eso tiene sentido dado que ¡estamos transfiriendo los datos en la dirección opuesta!","","Habiendo dicho esto, difícilmente alguien use esto en la práctica. Lo estoy presentando principalmente como un modo de conceptualizar que `fetch` y `push` son bastante similares, sólo que en direcciones opuestas."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos esta locura en acción:"],afterMarkdowns:["¡Caramba! Mira: git resolvió `foo~1` como un lugar en el origin y bajó esos commits a `bar` (que era una rama local). Observa como `foo` y `o/foo` no fueron actualizados, dado que especificamos un destino."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasa si el destino no existe antes de ejecutar este comando? Veamos el último ejemplo pero sin que `bar` exista de antemano."],afterMarkdowns:["Mira: es IGUAL que git push. Git creó el destino localmente antes de hacer el fetch, tal como git creará el destino en el remoto antes de hacer push (si no existiera)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Sin argumentos?","","Si `git fetch` no recibe ningún argumento, simplemente descarga todos los commits del remoto a todas las ramas remotas..."],afterMarkdowns:["Bastante simple, pero merece la pena verlo al menos una vez."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Bueno, demasiada charla. Para completar este nivel, haz fetch sólo de los commits especificados en la visualización del objetivo. ¡Familiarízate con esos comandos!","","Vas a tener que especificar el origen y el destino para ambos comandos fetch. Presta atención al objetivo dado que ¡los IDs pueden estar invertidos!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parâmetros do git fetch","","Então acabamos de aprender tudo sobre os parâmetros do git push, inclusive sobre esse parâmetro bacana chamado `<lugar>`, e até mesmo sobre colon refspecs (`<origem>:<destino>`). Será que poderíamos aplicar todo esse conhecimento também ao `git fetch`?","","Você adivinhou! Os parâmetros do `git fetch` são na verdade *muito, muito* similares aos do `git push`. Trata-se do mesmo tipo de conceito, só que aplicado na direção oposta (já que agora é um download em vez de um upload).","","Vamos aos conceitos um por vez..."]}},{type:"ModalAlert",options:{markdowns:["### O parâmetro `<lugar>`","","Se você passar um lugar ao git fetch, como no seguinte comando:","","`git fetch origin foo`","","O Git vai ao ramo remoto `foo` e pega todos os commits que não estão presentes localmente, jogando-os no ramo local `o/foo`.","","Vejamo-lo em ação (só para refrescar a memória)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especificando um lugar..."],afterMarkdowns:["Baixamos só os commits de `foo` e colocamos em `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Você pode estar se perguntando -- por que o Git colocou os commits no ramo remoto `o/foo` em vez de simplesmente jogá-los no meu ramo local `foo`? Eu pensei que o parâmetro fosse um `<lugar>` que existisse tanto no repositório local como no remoto?","","Bem, o Git tem uma exceção especial neste caso, porque pode ser que exista trabalho seu no ramo local `foo` que você não queira bagunçar!! Esse fato é relacionado com o abordado na lição anterior sobre o `git fetch` -- ele não atualiza ramos locais não-remotos, ele apenas baixa os commits (de forma que você possa inspecioná-los e/ou realizar um merge posteriormente).",""]}},{type:"ModalAlert",options:{markdowns:['"Bem, neste caso, o que acontece se eu definir explicitamente tanto a origem como o destino, com `<origem>:<destino>`?"',"","Se você estiver apaixonado o suficiente para baixar commits *diretamente* em um ramo local, então sim, você pode especificar esse comportamento com um colon refspec. Você só não pode baixar commits em um ramo que esteja atualmente em checkout, mas se não estiver, o Git permitirá o fetch.","","Aqui está o único detalhe -- `<origem>` agora é uma referência *remota* e `<destino>` é uma referência *local* de onde colocar esses commits. É exatamente o oposto do git push, e realmente faz sentido, já que estamos transferindo os dados na direção oposta!","","Tendo dito isto, desenvolvedores raramente fazem isso na prática. Estou introduzindo essa informação mais como uma forma de conceitualizar a forma como `fetch` e `push` são tão similares, apenas em direções opostas."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos essa loucura em ação:"],afterMarkdowns:["Wow! Viu, o Git entendeu o `foo~1` como um lugar de origin e baixou os commits para o ramo local `bar`. Veja como `foo` e `o/foo` não foram atualizados, já que especificamos outro destino."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E se o destino não existir antes de eu executar o comando? Vamos rever o último slide, mas em uma situação na qual o `bar` não existe de antemão."],afterMarkdowns:["Viu? Funciona EXATAMENTE como o git push. O Git criou o destino localmente antes do fetch, da mesma forma como o Git cria o destino (se ele não existir) no repositório remoto durante um push."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Sem parâmetros?","","Se o `git fetch` não receber argumentos, ele simplesmente baixa todos os commits do repositório remoto em todos os ramos remotos..."],afterMarkdowns:["Bastante simples, mas importante de rever ao menos uma vez."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, chega de conversa! Para completar este nível, faça fetch apenas dos commits especificados na visualização do objetivo. Capriche nos comandos!","","Você terá de especificar tanto a origem como o destino em ambos os comandos de fetch. Preste atenção na janela de visualização, já que os identificadores podem trocar!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de fetch","","Entonces, aprendido todo sobre os parámetros de push, este parámetro `<lugar>` molón, e incluso as referencias separadas por dous puntos (`<orixe>:<destino>`). ¿Poderemos empregar todo este coñecemento para `git fetch` tamén?","","¡Home claro! Os parámetros para `git fetch` son realmente *moi, moi* semellantes os de `git push`. É o mesmo tipo de conceptos, pero aplicados na dirección contraria (xa que agora estás baixando os commits en lugar de subilos).","","Vexamos os conceptos dunha puntada..."]}},{type:"ModalAlert",options:{markdowns:["### O parámetro `<lugar>`","","Se especificar o lugar co git fetch como no comando seguinte:","","`git fetch origin foo`","","Git vai ir á rama `foo` no remoto, vai traer tódolos commits que non estén presentes localmente, e logo aplicaráos sobre a rama `o/foo` localmente.","","Vexámolo en acción (refresquemos o concepto)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especificando un lugar..."],afterMarkdowns:["Sólo baixamos os commits de `foo` e os poñemos en `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:['Poderás preguntarte "¿Por qué git aplicou eses commits sobre a rama `origin/foo` e non os aplicou sobre a rama `foo` local? Lembra que o parámetro `<lugar>` era un lugar que existía tanto no local como no remoto."',"","Bueno, git fai unha excepción especial neste caso, xa que poderías ter traballo na rama `foo` que non quixeras mesturar. Esto refírese á lección anterior sobre `git fetch` - non actualiza as túas ramas locais non-remotas, só descarga os commits (para que poidas velos ou mesturalos despois).",""]}},{type:"ModalAlert",options:{markdowns:['"Bueno, e, neste caso, ¿qué pasa se explícitamente definimos o orixe e destino con `<origen>:<destino>`?"',"","Se te sentes o suficientemente seguro como para traer os commits *directamente* da rama local, entón, sí, podes especificalo empregando a referencia con dous puntos. Non podes traer commits a unha rama que non teñas, pero en calquera outro caso, git vaino facer.","","Este é o único problema, igual: `<orixe>` é agora un lugar no *remoto*, e `<destino>` é un lugar *local* onde poñer esos commits. É exactamente o oposto a git push, e eso ten sentido xa que ¡estamos enviando os datos no sentido contrario!","","Dito esto, difícilmente alguén use esto na práctica. Estouno presentando principalmente como un modo de traballar no que `fetch` e `push` son moi semellantes, só que en direccións opostas."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos esta locura en acción"],afterMarkdowns:["¡Wow! Mira: git resolveu `foo~1` como un lugar no que a orixe descargou eses commits a `bar` (que era unha rama local). Nota como `foo` e `o/foo` non foron actualizados, xa que especificamos o destino."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasa si o destino non existe antes de lanzar este comando? Vexamos o último exemplo pero sin que `bar` exista de antemán."],afterMarkdowns:["Mira: é IGUAL que git push. Git creou o destino localmente antes de facer o fetch, tal e como git creará o destino no remoto antes de empurrar (se non existiran)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Sen argumentos?","","Se `git fetch` non recibe ningún argumento, simplemente descarga tódolos commits do remoto a tódalas ramas remotas..."],afterMarkdowns:["Moi sinxelo, pero vale a pena velo ó menos unha vez."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Bueno, moitas verbas. Para rematar o nivel, descarga só os commits especificados na visualización do obxectivo. ¡Faite colega destes comandos!","","Vas ter que especificar a orixe e o destino para ámbolos dous comandos fetch. Presta atención ó objetivo dado que ¡os IDs poden estar invertidos!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git fetch 的參數","","我們剛學到了所有關於 git push 的參數，有非常棒的 `<place>` 參數，甚至是 colon refspecs（`<source>:<destination>`），我們可不可以也同樣套用到 `git fetch` 上面？","","你猜對了！`git fetch` 的參數*非常非常*類似 `git push`，一樣的概念，但方向不同（因為你在下載 commit，而不是在上傳 commit）。","","讓我們一次講一個概念..."]}},{type:"ModalAlert",options:{markdowns:["###`<place>` 參數","","對於 `git fetch`，如果你特別指定了一個 `<place>`：","","`git fetch origin foo`","","git 會到 remote 上的 `foo` branch，抓下所有不在 local 上的 commit，然後將它們放到 local 的 `o/foo` branch。","","讓我們實際看一下（就只是一個*更新*的方法）。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["指定一個 `<place>`..."],afterMarkdowns:["我們只下載了 `foo` 上的 commit，並且把它們放到 `o/foo`。"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["你也許會感到奇怪，為什麼 git 是把這些 commit 放到 `o/foo` branch 而不是放到我的 local 的 `foo` branch？ 我認為，`<place>` 參數是表示一個位置，這個位置同時存在 local 跟 remote 上？","","因為你可能已經 checkout 到 `foo` branch 上，而且你不想要打亂上面的 commit，因此 git 才會特別這樣做！！這就又回到之前的 `git fetch` 的課程，它並不會放到你的 local 上的 branch (該 branch 沒有對應到任何的 remote branch)，它只會下載 commit 到 local 上且表示 remote 的 branch（所以你之後可以觀察或者 merge 它們）。",""]}},{type:"ModalAlert",options:{markdowns:['"在該例子當中，如果我特別透過 `<source>:<destination>` 來指定 source 以及 destination，會發生什麼事情？"',"","如果你很想要把 fetch 回來的 commit *直接*放到 local branch，那麼你就可以利用一個 colon refspec 來做到。你不能夠把 fetch 回來的 commit 放到你目前正 checkout 的 branch，如果不是的話，git 就會允許你這麼做。","","這裡只有一個重點，`<source>` 現在是一個在 *remote* 上的 branch，而且 `<destination>` 是一個放置這些 commit 的 *local* 的位置。它剛好就是 `git push` 的相反，而且因為我們在相反方向傳遞資料，所以這也很合理！","","其實，程式設計師很少會想要做這個，我主要是強調 `fetch` 以及 `push` 的概念是很類似的，就只是方向相反而已。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來實際看一下這個瘋狂的事情："],afterMarkdowns:["哇！看到了吧，git 把  `foo~1` 解讀成一個在 origin 上的位置，而且把該位置上面的 commit 下載到 `bar`（這是一個 local branch）上面，注意，因為我們有指定目的地，因此 `foo` 跟 `o/foo` 並沒有被更新。"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我在執行這個指令之前，destination 不存在的話會怎樣？我們回到上一個例子，但這一次事前並沒有 `bar` 這個 branch 的存在。"],afterMarkdowns:["看到了吧，這就像是 `git push`，在 fetch 之前，git 會自己建立 destination，就好像是在 push 之前， git 會建立 remote 上的 destination 一樣（如果它不存在的話）。"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["沒有參數的情況？","","如果使用 `git fetch` 的時候，沒有指定任何的參數，那就相當於它會下載 remote 上面的所有的 commit，並且把這些 commit 放到 local 上面所有對應到 remote 的 branch..."],afterMarkdowns:["超簡單，但是所有的更新只做一次，很值得。"],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["好的，講了好多！要完成這一關，fetch 視覺化的目標所指定的 commit，好好玩這些指令吧！","","對於兩個 fetch 的指令，你必須要指定 source 以及 destination，注意一下視覺化的目標，因為 commit 的 id 可以被交換！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git fetch 的参数","","我们刚学习了 git push 的参数，很酷的 `<place>` 参数，还有用冒号分隔的 refspecs（`<source>:<destination>`）。 这些参数可以用于 `git fetch` 吗？","","你猜中了！`git fetch` 的参数和 `git push` 极其相似。他们的概念是相同的，只是方向相反罢了（因为现在你是下载，而非上传）","","让我们逐个讨论下这些概念……"]}},{type:"ModalAlert",options:{markdowns:["###  `<place>` 参数","","如果你像如下命令这样为 git fetch 设置 <place> 的话：","","`git fetch origin foo`","","Git 会到远程仓库的 `foo` 分支上，然后获取所有本地不存在的提交，放到本地的 `o/foo` 上。","","来看个例子（还是前面的例子，只是命令不同了）"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["通过指定 place..."],afterMarkdowns:["我们只下载了远程仓库中 `foo` 分支中的最新提交记录，并更新了 o/foo"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["你可能会好奇 —— 为何 Git 会将新提交放到 `o/foo` 而不是放到我本地的 foo 分支呢？之前不是说这样的 <place> 参数就是同时应用于本地和远程的位置吗？","","好吧, 本例中 Git 做了一些特殊处理，因为你可能在 foo 分支上的工作还未完成，你也不想弄乱它。还记得在 `git fetch` 课程里我们讲到的吗 —— 它不会更新你的本地的非远程分支, 只是下载提交记录（这样, 你就可以对远程分支进行检查或者合并了）。",""]}},{type:"ModalAlert",options:{markdowns:["“如果我们指定 `<source>:<destination>` 会发生什么呢？”","","如果你觉得直接更新本地分支很爽，那你就用冒号分隔的 refspec 吧。不过，你不能在当前检出的分支上干这个事，但是其它分支是可以的。","","这里有一点是需要注意的 —— `source` 现在指的是远程仓库中的位置，而 `<destination>` 才是要放置提交的本地仓库的位置。它与 git push 刚好相反，这是可以讲的通的，因为我们在往相反的方向传送数据。","","理论上虽然行的通，但开发人员很少这么做。我在这里介绍它主要是为了从概念上说明 `fetch` 和 `push` 的相似性，只是方向相反罢了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["来看个疯狂的例子："],afterMarkdowns:["哇! 看见了吧, Git 将 `foo~1` 解析成一个 origin 仓库的位置，然后将那些提交记录下载到了本地的 `bar` 分支（一个本地分支）上。注意由于我们指定了目标分支，`foo` 和 `o/foo` 都没有被更新。"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果执行命令前目标分支不存在会怎样呢？我们看一下上个对话框中没有 bar 分支的情况。"],afterMarkdowns:["看见了吧，跟 git push 一样，Git 会在 fetch 前自己创建立本地分支, 就像是 Git 在 push 时，如果远程仓库中不存在目标分支，会自己在建立一样。"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["没有参数呢?","","如果 `git fetch` 没有参数，它会下载所有的提交记录到各个远程分支……"],afterMarkdowns:["相当简单，但是仅需更新一次，值得你去做！"],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["好, 说得太多了！要完成本关，抓取目标窗口中指定的提交记录，使用这些魔幻的命令吧！","","使用 fetch 时, 你必须指定 source 和 destination。 注意一下目标窗口, 因为提交对象的 ID 可能会变哦!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch Optionen","","Nun haben wir also alles über `git push` Optionen gelernt, diesen coolen `<Ort>`-Parameter, and sogar über mit Doppelpunkt getrennte Ref-Spezifikationen (`<Quelle>:<Ziel>`). Können wir all dieses neu erworbene Wissen auch auf `git fetch` anwenden?","","Jede Wette! Die Optionen für `git fetch` sind wirklicht *sehr, sehr* ähnlich denen von `git push`. Es sind dieselben Verfahren, nur in die andere Richtung angewendet (da man bei `fetch` herunterlädt anstatt hochzuladen).","","Gehen wir die verschiedenen Verfahrensweise mal eine nach der anderen durch ..."]}},{type:"ModalAlert",options:{markdowns:["### Der Parameter `<Ort>`","",'Wenn du, wie folgt, einen "Ort" bei `git fetch` angibst:',"","`git fetch origin foo`","","wird Git zum Branch `foo` auf dem Remote gehen, dort alle Änderungen holen, die es lokal noch nicht gibt, und sie an den lokalen Branch `o/foo` anhängen.","","Schauen wir uns das mal live an (nur zur Wiederholung)"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Durch Angabe eines Ortes ..."],afterMarkdowns:["... laden wir die fehlenden Commits von `foo` und packen sie auf `o/foo` drauf."],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Du wunderst dich vielleicht warum Git diese Commits auf den `o/foo` Branch gepacht hat, anstatt einfach direkt auf den lokalen Branch `foo`? Zeigt der Parameter `<Ort>` nicht einen Ort an, der sowohl lokal als auch entfernt existiert?","","Nun ja, Git geht diesen Schritt weil du auf `foo` ja noch Commits haben könntest, die nicht auf dem Server sind, und da will es nichts durcheinander bringen. Ähnlich wie beim früheren Level zu `git fetch` -- es aktualisiert nicht deine lokalen Arbeits-Branches, es lädt die Commits nur in die `o` (bzw. `origin`) Branches, damit du sie dir in Ruhe anschauen und integrieren kannst.",""]}},{type:"ModalAlert",options:{markdowns:["Wenn das so ist, was passiert dann wenn ich explizit Quelle und Ziel im Ort angebe?","","Wenn du Commits wirklich per `fetch` *direkt* auf einen lokalen Branch holen willst, dann kannst du das mit einer Ref-Spezifikation erreichen. Das funktioniert nicht mit deinem gerade ausgecheckten Branch, aber davon abgesehen lässt Git es zu.","","Nur ein Haken -- `<Quelle>` bezeichnet jetzt einen Ort auf dem *entfernten* Server und `<Ziel>` ist ein *lokaler* Ort, wo die Commits hin sollen. Es ist genau umgekehrt wie bei `git push` und das ist logisch, denn wir übertragen die Daten ja auch in die umgekehrte Richtung!","","Davon abgesehen benutzt man das in der Praxis kaum. Ich zeige das vor allem um zu verdeutlichen, wie `fetch` und `push` sehr ähnlich sind, nur in entgegengesetzten Richtungen."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns den Quatsch mal in Aktion an:"],afterMarkdowns:["Wow! Siehst du, git löst `foo~1` als Ort auf dem Server `origin` auf und lädt dessen Commits herunter in `bar` hinein. Beachte wie `foo` und `o/foo` *nicht* aktualisiert wurden, da wir ein Ziel angegeben haben."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was ist denn wenn das Ziel nicht existiert, für das ich den Befehl ausführe? Schauen wir uns das letzte Beispiel noch mal an, nur dass `bar` jetzt noch nicht existiert."],afterMarkdowns:["Siehst du, es ist *genau* wie `git push`. Git erstellt das Ziel lokal bevor es den `fetch` ausführt, genauso wie Git erst das Ziel auf dem Remote erstellt, befor es pusht (falls das Ziel nicht existiert)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Keine Optionen?","","Wenn bei `git fetch` keine Optionen angegeben werden, lädt es einfach alle Commits vom Remote auf die lokalen Abbildungen aller Remote Branches ..."],afterMarkdowns:["Ziemlich einfach, aber man sollte es mal gesehen haben."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, genug gelabert! Um den Level zu schaffen musst du nur die im Zielbild angegebenen Commits per `fetch` holen. Sei kreativ mit den Befehlen!","","Du wirst Quelle und Ziel bei beiden `fetch` Befehlen angeben müssen. Schau dir das Zielbild gut an, da die IDs vertauscht sein könnten!"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Аргументы git fetch","","Итак, мы только что изучили всё, что касается аргументов git push, мы узнали о параметре `<пункт назначения>`, и даже об аргументе, задающем отдельно источник и получатель коммитов (`<источник>:<получатель>`). Можем ли мы применить все эти полученные знания для команды `git fetch` ?","","Ещё бы! Аргументы для команды `git fetch` на самом деле *очень, очень* похожи на те, что мы использовали в `git push`. В данном случае применяется тот же подход, только в противоположном направлении (так как теперь вы скачиваете коммиты, а не закачиваете их).","","Давайте ознакомимся с принципами один за одним..."]}},{type:"ModalAlert",options:{markdowns:["### Параметр `<пункт назначения>`","","Если вы указываете пункт назначения в команде git fetch, например так, как в следующем примере:","","`git fetch origin foo`","","Git отправится в ветку `foo` на удалённом репозитории, соберёт с собой все коммиты, которые не присутствуют локально, и затем поместит их в локальную ветку под названием `o/foo`.","","Давайте взглянем на всё это в действии (чтобы освежить в памяти)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Указывая пункт назначения..."],afterMarkdowns:["мы скачиваем только коммиты с ветки `foo` и помещаем их в `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Вы, должно быть, спрашиваете себя — зачем git поместил эти коммиты в ветку `o/foo` вместо того, чтобы разместить их в локальной ветке `foo` ? Ведь я думал о параметре `<пункт назначения>`, как о месте, ветке, которая существует в обоих - локальном и удалённом репозитории. Верно?","","На самом деле, в данном случае git делает исключение, потому что вы, возможно, работаете над веткой `foo`, которую не хотите привести в беспорядок!! Об этом упоминалось в ранних уроках по `git fetch` - эта команда не обновляет ваши локальные 'не удалённые', она лишь скачивает коммиты (соответственно, вы можете инспектировать / объединять их позже).",""]}},{type:"ModalAlert",options:{markdowns:['"Что же тогда произойдёт, если я явно укажу оба параметра: и источник и получатель, пользуясь синтаксисом `<источник>:<получатель>` ?"',"","Если вы уверены в том, что хотите закачать коммиты *прямиком* в вашу локальную ветку, тогда да, вы можете явно указать источник и получатель через двоеточние. Вы можете воспользоваться таким приёмом лишь для ветки, на которой вы не находитесь в настоящий момент `checkout`.","","Теперь у нас `<источник>` - это место на *удалённом репозитории*, а `<получатель>` - место в *локальном* репозитории, в который следует помещать коммиты. Аргументы в точности до наоборот повторяют git push, и немудрено, ведь теперь мы переносим данные в обратном направлении!","","Как уже было сказано, разработчики редко используют такой подход на практике. Целью демонстрации этой возможности было показать, насколько схожи концептуально `fetch` и `push`. Их отличие лишь в направлении переноса данных."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте взглянем на всё это в действии:"],afterMarkdowns:["Ого! Видите, git распознал `foo~1` как место в origin и затем скачал эти коммиты в `bar`, которая является локальной веткой. Обратите внимание, что ветки `foo` и `o/foo` не изменились, так как в аргументах мы явно указали получателя."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А что, если ветка-получатель не существует на момент запуска команды? Давайте ещё раз взглянем на предыдущий слайд, но на этот раз ветки `bar` ещё не существует."],afterMarkdowns:["Видите, поведение совсем такое же, как и у git push. Git создал ветку-получатель локально прежде чем скачивать данные. Всё как и в случае, когда git создаёт получателя в удалённом репозитории, когда мы закачиваем изменения (если получатель не существует)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А если вообще без аргументов ?","","Если команда `git fetch` выполняется без аргументов, она скачивает все-все коммиты с удалённого репозитория и помещает их в соответствующие удалённо-локальные ветки в локальном репозитории..."],afterMarkdowns:["Достаточно просто, после того как мы пережили все эти технические тонкости."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ладно, достаточно болтовни! Чтобы выполнить этот уровень, скачайте лишь определённые коммиты так, как представлено в визуализации цели. Пофантазируйте с этими командами!","","Вам следует явно указывать источник и получателя для обеих команд fetch. Обратите внимание на визуализацию цели, так как ID-шники могут меняться!"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git fetch 인자들","","여태까지 우리는 git push 인자들에 대해 배워봤습니다. 이 멋진 `<place>` 인자 그리고 콜론 참조스펙도 말이죠(`<source>:<destination>`). 우리가 알아낸 이 지식을 `git fetch`에도 적용 할 수 있으려나요?","","당연하죠! `git fetch`에 넘기는 인자들은 사실 `git push`의 그것들과 *아주 아주* 비슷합니다. 같은 컨셉으로 적용되지만 방향이 반대일 뿐이죠(커밋을 업로드하는게 아니라 다운받는것이니까요).","","하나씩 차근차근 알아봅시다..."]}},{type:"ModalAlert",options:{markdowns:["### `<place>` 인자","","git fetch에 다음 명령어와 같이 place를 지정해주면:","","`git fetch origin foo`","","Git은 원격 저장소의 `foo` 브랜치로 가서 현재 로컬에 없는 커밋들을 가져와 로컬의 'o/foo' 브랜치 아래에 추가 할 것입니다.","","직접 확인해봅시다(상기해보죠)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["place를 지정해주면..."],afterMarkdowns:["커밋들을 `foo`브랜치에서만 내려받은 후 로컬의 `o/foo`브랜치에만 적용합니다."],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["여러분은 분명 궁금할거에요 -- 왜 로컬의 `foo`에 그냥 커밋을 추가하지 않고 로컬의 원격 브랜치 `o/foo`에 커밋들을 추가한거지? <place> 인자는 로컬하고 원격 저장소 모두에 똑같이 있는 곳을 의미한게 아니였나?","","음, git이 이번 상황은 특별히 예외적으로 처리하기 때문입니다. 여러분이 `foo`브랜치에 작업을 했을지도 모르는데 이 명령으로 망쳐서 건드릴지도 모르니까요! 이전에 했던 강의 `git fetch`를 떠올려보면 왜 그런지 느낌이 올겁니다 -- `git fetch`는 로컬의 원격 브랜치가 아닌 브랜치는 갱신하지 않습니다, 커밋들을 내려받기만 합니다(여러분이 확인해보고 나중에 병합할 수 있도록 말이죠).",""]}},{type:"ModalAlert",options:{markdowns:['"그렇다면, 이전 강의처럼 source와 destination를 모두 직접 지정해주면 어떻게될까요? 이 명령어로 말이죠 `<source>:<destination>`"',"","여러분이 커밋을 *직접* 로컬 브랜치로 fetch할 열의가 있다면, 네 콜론 참조스펙으로 지정해서 할 수 있습니다. 하지만 체크아웃된 브랜치에 fetch할 수 는 없고 체크아웃되지 않은 브랜치만 가능합니다.","","주의 할점이 하나 있는데 -- `<source>`는 이제 받아올 커밋이 있는 *원격*에 있는 place를 넣어줘야하고 `<destination>`은 그 커밋들을 받아올 *local*의 place를 인자로 넣어줘야 합니다. git push와 정반대로 하는거죠, 데이터를 반대의 방향으로 옮기는 작업이니 이게 더 납득이 갑니다.","","언급한 것 처럼, 실제로 이것을 하는 개발자들은 많지 않습니다. 이것을 소개하는것은 `fetch`와 `push`가 방향이 반대일뿐 컨셉이 비슷하다는것을 표현하기 위해서입니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["자 이 해괴한 작업을 직접 확인해봅시다:"],afterMarkdowns:["이야! 보셨습니까, git이 `foo~1`을 origin의 place로 지정하고 커밋들을 내려받아 `bar`(로컬 브랜치)에 추가했습니다. `foo`와 `o/foo`는 갱신되지 않는게 확인되나요? destination을 지정해줬기 때문입니다."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["만약 destination이 될 브랜치가 없는 없는 상태에서 명령을 수행하면 어떻게 될까요? 방금의 슬라이드에서 `bar`브랜치가 없는 상태에서 수행해봅시다."],afterMarkdowns:["보이나요, git push 와 똑같습니다. Git이 fetch를 수행하기전에 destination을 로컬에 만들었습니다. git이 push를 수행하기 전에 원격저장소에 destination을 만드는것과 똑같습니다(없을경우에)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["인자 없이는?","","만약 `git fetch`를 인자없이 수행하면 원격저장소에서 모든 원격 브랜치들로 커밋들을 내려받습니다..."],afterMarkdowns:["간단하지만, 짚고 넘어갑시다."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["좋습니다, 설명은 이정도로 하고! 이번 레벨을 끝내기위해서는 시각화된 골처럼 커밋들을 fetch하면 됩니다. 명령어로 멋지게 해내봅시다!","","fetch 명령에 source와 destination을 모두 지정해줘야 할겁니다. 골 시각화를 잘 보세요 fetch를 하다보면 커밋들의 ID가 바뀔수도있어요!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Аргументи git fetch","","Отже, ми вже вивчили все про аргументи git push, про корисний параметр `<place>` і про формат запису з двокрапкою (`<source>:<destination>`). Чи знадобляться нам ці зання при вивченні `git fetch`?","","Ще б пак! Аргументи для `git fetch` насправді *дуже, дуже* схожі на `git push`. Принцип той самий, з точністю до напрямку (бо ми звантважуємо коміти, а не завантажуємо).","","Розгляньмо це крок за кроком..."]}},{type:"ModalAlert",options:{markdowns:["### Параметр `<place>`","","Якщо вказати параметр `<place>` для команди git fetch, наприклад, так:","","`git fetch origin foo`","","git піде у віддалену гілку `foo`, візьме всі коміти, яких немає локально і закине в локальну гілку `o/foo`.","","Подивімось на це в дії (просто щоб пригадати)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Вказуючи `<place>`..."],afterMarkdowns:["Ми звантажуємо коміти лише з `foo` і кладемо їх в `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Ти можеш спитати, чому git закинув ці коміти в гілку `o/foo` замість того, щоб покласти їх відразу в локальну гілку `foo`? Я думав, що параметр `<place>` одночасно вказує місце звідки взяти і куди поставити?","","Ну, git робить невеликий виняток в цьому випадку, оскільки ти, ймовірно, маєш якусь роботу в `foo`, і не хочеш там нічого зіпсувати! Пригадай з попереднього уроку про `git fetch` -- він не оновлює твої локальні (не віддалені -- без `o/`) гілки, він тільки звантажує коміти (так, щоб їх можна було переглянути/змерджити пізніше).",""]}},{type:"ModalAlert",options:{markdowns:['"Ну, в такому разі, що буде, якщо явно вказати і джерело і призначення `<source>:<destination>`?"',"","Якщо ти почуваєшся достатньо впевненим і хочеш звантажити віддалені коміти *прямо* в свою локальну гілку, тоді -- справді, ти можеш так написати, використавши синтаксис з двокрапкою. Єдиний виняток -- таким способом не можна витягувати зміни в поточну локальну гілку, в будь-яку іншу -- без проблем.","","Тепер в нас `<source>` вказує на *віддалений репозиторій*, а `<destination>` -- на *локальне* місце, куди звантажаться коміти. Це повна протилежність тому, як було в git push, що, зрештою, має сенс, адже ми передаємо дані у протилежному напрямку!","","Насправді, розробники рідко використовують такий спосіб на практиці. І він показаний тут лише для повноти описання наскільки `fetch` і `push` схожі, відрізняючись лише напрямом дії."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Подивімось на це божевілля в дії:"],afterMarkdowns:["Ого! Дивись, git прийняв `foo~1` за джерело, і звантажив коміти в `bar` (локальна гілка). Зауваж, що `foo` і `o/foo` не оновлювались, оскільки ми явно вказали звідки і куди передавати коміти."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А якщо вказаного місця призначення не існує на момент виконання команди? Погляньмо на попередній слайд, але без гілки `bar`."],afterMarkdowns:["Бачиш, все як і в випадку з git push. Git створив локальну гілку-призначення перед звантаженням, так само як створить гілку-призначення на віддаленій стороні перед пушем (якщо її не існувало, звичайно)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Без аргументів?","","Якщо `git fetch` запущено без аргументів, він просто звантажить всі коміти з віддаленого репозиторія в віддалені (`o/`) гілки..."],afterMarkdowns:["Все дуже просто, але варто було згадати ще раз."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Гаразд, годі балакати! Щоб пройти цей рівень, звантаж лише вказані на візуалізації коміти. Прояви фантазію, підбираючи команди!","","Тобі потрібно вказати і джерело і призначення для обидвох fetch-команд. Слідкуй за змінами на візуалізації, ID комітів можуть змінюватися!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tham số Git fetch","","Chúng ta vừa tìm hiểu về tham số của git push, sự tuyệt vời của tham số `<vị trí>`, và thậm chí cả refspecs (`<nguồn>:<đích>`). Liệu ta có thể áp dụng điều này vào `git fetch` không nhỉ?","","Đoán chuẩn rồi đấy! Tham số cho lệnh `git fetch` thực ra *rất, rất* giống với `git push`. Chúng có chung khái niệm nhưng được áp dụng cho hướng ngược lại(vì bây giờ ta tải xuống commit chứ không phải tải lên).","","Hãy lần lượt đi qua từng khái niệm một..."]}},{type:"ModalAlert",options:{markdowns:["### Tham số `<vị trí>`","","Nếu bạn chỉ định vị trí cho `git fetch` như câu lệnh dưới:","","`git fetch origin foo`","","Git sẽ lênh nhánh `foo` trên kho chứa từ xa, lấy toàn bộ các commit chưa có trên kho chứa cục bộ và thả chúng xuống nhánh `o/foo` ở kho chứa cục bộ.","","Hãy xem một ví dụ (vẫn là câu lệnh trên nhưng mà trực quan hơn)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Thông qua chỉ định vị trí..."],afterMarkdowns:["Ta chỉ tải xuống commit ở trên nhánh `foo` và đặt chúng ở nhánh `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Có thể bạn sẽ thắc mắc -- tại sao git lại thả các commit xuống nhánh `o/foo` thay vì nhánh `foo` ở kho chứa cục bộ? Tôi tưởng tham số `<vị trí>` tồn tại ở cả kho chứa cục bộ và kho chứa từ xa mà?","","Chà trong trường hợp này git ứng xử có một chút ngoại lệ đặc biệt, vì có thể bạn đang làm việc trên nhánh `foo` ở kho chứa cục bộ mà bạn không muốn nó bị làm rối!! Điều này liên kết đến bài học trước về `git fetch` -- nó không cập nhật nhánh cục bộ không liên kết nhánh từ xa của bạn(nhánh không có tiền tố `origin/`), nó chỉ tải xuống các commit( mà bạn có thể xem xét hoặc hợp nhất sau).",""]}},{type:"ModalAlert",options:{markdowns:['"Nếu vậy, thì điều gì sẽ xảy ra nếu tôi chỉ định cả nguồn và đích với `<nguồn>:<đích>`?"',"","Nếu bạn nhất quyết muốn tải commit *trực tiếp* xuống nhánh cục bộ,thì bạn có thể chỉ định điều này bằng cách dùng refspec hai chấm. Bạn không thể nạp commit vào nhánh mà bạn đang đứng, nhưng git sẽ cho phép bạn làm điều này:","","Đây là cách duy nhất -- `<nguồn>` là vị trí trên kho *từ xa* và `<đích>` là vị trí *cục bộ* để đặt các commit. Điều này hoàn toàn ngược lại với `git push`, và đó là tất nhiên thôi vì ta đang chuyển giao dữ liệu theo hướng ngược lại!","","Thực tế là, các nhà phát triển rất hiếm khi làm điều này. Tôi giới thiệu về nó chủ yếu là vì muốn giải thích rõ hơn việc `fetch` và `push` là khá tương đồng, chỉ là theo hướng ngược lại."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lấy một ví dụ điên rồ..."],afterMarkdowns:["Wao! Thấy chứ, git diễn giải `foo~1` thành một vị trí trên kho chứa từ xa sau đó tải xuống các commit lên nhánh `bar` ở kho chứa cục bộ. Để ý rằng nhánh `foo` và `o/foo` không hề được cập nhật vì ta đã chỉ định đích đến."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nếu như đích đến chưa hề tồn tại trước khi tôi chạy lệnh thì sao? Cùng xem lại ví dụ vừa rồi nhưng lần này nhánh `bar` chưa hề tồn tại."],afterMarkdowns:["Thấy chứ, nó Y HỆT với git push. Git tạo ra đích đến ở kho chứa cục bộ trước khi nạp, cũng giống như git sẽ tạo ra đích đến trên kho chứa từ xa trước khi đẩy (trong trường hợp nó không tồn tại)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Không có tham số?","","Nếu lệnh `git fetch` không nhận được bất kỳ tham số nào, nó sẽ tải xuống tất cả các commit có trên kho chứa từ xa lên tất cả các nhánh từ xa ở kho chứa cục bộ..."],afterMarkdowns:["Khá là đơn giản, nhưng mà cũng nên xem qua thử."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Được rồi, lý thuyết như vậy là đủ rồi! Để hoàn thành cấp độ này, hãy chỉ nạp những commit được chỉ định trong mô tả mục tiêu. Thoải mái ứng biến với những câu lệnh nhé!","","Bạn sẽ phải chỉ định nguồn và dích cho lệnh fetch. Chú ý đến mô tả mục tiêu vì các ID có thể bị xáo trộn!"]}}]}}}},{}],137:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3A%5B%22master%22%5D%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git clone;git fakeTeamwork;git commit;git pull --rebase;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Diverged History",zh_CN:"偏离的提交历史",zh_TW:"diverged history",es_AR:"Historia divergente",es_ES:"Historia divergente",pt_BR:"Histórico divergente",gl:"Histórico diverxente",de_DE:"Abweichende History",fr_FR:"Historique divergent",ja:"履歴の分岐",ru_RU:"Расхождение в истории",uk:"Розбіжності в історії",ko:"엇갈린 히스토리",vi:"Dị biệt lịch sử"},hint:{en_US:"check out the ordering from the goal visualization",zh_CN:"按照目标中的提交树的顺序进行检出",zh_TW:"確認視覺化的目標中的順序",es_AR:"Prestá atención al orden del objetivo",es_ES:"Presta atención al orden del objetivo",pt_BR:"Preste atenção na ordem da visualização do objetivo",gl:"Presta atención ó orixe do obxectivo",de_DE:"Beachte die Reihenfolge in der Zieldarstellung",ja:"ゴールのツリーの順番を参考にすること",fr_FR:"regardez l'ordre dans la fenêtre de visualisation d'objectif",ru_RU:"проверьте сортировку в визуализации цели",uk:"перевірте порядок в візуалізації цілі",ko:"순서는 goal을 참고하세요",vi:"kiểm tra kỹ thứ tự trên mô hình mục tiêu"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Diverged Work","","So far we've seen how to `pull` down commits from others and how to `push` up our own changes. It seems pretty simple, so how can people get so confused?","","The difficulty comes in when the history of the repository *diverges*. Before discussing the details of this, let's see an example...",""]}},{type:"ModalAlert",options:{markdowns:["Imagine you clone a repository on Monday and start dabbling on a side feature. By Friday you are ready to publish your feature -- but oh no! Your coworkers have written a bunch of code during the week that's made your feature out of date (and obsolete). They've also published these commits to the shared remote repository, so now *your* work is based on an *old* version of the project that's no longer relevant.","","In this case, the command `git push` is ambiguous. If you run `git push`, should git change the remote repository back to what it was on Monday? Should it try to add your code in while not removing the new code? Or should it totally ignore your changes since they are totally out of date?","","Because there is so much ambiguity in this situation (where history has diverged), git doesn't allow you to `push` your changes. It actually forces you to incorporate the latest state of the remote before being able to share your work."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["So much talking! Let's see this situation in action"],afterMarkdowns:["See? Nothing happened because the command fails. `git push` fails because your most recent commit `C3` is based off of the remote at `C1`. The remote has since been updated to `C2` though, so git rejects your push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["How do you resolve this situation? It's easy, all you need to do is base your work off of the most recent version of the remote branch.","","There are a few ways to do this, but the most straightforward is to move your work via rebasing. Let's go ahead and see what that looks like."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now if we rebase before pushing instead..."],afterMarkdowns:["Boom! We updated our local representation of the remote with `git fetch`, rebased our work to reflect the new changes in the remote, and then pushed them with `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Are there other ways to update my work when the remote repository has been updated? Of course! Let's check out the same thing but with `merge` instead.","","Although `git merge` doesn't move your work (and instead just creates a merge commit), it's a way to tell git that you have incorporated all the changes from the remote. This is because the remote branch is now an *ancestor* of your own branch, meaning your commit reflects all commits in the remote branch.","","Lets see this demonstrated..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now if we merge instead of rebasing..."],afterMarkdowns:["Boom! We updated our local representation of the remote with `git fetch`, *merged* the new work into our work (to reflect the new changes in the remote), and then pushed them with `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Awesome! Is there any way I can do this without typing so many commands?","","Of course -- you already know `git pull` is just shorthand for a fetch and a merge. Conveniently enough, `git pull --rebase` is shorthand for a fetch and a rebase!","","Let's see these shorthand commands at work."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["First with `--rebase`..."],afterMarkdowns:["Same as before! Just a lot shorter."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["And now with regular `pull`"],afterMarkdowns:["Again, exact same as before!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["This workflow of fetching, rebase/merging, and pushing is quite common. In future lessons we will examine more complicated versions of these workflows, but for now let's try this out.","","In order to solve this level, take the following steps:","","* Clone your repo","* Fake some teamwork (1 commit)","* Commit some work yourself (1 commit)","* Publish your work via *rebasing*"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Travail divergent","","Jusqu'à présent nous avons vu comment rapatrier (`pull`) les commits de nos collaborateurs et comment envoyer les nôtres (`push`). Cela a l'air simple, alors comment certains peuvent trouver le sujet aussi confus ?","","La difficulté arrive quand l'historique du dépôt *diverge*. Avant d'aborder les détails de cette situation, voyons un exemple ...",""]}},{type:"ModalAlert",options:{markdowns:["Imaginez que vous clonez un dépôt le lundi et commencez à bidouiller une nouvelle fonctionnalité. Le vendredi vous êtes prêt à publier votre fonctionnalité -- mais oh non ! Vos collègues ont écrit une floppée de code durant la semaine, ce qui rend votre fonctionnalité désuète (et obsolète). Ils ont aussi publié sur le dépôt distant partagé, donc maintenant *votre* travail est basé sur une *vieille* version du projet qui n'est plus viable.","","Dans ce cas, la commande `git push` est ambiguë. Si vous exécutez `git push`, git devrait-il remettre le dépôt distant tel qu'il était lundi ? Doit-il essayer d'ajouter votre code sans supprimer le nouveau code ? Ou doit-il totalement ignorer vos changements puisqu'ils ne sont plus à jour ?","","Comme il y a trop d'ambiguïté dans cette situation (où l'historique a divergé), git ne vous autorise pas à faire un `push` de vos changements. Cela vous force en fait à rapatrier chez vous le dernier état du dépôt distant avant de pouvoir partager votre travail."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Assez parlé ! Observons cette situation en action :"],afterMarkdowns:["Vous voyez ? Rien ne s'est produit car la commande a échoué. `git push` a échoué car votre plus récent commit `C3` est basé sur le dépôt distant sur `C1`. Le dépôt distant a depuis été mis à jour avec `C2`, donc git rejette votre push."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Comment allez-vous résoudre cette situation ? C'est facile, tout ce que vous avez à faire est de baser votre travail sur la dernière version de la branche distante.","","Il y a plusieurs façons de faire cela, mais la plus directe est de déplacer votre travail avec rebase. Regardons à quoi cela ressemble."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Maintenant si nous rebasons avant de push..."],afterMarkdowns:["Boum ! Nous avons mis à jour notre représentation locale du dépôt avec `git fetch`, rebasé notre travail pour refléter les nouveaux changements, et enfin les avons envoyés avec `git push`."],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Existe-t-il d'autres façons de mettre à jour notre travail quand le répertoire distant a été mis à jour ? Bien sûr ! Faisons la même chose, mais cette fois avec `merge`.","","Bien que `git merge` ne déplace pas votre travail (et crée à la place un commit de fusion), cette commande est également une façon de dire à git que vous avez incorporé tous les changements du dépôt distant. En effet la branche distante est maintenant une *ancêtre* de votre propre branche, ce qui signifie que vos commits contiennent tous les changements faits sur la branche distante.","","Voyons une démonstration ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Maintenant si nous mergeons au lieu de rebaser ..."],afterMarkdowns:["Boum ! Nous avons mis à jour notre représentation locale du dépôt distant avec `git fetch`, *fusionné* les nouveaux commits dans notre copie de travail (pour refléter les nouveaux changements du dépôt distant), et les avons ensuite envoyés avec `git push`."],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Impressionnant ! Existe-t-il une façon de faire tout cela sans taper autant de commandes ?","","Bien sûr : vous savez déjà que `git pull` est simplement un raccourci pour un fetch puis un merge. De manière assez pratique, `git pull --rebase` est un raccourci pour un fetch puis un rebase !","","Voyons ce raccourci au travail."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Premièrement avec  `--rebase`..."],afterMarkdowns:["Comme avant ! Juste un peu plus court."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Et maintenant avec un `pull` normal :"],afterMarkdowns:["A nouveau, c'est exactement la même chose qu'auparavant !"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Cette succession de fetch, rebase/merge, et push est assez commune. Dans les leçons suivantes, nous explorerons cette façon de d'enchaîner les commandes dans des conditions plus complexes, mais pour le moment appliquons ce principe de façon classique.","","Pour finir ce niveau, réalisez les étapes suivantes :","","* Clonez votre dépôt","* Simulez un travail d'équipe (1 commit)","* Commitez un peu de votre travail (1 commit)","* Publiez votre travail avec *rebase*"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Trabajo divergente","","Hasta acá vimos cómo pullear commits de otros y cómo pushear los nuestros. Parece bastante simple, así que ¿cómo puede confundirse tanto la gente?","","La dificultad viene cuando la historia de los repositorios *diverge*. Antes de entrar en detalles, veamos un ejemplo...",""]}},{type:"ModalAlert",options:{markdowns:["Imaginate que clonás un repositorio el lunes y empezás a desarrollar algo. Para el viernes ya estás listo para publicar tu trabajo, pero, ¡oh, oh! Tus colegas también escribieron código durante la semana, haciendo que tu trabajo quede desactualizado (y obsoleto). Además, ellos publicaron esos commits en el repositorio remoto, así que ahora *tu* trabajo está basado en una versión *vieja* del proyecto, que ya no le interesa a nadie.","","En este caso, el comando `git push` es ambiguo. Si corrés `git push`, ¿git debería cambiar el repositorio a como estaba el lunes? ¿Debería tratar de agregar tu código sin eliminar el código nuevo? ¿O debería ignorar completamente tus cambios porque están desactualizados?","","Como hay tanta ambiguedad en esta situación (en que la historia divirgió), git no te permite pushear tus cambios. En cambio, te fuerza a integrar el último estado del repositorio remoto antes de poder compartir tu trabajo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¡Demasiada charla, veámoslo en acción!"],afterMarkdowns:["¿Ves? No pasó nada, porque el comando falla. `git push` falla porque `C3`, tu commit más reciente, está basado en el remoto sobre `C1`. El remoto fue actualizado a `C2` desde entonces, por lo que git rechaza tu push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Cómo resolvés esta situación? Es fácil, todo lo que tenés que hacer es basar tu trabajo en la versión más reciente de la rama remota.","","Hay un par de maneras de hacer esto, pero la más simple es mover tu trabajo haciendo un rebase. Probémoslo a ver cómo se ve."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora, si mejor rebaseamos antes de pushear..."],afterMarkdowns:["¡Boom! Actualizamos nuestra representación local del remoto con `git fetch`, rebaseamos nuestro trabajo para reflejar los nuevos cambios del remoto, y después los pusheamos con `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Hay otra manera de actualizar mi trabajo si actualizaron el repositorio remoto? ¡Claro que sí! Veamos cómo hacer lo mismo pero usando `merge`.","","Por más que `git merge` no mueva tu trabajo (sólo crea un commit de merge), es un modo de decirle a git que integraste todos los cambios del remoto. Esto es porque ahora una rama remota pasó a ser un *ancestro* de tu propia rama, lo que significa que tu commit refleja los cambios de todos los commits de la rama remota.","","Veamos una muestra..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si en lugar de rebasear hacemos un merge..."],afterMarkdowns:["¡Boom! Actualizamos nuestra representación local del remoto usando `git fetch`, *mergeamos* el nuevo trabajo junto con el nuestro (para reflejar los nuevos cambios en el remoto), y después los pusheamos usando `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¡Asombroso! ¿Hay forma de hacer esto sin tipear tantos comandos?","","¡Claro que sí! Ya sabés que `git pull` es simplemente un atajo para hacer fetch y merge. Convenientemente, ¡`git pull --rebase` es un atajo para hacer fetch y rebase!","","Veamos estos atajos funcionando."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Primero con `--rebase`..."],afterMarkdowns:["¡Igual que antes! Sólo que bastante más corto."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Y ahora un `pull` común"],afterMarkdowns:["Otra vez, ¡exactamente lo mismo que antes!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Toda esta movida de fetchear, rebasear/mergear y pushear es bastante común. En lecciones futuras vamos a ver formas más complejas de estos flujos de trabajo, pero por ahora probemos esto que vimos.","","Para resolver este nivel, hacé lo siguiente:","","* Cloná tu repositorio","* Simulá algo de trabajo de un colega (1 commit)","* Commiteá algo de trabajo propio (1 commit)","* Publicá tu trabajo *rebaseando*"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Trabajo divergente","","Hasta ahora hemos visto cómo hacer pull a commits de otros y cómo hacer push a los nuestros. Parece bastante simple, así que ¿cómo puede confundirse tanto la gente?","","La dificultad viene cuando la historia de los repositorios *diverge*. Antes de entrar en detalles, veamos un ejemplo...",""]}},{type:"ModalAlert",options:{markdowns:["Imagínate que clonas un repositorio el lunes y empiezas a desarrollar algo. Para el viernes ya estás listo para publicar tu trabajo, pero, ¡vaya! Tus colegas también han estado escribiendo código durante la semana, haciendo que tu trabajo quede desactualizado (y obsoleto). Además, ellos publicaron esos commits en el repositorio remoto, así que ahora *tu* trabajo está basado en una versión *vieja* del proyecto, que ya no le interesa a nadie.","","En este caso, el comando `git push` es ambiguo. Si ejecutas `git push`, ¿git debería cambiar el repositorio a como estaba el lunes? ¿Debería tratar de agregar tu código sin eliminar el código nuevo? ¿O debería ignorar completamente tus cambios porque están desactualizados?","","Como hay tanta ambiguedad en esta situación (en la que la historia divirgió), git no te permite hacer push de tus cambios. En cambio, te fuerza a integrar el último estado del repositorio remoto antes de poder compartir tu trabajo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¡Demasiada charla, veámoslo en acción!"],afterMarkdowns:["¿Ves? No pasó nada, porque el comando falla. `git push` falla porque `C3`, tu commit más reciente, está basado en el remoto sobre `C1`. El remoto fue actualizado a `C2` desde entonces, por lo que git rechaza tu push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Cómo puedes resolver esta situación? Es fácil, todo lo que tienes que hacer es basar tu trabajo en la versión más reciente de la rama remota.","","Hay un par de maneras de hacer esto, pero la más simple es mover tu trabajo haciendo un rebase. Probémoslo a ver cómo se ve."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora, si hacemos rebase antes de hacer push..."],afterMarkdowns:["¡Zas! Actualizamos nuestra representación local del remoto con `git fetch`, hacemos rebase de nuestro trabajo para reflejar los nuevos cambios del remoto, y después los subimos con `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Hay otra manera de actualizar mi trabajo si actualizaron el repositorio remoto? ¡Claro que sí! Veamos cómo hacer lo mismo pero usando `merge`.","","Por más que `git merge` no mueva tu trabajo (sólo crea un commit de merge), es un modo de decirle a git que integraste todos los cambios del remoto. Esto es porque ahora una rama remota pasó a ser un *ancestro* de tu propia rama, lo que significa que tu commit refleja los cambios de todos los commits de la rama remota.","","Veamos una muestra..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si en lugar de hacer rebase hacemos un merge..."],afterMarkdowns:["¡Zas! Actualizamos nuestra representación local del remoto usando `git fetch`, *mergeamos* el nuevo trabajo junto con el nuestro (para reflejar los nuevos cambios en el remoto), y después los subimos usando `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¡Asombroso! ¿Hay forma de hacer esto sin escribir tantos comandos?","","¡Claro que sí! Ya sabes que `git pull` es simplemente un atajo para hacer fetch y merge. Convenientemente, ¡`git pull --rebase` es un atajo para hacer fetch y rebase!","","Veamos estos atajos funcionando."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Primero con `--rebase`..."],afterMarkdowns:["¡Igual que antes! Sólo que bastante más corto."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Y ahora un `pull` común"],afterMarkdowns:["Otra vez, ¡exactamente lo mismo que antes!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Toda este tinglado de hacer fetch, rebase/merge y push es bastante común. En lecciones futuras vamos a ver formas más complejas de estos flujos de trabajo, pero por ahora vamos a probar esto que acabamos de ver.","","Para resolver este nivel, haz lo siguiente:","","* Clona tu repositorio","* Simula algo de trabajo de un colega (1 commit)","* Haz commit de algún cambio tuyo (1 commit)","* Publica tu trabajo *rebaseando*"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Histórico Divergente","","Até o momento vimos como fazer `pull` de commits dos outros e como fazer `push` de nossas próprias mudanças. Parece ser tão simples, como será que as pessoas ficam tão confusas?","","A dificuldade aparece quando o histórico do repositório *diverge*. Antes de discutir os detalhes disso, vejamos um exemplo...",""]}},{type:"ModalAlert",options:{markdowns:["Imagine que você clonou um repositório na segunda-feira e começou a trabalhar em uma funcionalidade nova. Na sexta-feira você está pronto para publicar a funcionalidade -- mas, ah não! Seus colegas escreveram um bocado de código durante a semana, tornando a sua funcionalidade obsoleta. Eles também publicaram esses commits no repositório remoto que vocês compartilham, então agora o *seu* trabalho é baseado em uma versão *antiga* do projeto, que não é mais relevante.","","Neste caso, o comando `git push` é ambíguo. Se você executar `git push`, será que o Git deveria tratar o repositório remoto como se ele ainda estivesse no estado da segunda-feira? Será que ele deveria tentar adicionar seu código dentro do repositório sem tentar remover o código novo? Ou será que ele deveria simplesmente ignorar suas mudanças totalmente, já que elas estão obsoletas?","","Devido à grande ambiguidade que surge neste tipo de situação (quando a história divergiu), o Git não permite que você faça `push` das suas mudanças. Ele, de fato, força você a incorporar o último estado do repositório remoto antes de conseguir compartilhar o seu trabalho."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Chega de conversa! Vejamos essa situação na prática"],afterMarkdowns:["Viu? Nada aconteceu porque o comando falhou. O `git push` falha porque o commit mais recente (`C3`) é baseado no remoto em `C1`. Como o remoto foi atualizado no meio tempo, o Git rejeita o push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Como resolver essa situação? É fácil, tudo que você precisa fazer é basear seu trabalho na versão mais recente do ramo remoto.","","Existem algumas maneiras de fazer isso, mas a mais direta é mover o seu trabalho usando rebase. Vamos em frente, ver como isso é feito."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora se nós fizermos um rebase antes do push..."],afterMarkdowns:["Boom! Nós atualizamos a representação local do repositório remoto com `git fetch`, fizemos rebase do nosso trabalho para refletir as novas mudanças no repositório remoto, e então enviamos nossas mudanças com `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Será que existem outras formas de compartilhar meu trabalho quando o repositório remoto tiver sido atualizado? Claro! Vamos fazer a mesma tarefa usando `merge` em vez de `rebase`.","","Embora o `git merge` não mova o seu trabalho (em vez disso, ele cria um commit de merge), ele é uma forma de contar ao Git que você incorporou todas as mudanças do repositório remoto. Isso acontece porque o ramo remoto passa a ser um *ancestral* do seu próprio ramo, significando que o seu commit reflete todos os commits contidos no ramo remoto.","","Vejamos uma demonstração..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora se fizermos merge em vez de rebase ..."],afterMarkdowns:["Boom! Atualizamos nossa representação local do repositório remoto com `git fetch`, fizemos *merge* do novo trabalho com o nosso (para refletir as novas mudanças no repositório remoto), e então fizemos push deles com `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Incrível! Existe alguma forma de fazer isso sem digitar tantos comandos?","","É claro -- você já conhece o `git pull` e ele é simplesmente um atalho para um fetch e um merge. Convenientemente, entretanto, o comando `git pull --rebase` é uma abreviação para um fetch e um rebase!","","Vejamos esses dois comandos em ação."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Primeiro com `--rebase`..."],afterMarkdowns:["Mesma coisa que antes! Porém muito mais curto."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E agora com o `pull` normal"],afterMarkdowns:["De novo, exatamente como antes!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Esse fluxo de trabalho de fazer fetch, rebase/merge, e push é bastante comum. Em lições futuras vamos examinar versões mais complicadas desses fluxos de trabalho, mas por enquanto vamos tentar o seguinte.","","Para resolver este nível, faça o seguinte:","","* Clone o repositório","* Simule trabalho de seus colegas (1 commit)","* Faça um commit seu (1 commit)","* Publique seu trabalho usando *rebase*"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Traballo diverxente","","Ata agora vimos cómo descargar e mesturar os commits de outros e como empurrar os nosos. Parece bastante sinxelo, así que ¿cómo pode confundirse tanto a xente?","","A dificultade ven cando a historia dos repositorios *diverxe*. Antes de entrar nos detalles, vexamos un examplo...",""]}},{type:"ModalAlert",options:{markdowns:["Imaxínate que clonas un repositorio o luns e comezas a desenvolver algo. Para o venres, xa estás listo para publicar o teu traballo, pero, ¡oh, oh! Os teus colegas tamén fixeron código durante a semana, facendo que o teu traballo quede desactualizado (e obsoleto). Ademáis, eles publicaron eses commits no repositorio remoto, así que agora o *teu* traballo está baseado nunha versión *vella* do proxecto, que xa non lle interesa a ninguén.","","Neste caso, o comando `git push` é ambiguo. Se executas `git push`, ¿git debería mudar o repositorio para como estaba o luns? ¿Deberías arranxar o teu código sen eliminar o código novo? ¿Ou debería ignorar completamente os teus cambio porque xa están desactualizados?","","Como hai tanta ambiguedade nesta situación (na que a historia diverxeu), git non che permite empurrar os teus cambios. En cambio, fórzate a integrar o último estado do respositorio remoto antes de poder compartir o teu traballo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¡Demasiada charla, vexámolo en acción!"],afterMarkdowns:["¿Ves? Non pasou nada, porque o comando falla. `git push` falla porque `C3`, o teu commit máis recente, está baseado no remoto sobre `C1`. O remoto foi actualizado a `C2` dende entonces, polo que git rechaza o teu push."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Cómo resolves esta situación? É sinxelo, todo o que tes que facer é basear o teu traballo na versión máis recente da rama remota.","","Hai un par de formas de facer esto, pero a máis sinxela é mover o teu traballo facendo un rebase. Probémolo a ver  cómo se ve."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora, se facemos rebase antes de empurrar..."],afterMarkdowns:["¡Boom! Actualizamos a nosa representación local do remoto con `git fetch`, rebasamos o noso traballo para reflexar os novos cambios do remoto, e despois os empurramos con `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Hai outra forma de actualizar o meu traballo se actualizaran o repositorio remoto? ¡Pois claro! Vexamos cómo facer o mesmo pero empregando `merge`.","","Por máis que `git merge` non mova o teu traballo (só crea un commit de merge), é un modo de decirlle a git que integrase tódolos cambios do remoto. Esto é porque agora unha rama remota pasou a ser un *ancestro* da tua propia rama, o que significa que o teu commit reflexa os cambios de tódolos commits da rama remota.","","Vexamos unha mostra..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si no lugar de rebasar facemos un merge..."],afterMarkdowns:["¡Boom! Actualizamos a nosa representación local do remoto usando `git fetch`, *mesturamos* ou *mergeamos* o novo traballo xunto co noso (para reflexar os novos cambios no remoto), e despois os empurramos empregando `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¡Asombroso! ¿Hai forma de facer esto sen escreber tantos comandos?","","¡Claro que sí! Xa sabes que `git pull` é sinxelamente un atallo para facer fetch e merge. Ademáis, ¡`git pull --rebase` é un atallo para facer fetch e rebase!","","Vexamos estos atallos funcionando."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Primeiro con `--rebase`..."],afterMarkdowns:["¡Igual que antes! Só que máis corto."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E agora un `pull` común"],afterMarkdowns:["Outra vez, ¡exactamente o mesmo que antes!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Toda esta movida de fetchear, rebasear/mergear e pushear é bastante común. Nas seguintes leccións imos ver formas máis complexas de estes fluxos de traballo, pero por agora probemos o que vimos.","","Para resolver este nivel, fai o siguiente:","","* Clona o teu repositorio","* Simula algo de trabajo dun colega (1 commit)","* Commitea algo de traballo propio (1 commit)","* Publica o teu traballo *rebasando*"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Diverged Work","","到目前為止我們已經知道如何 `pull` 其他人所送的 commit，而且也知道如何 `push` 我們自己的 commit，感覺很簡單，但是為什麼有人看起來很困惑？","","當 repo 的歷史紀錄是 *diverge（branch 走向不同）* 的狀態時就會很棘手，在討論這個之前，讓我們先來看一個例子...",""]}},{type:"ModalAlert",options:{markdowns:["想像一下你在星期一的時候 clone 了一個 repo，並且開始在設計一個功能，在星期五的時候你準備好要發佈你的新功能，但是非常不幸地，你的同事已經寫了一連串的程式碼並且已經將 commit 發佈到 remote，所以現在*你的*進度是在一個比較*舊*的版本的後面（如果與 remote 比較的話啦！）。","","在這種情況底下，使用 `git push` 會有問題，如果你使用 `git push`，那麼 git 應該要把 remote 退回到星期一的狀態？它應該要把你所寫好的程式碼一起更新進去，同時不會影響你的同事寫好的程式碼？或者是他應該要因為版本比較舊而完全忽略你的程式碼？","","因為在這種情況下會很麻煩（當 git 歷史紀錄被 diverge 了），所以 git 不會允許你 `push` 你的 commit。在你上傳你的 commit 之前，它實際上會先強迫你先跟 remote 同步。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["講太多了啦！讓我們實際看一下這個情況。"],afterMarkdowns:["看到了沒？因為指令失敗了，所以沒有任何事情發生。 `git push` 失敗的原因是因為你最近的 commit `C3` 是在 `C1` 的後面，但是 remote 那邊是 `C2` 在 `C1` 的後面，所以 git 才會拒絕你的 push。"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["你要如何解決這種情況？很簡單，你只需要把 `C3` 接在 remote 最新的版本 `C2` 的後面就可以了。","","有一些方法可以做到，但是最直接的方式是用 rebase，我們來做看看。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在我們 push 之前，先來做 rebase..."],afterMarkdowns:["看吧！我們利用 `git fetch` 下載了 remote 上面的 commit，並且 rebase 我們的 commit，使得我們的 commit 可以接在 remote 上面最新的版本的後面，接著透過 `git push` 就可以上傳更新了。"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["在 remote 已經率先更新之後，還有沒有其它方法可以上傳我們的 commit？當然有阿！我們這次利用 `merge` 來做看看！","","雖然 `git merge` 並不會去移動你的 commit（反而會產生一個 merge commit），這是一個告訴 git 你已經下載了 remote 上面的 commit 並且在 local repo 中已經做完 merge，而因為 remote branch 上的最新的 commit 現在已經是 merge commit 的一個 *ancestor*，這就表示你的 commit 已經包含了在 remote branch 上的所有 commit。","","讓我們來看一下這種情況..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在假設我們不是用 rebase，而是用 merge..."],afterMarkdowns:["看吧！我們藉由 `git fetch` 把 remote 上的 commit 下載下來，並且 *merged* 該 commit 到我們目前的 branch（這樣就表示我們產生的 merge commit 有包含了 remote　上的 commit），接著再透過 `git push` 上傳到 remote。"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["太棒了! 有沒有其它可以不用打這麼多指令的方法？","","當然有阿！你已經知道 `git pull` 就是表示一個 fetch 跟一個 merge。 有一個指令非常方便，那就是 `git pull --rebase`，它表示的是一個 fetch 以及一個 rebase。","","我們來看如何使用這個簡化後的指令。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先 `--rebase`..."],afterMarkdowns:["跟之前一樣！只是少打了很多指令。"],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在用一般的 `pull`"],afterMarkdowns:["又來了，剛好跟之前的一樣！"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["fetch，rebase/merge，以及 push 的流程是幾乎一樣的。在之後的教學中我們會看到比這些流程更複雜的版本。但是現在讓我們先牛刀小試一下。","","為了要完成這一關，請按照下面的步驟：","","* clone 你的 repo","* 假裝送一個 commit 給 remote","* 送一個 commit 給 local repo","* 透過 *rebase* 送自己的 commit"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 偏离的工作","","现在我们已经知道了如何从其它地方 `pull` 提交记录，以及如何 `push` 我们自己的变更。看起来似乎没什么难度，但是为何还会让人们如此困惑呢？","","困难来自于远程库提交历史的**偏离**。在讨论这个问题的细节前，我们先来看一个例子……",""]}},{type:"ModalAlert",options:{markdowns:["假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目**旧版**的代码，与远程仓库最新的代码不匹配了。","","这种情况下, `git push` 就不知道该如何操作了。如果你执行 `git push`，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，异或由于你的提交已经过时而直接忽略你的提交？","","因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 `push` 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["说了这么多，咱们还是看看实际案例吧！"],afterMarkdowns:["看见了吧？什么都没有变，因为命令失败了！`git push` 失败是因为你最新提交的 `C3` 基于远程分支中的 `C1`。而远程仓库中该分支已经更新到 `C2` 了，所以 Git 拒绝了你的推送请求。"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["那该如何解决这个问题呢？很简单，你需要做的就是使你的工作基于最新的远程分支。","","有许多方法做到这一点呢，不过最直接的方法就是通过 rebase 调整你的工作。咱们继续，看看怎么 rebase！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我们在 push 之前做 rebase 呢？"],afterMarkdowns:["我们用 `git fetch` 更新了本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 `git push` 推送到远程仓库。"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["还有其它的方法可以在远程仓库变更了以后更新我的工作吗? 当然有，我们还可以使用 `merge`","","尽管 `git merge` 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。这是因为远程分支现在是你本地分支的祖先，也就是说你的提交已经包含了远程分支的所有变化。","","看下演示..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["咱们们用 merge 替换 rebase 来试一下……"],afterMarkdowns:["我们用 `git fetch` 更新了本地仓库中的远程分支，然后**合并**了新变更到我们的本地分支（为了包含远程仓库的变更），最后我们用 `git push` 把工作推送到远程仓库"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["很好！但是要敲那么多命令，有没有更简单一点的？","","当然 —— 前面已经介绍过 `git pull` 就是 fetch 和 merge 的简写，类似的 `git pull --rebase` 就是 fetch 和 rebase 的简写！","","让我们看看简写命令是如何工作的。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这次用 `--rebase`……"],afterMarkdowns:["跟之前结果一样，但是命令更短了。"],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["换用常规的 `pull`"],afterMarkdowns:["还是跟以前一样! "],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["由 fetch、rebase/merge 和 push 组成的工作流很普遍。后续课程我们会讲解更复杂的工作流，不过现在我们先解决这个关卡吧。","","要完成本关，你需要完成以下几步：","","* 克隆你的仓库","* 模拟一次远程提交（fakeTeamwork）","* 完成一次本地提交","* 用 *rebase* 发布你的工作"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Abweichende Inhalte","","Bisher haben wir gesehen wie man per `pull` Commits von Anderen ins lokale Repository holt und die eigenen Änderungen in ein entferntes `push`t. Ist doch ziemlich einfach, wie kann man da durcheinander kommen?","","Die Schwierigkeiten entstehen, wenn die Historys der beiden Repositorys *divergieren*, also voneinander abweichen. Bevor wir die Einzelheiten besprechen, schauen wir uns ein Beispiel an ...",""]}},{type:"ModalAlert",options:{markdowns:["Stell dir vor du holst dir Montags ein Repository per `clone` und fängst an, an einem Feature zu arbeiten. Bis Freitag soll es fertig und veröffentlicht sein -- doch, oh je! Deine Kollegen haben eine Menge Code während der Woche geschrieben, der dein Feature hat veralten lassen (und überflüssig gemacht hat). Sie haben diesen Code außerdem zum entfernten Repository gepusht, und dadurch basiert *deine* harte Arbeit jetzt auf einer *alten* Version des Projektes, die nicht länger relevant ist.","","In diesem Fall ist ein `git push` problematisch. Wenn du es ausführst, soll Git das entfernte Repository in den Zustand von Montag zurückversetzen? Soll es versuchen deinen Code auf die aktuelle Version zu packen? Oder soll es deine Änderungen einfach ignorieren, weil sie total veraltet sind?","","Da es in dieser Situation so viele Mehrdeutigkeiten gibt (da die Historys divergent sind) erlaubt Git dir nicht, deine Änderungen einfach zu `push`en. Es zwingt dich, zuerst die neuesten Änderungen vom Server zu holen und in deine zu integrieren bevor du deine Arbeit mit anderen teilen kannst."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bla bla bla. Schauen wir uns das lieber in Aktion an:"],afterMarkdowns:["Siehst du? Nichts passiert, weil der Befehl fehlschlägt. `git push` schlägt fehl, weil der neueste Commit `C3` auf dem Commit `C1` des Remotes basiert. Der entfernte Server hat mittlerweile jedoch `C2` gepusht bekommen, also lässt Git deinen Push jetzt nicht mehr zu."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Wie sollen wir das auflösen? Es ist ganz einfach, du musst deinen Commit nur von der aktuellsten Version des Remotes ableiten.","","Es gibt verschiedene Möglichkeiten wie man das erreichen kann, aber die offensichtlichste ist es, deine Commits per Rebase zu verschieben. Schauen wir mal wie das abläuft:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Also wenn wir vor dem Push erst mal einen Rebase machen ..."],afterMarkdowns:["Bämm! Wir haben unsere lokale Abbildung des entfernten Repositorys mit `git fetch` auf den neuesten Stand gebracht, unsere Arbeit auf die neueste Version des Remotes drauf gepackt und dann mit `git push` auf den Server geschoben."],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Gibt es noch weitere Möglichkeiten deine Arbeit zu aktualisieren wenn das entfernte Repository neue Commits bekommen hat? Klar! Schauen wir uns dasselbe an, aber diesmal arbeiten wir mit `merge`.","","Obwohl `git merge` deine Arbeit nicht verschiebt (und stattdessen einen Merge Commit erzeugt) ist es eine Möglichkeit Git dazu zu bringen, alle Änderungen vom Remote in deine Sachen zu integrieren. Denn durch den Merge wird der Remote Branch zu einem *Vorgänger* deines Branches, was bedeutet dass dein Commit alle Commits des entfernten Branches beinhaltet.","","Zur Demonstration ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn wir nun also mergen anstatt einen Rebase zu machen ..."],afterMarkdowns:["Ok. Wir haben die lokale Abbildung des entfernen Repositorys mit `git fetch` aktualisiert, die neuen Änderungen per *Merge* in deine integriert, und letztere dann mit `git push` auf den Server gebracht."],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Wahnsinn! Kann ich das auch irgendwie machen ohne soviel zu tippen?","","Na klar -- du kennst ja schon `git pull` als Zusammenfassung von `fetch` und `merge`. Praktischerweise bringt man es mit der Option `--rebase` dazu, anstatt des Merge einen Rebase zu machen.","","Gucken wir uns das mal an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Zunächst `git pull --rebase` ..."],afterMarkdowns:["Genau wie vorher! Nur viel kürzer."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Und nun das normale `git pull` ..."],afterMarkdowns:["Und wieder, genau wie zuvor!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Dieser Ablauf von `fetch`, `rebase` / `merge` und `push` ist sehr verbreitet. In zukünftigen Leveln werden wir uns kompliziertere Varianten dieses Workflows ansehen, aber jetzt probieren wir erst mal diesen aus.","","Um diesen Level zu lösen, gehe folgende Schritte durch:","","* Clone dein Repository","* Simuliere einen entfernten Commit mit `git fakeTeamwork`","* Erzeuge einen lokalen Commit","* Benutze *Rebase*, um deine Arbeit schließlich pushen zu können"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Когда наработки расходятся","","Вот мы и познакомились с тем, как забирать (`pull`) чужие коммиты и как закачивать (`push`) свои наработки и изменения. Выглядит всё довольно просто, и не ясно какие же могут возникать у людей трудности со всем этим?","","Сложности возникают тогда, когда история репозитория *расходится*. Прежде чем идти дальше, давайте посмотрим на пример...",""]}},{type:"ModalAlert",options:{markdowns:["Представьте себе, вы склонировали репозиторий в понедельник и начали разрабатывать какую-то новую и уникальную часть приложения (на сленге разработчиков - `фича`). В пятницу вечером вы наконец-то готовы опубликовать вашу фичу. Но, о нет! Ваш коллега в течение недели написал кучу кода, который делает все ваши наработки устарелыми. Этот код был также закоммичен и опубликован на общедоступном удалённом репозитории, поэтому теперь *ваш* код базируется на *устаревшей* версии проекта и более не уместен.","","В этом случае использование команды `git push` является сомнительным. Как поведёт себя команда `git push`, если вы её выполните? Может быть, она изменит удалённый репозиторий и вернёт всё к тому состоянию, которое было в понедельник? А может, команда попробует добавить ваш код, не удаляя при этом новый? Или же она проигнорирует ваши изменения, так как они уже устарели?","","По причине того, что в данной ситуации (когда история расходится) слишком много двусмысленностей и неопределённостей, git не даст вам закачать (`push`) ваши изменения. Он будет принуждать вас включить в состав своей работы все те последние наработки и изменения, которые находятся на удалённом репозитории."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Слишком много болтовни! Давайте посмотрим, как всё работает на живом примере"],afterMarkdowns:["Видите? Ничего не произошло. Всё потому, что команда `git push` не выполнилась успешно. Дело в том, что ваш последний коммит `C3` основан на удалённом коммите `C1`. В свою очередь, удалённый репозиторий уже изменился под воздействием `C2`. Вот почему git отклонил ваш push."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Как же разрешить данную ситуацию? Всё очень просто! Всё, что вам нужно - перебазировать свою работу на самую последнюю версию удалённой ветки.","","Существует множество способов сделать это, но наиболее простой способ 'сдвинуть' свои наработки - через перебазировку или rebasing. Давайте посмотрим, как это выглядит."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Теперь, когда мы сперва перебазируемся прежде чем публиковать изменения..."],afterMarkdowns:["Опа! Мы только что обновили наш локальный образ удалённого репозитория средствами `git fetch`. Ещё мы перебазировали наши наработки, чтобы они отражали все изменения с удалённого репозитория, и опубликовали их с помощью `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["А есть ещё какие-либо варианты обновить мои наработки к тому моменту, как удалённый репозиторий был обновлён? Конечно есть! Давайте ознакомимся с парочкой новых штучек, но в этот раз с помощью команды `merge`.","","Несмотря на то, что `git merge` не передвигает ваши наработки (а всего лишь создаёт новый коммит, в котором Ваши и удалённые изменения объединены), этот способ помогает указать git-у на то, что вы собираетесь включить в состав ваших наработок все изменения с удалённого репозитория. Это значит, что ваш коммит отразится на всех коммитах удалённой ветки, поскольку удалённая ветка является *предком* вашей собственной локальной ветки.","","Давайте взглянем на демонстрацию..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Таким образом, если мы объединим (merge) вместо перебазирования (rebase)..."],afterMarkdowns:["Опа! Мы обновили наше локальное представление удалённого репозитория с помощью `git fetch`, *объединили* ваши новые наработки с нашими наработками (чтобы отразить изменения в удалённом репозитории) и затем опубликовали их с помощью `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Здорово! А можно ли как-то сделать всё то же самое, но с меньшим количеством команд?","","Конечно - ведь вы уже знаете команду `git pull`, которая является аналогом и более кратким аналогом для совместных fetch и merge. А команда `git pull --rebase` - аналог для совместно вызванных fetch и rebase!","","Давайте взглянем на эти оба варианта."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Сперва - с флагом `--rebase`..."],afterMarkdowns:["Тот же результат, как и ранее, но намного короче вызов команд."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А теперь с обычным `pull`"],afterMarkdowns:["И снова - результат такой же, как и ранее!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Рабочий процесс получения изменений (fetching), перебазирования/объединения (rebase/merging) и публикации изменений (pushing) используется довольно часто. В последующих уроках мы изучим более сложные варианты этих рабочих процессов, но пока что давайте остановимся на том, что есть.","","Чтобы выполнить задание уровня, сделайте следующее:","","* Склонируйте репозиторий","* Сфабрикуйте командную работу (1 коммит)","* Сделайте свой собственный коммит (1 коммит)","* Опубликуйте свои наработки посредством *перебазировки (rebasing)*"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 分かれた作業","","これまでは、どのようにして`pull`でコミットを取り込み、`push`で自身の変更を反映するかを見てきました。単純なようにみえます。では何故人々は混乱するのでしょうか？","","その難しさは、リポジトリの履歴が*分岐*することに起因します。この詳細について説明する前に、まずは例を見てみましょう。",""]}},{type:"ModalAlert",options:{markdowns:["月曜日にリポジトリをクローンし、ある表面の機能をちょっと弄ることを想像してみてください。金曜日までに、あなたはその機能を公開する準備ができる -- しかし、ああなんということでしょう！あなたの同僚達は、あなたの機能が依存していた（そして、廃れた）コードの束をその週の内に書き換えていました。彼らはリモートリポジトリにコミットを共有して公開し、今や*あなたの*作業は*古い*バージョンのもはや適切でないプロジェクトに基づいていることになります。","","この場合、`git push`コマンドは曖昧になってしまいます。あなたが`git push`を走らせたとき、gitはリモートリポジトリは月曜の状態に変更を戻すべきでしょうか？それとも、新しいコードを取り除かないで追加しようとしてみるべきでしょうか？または、あなたの変更が完全に古いものになってしまったため、全て無視するべきなのでしょうか？","","この状況（履歴が分岐をしているとき）ではまったくもって曖昧なので、gitはあなたの変更を`push`することを許可しません。実際には、あなたの作業を共有する前に最新のリモートの状態を取り込むことを強制します。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["話しすぎましたね！この状況での動作をみてみましょう！"],afterMarkdowns:["見ましたか？コマンドが失敗して、何も起こりませんでした。あなたの最近の`C3`コミットはリモートの`C1`コミットに依存しているため、`git push`は失敗しました。リモートには`C2`が更新されているので、gitはあなたのプッシュを拒否します。"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["ではこの状況を解決するにはどうしたらいいでしょう？簡単です、リモートブランチの最新の状態にあなたの作業が基づくようにすればいいのです。","","いくつか方法はありますが、最も簡単なのはあなたの作業をリベースで移動させることです。それがどのようなものか、さあみてみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["今、プッシュをする前に代わりにリベースをしてみましょう。"],afterMarkdowns:["わお！私たちは`git fetch`でローカルのリモートブランチを更新し、私たちの作業をリベースさせてリモートの新しい変更に適用させ、`git push`でそれをプッシュしました。"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["リモートリポジトリが更新されたとき、他に自身の作業を更新する方法はあるでしょうか？もちろん、あります！今度は同じことを`merge`を代わりに使ってやってみましょう。","","`git merge`はあなたの作業を移動しませんが（代わりにマージコミットを作ります）、リモートの変更を全て取り込みgitに通知する方法なのです。この通知とは、リモートブランチが今やあなた自身のブランチの*親*を指していることになるため、あなたのリモートブランチの全ての変更を反映しているコミットを指します。","","この状況の例を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["リベースの代わりに今度はマージを用います。"],afterMarkdowns:["わお！私たちは`git fetch`でローカルのリモートブランチを更新し、私たちの作業を*マージ*して（リモートの新しい変更を反映するために）、`git push`でそれをプッシュしました。"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["素晴らしい！多くのコマンドを打たないでこれを実現する方法はあるでしょうか？","","もちろん -- あなたが既に知っているコマンドです。`git pull`は、`fetch`して`merge`するためのより短い書き方です。さらに便利なことに、`git pull --rebase`は`fetch`して`rebase`することの省略形です！","","コマンドを省略した場合を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["まずは、`--rebase`から"],afterMarkdowns:["前と一緒です！そしてとても短いです。"],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["そして通常使う`pull`で試してみましょう"],afterMarkdowns:["ここでも、前と同じです！"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["この取り込み作業の流れ、リベースとマージ、そしてプッシュはとてもよく行います。次回以降のレッスンではより複雑なパターンの作業を学びますが、今は習ったことをとりあえず試してみましょう。","","このレベルをクリアするには、以下のステップを踏みます:","","* あなたのリポジトリをクローン","* 擬似的に幾つかの同僚の変更を真似る（1コミット）","* あなた自身の作業をコミット（1コミット）","* あなたの作業を*リベース*で公開"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Розбіжності в історії","","Ми розглянули як витягувати (`pull`) коміти інших та як завантажувати (`push`) свої власні коміти. Це виявилось не надто складно, то як же так, що в людей дуже часто виникають з цим труднощі?","","Основна складність полягає в тому, що історія різних репозиторіїв *розбігається*. Перед тим, як вдатися в деталі, подивімося як це виглядає на прикладі...",""]}},{type:"ModalAlert",options:{markdowns:["Уяви, що ти склонував репозиторій в понеділок і почав працювати над якоюсь фічею. В пятницю фіча готова і ти хочеш повернути її назад (в апстрім) -- але що це? Твої колеги, грець їм, вже встигли вкомітити купу коду що робить твою фічу застарілою (і не дуже доречною). Вони вже запушили ці коміти в публічний репозиторій, й тепер *твоя* робота базується на *старій* версії продукту, що вже не актуальна.","","В цьому випадку команда `git push` неоднозначна. Коли ти виконаєш `git push`, гіт повинен змінити віддалений репозиторій до того стану, на якому він знаходився в понеділок? Чи він має додати твій код і залишити код твоїх колег? Чи він має повністю проігнорувати твої зміни, оскільки вони застаріли?","","Через такі неоднозначності в цій ситуації (коли історія розійшлася), git не дозволить тобі запушити твої зміни. Він фактично змушує тебе інтегрувати останні зміни з віддаленого репозиторію перед тим як ти зможеш завантажити на нього свої напрацювання."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Але, забагато розмов! Подивімось на ділі!"],afterMarkdowns:["Бачиш? Нічого не сталося тому що остання команда не виконалася. `git push` не спрацював тому що твій недавній коміт `C3` базується на коміті `C1`. Але віддалений репо вже прейшов на`C2`, тому git відхилив твій push."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Як вийти з цієї ситуації? Дуже просто! Все, що треба -- це оновити свої напрацювання так, щоб вони базувалися на останніх змінах з віддаленої гілки.","","Є кілька шляхів як цього досягнути, але найпростіший -- це перемістити свою роботу 'вперед' за допомогою rebase. Спробуймо і погляньмо як це виглядає."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Тепер якщо виконати rebase перед push..."],afterMarkdowns:["Ка-бум! Ми оновили наш локальний образ віддаленого репозиторію за допомогою `git fetch`, заребейсили наші напрацювання відповідно до змін у віддаленому репо, й завантажили їх за допомогою `git push`."],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Чи є якийсь інший спосіб оновити свої напрацювання, коли віддалений репозиторій пішов вперед? Звісно! Спробуймо зробити те ж саме, але натомість за допомогою `merge` (злиття).","","Хоча `git merge` і не переміщує твою роботу (а просто створює натомість коміт злиття чи merge commit), це -- ще один спосіб сказати git, що ти інтегрував останній стан віддаленого репозиторію в свої зміни. Це працює тому, що тепер віддалена гілка є *предком* твоєї гілки, а отже твої останні коміти інтегрують в собі всі коміти з віддаленої гілки.","","Невелика демонстрація..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Тепер ми зробимо merge замість rebase..."],afterMarkdowns:["Ка-бум! Ми оновили наш локальний образ віддаленої гілки за допомогою `git fetch`, *змерджили* нові напрацювання з власними (щоб відобразити останні зміни у віддаленій гілці), й відіслали їх за допомогою `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Чудово! Чи можу я це зробити, використовуючи меншу кількість команд?","","Звісно -- ти ж знаєш, що `git pull` це просто коротша форма для git fetch а потім git merge. Натомість, `git pull --rebase` це коротка форма для git fetch а потім git rebase!","","Спробуймо використати ці коротші команди."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Спочатку з `--rebase`..."],afterMarkdowns:["Те саме, що й раніше! Просто трохи коротше."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А тепер просто з `pull`"],afterMarkdowns:["Знову, так як і було!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Робочий процес, що складається з fetch, rebase/merge і push є дуже широковживаним. В наступних уроках ми розглянемо складніші версії цього процесу, а наразі спробуймо його виконати.","","Щоб пройти цей рівень, виконай наступні кроки:","","* Склонуй свій репозиторій","* Зроби симуляцію командної роботи (1 коміт)","* Зроби власний коміт (1 коміт)","* Опублікуй свої напрацювання за допомогою *rebasе*"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 엇갈린 작업","","지금까지 우리는 다른곳에서 커밋을 `pull`해서 내려받고 우리가 만든 변경들을 `push`하는 방법을 배웠습니다. 간단해보이는데, 왜 사람들이 이것 때문에 곤란해 할까요?","","어려움은 저장소의 히스토리가 *엇갈릴 때* 찾아옵니다. 자세히 살펴보기 전에 예제를 확인해봅시다...",""]}},{type:"ModalAlert",options:{markdowns:["상상을 해봅시다. 여러분은 월요일에 저장소를 clone해서 부가기능을 만들기 시작했습니다. 금요일쯤 기능을 공개할 준비가 되었습니다 -- 그런데 오 이런! 동료들이 주중에 코딩을 잔뜩해서 여러분이 만든 기능은 프로젝트에 뒤떨어져서 무용지물이 되었습니다. 이 사람들이 그 커밋들을 공유하고있는 원격 저장소에도 공개했습니다, 이제 *여러분의* 작업은 이제 의미가 없는 *구*버전의 프로젝트를 기반으로한 작업이 되어버렸습니다.","","이런 경우, 명령어 `git push`가 할 일이 애매해집니다. `git push`를 수행했을때, git은 원격 저장소를 여러분이 작업했던 월요일의 상태로 되돌려야 할까요? 아니면 새 코드를 건들지 않고 여러분의 코드만 추가해야 되나요? 아니면 여러분의 작업은 뒤 떨어졌기 때문에 완전히 무시해야되나요?","","이렇게 상황이 애매모호하기 때문에(히스토리가 엇갈렸기 때문이죠), git은 여러분이 `push`하지 못하게 합니다. 사실 여러분이 작업을 공유하기전에 원격 저장소의 최신 상태를 합치도록 강제합니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["너무 떠든거같습니다! 이 상황을 직접 눈으로 확인해봅시다"],afterMarkdowns:["보이죠? 명령어가 실행되지 않아서 아무것도 잃어나지 않습니다. 여러분의 최근 커밋 `C3`가 원격저장소의 `C1`을 기반으로 하기 때문에 `git push`가 실패합니다. 원격 저장소는 `C2`까지 갱신된 상태기때문에 git은 여러분의 push를 거부하게됩니다."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["그러면 이 상황을 어떻게 해결할까요? 쉽습니다, 여러분의 작업을 원격 브랜치의 최신상태를 기반으로 하게 만들면 됩니다.","","이렇게 하기위한 방법이 여러가지가 있는데, 가장 간결한 방법은 리베이스를 통해 작업을 옮기는 방법입니다. 예제를 통해 눈으로 확인해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["push를 하기전에 리베이스를 하면..."],afterMarkdowns:["Boom! `git fetch`로 원격 저장소의 변경정보를 가져오고, 새 변경들로 우리 작업을 리베이스 했습니다, 이제 `git push`하면 끝!"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["다른 방법은 없냐고요? 당연히 있습니다! 같은것을 `merge`로 대신 해봅시다.","","`git merge`가 여러분의 작업을 옮기지는 않지만(merge 커밋을 생성합니다). git에게 원격 저장소의 변경을 합쳤다고 알려주는 방법중에 하나입니다. 이제 원격 브랜치가 여러분 브랜치의 *부모*기 되었기때문입니다, 여러분의 커밋이 원격 브랜치의 모든 커밋을 반영했다는 뜻이죠.","","눈으로 확인해봅시다..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["리베이스대신 병합을하면..."],afterMarkdowns:["Boom! `git fetch`로 원격 저장소의 변경정보를 가져오고, 새 작업을 우리 작업으로 *병합*했습니다 (원격 저장소의 변경을 반영하기 위해서죠), 이제 `git push`하면 끝!"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["멋집니다! 명령어를 좀더 적게써서 하는 방법은 없나요?","","물론 있습니다 -- 여러분은 `git pull`이 fetch와 merge의 줄임 명령어라는 것은 이미 알고 있을 것입니다. 아주 간단하게, `git pull --rebase`를 하면 fetch와 리베이스를 하는 작업의 줄임 명령어 입니다","","이 줄임 명령어가 잘 작동하는지 확인해 봅시다"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["먼저 `--rebase`와 함께하면..."],afterMarkdowns:["이전과 같습니다! 간결하고요."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["일반의 `pull`과 사용했을 때는"],afterMarkdowns:["또다시, 이전과 같습니다!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["fetch를 하고 리베이스/병합을 하고 push를 하는 이런 작업흐름은 꽤 흔합니다. 앞으로의 레슨에서는 이런 작업흐름의 복잡한 버전들을 확인해볼 것입니다. 일단은 이것부터 연습해 보죠.","","이번 레벨을 통과하려면, 다음의 단계를 거쳐야 합니다:","","* 여러분의 저장소를 clone 하세요","* 가짜 팀워크를 만드세요 (1개의 커밋)","* 여러분의 작업도 커밋하세요 (1개의 커밋)","* 여러분의 작업을 *리베이스*를 통해 공유하세요"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Diverged Work","","Cho đến giờ ta đã biết cách `kéo`(`pull`) commit từ nơi khác về và cách `đẩy`(`push`) lên những thay đổi của ta. Chúng nhìn có vẻ khá đơn giản, vậy tại sao người ta lại thấy lúng túng về chúng?","","Khó khăn đến từ sự *dị biệt* của cây lịch sử trên kho chứa từ xa. Trước khi đi vào thảo luận chi tiết vấn đề này, hãy xem qua một ví dụ...",""]}},{type:"ModalAlert",options:{markdowns:["Tưởng tượng bạn sao chép một kho chứa vào thứ Hai và bắt đầu phát triển một tính năng mới. Đến thứ Sáu thì bạn đã sẵn sàng để xuất bản thành quả của mình -- nhưng không! Đồng nghiệp của bạn đã viết thêm hàng loạt mã trong một tuần vừa rồi và điều này làm cho chức năng của bạn trở nên lỗi thời. Và họ cũng đã xuất bản những commit này lên kho chứa từ xa chung, vậy giờ thành quả của *bạn* lại dựa trên phiên bản *cũ* của dự án mà nó không còn thích đáng nữa.","","Trong trường hợp này, lệnh `git push` trở lên khá nhập nhằng. Nếu bạn dùng `git push`, liệu git nên thay đổi kho chứa từ xa trơ rveef trạng thái ngày thứ Hai? Hay nó nên cố gắng thêm mã của bạn vào trong khi không xóa mã mới? Hay là nó sẽ bỏ qua hoàn toàn mã của bạn vì nó đã lỗi thời?","","Vì có quá nhiều tình huống mơ hồ (dị biệt lịch sử), git sẽ không cho phép bạn `đẩy`(`push`) thay đổi của mình. Nó sẽ ép bạn phải sát nhập trạng thái mới nhất của kho chứa từ xa vào thành phẩm của mình trước khi chia sẻ chúng."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nói quá nhiều rồi! Đi vào hành động thôi"],afterMarkdowns:["Thấy chứ? Không có gì xảy ra cả vì lệnh bị thất bại. `git push` thất bại vì commit mới nhất của bạn: `C3` dựa trên commit `C1` ở nhánh từ xa. Nhánh đó đã được cập nhật lên commit `C2`, nên git từ chối lệnh đẩy của bạn"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Vậy thì giải quyết tình huống này sao giờ? Đơn giản thôi, tất cả những gì bạn cần làm là khiến cho thành quả của mình dựa trên phiên bản mới nhất của nhánh từ xa.","","Có vài cách để làm điều này, nhưng cách trực tiếp nhất là bố trí lại (dùng rebase) để di chuyển thành quả của bạn. Cùng xem cách nó hoạt động nào."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nào bây giờ trước push ta dùng rebase thì..."],afterMarkdowns:["Bùùm! Ta đã cập nhật nhánh từ xa trong kho chứ cục bộ với `git fetch`, dịch chuyển thành quả của mình để phản ánh thay đổi mới của kho chứa từ xa, sau đó đẩy chúng lên với `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Có cách nào khác để cập nhật thành quả của mình khi kho chứa từ xa được cập nhật không? Tất nhiên rồi! Hãy xem xét điều tương tự với `merge`.","","Mặc dù `git merge` không dịch chuyển commit của bạn (thay vì đó nó tạo ra một commit hơp nhất), đó là cách để nói với git rằng bạn đã kết hợp tất cả thay đổi từ nhánh từ xa. Đó là bởi vì bây giờ nhánh từ xa đã trở thành một *tổ tiên* của nhánh cục bộ của bạn, nghĩa là commit của bạn có thể tham chiếu điến tất cả commit có ở nhánh tù xa.","","Hãy xem qua bản biểu diễn sau..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Giờ nếu ta dùng merge thay vày rebase thì..."],afterMarkdowns:["Bùùm! Ta đã cập nhật đại diện nhánh từ xa tại kho chứa địa phương với `git fetch`, *hợp nhất* (*merge*) thành quả mới vào thành quả của ta (để phản ánh thay đổi ở nhánh từ xa), sau đó đẩy chúng lên với `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Tuyệt vời! Có cách nào để làm việc này mà không phải gõ nhiều lệnh thế không nhỉ?","","Tất nhiên rồi -- bạn đã biết rằng `git pull` là lệnh tắt của fetch và merge. Tương tự như vậy, `git pull --rebase` là lệnh tắt của fetch và rebase!","","Hãy xem thử cách lệnh tắt này hoạt động ra sao."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Trước tiên với `--rebase`..."],afterMarkdowns:["Giống hệt như trước! Chỉ là lệnh ngắn hơn."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Và giờ với lệnh `pull` thông thường"],afterMarkdowns:["Lại một lần nữa, chính xác y hệt như trước!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Quy trình tìm nạp (fetch), bố trí lại/hợp nhất (rebase/merge), và đẩy (push) là khá phổ biết. Ta sẽ xem xét các phiên bản phức tạp hơn của những quy trình này ở các bài học sau, còn bây giờ thì hãy tập trung vào bài này đã.","","Để giải quyết cấp độ này, hãy làm các bước sau:","","* Nhân bản kho chứa của bạn","* Giả lập làm việc nhóm (1 commit)","* Tạo ra 1 commit địa phương","* Xuất bản thành quả của bạn dùng *rebase*"]}}]}}}},{}],138:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"feature":{"target":"C2","id":"feature","remoteTrackingBranchID":"o/feature"},"o/feature":{"target":"C2","id":"o/feature","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"tags":{},"HEAD":{"target":"feature","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"feature":{"target":"C2","id":"feature","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git reset --hard o/master;git checkout -b feature C2; git push origin feature",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"}}}',hint:{en_US:"Make the feature branch from the local master before resetting it back to be the same as origin's master",de_DE:"Erstelle einen Feature-Branch ausgehend vom lokalen Master-Branch, bevor du den Master-Branch auf den origin/master zurücksetzt.",ru_RU:"Создайте новую feature ветвь от master перед тем, как откатить изменения в master до состояния o/master.",zh_CN:"从本地的master创建一个feature分支, 然后重置master和origin master保持一致。",es_ES:"Crea la rama feature desde la rama master en local antes de restablecerlo para que sea el mismo que la rama master de origen",fr_FR:"Créer la branche feature à partir du master local, avant de la restaurer dans le même état que o/master",ko:"로컬 저장소의 master 브랜치로부터 feature 브랜치를 만드세요. 그리고 o/master와 같아질 수 있도록 로컬 저장소의 master 브랜치를 reset 하세요."},name:{en_US:"Locked Master",de_DE:"Gesperrter Master-Branch",ru_RU:"Заблокированная ветвь master",zh_CN:"锁定的Master(Locked Master)",es_ES:"Master bloqueado",fr_FR:"Master verrouillé",ko:"잠겨버린 Master"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Remote Rejected!","","If you work on a large collaborative team its likely that master is locked and requires some Pull Request process to merge changes. If you commit directly to master locally and try pushing you will be greeted with a message similar to this:","","```"," ! [remote rejected] master -> master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)","```"]}},{type:"ModalAlert",options:{markdowns:["## Why was it rejected?","","The remote rejected the push of commits directly to master because of the policy on master requiring pull requests to instead be used.","","You meant to follow the process creating a branch then pushing that branch and doing a pull request, but you forgot and committed directly to master. Now you are stuck and cannot push your changes."]}},{type:"ModalAlert",options:{markdowns:["## The solution","","Create another branch called feature and push that to the remote. Also reset your master back to be in sync with the remote otherwise you may have issues next time you do a pull and someone else's commit conflicts with yours."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gesperrter Master-Branch","","Wenn du in einem großen Team zusammen arbeitest, ist der Master-Branch mit hoher Wahrscheinlichkeit für direkte Änderungen gesperrt. Um Änderungen am Remote-Branch einpflegen zu können, ist ein Pull-Request-Prozess notwendig. Wenn du lokal in deinem Master-Branch einen Commit durchführst und diesen versuchst auf den serverseitigen Master-Branch zu pushen, wirst du folgende Fehlermeldung bekommen:","","```"," ! [remote rejected] master -> master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)","```"]}},{type:"ModalAlert",options:{markdowns:["## Wieso wurde diese Aktion zurückgewiesen?","","Auf Grund der serverseitig voreingestellten Richtlinien sind direkte Änderungen am Master-Branch nicht erlaubt, und erfordert einen Pull-Request.","","Um die eigenen lokalen Änderungen in den Master-Branch einbringen zu können, ist es erforderlich einen lokalen Feature-Branch zu erstellen. Dieser Feature-Branch muss dann auf den Server hochgeladen werden, damit dann ein Pull-Request eingeleitet werden kann. Dies wurde vorher durch den direkten Push des Master-Branch nicht berücksichtigt, weswegen man die Änderungen nicht hochladen konnte."]}},{type:"ModalAlert",options:{markdowns:["## Die Lösung","","Erstelle einen Branch der feature heißt und pushe diesen auf den Server. Setze den lokalen Master-Branch zurück, dass er mit dem Origin-Master-Branch synchron ist. Dies könnte sonst später zu weiteren Komplikationen führen, wenn weiter pulls durchgeführt und Commits von anderen mit deinen in Konflikt stehen."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 远程服务器拒绝!(Remote Rejected)","","如果你是在一个大的合作团队中工作, 很可能是master被锁定了, 需要一些Pull Request流程来合并修改。如果你直接提交(commit)到本地master, 然后试图推送(push)修改, 你将会收到这样类似的信息:","","```"," ! [远程服务器拒绝] master -> master (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)","```"]}},{type:"ModalAlert",options:{markdowns:["## 为什么会被拒绝?","","远程服务器拒绝直接推送(push)提交到master, 因为策略配置要求 pull requests 来提交更新.","","你应该按照流程,新建一个分支, 推送(push)这个分支并申请pull request,但是你忘记并直接提交给了master.现在你卡住并且无法推送你的更新."]}},{type:"ModalAlert",options:{markdowns:["## 解决办法","","新建一个分支feature, 推送到远程服务器. 然后reset你的master分支和远程服务器保持一致, 否则下次你pull并且他人的提交和你冲突的时候就会有问题."]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Remote Rejected!","","Когда вы работаете в составе большой команды разработчиков над проектом, то, вероятнее всего, ветвь `master` будет _заблокирована_. Для внесения изменений в неё в git существует понятие запроса на слияние `Pull Request`. В такой ситуации если вы закоммитите свои наработки непосредственно в `master` ветвь, а после выполните `git push`, то будет сгенерировано сообщение об ошибке:","","```"," ! [remote rejected] master -> master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)","```","","```"," ! [удалённо отклонено] master -> master (TF402455: Изменение этой ветви запрещены; вы можете использовать pull request для обновления этой ветви.)","```"]}},{type:"ModalAlert",options:{markdowns:["## Почему произошло отклонение моих изменений?","","Удалённый репозиторий отклонил загруженные коммиты непосредственно в `master` ветку потому, что на `master` _настроена политика_, которая требует использование `Pull request` вместо обычного `git push`.","","Эта политика подразумевает процесс создания новой ветви разработки, внесение в неё всех необходимых коммитов, загрузка изменений в удалённый репозиторий и _открытие нового_ `Pull request`. Однако вы забыли про это и закоммитили наработки непосредственно в `master` ветвь. Теперь вы застряли и не можете запушить свои изменения :(. "]}},{type:"ModalAlert",options:{markdowns:["## Решение:","","Создайте ещё одну ветвь под названием `feature` и отправьте изменения на удалённый репозиторий. Так же не забудьте вернуть вашу локальную `master` ветвь в исходное состояние (чтобы она была синхронизирована с удалённой). В противном случае у вас могут возникнуть проблемы при следующем выполнении `git pull`."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Remote Rejected!","","Si trabajas en un equipo colaborativo, es probable que la rama `master` esté bloqueada y requiera algún proceso de `Pull Request` para poder `mergear` los cambios. Si haces `commit` directamente a `master e intentas realizar `push`, recibirás un mensaje similar a este:","","```"," ! [remote rejected] master -> master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)","```"]}},{type:"ModalAlert",options:{markdowns:["## ¿Por qué fue rechazado?","",NaN,"","Trataste de crear una rama y luego hacer `pushs` creando una `Pull Request`, pero te olvidaste e hiciste `commit` directamente a `master`. Ahora estás atascado y no puedes hacer `push` de tus cambios."]}},{type:"ModalAlert",options:{markdowns:["## The solution","","Crea otra rama llamada `feature` y haz `push` a remoto. También restablece su rama `master` nuevamente para que esté sincronizado con el repositorio remoto; de lo contrario, puedes tener problemas la próxima vez que realices un `pull` y el `commit` de otra persona entre en conflicto con el tuyo."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Remote Rejected!","","Si vous travaillez dans une équipe de grande taille, il est probable que `master` soit verrouillée, et que le mécanisme de `Pull Request` soit nécessaire pour `merge` des changements. Si vous faites un `commit` directement sur le master local, et essayez de `push`, vous serez reçu avec un message de la sorte :","","```"," ! [remote rejected] master -> master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)","```"]}},{type:"ModalAlert",options:{markdowns:["## Pourquoi est-ce rejeté?","","Le dépôt distant a rejeté le `push` de `commit` directement sur `master`, à cause de la stratégie mise en place sur `master`, imposant plutôt l'usage des `pull requests`.","","Vous étiez censé suivre le processus suivant : créer une branche, `push`, et faire une `pull request`. Mais vous avez oublié et avez fait un `commit` directement sur `master`. Maintenant vous êtes coincé et ne pouvez pas faire un `push` de vos modifications."]}},{type:"ModalAlert",options:{markdowns:["## La solution","","Créer une autre branche appelée feature, et poussez la sur le serveur distant. Réinitialisez (`reset`) également votre `master` pour être en cohérence avec l'état du serveur distant, sinon vous pourriez avoir des problèmes la prochaine fois que vous faites un `pull`, et que quelqu'un d'autre `commit` des choses en conflit avec vos modifications."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 원격저장소 거부! (Remote Rejected!)","","규모가 큰 개발팀에서 일하는 경우, 보통 원격저장소의 `master` 브랜치는 잠겨있습니다(locked). 그래서 변경사항을 적용하려면 pull request 과정을 거쳐야하죠. 만약에 여러분이 로컬 저장소의 `master`브랜치에서 커밋을 한 후 `push`하려고 시도한다면, 다음과 같은 오류를 받게 될겁니다. :","","```"," ! [remote rejected] master -> master (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)","```"]}},{type:"ModalAlert",options:{markdowns:["## 왜 거부됐나요?","","원격 저장소는 자신의 `master` 브랜치에 대한 직접적인 커밋을 제한합니다. 왜냐하면 `push` 대신에 pull request가 쓰여야 한다는 규칙이 원격 저장소의 `master` 브랜치에는 적용되어 있기 때문이죠.","","여러분은 브랜치를 따로 만들어 작업한 다음, 그것을 `push`하고 pull request를 하려 했습니다. 하지만 그걸 잊고 실수로 `master` 브랜치에서 직접 커밋을 해버렸네요! 이제 변경 사항을 `push` 하지도 못하고 옴짝달싹 못하는 상황이 되어버렸습니다."]}},{type:"ModalAlert",options:{markdowns:["## 해결책","","`feature` 라는 이름의 다른 브랜치를 만들어 원격 저장소에 `push` 하세요. 그리고 원격 저장소와 동기화될 수 있도록 로컬 저장소의 `master` 브랜치를 `reset`하세요. 그렇지 않으면 여러분이 다음에 `pull`을 시도할 때 문제가 발생하거나, 다른 협업자들의 커밋이 여러분의 커밋과 충돌할 수도 있습니다."]}}]}}}},{}],139:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C11","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C11","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"},"C8":{"parents":["C1"],"id":"C8"},"C9":{"parents":["C2","C8"],"id":"C9"},"C10":{"parents":["C4","C9"],"id":"C10"},"C11":{"parents":["C10","C7"],"id":"C11"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C11","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"},"C5":{"parents":["C1"],"id":"C5"},"C3":{"parents":["C1"],"id":"C3"},"C2":{"parents":["C1"],"id":"C2"},"C6":{"parents":["C5"],"id":"C6"},"C4":{"parents":["C3"],"id":"C4"},"C9":{"parents":["C2","C8"],"id":"C9"},"C7":{"parents":["C6"],"id":"C7"},"C10":{"parents":["C4","C9"],"id":"C10"},"C11":{"parents":["C10","C7"],"id":"C11"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git checkout master;git pull;git merge side1;git merge side2;git merge side3;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"side3","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C8","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Merging with remotes",zh_CN:"合并远程仓库",zh_TW:"merge with remotes",es_AR:"Mergeando con los remotos",es_ES:"Haciendo merge con los remotos",pt_BR:"Merge com remotos",gl:"Merge cos repos remotos",de_DE:"Änderungen vom Remote zusammenführen",ja:"リモートとのmerge",fr_FR:"Fusionner avec les branches distantes",ru_RU:"Слияние с удалённым репозиторием",ko:"원격 작업과 merge하기",uk:"Мердж з віддаленим репозиторієм",vi:"Hợp nhất nhánh từ xa"},hint:{en_US:"Pay attention to the goal tree!",zh_CN:"注意目标树!",zh_TW:"注意最後要完成的目標！",es_AR:"¡Prestá atención al árbol final!",es_ES:"¡Presta atención al árbol final!",pt_BR:"Preste atenção na árvore do objetivo!",gl:"Presta atención á arbore final!",de_DE:"Beachte den Ziel-Baum!",ja:"ゴールツリーをよく見てください！",fr_FR:"Respectez l'arbre représentant l'objectif !",ru_RU:"Внимательно посмотрите на цель уровня!",ko:"goal을 잘 살펴보세요!",uk:"Уважно подивись як має виглядати результат!",vi:"Hãy để ý đến cây mục tiêu!"},compareOnlyMaster:!0,startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Why not merge?","","In order to push new updates to the remote, all you need to do is *incorporate* the latest changes from the remote. That means you can either rebase *or* merge in the remote branch (e.g. `o/master`).","","So if you can do either method, why have the lessons focused on rebasing so far? Why is there no love for `merge` when working with remotes?",""]}},{type:"ModalAlert",options:{markdowns:["There's a lot of debate about the tradeoffs between merging and rebasing in the development community. Here are the general pros / cons of rebasing:","","Pros:","","* Rebasing makes your commit tree look very clean since everything is in a straight line","","Cons:","","* Rebasing modifies the (apparent) history of the commit tree.","","For example, commit `C1` can be rebased *past* `C3`. It then appears that the work for `C1'` came after `C3` when in reality it was completed beforehand.","","Some developers love to preserve history and thus prefer merging. Others (like myself) prefer having a clean commit tree and prefer rebasing. It all comes down to preferences :D"]}},{type:"ModalAlert",options:{markdowns:["For this level, let's try to solve the previous level but with *merging* instead. It may get a bit hairy but it illustrates the point well."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Pourquoi pas merge ?","","Dans le but d'envoyer de nouvelles modifications sur le dépôt distant, la seule étape préliminaire est *d'incorporer* les derniers changements de ce dépôt dans le nôtre. Concrètement, vous pouvez faire un rebase *ou* un merge de la branche distante (c'est à dire de `o/master`).","","Donc si l'on peut faire les deux méthodes, pourquoi les leçons se sont-elles concentrées sur rebase jusqu'à présent ? Pourquoi préfère-t-on souvent éviter `merge` lorsque l'on travaille avec les branches distantes ?",""]}},{type:"ModalAlert",options:{markdowns:["Au sein de la communauté des développeurs, il y a beaucoup de débats à propos des avantages et inconvénients de l'utilisation de merge ou de rebase. Voici les principaux arguments pour et contre rebase:","","Pour :","","* Rebase rend votre arbre de commits très propre puisqu'il ressemble à une ligne droite.","","Contre :","","* Rebase modifie l'historique (apparent) de l'arbre des commits.","","Par exemple, le commit `C1` peut être rebasé *après* `C3`. Cela fait croire que le travail de `C1'` est arrivé après `C3` alors qu'en réalité il était achevé et commité avant.","","Certains développeurs aiment préserver l'historique et préfèrent donc merge. Les autres (comme moi) préfèrent avoir un arbre des commits propre et préfèrent rebase. C'est une question de goût :D"]}},{type:"ModalAlert",options:{markdowns:["Pour ce niveau, essayons de résoudre la même situation qu'au niveau précédent, mais cette fois en utilisant *merge*. Cela peut être un peu périlleux mais cela illustre bien le problème."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## ¿Por qué no mergear?","","Para pushear tus novedades al remoto, todo lo que tenés que hacer es *integrar* los últimos cambios del remoto con los tuyos. Eso significa que podés hacer tanto rebase como merge con la rama remota (por ejemplo, `o/master`).","","Así que si podés hacer cualquiera de las dos, ¿por qué las lecciones sólo se centraron en rebasear hasta ahora? ¿Por qué no dedicarle algo de amor al `merge` cuando trabajamos con remotos?",""]}},{type:"ModalAlert",options:{markdowns:["Hay mucho debate entre los desarrolladores sobre los pros y contras de mergear vs rebasear. Acá tenemos los pros y contras de rebasear:","","Pros:","","* Rebasear hace que tu árbol de commits se vea bastante limpio, porque todos los commits siguen una única línea","","Contras:","","* Rebasear modifica la historia (aparente) de tu árbol de commits.","","Por ejemplo, el commit `C1` puede rebasearse para que aparezca *después* de `C3`. Entonces, parece que el trabajo de `C1'` se hizo después de `C3`, cuando en realizad se había hecho antes.","","Algunos desarrolladores aman preservar la historia, por lo que prefieren mergear. Otros (como yo) preferimos tener un árbol de commits limpios, y preferimos rebasear. Todo es una cuestión de preferencias :D"]}},{type:"ModalAlert",options:{markdowns:["Para este nivel, tratemos de resolver el nivel anterior, pero *mergeando*. Puede ponerse un poco oscuro, pero ilustra la idea bastante bien."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## ¿Por qué no hacer merge?","","Para hacer push con tus novedades al remoto, todo lo que tienes que hacer es *integrar* los últimos cambios del remoto con los tuyos. Eso significa que puedes hacer tanto rebase como merge con la rama remota (por ejemplo, `o/master`).","","Así que si puedes hacer cualquiera de las dos, ¿por qué las lecciones sólo se han centrado en rebasear hasta ahora? ¿Por qué no dedicarle algo de amor al `merge` cuando trabajamos con remotos?",""]}},{type:"ModalAlert",options:{markdowns:["Hay mucho debate entre los desarrolladores sobre los pros y contras de mergear vs rebasear. Aquí te mostraré los pros y contras de rebasear:","","Pros:","","* Rebasear hace que tu árbol de commits se vea bastante limpio, porque todos los commits siguen una única línea","","Contras:","","* Rebasear modifica la historia (aparente) de tu árbol de commits.","","Por ejemplo, el commit `C1` puede rebasearse para que aparezca *después* de `C3`. Entonces, parece que el trabajo de `C1'` se hizo después de `C3`, cuando en realizad se había hecho antes.","","Algunos desarrolladores prefieren preservar la historia, por lo que deciden mergear. Otros (como yo) preferimos tener un árbol de commits limpios, y preferimos rebasear. Todo es una cuestión de preferencias :D"]}},{type:"ModalAlert",options:{markdowns:["Para este nivel, tratemos de resolver el nivel anterior, pero *mergeando*. Puede volverse un poco cuesta arriba, pero ilustra la idea bastante bien."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Por que não um merge?","","Para enviar novas atualizações ao repositório remoto, tudo que você precisa é *incorporar* as últimas mudanças ali presentes. Isso significa que você pode tanto fazer um rebase *quanto* um merge no ramo remoto (ex. `o/master`).","","Então, se você pode escolher qualquer um desses métodos, por que as lições focaram no rebase até o momento? Por que não demos nenhum amor ao `merge` quando trabalhamos com repositórios remotos?",""]}},{type:"ModalAlert",options:{markdowns:["Há muito debate na comunidade de desenvolvedores sobre as vantagens e desvantagens do merge e do rebase. Aqui estão os prós e contras gerais do rebase:","","Prós:","","* O rebase faz a sua árvore de commits parecer bastante limpa, já que tudo fica em uma linha reta","","Contras:","","* O rebase modifica o histórico *aparente* da sua árvore de commits.","","Por exemplo, o commit `C1` pode aparecer *depois do* `C3` após sofrer rebase. Então, fica parecendo que alguém trabalhou em `C1` apenas depois de `C3` estar completo, quando na realidade o que ocorreu foi o contrário.","","Alguns desenvolvedores adoram preservar o histórico e, portanto, preferem o merge. Outros (como eu) preferem ter uma árvore de commits limpa, obtida usando rebase. Tudo se resume ao gosto pessoal :D"]}},{type:"ModalAlert",options:{markdowns:["Para este nível, tente resolver o mesmo problema do nível anterior, mas usando *merge* em vez de rebase. A árvore pode ficar um pouco cabeluda, mas isso ilustra bem o nosso ponto."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## ¿Por qué non mesturar?","","Para empurrar as túas novidades ó remoto, todo o que tes que facer é *integrar* os últimos cambios do remoto cos teus. Eso significa que podes facer tanto rebase como merge ca rama remota (por exemplo, `o/master`).","","Así que podes facer calquera das dúas, ¿por qué as leccións só se centraron en rebasar ata agora? ¿Por qué non adicarlle algo de amor ó `merge` cando traballamos con remotos?",""]}},{type:"ModalAlert",options:{markdowns:["Hai moito debate entre os desenvolvedores sobre os pros e contras de mesturar vs rebasar. Aquí temos os pros e os contras de rebasar:","","Pros:","","* Rebasar fai que a túa árbore de commits sexa bastante limpa, xa que tódolos commits seguen unha única línea.","","Contras:","","* Rebasar modifica a historia (aparente) da túa árbore de commits.","","Por exemplo, o commit `C1` pode rebasarse para que apareza *despois* de `C3`. Entón, parece que o traballo de `C1'` fíxose despois de `C3`, inda que na realidade fixérase antes.","","Algúns desenvolvedores  aman preservar a historia, polo que prefiren mesturar. Outros (coma min) preferimos ter unha árbore de commits limpos, e preferimos rebasar. Todo é unha cuestión de preferencias :D"]}},{type:"ModalAlert",options:{markdowns:["Para este nivel, tratemos de resolvelo nivel anterior, pero *mesturando*. Pode poñerse un pouco oscuro, pero ilustra a idea bastante ben."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 為何不要 merge？","","為了要 push 新的 commit 給 remote，你只需要做的是先同步 remote 的更新，那就表示你可以使用 rebase *或者*是 merge remote branch （例如，`o/master`）。","","所以假如你已經學會使用其中一個方式了，那為什麼我們到目前為止還在強調 `rebase`？為什麼當提到 remote 的時候，反而 `merge` 比較沒有受到關注？",""]}},{type:"ModalAlert",options:{markdowns:["在程式發展的社群中，關於 `merge` 以及 `rebase` 的孰優孰劣有很多的爭論。這裡我們會提到關於 `rebase` 的優點及缺點：","","優點：","","* `rebase` 使得你的 commit tree 看起來更為簡潔，因為任何的 commit 都在一條直線上面。","","缺點：","","* `rebase` 修改了 commit tree 的歷史紀錄。","","舉例來說，我們可以 rebase commit `C1`，將 `C1` 接在*過去的* `C3` 上面，那麼就可以表現出 `C1` 是出現在 `C3` 的後面。","","有一些程式設計師喜歡保留歷史紀錄，因此他們會比較喜歡 `merge`; 其他人（例如我自己）比較喜歡一個簡潔的 commit tree，因此他們比較喜歡 `rebase`。這些都是擇你所愛。:D"]}},{type:"ModalAlert",options:{markdowns:["在這個關卡中，我們面對的是之前關卡的題目，但是我們採用的是 `merge`，這可能會讓你感覺到有點困難，但是確實有講到重點。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Warum nicht Merge?","","Um neue Dinge auf das Remote zu schieben musst du erst alle Änderungen vom Remote holen und bei dir integrieren. Das bedeutet du kannst den entfernten Branch (z.B. `o/master`) entweder Rebasen *oder* Mergen.","","Wenn du also beide Methoden benutzen kannst, warum haben sich die Level bisher auf Rebase konzentriert? Warum mag keiner `merge` wenn es um Remotes geht?",""]}},{type:"ModalAlert",options:{markdowns:["Es gibt eine Menge Diskussionen unter Entwicklern über die Vor- und Nachteile beim Mergen und Rebasen. Hier ein paar Vor- und Nachteile zum Rebasen:","","Vorteile:","","* Rebasen macht den Commit-Baum sehr übersichtlich, weil alles linear aufeinander aufbaut","","Nachteile:","","* Rebasen verändert die History eines Branches.","","Zum Beispiel kann durch Rebasen Commit `C1` an Commit `C3` *vorbei* bewegt werden, bzw. eine Kopie von `C1`. Es sieht dann so aus als wären die Änderungen in `C1` nach denen in `C3` gemacht worden, obwohl das nicht stimmt.","","Manche Entwickler möchten lieber die History lassen wie sie ist und ziehen daher das Mergen vor. Andere (wie ich) haben lieber einen sauberen Commit-Baum und ziehen Rebase vor. Am Ende ist es eine Geschmacksfrage. :D"]}},{type:"ModalAlert",options:{markdowns:["In diesem Level wollen wir versuchen die Aufgabe vom letzten Level erneut zu lösen, aber diesmal mit einem *Merge*. Das wird vielleicht etwas haariger, stellt aber gut die Implikationen dar."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 为什么不用 merge 呢?","","为了 push 新变更到远程仓库，你要做的就是**包含**远程仓库中最新变更。意思就是只要你的本地分支包含了远程分支（如 `o/master`）中的最新变更就可以了，至于具体是用 rebase 还是 merge，并没有限制。","","那么既然没有规定限制，为何前面几节都在着重于 rebase 呢？为什么在操作远程分支时不喜欢用 `merge` 呢？",""]}},{type:"ModalAlert",options:{markdowns:["在开发社区里，有许多关于 merge 与 rebase 的讨论。以下是关于 rebase 的优缺点：","","优点:","","* Rebase 使你的提交树变得很干净, 所有的提交都在一条线上","","缺点:","","* Rebase 修改了提交树的历史","","比如, 提交 C1 可以被 rebase 到 C3 之后。这看起来 C1 中的工作是在 C3 之后进行的，但实际上是在 C3 之前。","","一些开发人员喜欢保留提交历史，因此更偏爱 merge。而其他人（比如我自己）可能更喜欢干净的提交树，于是偏爱 rebase。仁者见仁，智者见智。 :D"]}},{type:"ModalAlert",options:{markdowns:["本关，我们还是解决上一关卡中的问题，但是要用 merge 替换 rebase。这显然有点画蛇添足，但这只是为了更好的说明上面的观点。"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## なぜマージではいけないのか？","","新しい更新をリモートにプッシュするため、あなたがする必要があるのはリモートからの最近の変更の*組み込み*です。それは、リモートブランチ(例えば、`o/master`)にリベース*か*マージのどちらかをあなたがする必要があるということを意味します。","","もしどっちの方法でも行うことができるなら、なぜこれまでのレッスンでは、リベースに焦点を当ててきたのでしょう？リモートへの作業で、なぜ`merge`を推してこなかったのでしょうか？",""]}},{type:"ModalAlert",options:{markdowns:["開発コミュニティで、マージとリベースの間でのトレードオフについては多くの議論がなされています。ここでは一般的なリベースのメリット/デメリットを紹介しましょう:","","メリット:","","* リベースは全てが直線上にあるので、あなたのコミットツリーをとても綺麗にみせます。","","デメリット:","","* リベースは、コミットツリーの（見ため上の）履歴を改変してしまいます。","","例えば、`C1`コミットは*過去*の`C3`コミットにリベースすることができます。それは、実際には前に完了しているのにもかかわらず、`C1'`の作業がまるで`C3`の後に行われたものであるかのように見えるようになります。","","幾人かの開発者は、履歴をそのまま保持するのが好みで、マージを選択します。その他（例えば私は）きれいなコミットツリーを好むのでリベースを選択します。つまるところ、好みの問題というわけですね :D"]}},{type:"ModalAlert",options:{markdowns:["このレベルでは、前回のレベルを*マージ*を代わりに使って解いてみてください。ちょっと難しいかもしれませんが、このレッスンのポイントを把握するのに十分な知見を得られるはずです。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Merge? Нет, нет, спасибо.","","Чтобы закачать (push) новые изменения в удалённый репозиторий, всё, что вам нужно сделать - это *смешать* последние изменения из удалённого репозитория. Это значит, что вы можете выполнить rebase *или* merge на удалённом репозитории (например, `o/master`).","","Если мы можем воспользоваться одним из двух методов, то почему же эти упражнения сфокусированы в основном на rebase? К чему такая нелюбовь к `merge`, когда речь идёт о работе с удалёнными репозиториями?",""]}},{type:"ModalAlert",options:{markdowns:["В среде разработчиков существует огромное количество дебатов около merging и rebasing. Ниже приведены основные за / против метода rebasing:","","За:","","* Rebasing делает дерево коммитов более чистым и читабельным, потому что всё представляется единой прямой линией.","","Против:","","* Метод rebasing явно изменяет историю коммитов в дереве.","","Например, коммит `C1` может быть перебазирован *после* `C3`. Соответственно, в дереве работа над `C1'` будет отображаться как идущая после `C3`, хотя на самом деле она была выполнена раньше.","","Некоторые разработчики любят сохранять историю и предпочитают слияние (merging). Другие (такие как я) предпочитают иметь чистое дерево коммитов, и пользуются перебазировкой (rebasing). Всё зависит от ваших предпочтений и вкусов :D"]}},{type:"ModalAlert",options:{markdowns:["Чтобы пройти этот уровень, решите предыдущие задачи, но с помощью *слияния (merging)*. Может быть, получится слегка неказисто, однако такое упражнение хорошо отразит суть различий."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 왜 merge하지 않는거죠?","","새로운 작업들을 원격 저장소로 push하기위해서 여러분은 원격 저장소의 최근 변경들을 *합치기*만 하면 됩니다. 이 말은 즉 원격 브랜치로(예:`o/master`) rebase를 할 수도 merge를 할 수도 있다는 것입니다.","","두가지를 다 할 수 있다면, 왜 지금까지 배운 레슨들은 rebase를 하는것에 집중한거죠? 원격 저장소와 작업을 할때는 왜 `merge`에게 관심을 가져주지 않는건가요?",""]}},{type:"ModalAlert",options:{markdowns:["개발 커뮤니티에서 merge를 하는것과 rebase 사이의 트레이드 오프에 대해 많은 논의가 이루어지고 있습니다. 여기 rebase의 일반적인 장 / 단점을 소개하겠습니다:","","장점:","","* rebase는 여러분의 커밋 트리를 깔끔하게 정리해서 보기가 좋습니다 모든게 한 줄에 있기때문이죠.","","단점:","","* rebase를 하게 되면 커밋 트리의 (보이는)히스토리를 수정합니다.","","예를 들어, 커밋 `C1`는 *과거*의`C3`로 rebase 될 수 있습니다. `C1'`의 작업이 `C3`의 다음에 있는것으로 보이게 되는겁니다. 실제로는 `C1`이 먼저 완료된거인데 말이죠.","","어떤 개발자들은 이력이 보존되는것을 좋아하기 때문에 merge를 선호합니다. 그 이외는(저 처럼) 커밋 트리가 깔끔한것을 선호해서 rebase를 선호합니다. 자기 입맛에 맞추면 되겠습니다 :D"]}},{type:"ModalAlert",options:{markdowns:["이번 레벨에서는 이전의 레벨을 해결 해봅시다. 대신 이번에는 *merge*를 사용하겠습니다. 조금 복잡할 수 있지만 지금 배운 내용의 포인트를 파악하기 좋을것 입니다."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Чому б не змерджити?","","Для того, щоб віддалений сервер прийняв твої зміни, треба *об'єднати* їх з останніми змінами на сервері. Це означає ребейс *або* мердж з віддаленою гілкою (напр. `o/master`).","","Хмм, якщо можна використати один із цих методів, для чого нам додаткові уроки про ребейс? Чому ніхто не любить `merge`, працюючи з віддаленим сервером?",""]}},{type:"ModalAlert",options:{markdowns:["В спільноті розробників давно ведуться суперечки щодо переваг і недоліків мерджингу і ребейсу. Ось головні з них для ребейсу:","","За:","","* Ребейс дозволяє тримати дерево комітів чистим, оскільки все вибудовується в пряму лінію;","","Проти:","","* Ребейс змінює історію в дереві комітів.","","Наприклад, коміт `C1` можна ребейснути *на* `C3`. Як результат `C1'` буде йти після `C3`, хоча насправді його зробили раніше.","","Деякі розробники люблять зберігати історії і тому вибирають мерджинг. Інші (як і я) воліють мати чисте дерево комітів і віддають перевагу ребейсу. Це питання смаку :D"]}},{type:"ModalAlert",options:{markdowns:["На цьому рівні спробуймо вирішити попереднє завдання з використанням *мерджу*. Можливо вийде не так охайно, але добре покаже різницю в підходах."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tại sao không hợp nhất?","","Để có thể đẩy cập nhật của bạn lên kho nhánh từ xa, tất cả những gì bạn cần làm là *kết nạp* thay đổi mới nhất từ nhánh từ xa. Nghĩa là bạn có thể dùng tái bố trí *hoặc* hợp nhất với nhánh từ xa (ví dụ `o/master`).","","Vậy ta có thể sử dụng một trong 2 cách, thì tại sao đến giờ ta chỉ tập trung vào tái bố trí trong các bài học? Tại sao khi làm việc với nhánh từ xa lại ta lại không thích `hợp nhất` (`merge`)?",""]}},{type:"ModalAlert",options:{markdowns:["Trong cộng đồng phát triền phần mềm có rất nhiều tranh luận về ưu, nhươc, khuyết của việc sử dụng tái bố trí(`rebase`) hay hợp nhất(`merge`). Dưới đây là một vài ưu / nhược cơ bản của tái bố trí:","","Ưu điểm:","","* Tái bố trí làm cây commit của bạn trông gọn gàng hơn nhiều vì mọi thứ được xếp theo đường thẳng","","Nhược điểm:","","* Tái bố trí sửa đổi lịch sử (biểu hiện) của cây commit.","","Ví dụ, commit `C1` có thể bố trí lên *sau* `C3`. Thế là `C1'` biểu hiện như là nó xuất hiện sau `C3` trong khi thực tế nó được hoàn thành trước đó.","","Có những nhà phát triển muốn tôn trọng tính lịch sự nên họ ưa thích hợp nhất hơn. Những người khác (như tôi chẳng hạn) thì thiên về tái bố trí hơn vì muốn có cây commit gọn gàng. Rốt cục cũng là thiên hướng thôi :D"]}},{type:"ModalAlert",options:{markdowns:["Ở cấp độ này, hãy thử giải bài tập trước nhưng mà với *hợp nhất*. Có lẽ bài này hơi thừa nhưng mà nó mịnh họa quan điểm trên rõ ràng hơn."]}}]}}}},{}],140:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git pull",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git Pullin'",zh_CN:"Git Pull",zh_TW:"git pull",es_AR:"git pull",es_ES:"git pull",pt_BR:"Git Pull",gl:"Git Pull",de_DE:"Git Pull",ja:"Git Pull",fr_FR:"Git pull",ru_RU:"Git pull",uk:"Git pull",ko:"Git pull",vi:"Git pull"},hint:{en_US:"Just run git pull!",zh_CN:"运行 git pull 命令就可以了！",zh_TW:"只要下 git pull 這個指令即可",es_AR:"Simplemente ¡hacé git pull!",es_ES:"Simplemente ¡ejecuta git pull!",pt_BR:"Basta executar git pull!",gl:"Sinxelamente fai git pull!",de_DE:"Führe einfach git pull aus.",ja:"単にgit pullを実行！",fr_FR:"Utilisez facilement git pull !",ru_RU:"Запустите комманду git pull !",uk:"Просто виконай git pull !",ko:"그냥 git pull을 하세요!",vi:"Đơn giản là gõ git pull!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Now that we've seen how to fetch data from a remote repository with `git fetch`, let's update our work to reflect those changes!","","There are actually many ways to do this -- once you have new commits available locally, you can incorporate them as if they were just normal commits on other branches. This means you could execute commands like:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","In fact, the workflow of *fetching* remote changes and then *merging* them is so common that git actually provides a command that does both at once! That command is `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's first see a `fetch` and a `merge` executed sequentially"],afterMarkdowns:["Boom -- we downloaded `C3` with a `fetch` and then merged in that work with `git merge o/master`. Now our `master` branch reflects the new work from the remote (in this case, named `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What would happen if we used `git pull` instead?"],afterMarkdowns:["The same thing! That should make it very clear that `git pull` is essentially shorthand for a `git fetch` followed by a merge of whatever branch was just fetched."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["We will explore the details of `git pull` later (including options and arguments), but for now let's try it out in the level.","","Remember -- you can actually solve this level with just `fetch` and `merge`, but it will cost you an extra command :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Maintenant que vous avez vu comment rapatrier des données depuis un dépôt distant avec `git fetch`, mettons à jour notre copie de travail pour refléter ces changements !","","Il existe en fait beaucoup de façons de faire cela -- une fois que vous avez de nouveaux commits disponibles localement, vous pouvez les incorporer dans votre branche de travail comme s'ils étaient des commits normaux d'autres branches. Cela signifie que pourriez simplement exécuter des commandes comme :","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","En fait, le principe de *rapatrier* (fetch) les branches distantes puis les *fusionner* (merge) est si commun que git a en réalité une commande pour faire les deux à la fois ! Cette commande est `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons d'abord un `fetch` puis un `merge` exécutés séquentiellement"],afterMarkdowns:["Boum -- nous avons téléchargé `C3` avec un `fetch` et ensuite nous avons fusionné ce travail dans notre copie avec `git merge o/master`. Maintenant notre branche `master` reflète le nouveau travail du dépôt distant (dans ce cas, nommé `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Que se passerait-il si nous utilisions plutôt `git pull` ?"],afterMarkdowns:["La même chose ! Cela devrait maintenant être clair que `git pull` est surtout un raccourci pour `git fetch` suivi d'un merge de toutes les branches qui viennent d'avoir un fetch."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Nous allons explorer les détails de `git pull` plus tard (y compris options et arguments), mais pour ce niveau pratiquons d'abord la technique de base.","","Rappelez-vous : vous pouvez aussi résoudre ce niveau avec `fetch` et `merge`, mais cela vous coûtera une commande supplémentaire :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Ahora que vimos cómo traer datos de un repositorio remoto con `git fetch`, ¡actualicemos nuestro trabajo local para reflejar esos cambios!","","Realmente hay varias formas de hacer esto: una vez que tenés los commits disponibles localmente, podés integrarlos como si fueran commits comunes de otras ramas. Esto significa que podrías ejecutar comandos como:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","De hecho, el flujo de trabajo de *fetchear* cambios remotos y después *mergearlos* es tan común que git incluye un comando que hace ambas cosas de una: ¡`git pull`!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos primero un `fetch` y un `merge` ejecutados secuencialmente"],afterMarkdowns:["Boom: descargamos `C3` con un `fetch` y luego lo mergeamos con `git merge o/master`. Ahora nuestra rama `master` refleja el nuevo trabajo del remoto (en este caso, llamado `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasaría si usáramos `git pull` en cambio?"],afterMarkdowns:["¡Lo mismo! Eso debería dejar bien en claro que `git pull` es básicamente un atajo para hacer `git fetch` seguido por un merge con la rama que sea que hayamos bajado."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Exploraremos los detalles de `git pull` después (incluyendo sus opciones y parámetros), pero por ahora probémoslo en este nivel.","","Acordate: podés resolver este comando simplemente con `fetch` y `merge`, pero eso te costaría un comando extra :P"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Ahora que vimos cómo traer datos de un repositorio remoto con `git fetch`, ¡actualicemos nuestro trabajo local para reflejar esos cambios!","","Realmente hay varias formas de hacer esto: una vez que tienes los commits disponibles localmente, puedes integrarlos como si fueran commits comunes de otras ramas. Esto significa que podrías ejecutar comandos como:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","De hecho, el flujo de trabajo de *fetchear* cambios remotos y después *mergearlos* es tan común que git incluye un comando que hace ambas cosas de una: ¡`git pull`!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos primero un `fetch` y un `merge` ejecutados secuencialmente"],afterMarkdowns:["Zas: descargamos `C3` con un `fetch` y luego lo mergeamos con `git merge o/master`. Ahora nuestra rama `master` refleja el nuevo trabajo del remoto (en este caso, llamado `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasaría si en cambio utilizásemos `git pull`?"],afterMarkdowns:["¡Lo mismo! Eso debería dejar bien claro que `git pull` es básicamente un atajo para hacer `git fetch` seguido por un merge con la rama que hayamos descargado."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Exploraremos los detalles de `git pull` después (incluyendo sus opciones y parámetros), pero por ahora probémoslo en este nivel.","","Recuerda: puedes ejecutar este comando simplemente con `fetch` y `merge`, pero eso te costaría un comando extra :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Agora que vimos como baixar dados de um repositório remoto com `git fetch`, vamos atualizar nosso trabalho para refletir essas mudanças!","","Há, na verdade, muitas formas de fazê-lo -- uma vez que você tenha os novos commits disponíveis localmente, você pode incorporá-los como se eles fossem commits normais em outros ramos. Isso significa que você pode executar comandos como estes a seguir:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","O fluxo de trabalho de executar *fetch* para baixar as mudanças remotas e depois fazer um *merge* delas é tão comum que o Git na verdade fornece um comando que faz ambas as coisas de uma vez só! Esse comando é o `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos primeiro ver um `fetch` e um `merge` executados sequencialmente"],afterMarkdowns:["Boom -- nós baixamos o `C3` com um `fetch` e então fizemos um merge desse trabalho usando `git merge o/master`. Agora o nosso ramo `master` reflete o trabalho realizado no repositório remoto (neste caso, chamado de `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["O que iria acontecer se, em vez disso, usássemos `git pull`?"],afterMarkdowns:["Exatamente o mesmo! Isso deve tornar bem claro que `git pull` é essencialmente um caminho mais curto para executar um `git fetch` seguido de um merge de seja já qual ramo tiver sido baixado."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Vamos explorar os detalhes do `git pull` mais tarde (incluindo opções e parâmetros), mas por enquanto, experimente usá-lo em sua forma mais básica.","","Lembre-se -- você também poderia resolver este nível com um `fetch` e um `merge`, mas isso lhe custaria um comando a mais :P"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Agora que vimos cómo traer os datos dun repositorio remoto con `git fetch`, ¡actualicemos o noso traballo local para reflexar eses cambios!","","Realmente hai varias formas de facer esto: unha vez que teñas os commits dispoñibles localmente, podes integralos coma se foran commits comúns de outras ramas. Esto significa que poderías executar comandos como:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","De feito, o fluxo de traballo de *fetchear* os cambios remotos e depois *mesturalos* é tan común que git inclúe un comando que fai as dúas operacións nunha sola: ¡`giti pull`!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos primeiro un `fetch` e un `merge` executados secuencialmente"],afterMarkdowns:["Boom: descargamos `C3` cun `fetch` e logo mesturámolos con `git merge o/master`. Agora a nosa rama `master` reflexa o novo traballo do remoto (neste caso, chamado `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasaría se usáramos `git pull` en cambio?"],afterMarkdowns:["¡O mesmo! Eso debía deixar ben claro que `git pull` é básicamente un atallo para facer `git fetch` seguido pola mestura ca rama que houbésemos descargado."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Exploraremos os detalles de `git pull` despois (incluíndo as súas operacións e parámetros), pero por agora probarémolo neste nivel.","","Lémbrate: podes resolver este comando sinxelamente con `fetch` e `merge`, pero eso costaríache un comando extra :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git pull","","現在我們已經知道如何利用 `git fetch` 從 remote 抓取 commit，讓我們來看一下如何將這些 commit 更新到我們的檔案！","","只要在你的 local 有 fetch 到新的 commit，便有很多方法可以做到這件事情，你可以把它們視為在其它 branch 上面的一般的 commit，這表示你可以執行像這樣子的指令:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* 等等‧‧‧","","事實上，一次*下載 (fetch)* remote 的更新並且*合併（merge）* 這些更新在 git 裡面是很常見的事情！這個命令叫作 `git pull`。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來看循序執行一個 `fetch` 和一個 `merge` 的樣子"],afterMarkdowns:["看吧! 我們利用 `fetch` 下載了 `C3` 並且利用 `git merge o/master` 來更新資料，現在我們的 `master` branch 跟 remote 同步了（在這個例子中，remote repository 叫作 `origin`）。"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果用 `git pull` 會發生什麼事情？"],afterMarkdowns:["一樣！很明顯地，`git pull` 其實就是 git fetch 跟 git merge 的循序執行的結果，而且 merge 的 branch 就是 fetch 所更新的 branch。"],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["我們會解釋 `git pull` 的細節（包括可選擇的參數）, 但現在先讓我們在這個關卡試試看！","","記住喔，你可以利用循序執行的方式來執行 `fetch` 以及 `merge` 來完成這個關卡，但是相對於 `git pull`，你就得多打一個指令。:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","既然我们已经知道了如何用 `git fetch` 获取远程的数据, 现在我们学习如何将这些变化更新到我们的工作当中。","","其实有很多方法的 —— 当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令: ","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* 等等","","实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。它就是我们要讲的 `git pull`。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我们先来看看 `fetch`、`merge` 依次执行的效果"],afterMarkdowns:["我们用 `fetch` 下载了 `C3`, 然后通过 `git merge o/master` 合并了这一提交记录。现在我们的 `master` 分支包含了远程仓库中的更新（在本例中远程仓库名为 `origin`）"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果使用 `git pull` 呢?"],afterMarkdowns:["同样的结果！这清楚地说明了 `git pull` 就是 git fetch 和 git merge <just-fetched-branch> 的缩写！"],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["稍后我们会探索一下 `git pull` 的细节(包括选项和参数)，现在咱们先解决这个关卡。","","实际上你完全可以用 `fetch` 和 `merge` 通过本关，但是这会增加你的命令数。 :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Jetzt, wo wir wissen wie wir mit `git fetch` Daten von einem entfernten Repository holen können, wollen wir unsere lokalen Daten aktualisieren, damit sie die Änderungen vom Server beinhalten.","","Tatsächlich gibt es eine Menge Wege dies zu erreichen -- sobald du die neuen Commits lokal verfügbar hast, kannst du sie integrieren so als wären es Commits von ganz normalen anderen Branches. Du kannst also:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* usw. usf. ausführen.","","Der Ablauf, die Änderungen vom Server zu holen und dann in die eigene Arbeit zu mergen wird so häufig benötigt, dass Git einen Befehl kennt der beides auf einmal erledigt! Das ist `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns erst mal ein `fetch` gefolgt von `merge` an:"],afterMarkdowns:["Bämm -- wir haben `C3` mit `fetch` heruntergeladen und dann in unseren Branch mit `git merge o/master` integriert. Nun bildet unser `master` dieselben Inhalte ab, wie sie auf dem entfernten Server (`origin`) liegen."],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was passiert wohl, wenn wir stattdessen `git pull` benutzen?"],afterMarkdowns:["Dasselbe in Pink. Das sollte recht deutlich machen, dass `git pull` nur eine Abkürzung für `git fetch` gefolgt von einem Merge des gerade aktualisierten Branches ist."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Die Feinheiten von `git pull` werden wir uns später ansehen, für's Erste lass es uns in diesem Level ausprobieren.","","Vergiss nicht -- du kannst diesen Level auch mit `fetch` und `merge` lösen, aber das kostet dich einen Befehl extra. :P"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Теперь, когда мы познакомились с тем, как извлекать данные из удалённого репозитория с помощью `git fetch`, давайте обновим нашу работу, чтобы отобразить все эти изменения!","","Существует множество вариантов решений - как только у вас имеется локальный коммит, вы можете соединить его с другой веткой. Это значит, вы можете выполнить одну из команд:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* и т.д.","","Процедура *скачивания (fetching)*  изменений с удалённой ветки и *объединения (merging)* настолько частая и распространённая, что git предоставляет вместо двух команд - одну! Эта команда  - `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте рассмотрим, как `fetch` и `merge` выполняются последовательно"],afterMarkdowns:["Опа - мы скачали `C3` с помощью команды `fetch` и затем объединяем эти наработки с помощью `git merge o/master`. Теперь наша ветка `master` отображает изменения с удалённого репозитория (в данном случае — с репозитория `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Что же произойдёт, если вместо этих команд мы воспользуемся `git pull`?"],afterMarkdowns:["Абсолютно то же самое! Нужно чётко понимать, что `git pull` существенно уменьшает вашу рутинную работу, если бы вы использовали `git fetch` и последующее слияние (merging) скаченной ветки."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Мы изучим детали команды `git pull` чуть позже (включая опции и аргументы вызова команды), а пока что давайте просто попробуем эту команду.","","Помните, вы также можете выполнить этот уровень с помощью команд `fetch` и `merge`, но нужно ли делать так, когда можно воспользоваться всего лишь одной командой ? :P"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","今や私たちはリモートリポジトリから`git fetch`でデータを取ってくる方法を知っているので、今度は私たちの作業にその変更を反映することを学びましょう！","","実際には多くの方法があり、ローカルに利用可能なリモートの新しいコミットがある場合、あなたはそのコミットを他のブランチの通常のコミットと同じように、自分の作業に組み込むことができます。これは、あなたが次のようなコマンドを実行することで行えます:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* その他","","実は、リモートの変更を取ってきてマージするという作業の流れはとてもよく行われるので、gitは実際にはその二つを同時に行うコマンドを提供しているのです！それは、`git pull`というコマンドです。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["まずは、連続して`fetch`して`merge`する流れの方を見てみましょう。"],afterMarkdowns:["わーお。私たちは`C3`を`fetch`でダウンロードして、`git merge o/master`でこれをマージしました。今や私たちの`master`ブランチに(この場合、`origin`という名前の)リモートの新しい作業内容が反映されています。"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["では、`git pull`では何が起こるのでしょうか？"],afterMarkdowns:["同じことが起こります！明確に`git pull`は`git fetch`して取ってきたブランチの内容をマージするという流れの短縮系であることが確認できます。"],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["`git pull`の（オプションや引数を含む）詳細はこの後にやりますが、今、このレベルではただ試してみるだけにしておきましょう。","","覚えておいてください。あなたは実際にはこのレベルを`fetch`と`merge`だけでこのレベルを解決することができますが、余計なコマンドのコストがかかるだけです :P"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Тепер, коли ми знаємо як витягувати дані з віддаленого репозиторію за допомогою `git fetch`, спробуймо оновити нашу робочу копію відповідно до цих данних!","","Насправді, є кілька шляхів як цого досягнути -- щойно нові коміти з’явилися локально, ти можеш додавати їх в бранчі так само, як звичайні коміти. Це означає що ти можеш виконувати команди:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* тощо.","","Насправді, процес *витягування* віддалених змін й подальший *мерджинг* їх є настільки популярним, що гіт пропонує спеціальну команду, що виконує ці дві дії за один раз! Ця команда називається `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Спершу виконаймо по черзі `fetch`, а потім `merge`"],afterMarkdowns:["Ка-бум -- ми звантажили `C3` за допомогою `fetch` і потім змерджили їх, використавши `git merge o/master`. Тепер наша гілка `master` відповідає гілці з віддаленого сховища (в цьому випадку, з назвою `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Що трапиться, якщо натомість використати `git pull`?"],afterMarkdowns:["Те саме! Тепер очевидно що `git pull` -- це просто швидкий спосіб зробити `git fetch`, а потім змерджити завантажену гілку."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Ми розглянемо `git pull` більш детально пізніше (включаючи різні опції та аргументи), наразі просто спробуймо цю команду.","","Не забувай -- щоб пройти цей рівень, достатньо використати `fetch`, а потім `merge`, але це буде тобі коштувати одну зайву команду :P"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","자 우리는 원격 저장소에서 `git fetch`로 어떻게 데이터를 내려 받는지 보았습니다. 이제 우리의 작업을 업데이트해서 변경들을 반영해 봅시다!","","사실 이걸 하는 방법은 여러가지 있습니다 -- 새 커밋들을 로컬에 내려받은 이후에는 그냥 다른 브랜치에있는 일반 커밋처럼 활용할 수 있습니다. 이런 명령들을 실행할 수 있다는 뜻 입니다 :","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* 기타 등등","","사실 원격 저장소의 변경을 *fetch*하고 그이후에 *merge*하는 작업의 과정이 워낙 자주있는 일이라서 git은 이 두가지를 한번에 하는 명령을 제공합니다! 이 명령어는 `git pull` 입니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["먼저 `fetch` 와 `merge`가 차례로 실행되는것을 확인해 봅시다"],afterMarkdowns:["Boom -- 우리는 `C3`를 `fetch`로 내려 받고 `git merge o/master`로 우리의 작업으로 병합했습니다. 이제 우리의 `master` 브랜치는 원격 저장소의 새 작업들을 반영하게 됩니다(지금 사례에서 `origin`입니다)."],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["대신에 `git pull`을 사용하면 어떻게 될까요?"],afterMarkdowns:["똑같은 일이 일이납니다! 이렇게 `git pull`은 본질적으로 `git fetch`후에 내려받은 브랜치를 병합하는 과정의 단축입니다. 확실하게 느껴지죠?."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["`git pull`의 세부적인 사항들은 나중에 알아보겠습니다 (옵션과 매개변수등) 지금은 이 레벨에서 일단 시도부터 해 봅시다.","","알고 넘어갑시다 -- 이 레벨을 그냥 `fetch`와 `merge`의 조합으로 해결할 수 있습니다. 하지만 명령어가 추가되겠지요 :P"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Ta đã biết cách dùng `git fetch` để nạp các commit từ kho chứa từ xa, giờ hãy cập nhật các commit này vào các nhánh địa phương!","","Thực ra thì có nhiều cách đề làm điều này -- một khi bạn đã có các commit này ở ko chứa địa phương, bạn có thể hợp nhất chúng như với các commit ở các nhánh khác. Nghĩa là bạn có thể sử dụng các câu lệnh sau:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","Thực tế thì, quá trình *nạp* commit từ kho chứa từ xa và *hợp nhất* chúng phổ biết đến nỗi git cung cấp một câu lệnh để làm cả 2 điều này một lúc! Đó là `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Trước tiên hãy xem quá trình `nạp` và `hợp nhất` được thực hiện một cách tuần tự"],afterMarkdowns:["Bùùm -- ta tải xuống commit `C3` với lệnh `git fetch` rồi sau đó hợp nhất nó với lệnh `git merge o/master`. Giờ thì nhánh `master` đã phản ánh trạng thái mới từ kho chứa từ xa (trong trường hợp này là `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nếu thay vì dó ta dùng `git pull` thì điều gì xảy ra?"],afterMarkdowns:["Cũng như nhau! Điều đó có nghĩa là `git pull` về cơ bản là cách làm tắt cho việc thực hiện tuần tự `git fetch` sau đó là hợp nhất các nhánh từ xa được nạp."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Ta sẽ tìm hiều chi tiết về `git pull` sau (bao gồm các tùy chọn và tham số), còn bây giờ thì cứ dùng thử nó ở cấp độ này đã.","","Nhớ rằng -- bạn có thể giải quyết cấp độ này với `fetch` và sau đó `merge`, nhưng mà như thế thì lại tốn têm một câu lệnh :P"]}}]}}}},{}],141:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/bar":{"target":"C1","id":"o/bar","remoteTrackingBranchID":null},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":null},"side":{"target":"C2","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"},"C3":{"parents":["C1"],"id":"C3"},"C5":{"parents":["C3","C4"],"id":"C5"},"C2":{"parents":["C1"],"id":"C2"},"C6":{"parents":["C2","C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"bar":{"target":"C3","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bar","id":"HEAD"}}}',solutionCommand:"git pull origin bar:foo;git pull origin master:side",startTree:'{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/bar":{"target":"C1","id":"o/bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"bar":{"target":"C3","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bar","id":"HEAD"}}}',name:{en_US:"Pull arguments",zh_CN:"Git pull 的参数",zh_TW:"pull 的參數",es_AR:"Parámetros de pull",es_ES:"Parámetros de pull",pt_BR:"Parâmetros do pull",gl:"Parámetros de pull",de_DE:"Optionen für Pull",ja:"Pullの引数",fr_FR:"Arguments de pull",ru_RU:"Аргументы для pull",ko:"pull 인자들",uk:"Аргументи pull",vi:"Tham số pull"},hint:{en_US:"Remember that you can create new local branches with fetch/pull arguments",zh_CN:"记住, 你可以通过 fetch/pull 创建本地分支",zh_TW:"記住，你可以透過 fetch 以及 pull 來建立一個新的 local 的 branch",es_AR:"Acordate de que podés crear nuevas ramas locales usando los parámetros de fetch/pull",es_ES:"Recuerda que puedes crear nuevas ramas locales usando los parámetros de fetch/pull",pt_BR:"Lembre-se que você pode criar novos ramos locais com parâmetros de fetch/pull",gl:"Lémbrate que podes crear novas ramas locais con parámetros de fetch/pull",de_DE:"Du kannst neue lokale Branches mittels fetch / pull erstellen",ja:"Fetchとpullの引数を利用してローカルで新規ブランチを作成できるのをお忘れなく",fr_FR:"Vous pouvez aussi créer une nouvelle branche locale avec les arguments de fetch/pull",ru_RU:"Напоминаю, что новые ветки можно создавать и с помощью команд fetch/pull",ko:"fetch/pull 과 인자들로 새 로컬 브랜치를 생성할수 있다는것을 기억하세요.",uk:"Пам'ятай, що ти можеш створювати нові гілки, використовуючи fetch/pull з аргументами",vi:"Nhớ rằng,bạn có thể tạo nhánh cục bộ mới với tham số của fetch/pull"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git pull arguments","","Now that you know pretty much *everything* there is to know about arguments for `git fetch` and `git push`, there's almost really nothing left to cover for git pull :)","","That's because git pull at the end of the day is *really* just shorthand for a fetch followed by merging in whatever was just fetched. You can think of it as running git fetch with the *same* arguments specified and then merging in *where* those commits ended up.","","This applies even when you use crazy-complicated arguments as well. Let's see some examples:"]}},{type:"ModalAlert",options:{markdowns:["Here are some equivalent commands in git:","","`git pull  origin foo` is equal to:","","`git fetch origin foo; git merge o/foo`","","And...","","`git pull  origin bar~1:bugFix` is equal to:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","See? git pull is really just shorthand for fetch + merge, and all git pull cares about is where the commits ended up (the `destination` argument that it figures out during fetch).","","Lets see a demo:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["If we specify the place to fetch, everything happens as before with fetch but we merge in whatever was just fetched"],afterMarkdowns:["See! by specifying `master` we downloaded commits onto `o/master` just as normal. Then we merged `o/master` to our currently checked out location which is *not* the local branch `master`. For this reason it can actually make sense to run git pull multiple times (with the same args) from different locations in order to update multiple branches."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Does it work with source and destination too? You bet! Let's see that:"],afterMarkdowns:["Wow, that's a TON in one command. We created a new branch locally named `foo`, downloaded commits from remote's master onto that branch `foo`, and then merged that branch into our currently checked out branch `bar`. It's over 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok to finish up, attain the state of the goal visualization. You'll need to download some commits, make some new branches, and merge those branches into other branches, but it shouldn't take many commands :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les arguments de git pull","","Maintenant que vous savez presque *tout* ce qu'il y a à savoir sur les arguments de `git fetch` et `git push`, il n'y a presque plus rien à vous apprendre sur git pull :)","","C'est parce que git pull est en fait *juste* un raccourci pour un fetch suivi d'un merge de tout ce qui vient d'être rapatrié. Vous pouvez vous représenter git pull comme un git fetch avec les *mêmes* arguments, suivi d'un merge qui aura lieu à l'endroit *exact* où ces commits seront arrivés.","","Cela fonctionne même quand vous utilisez des arguments très compliqués. Voyons quelques exemples :"]}},{type:"ModalAlert",options:{markdowns:["Voici quelques commandes équivalentes dans git :","","`git pull origin foo` est équivalent à :","","`git fetch origin foo; git merge o/foo`","","Et :","","`git pull origin bar~1:bugFix` est équivalent à :","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Vous voyez ? git pull est au fond un simple un raccourci pour fetch + merge, et tout ce qui lui importe est la destination des commits (l'argument `destination` qu'il utilise durant le fetch).","","Voyons une démonstration :"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si nous précisons l'emplacement à rapatrier tout se passe comme précédemment, avec fetch, mais en sus nous fusionnons tout ce qui a été rapatrié."],afterMarkdowns:["Vu ? En précisant `master` nous avons téléchargé les commits dans `o/master` comme d'habitude. Puis nous avons fusionné `o/master` avec là où nous sommes, *sans nous soucier* de la branche courante."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cela fonctionne-t-il aussi bien avec une source et une destination ? Et oui ! Voyons cela :"],afterMarkdowns:["Wow, INCROYABLE tout ce que nous avons fait en une commande. Nous avons créé une branche locale nommée `foo`, téléchargé les commits depuis la branche master distante dans `foo`, et ensuite fusionné cette branche dans notre branche actuelle de travail (checkoutée) `bar` !!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, pour finir ce niveau reproduisez l'état de la fenêtre Objectif. Vous aurez besoin de télécharger quelques commits, de créer des branches et de les fusionner dans d'autres branches, mais cela ne devrait pas utiliser trop de commandes :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git pull","","Ahora que sabés prácticamente *todo* lo que hay que saber sobre los parámetros de `git fetch` y `git push`, casi que no queda nada para cubrir de git pull :)","","Eso es porque git pull es simplemente un atajo para hacer un fetch seguido de un merge. Podés pensarlo como correr git fetch con los *mismos* parámetros, y después mergear aquello a donde esos commits hayan ido a parar.","","Esto aplica incluso cuando usás parámetros hiper-rebuscados. Veamos algunos ejemplos:"]}},{type:"ModalAlert",options:{markdowns:["Estos son algunos comandos equivalentes de git:","","`git pull  origin foo` equivale a:","","`git fetch origin foo; git merge o/foo`","","Y...","","`git pull  origin bar~1:bugFix` equivale a:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","¿Ves? git pull es simplemente un atajo para un fetch + merge, y todo lo que le importa a git pull es dónde terminaron esos commits (el parámetro `destino` que determina durante el fetch).","","Veamos una demostración:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si especificamos el lugar del que hacer fetch, todo ocurre como antes, pero sólo mergeamos lo que se fetcheó"],afterMarkdowns:["¡Ves! Especificando `master` bajamos los commits a `o/master` como siempre. Después mergeamos `o/master` a nuestra rama actual, *sin importar* qué había en nuestra copia de trabajo."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Esto funciona con origen y destino, también? ¡Más vale! Veámoslo:"],afterMarkdowns:["Wow, eso es un MONTÓN en un único comando. Creamos una nueva rama local llamada `foo`, descargamos los commits del master del remoto a esta rama `foo`, y después mezclamos esa rama a nuestra rama actual `bar`. ¡¡¡Supera los 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["OK: para terminar, alcanzá el estado del objetivo. Vas a necesitar descargar algunos commits, crear algunas ramas nuevas, y mergear esas ramas junto con otras, pero no debería llevar demasiados comandos :P"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git pull","","Ahora que sabes prácticamente *todo* lo que hay que saber sobre los parámetros de `git fetch` y `git push`, casi no queda nada por cubrir del comando git pull :)","","Eso es porque git pull es simplemente un atajo para hacer un fetch seguido de un merge. Puedes imaginártelo como ejecutar git fetch con los *mismos* parámetros, y después hacer merge de ello hacia donde esos commits hayan ido a parar.","","Esto aplica incluso cuando utilizas parámetros rebuscados en exceso. Veamos algunos ejemplos:"]}},{type:"ModalAlert",options:{markdowns:["Estos son algunos comandos equivalentes de git:","","`git pull  origin foo` equivale a:","","`git fetch origin foo; git merge o/foo`","","Y...","","`git pull  origin bar~1:bugFix` equivale a:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","¿Ves? git pull es simplemente un atajo para un fetch + merge, y todo lo que le importa a git pull es dónde terminaron esos commits (el parámetro `destino` que determina durante el fetch).","","Veamos una demostración:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si especificamos el lugar desde donde hacer fetch, todo ocurre como antes, pero sólo mergeamos lo que se fetcheó"],afterMarkdowns:["¡Ves! Especificando `master` descargamos los commits a `o/master` como siempre. Después mergeamos `o/master` a nuestra rama actual, *sin importar* qué había en nuestra copia de trabajo."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Esto funciona con origen y destino, también? ¡Más vale! Veámoslo:"],afterMarkdowns:["Caramba, eso es una BARBARIDAD en un único comando. Creamos una nueva rama local llamada `foo`, descargamos los commits del master del remoto a esta rama `foo`, y después mezclamos esa rama a nuestra rama actual `bar`. ¡¡¡Supera los 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["OK: para terminar, intenta alcanzar el estado del objetivo. Vas a necesitar descargar algunos commits, crear algunas ramas nuevas, y mergear esas ramas junto con otras, pero no debería llevar demasiados comandos :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parâmetros do git pull","","Agora que você sabe praticamente *tudo* que há para saber sobre parâmetros do `git fetch` e `git push`, não há praticamente nada a se abordar a respeito do  git pull :)","","Isso é porque o git pull no final das contas é *realmente* apenas um atalho para um fetch seguido de um merge em seja lá o que acabou de ser baixado. Você pode pensar nele como rodar o git fetch recebendo os *mesmos* argumentos, seguido de um merge no lugar *onde* esses commits foram parar.","","Isso se aplica mesmo no caso de argumentos loucamente complicados. Vejamos alguns exemplos:"]}},{type:"ModalAlert",options:{markdowns:["Aqui estão alguns comandos que são equivalente para o Git:","","`git pull  origin foo` é igual a:","","`git fetch origin foo; git merge o/foo`","","E...","","`git pull  origin bar~1:bugFix` é igual a:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Viu? O git pull é realmente um atalho para fetch + merge, e tudo com o que o git pull se importa é com onde os commits foram parar (o parâmetro de `destino` que ele descobre durante o fetch).","","Vejamos uma demonstração:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Se especificarmos o lugar onde fazer o fetch, tudo acontece como antes com o fetch, mas fazemos o merge naquilo que acabou de ser baixado"],afterMarkdowns:["Veja! Especificando `master` nós baixamos commits em `o/master` como sempre. Então fizemos um merge de `o/master` com o lugar onde estamos, *independente* daquilo que está atualmente em checkout."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Isso também funciona com origem e destino especificados? Sim, você acertou! Vejamos:"],afterMarkdowns:["Wow, isso é MUITA coisa em um comando só. Nós criamos um novo ramo local chamado `foo`, baixamos commits do master remoto nesse ramo `foo`, e então fizemos um merge dele com o ramo atualmente em checkout, `bar`."],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, para terminar, obtenha o estado da visualização do objetivo. Você vai precisar baixar alguns commits, criar novos ramos, e fazer merge de ramos em outros ramos, mas não deve precisar de muitos comandos para isso :P"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git pull","","Agora que sabes prácticamente *todo* o que hai que saber sobre os parámetros de `git fetch` e `git push`, casi que non queda nada para cubrir os de git pull :D","","Eso é porque git pull é sinxelamente un atallo para facer un fetch seguido dun merge. Podes pensalo como executar git fetch cos *mesmos* parámetros, e logo mesturar aquelo onde esos commits houberan ido ficar.","","Esto aplica incluso cando usas parámetros hiper-complexos. Vexamos algúns exemplos:"]}},{type:"ModalAlert",options:{markdowns:["Estos son algúns comandos equivalentes de git:","","`git pull  origin foo` equivale a:","","`git fetch origin foo; git merge o/foo`","","E...","","`git pull  origin bar~1:bugFix` equivale a:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","¿Ves? git pull é sinxelamente un atallo para un fetch + merge, e todo o que lle importa a git pull é ónde terminaron eses commits (o parámetro `destino` que indícase durante o fetch).","","Vexamos unha demostración:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Se especificamos o lugar do que facer o fetch, todo ocorre coma antes, pero só mesturamos o que se descargou"],afterMarkdowns:["¡Ves! Indicando `master` baixamos os commits á `o/master` coma sempre. Despois mesturamos `o/master` á nosa rama actual, *sen importar* qué tiñamos na nos copia de traballo."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Esto funciona co orixe e o destino, tamén? ¡Máis lle vale! Vexámolo:"],afterMarkdowns:["Wow, eso es unha CHEA nun único comando. Creamos unha nova rama local chamada `foo`, descargamos os commits do master do remoto a esta rama `foo`, e logo mesturamos esa rama á nosa rama actual `bar`. ¡¡¡Supera os 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["OK: para rematar, alcanza o estado do obxectivo. Vase necesitar descargar algúns commits, crear algunhas ramas novas, e mesturar esas ramas xunto con outras, pero non debería levar demasiados domandos :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git pull 的參數","","現在你已經知道關於 `git fetch` 以及 `git push` 的*任何參數*，但是我們還可以再聊聊 `git pull`:)","","那是因為 `git pull` 到目前為止*的確*只是表示 fetch 之後再 merge 所 fetch 的 commit，你可以把它想成，當使用 `git fetch` 時使用*一樣*的參數，之後再從 fetch 下來的 commit *所放置*的位置做 merge。","","這同樣也適用於當你指定相當複雜的參數，讓我們來看一些例子："]}},{type:"ModalAlert",options:{markdowns:["對於 git 來說，有一些意義一樣的指令：","","`git pull  origin foo` 相當於：","","`git fetch origin foo; git merge o/foo`","","而且...","","`git pull  origin bar~1:bugFix` 相當於：","","`git fetch origin bar~1:bugFix; git merge bugFix`","","看吧？`git pull` 真的就只是表示 fetch 跟 merge 的一個簡化後的指令，而且 `git pull` 所根據的是這些 commit 要放置的位置（在 fetch 的時候所指定的`destination`）。","","讓我們來看一個例子："]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我們在 fetch 的時候有指定`位置`的話，跟之前一樣，fetch 所做的事情沒有變，但是我們會 merge 我們剛剛所 fetch 的該`位置`的commit。"],afterMarkdowns:["看吧！指定位置為 `master`，跟平常一樣，我們下載了 commit 並且放到 `o/master` 上，接著，我們會 merge `o/master` 到我們現在的位置，*不管*我們現在所 checkout 的位置在哪裡。"],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["他是不是也可以同時指定 source 以及 destination？你說對了啦！讓我們來看一下："],afterMarkdowns:["哇！這個指令強而有力，我們在 local 建立了一個新的 `foo` branch，下載了 remote 的 `master` 的 commit，並且放到 local 的 `foo` branch，之後 merge `foo` branch 到我們目前所 checkout 的 `bar` branch。這實在是太超過了！！！"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，達到視覺化目標的要求，你需要下載一些 commit，建立一些新的 branch，並且 merge 這些 branch 到其他的 branch 上面，這個關卡不需要打太多的指令:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git pull 参数","","既然你已经掌握关于 `git fetch` 和 `git push` 参数的方方面面了，关于 git pull 几乎没有什么可以讲的了 :)","","因为 git pull 到头来就是 fetch 后跟 merge 的缩写。你可以理解为用同样的参数执行 git fetch，然后再 merge 你所抓取到的提交记录。","","还可以和其它更复杂的参数一起使用, 来看一些例子:"]}},{type:"ModalAlert",options:{markdowns:["以下命令在 Git 中是等效的:","","`git pull origin foo` 相当于：","","`git fetch origin foo; git merge o/foo`","","还有...","","`git pull origin bar~1:bugFix` 相当于：","","`git fetch origin bar~1:bugFix; git merge bugFix`","","看到了? git pull 实际上就是 fetch + merge 的缩写, git pull 唯一关注的是提交最终合并到哪里（也就是为 git fetch 所提供的 destination 参数）","","一起来看个例子吧："]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我们指定要抓取的 place，所有的事情都会跟之前一样发生，只是增加了 merge 操作"],afterMarkdowns:["看到了吧! 通过指定 `master` 我们更新了 `o/master`。然后将 `o/master` merge 到我们的检出位置，**无论**我们当前检出的位置是哪。"],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["pull 也可以用 source:destination 吗? 当然喽, 看看吧:"],afterMarkdowns:[" 哇, 这个命令做的事情真多。它先在本地创建了一个叫 `foo` 的分支，从远程仓库中的 master 分支中下载提交记录，并合并到 `foo`，然后再 merge 到我们的当前检出的分支 `bar` 上。操作够多的吧？！"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["好啦, 该结束了！请按照目标窗口中的状态进行操作。你需要下载一些提交，然后创建一些新分支，再合并这些分支到其它分支, 但这用不了几个命令 :P "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Optionen für Git Pull","","Da du jetzt so ziemlich *alles* kennst, was es an Optionen für `git fetch` und `git push` gibt, ist kaum noch etwas zu Optionen für `git pull` zu sagen. :)","","Das liegt daran, dass `git pull` letztendlich *wirklich* nur eine Abkürzuung für `fetch` gefolgt von einem `merge` von was auch immer gerade heruntergeladen wurde, ist. Denk es dir als ein `git fetch` mit denselben Optionen und einem anschließenden Merge.","","Das trifft sogar zu, wenn du völlig abgedrehte Optionen verwendest. Ein paar Beispiele:"]}},{type:"ModalAlert",options:{markdowns:["Hier sind einige gleichwertige Befehle in Git:","","`git pull origin foo` ist dasselbe wie:","","`git fetch origin foo; git merge o/foo`","","Und ...","","`git pull origin bar~1:bugFix` ist dasselbe wie:","","`git fetch origin bar~1:bugFix; git merge bugFix`","",'Siehst du? `git pull` ist wirklich nur eine Abkürzung von `fetch` + `merge` und es interessiert sich nur dafür wo die Commits hin sollen (die "Ziel"-Option, die es beim `fetch` auswertet).',"","Schauen wir uns eine Demonstration an:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn wir den Ort, auf den das `fetch` ausgeführt werden soll, angeben, passiert alles so wie beim `git fetch` aber es wird direkt danach auch ein Merge ausgeführt."],afterMarkdowns:["Siehst du? Da wir `master` angegeben haben sind die Commits in `o/master` heruntergeladen worden. Danach wurde `o/master` gemerged, egal was gerade ausgecheckt war."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Funktioniert das auch wenn man Quelle und Ziel angibt? Aber sicher! Das sehen wir hier:"],afterMarkdowns:["Wow, das ist eine Menge in einem einzelnen Befehl. Wir haben lokal einen neuen Branch namens `foo` erstellt, die Commits vom `master` des Servers dorthin heruntergeladen und ihn danach in unseren aktuell ausgecheckten Commit `bar` gemerged."],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, um's zu Ende zu bringen versuch das Ziel aus der Zielgrafik zu erreichen. Du wirst einige Commits herunterladen, einige neue Branches anlegen und diese in andere mergen müssen, aber das sollte nicht allzuviele Befehle benötigen. :P"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Аргументы для pull","","Аргументы для `git pull` не покажутся вам чем-то новым, учитывая, что вы уже знакомы с аргументами для `git fetch` и `git push` :)","","Как мы помним, `git pull` сначала выполняет `git fetch`, а следом сразу `git merge` с той веткой, в которую притянулись обновления командой fetch. Другими словами, это все равно, что выполнить git fetch с теми же аргументами, которые вы указали для pull, а затем выполнить git merge с веткой, указанной в аргументе <приемник> команды pull.","","Рассмотрим на примерах:"]}},{type:"ModalAlert",options:{markdowns:["Вот примеры абсолютно эквивалентных команд в git:","","`git pull  origin foo` это то же самое, что сделать:","","`git fetch origin foo; git merge o/foo`","","И еще...","","`git pull  origin bar~1:bugFix` то же, что:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Как видно, git pull используется, чтобы за одну команду выполнить fetch + merge.","","Посмотрим демонстрацию:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Здесь сначала выполнится fetch с аргументом указанным к pull, а merge выполняется с теми изменениями, которые будут скачаны командой fetch"],afterMarkdowns:["Как видно, мы указали `master`, поэтому как обычно все обновления притянулись на ветку `o/master`. Затем мы слили (merge) обновленную ветку `o/master` с веткой, на которой мы находимся."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Будет ли это работать, если указать `<источник>` и `<приемник>`? Проверим:"],afterMarkdowns:["Ого, сколько всего выполнено всего одной командой!. Мы создали новую ветку `foo` в локальном репозитории, скачали на неё изменения с ветки `master` удаленного репозитория, а затем слили эту ветку с веткой `bar`, на которой мы находились!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["В последнем упражнении необходимо привести дерево к аналогичному в примере. Нужно скачать несколько изменений, создать несколько новых веток, слить одни ветки в другие, но постарайтесь использовать как можно меньше команд. Удачи! :P"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git pull의 인자들","","`git fetch`와 `git push`의 인자들을 다 알았기 때문에, git pull에서 더 설명할게 사실 없습니다 :)","","git pull은 결국 merge가 따라오는 fetch 그 자체이기 때문이죠. git fetch와 *같은* 인자를 사용하며 커밋들을 *어디*로 merge되는지 알면 됩니다.","","정신나간것마냥-복잡한 인자들도 기본적으로는 똑같다고 보면 됩니다. 예시를 살펴봅시다:"]}},{type:"ModalAlert",options:{markdowns:["git에서 다음 명령어들은 같습니다:","","`git pull  origin foo` 는 다음과 같습니다:","","`git fetch origin foo; git merge o/foo`","","그리고...","","`git pull  origin bar~1:bugFix` 는 다음과 같습니다:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","보이죠? git pull은 그저 fetch + merge의 축약형일 뿐이에요, 그리고 git pull은 커밋들이 도착하는곳을 신경씁니다(fetch를 하며 지정된 `destination`인자의 위치로 merge가 수행됩니다).","","직접 확인해봅시다:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["place를 지정하면, 이전에 fecth를 하던때와 완전히 똑같이 진행되고 fetch한것을 병합합니다."],afterMarkdowns:["보이죠! `master`를 지정해서 우리는 `o/master`에 평소처럼 커밋들을 내려받았습니다. 그다음 우리가 있는 곳으로 `o/master`를 병합했습니다 현재 체크아웃된 브랜치와 *상관없이* 말이죠"],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["source 와 destination 모두 적용될까요? 추측해보세요! 확인해봅시다:"],afterMarkdowns:["이야, 명령어 하나에 많은게 일어나고있습니다. 로컬에 이름이 `foo`인 새 브랜치를 만들고, 원격 저장소의 master에서 이 브랜치 `foo`에 커밋들을 내려받습니다, 그후 그 브랜치를 우리가 현재 체크아웃한 브랜치 `bar`로 병합했습니다. 오오오!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["좋습니다 마무리하기 위해, 골 시각화와 같은 상태로 만들어 주세요. 커밋을 내려받고, 새 브랜치를 만들고, 그 브랜치들을 다른 브랜치로 병합해야 될겁니다, 하지만 명령어는 그렇게 많이 안써도 되죠 :P"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Аргументи git pull","","Зараз, коли ти знаєш майже *все*, що можна знати про аргументи для `git fetch` і `git push`, дійсно майже нема чого розповідати про git pull :)","","Це тому, що git pull, зрештою, *просто* зручне об'єднання fetch і merge. Його можна собі уявляти як git fetch і git merge виконані з *однаковими* аргументами.","","Це працює незалежно від складності переданих аргументів. Розгляньмо:"]}},{type:"ModalAlert",options:{markdowns:["Ось декілька еквівалентних команд git:","","`git pull origin foo` це те саме, що й:","","`git fetch origin foo; git merge o/foo`","","А...","","`git pull origin bar~1:bugFix` -- це аналог:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Бачиш? git pull -- це просто зручне скорочення для fetch + merge. А все, про що дбає git pull -- це те, куди в результаті підуть коміти (а про це йому говорить аргумент `destination`).","","Розгляньмо демонстрацію:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Якщо ми вказуємо місце призначення для fetch, fetch виконується як звичайно, але мердж відбудеться з тим, що ми щойно стягнули"],afterMarkdowns:["От бачиш, вказавши `master`, ми звантажили коміти в `o/master`, як завжди. Потім змерджили `o/master` в поточну гілку."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Чи це працює також при вказанні `source` і `destination`? І не сумнівайся! Ось приклад:"],afterMarkdowns:["Ого, стільки роботи однією командою. Ми створили локальну гілку з назвою `foo`, звантажили в неї коміти з віддаленого master, а потім змерджили `foo` в поточну гілку `bar`!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Добре, для завершення спробуй досягти стану репозиторію, показаного на візуалізації. Треба буде звантажити відсутні коміти, створити нові гілки і змерджити їх в інші гілки, але не надто великою кількістю команд! :P"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tham số git pull","","Giờ thì bạn đã biết gần như là *tất cả* về tham số của `git fetch` và `git push`, thế thì hầu như chẳng còn gì mới cho git pull cả :)","","Đó và vì nói cho cùng thì git pull *về thực tế* cũng chỉ là lệnh tắt cho tìm nạp và sau đó là hợp nhất những gì vừa mới được nạp. Bạn có thể coi nó như là chạy lệnh git fetch với *cùng* tham số được chỉ định và sau đó hợp nhất các commit vào *nơi* được chỉ định.","","Điều này được áp dụng kể cả khi bạn sử dụng những tham số phức tạp đến độ điên rồ. Hãy xem qua một vài ví dụ:"]}},{type:"ModalAlert",options:{markdowns:["Dưới đây là một vài câu lệnh tương đồng nhau trong git:","","`git pull  origin foo` tương đương với:","","`git fetch origin foo; git merge o/foo`","","Và...","","`git pull  origin bar~1:bugFix` tương đương với:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Thấy chứ? git pull thực ra chỉ là lệnh tắt cho fetch + merge, và tất cả những gì git pull quan tâm là nơi mà các commit sẽ tới (tham số `đích` mà nó diễn giải được trong quá trình nạp).","","Hãy xem qua một bản giới thiệu:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nếu ta chỉ định vị trí để nạp, mọi thứ diễn ra như với git fetch nhưng giờ đây có thêm một bước đó là ta hợp nhất những gì mà ta đã nạp"],afterMarkdowns:["Thấy chứ! Bằng cách chỉ định nhánh `master` ta tải các commit xuống nhánh `o/master` như thường lệ. Sau đó hợp nhất nhánh `o/master` vào nhánh cục bộ mà ta đang đứng, nhánh mà *không phải* nhánh cục bộ `master`. Nhờ vậy mà ta có thể chạy cùng một lệnh git pull(với cùng tham số) nhiều lần ở những vị trí khác nhau để áp dụng cùng cập nhật lên các nhánh khác nhau."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Điều này có hoạt động với đích và nguồn không? Đoán đúng rồi đấy! Cùng xem thử nào:"],afterMarkdowns:["Wao, quá NHIỀU trong một câu lệnh. Ta tạo ra một nhánh cục bộ là `foo`, tải commit xuống từ nhánh từ xa master xuống nhánh `foo` đó, và sau đó hợp nhất commit vào nhánh `bar` mà ta đang đứng. Đủ thứ luôn!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Được rồi, để kết thúc khóa học, hãy đạt đến mục tiêu được mô tả. Bạn sẽ cần tải xuống vài commit, tạo ra vài nhánh mới, và hợp nhất những nhánh đó sang những nhánh khác, nhưng mà đừng dùng nhiều lệnh quá nhé :P"]}}]}}}},{}],142:[function(e,t,o){o.level={disabledMap:{"git fakeTeamwork":!0},goalTreeString:'{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git commit;git commit;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git Pushin'",zh_CN:"Git Push",zh_TW:"git push",es_AR:"git push",es_ES:"git push",pt_BR:"Git Push",gl:"Git Push",de_DE:"Git Push",ja:"Git Push",fr_FR:"Git push",ru_RU:"Git push",uk:"Git push",ko:"Git push",vi:"Git push"},hint:{en_US:"Remember you have to clone before you can push!",zh_CN:"推送之前需要先克隆",zh_TW:"push 之前你需要先 clone",es_AR:"¡Acordate que tenés que clonar antes de pushear!",es_ES:"¡Recuerda que tienes que clonar antes de hacer push!",pt_BR:"Lembre-se de clonar antes de fazer o push!",de_DE:"Denk dran, dass du einen Clone brauchst bevor du Pushen kannst!",ja:"Pushができるようになるには、まずリポジトリをcloneする必要があるのをお忘れなく",fr_FR:"Rappelez-vous que vous devez cloner avant de pouvoir faire un push !",ru_RU:"Помните, что прежде чем push-ить вам нужно склонировать репозиторий!",uk:"Пам’ятай, що перед тим як щось push-нути потрібно склонувати репозиторій!",ko:"push를 하기전에 clone을 먼저해야 된다는것을 기억하세요!",vi:"Nhớ rằng bạn phải clone trước khi push!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, so I've fetched changes from remote and incorporated them into my work locally. That's great and all... but how do I share _my_ awesome work with everyone else?","","Well, the way to upload shared work is the opposite of downloading shared work. And what's the opposite of `git pull`? `git push`!","","`git push` is responsible for uploading _your_ changes to a specified remote and updating that remote to incorporate your new commits. Once `git push` completes, all your friends can then download  your work from the remote.","",'You can think of `git push` as a command to "publish" your work. It has a bunch of subtleties that we will get into shortly, but let\'s start with baby steps...',"","*note -- the behavior of `git push` with no arguments varies depending on one of git's settings called `push.default`. The default value for this setting depends on the version of git you're using, but we are going to use the `upstream` value in our lessons. This isn't a huge deal, but it's worth checking your settings before pushing in your own projects.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have some changes that the remote does not have. Let's upload them!"],afterMarkdowns:["There we go -- the remote received commit `C2`, the branch `master` on the remote was updated to point at `C2`, and our *own* reflection of the remote (`o/master`) was updated as well. Everything is in sync!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply share two new commits with the remote. Strap in though, because these lessons are about to get a lot harder!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, donc j'ai rapatrié les changements du dépôt distant et je les ai incorporés dans mon travail local. C'est super... mais comment je partage _mon_ travail génial avec tous les autres ?","","En fait, la manière d'envoyer du travail à partager fonctionne à l'opposé du téléchargement de travail partagé. Et quel est l'opposé de `git pull` (tire) ? `git push` (pousse) !","","`git push` est responsable de l'envoi de _vos_ changements vers un dépôt distant et de la mise à jour de ce dépôt pour incorporer vos commits. Une fois `git push` terminé, tous vos amis peuvent télécharger votre travail depuis le dépôt distant.","",'Vous pouvez voir `git push` comme une commande qui "publie" votre travail. Elle présente quelques subtilités que nous allons voir rapidement, mais commençons par le B.A.-BA...',"","*Note : le comportement de `git push` avec aucun argument varie avec l'un des réglages de configuration de git nommé `push.default`. La valeur par défaut de ce réglage dépend de la version de git utilisée, mais nous allons utiliser la valeur `upstream` dans nos leçons. Cela ne change pas grand chose pour ces exercices, mais vérifiez tout de même vos réglages avant de pusher vos propres projets.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous avons fait ici quelques changements que le dépôt distant n'a pas. Envoyons-les !"],afterMarkdowns:["Et voilà : le dépôt distant a reçu le commit `C2`, la branche `master` a été mise à jour sur `C2`, et votre *propre* représentation de la branche distante (`o/master`) a aussi été mise à jour. Tout est synchronisé !"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, partagez simplement deux nouveaux commits avec le dépôt distant. Accrochez-vous, parce que ces leçons vont devenir beaucoup plus difficiles !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## git push","","Ok, entonces ya bajé los cambios de un repositorio remoto y los integré en mi trabajo localmente. Esto es genial y todo... pero ¿cómo comparto _mis_ cambios con el resto?","","Bueno, la forma de subir el trabajo compartido es la opuesta a cómo descargar trabajo. Y ¿qué es lo opuesto a `git pull`? ¡`git push`!","","`git push` es el responsable de subir _tus_ cambios a un remoto específico y de actualizar ese remoto para incluir tus nuevos commits. Cuando `git push` termina, todos tus amigos pueden descargar tu trabajo del remoto.","",'Podés pensar en `git push` como un comando para "publicar" tu trabajo. Tiene un par de sutilezas con las que vamos a meternos pronto, pero empecemos de a poco.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos algunos cambios que nuestro remoto no tiene. ¡Subámoslos!"],afterMarkdowns:["Ahí está: el remoto recibió el commit `C2`, la rama `master` de ese remoto se actualizó para apuntar a `C2`, y nuestro *propio* reflejo del remoto (`o/master`) también fue actualizado. ¡Todo está en sincronía!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente compartí dos nuevos commits con el remoto. Igual, no te confíes, ¡ya se van a complicar las lecciones!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## git push","","Entendido, entonces ya descargué los cambios de un repositorio remoto y los integré en mi trabajo localmente. Esto suena muy bien... pero ¿cómo comparto _mis_ cambios con el resto?","","Bueno, la forma de subir el trabajo compartido es la opuesta a cómo descargar trabajo. Y ¿qué es lo opuesto a `git pull`? ¡`git push`!","","`git push` es el responsable de subir _tus_ cambios a un remoto específico y de actualizar ese remoto para incluir tus nuevos commits. Cuando `git push` termina, todos tus amigos pueden descargar tu trabajo del remoto.","",'Puedes imaginarte `git push` como un comando para "publicar" tu trabajo. Tiene un par de sutilezas con las que vamos a meternos pronto, pero empecemos poco a poco.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí tenemos algunos cambios que nuestro remoto no tiene. ¡Subámoslos!"],afterMarkdowns:["Ahí está: el remoto recibió el commit `C2`, la rama `master` de ese remoto se actualizó para apuntar a `C2`, y nuestro *propio* reflejo del remoto (`o/master`) también fue actualizado. ¡Todo está en sincronía!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente comparte dos nuevos commits con el remoto. Igualmente, no te confíes, ¡las lecciones van a empezar a complicarse!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, então vimos como baixar mudanças do repositório remoto e incorporá-las à árvore local. Isso é ótimo e tal... mas como eu faço para compartilhar o _meu_ trabalho sensacional com as outras pessoas?","","Bem, a forma de subir trabalho a ser compartilhado é a oposta daquela de baixar trabalho que foi compartilhado. E qual o oposto de `git pull` (puxar)? É `git push` (empurrar)!","","O `git push` é responsável por subir as _suas_ mudanças para um repositório remoto especificado, e atualizar esse remoto para incorporar seus novos commits. Uma vez que o `git push` se completa, todos os seus amigos podem baixar o seu trabalho do repositório remoto.","",'Você pode pensar no `git push` como um comando para "publicar" o seu trabalho. Ele tem uma série de nuances que vamos abordar em breve, mas comecemos com passos curtos...',"","*Nota -- o comportamento de `git push` sem argumentos varia dependendo da configuração `push.default` do Git. O valor padrão para essa configuração depende da versão do Git que você estiver usando, mas vamos assumir o valor `upstream` nestas lições. Isso não é um grande problema, mas vale a pena verificar suas configurações antes de fazer push nos seus próprios projetos.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui temos algumas mudanças que o repositório remoto não contém. Vamos subi-las!"],afterMarkdowns:["Aqui vamos nós -- o repositório remoto recebeu o commit `C2`, o ramo `master` no repositório remoto foi atualizado para apontar para `C2`, e a *nossa* reflexão do remoto (`o/master`) foi atualizada também. Está tudo sincronizado!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente compartilhe dois novos commits com o repositório remoto. No entanto, segure-se no seu assento, pois estas lições estão prestes a ficar mais difíceis!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, entón xa baixamos os cambios dun repositorio remoto e integrámolos na árbore local. Esto está xenial... pero ¿cómo comparto o _meu_ sensacional traballo cas outras persoas?","","Ben, a forma de subir traballo para ser compartido é a oposta daquela de baixar o traballo que foi compartido. E ¿qué é o oposto a  `git pull` (tirar)? ¡É `git push` (empuxar)!","","`git push` é o responsable de subilos _teus_ cambios para un repositorio remoto especificado, e atualizar ese repositorio remoto para incorporar os seus novos commits. Unha vez que `git push` complétase, todos os teus amigos poderán baixar o teu traballo do repositorio remoto.","",'Podes pensar en `git push` como un comando para "publicar" o teu traballo. O comando ten unha serie de detalles cos que imos xogar logo, pero comezemos con pasos curtos...',"","*Nota -- o comportamento de `git push` sen argumentos varía dependendo da configuración `push.default` de Git. O valor para esa configuración depende da versión de Git que esteas empregando, pero imos asumir o valor `upstream` nestas leccións. Eso non é un gran problema, pero paga a pena verificalas súas configuracións antes de facer push nos teus propios proxectos.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aquí temos algúns cambios que o repositorio remoto non contén. ¡Imos subilas!"],afterMarkdowns:["Ahí imos -- o repositorio remoto recibiu o commit `C2`, a rama `master` do repositorio remoto foi actualizado para apuntar para `C2`, e o *noso* reflexo do remoto (`o/master`) foi atualizado tamén. ¡Está todo sincronizado!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, comparte dous novos commits co repositorio remoto. Igual, non te confíes, ¡xa se  complicará nas seguintes leccións!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","ok，現在我已經從 remote 下載了一些更新，並且把它們 merge 到我的 local 上面的 branch，這聽起來實在太讚了...，但是我要如何分享_我_所做的更新給其它人呢？","","喔，其實上傳並且分享更新跟下載更新並且 merge 是相反的兩件事情，那什麼是 `git pull` 的相反呢？ 那就是 `git push`！","","`git push` 負責上傳_你的_ commit 到特定 remote 上面並且做出相對應的更新，只要做完了 `git push`，所有你的朋友都可以從 remote 上面下載你所送出去的 commit。","",'你可以把 `git push` 當作是一個"發佈"你的工作進度的指令，還有一些我們即將要講到的細節，但是先讓我們從一些簡單的步驟開始。']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡我們有了一些 remote 所沒有的 commit。讓我們來上傳它們吧！"],afterMarkdowns:["我說的沒錯吧！remote 收到了 commit `C2`，同時在 remote 上的 `master` branch 也一起更新並且指向 `C2`，同時我們*自己的* `o/master` 也一併更新了！"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只要上傳兩個新的 commit 給 remote，不要太得意忘形喔！因為這些課程將會愈來愈難！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","OK，我们已经学过了如何从远程仓库获取更新并合并到本地的分支当中。这非常棒……但是我如何与大家分享**我的**成果呢？","","嗯，上传自己分享内容与下载他人的分享刚好相反，那与 `git pull` 相反的命令是什么呢？`git push`！","","`git push` 负责将**你的**变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦 `git push` 完成, 你的朋友们就可以从这个远程仓库下载你分享的成果了！","","你可以将 `git push` 想象成发布你成果的命令。它有许多应用技巧，稍后我们会了解到，但是咱们还是先从基础的开始吧……","","*注意 —— `git push` 不带任何参数时的行为与 Git 的一个名为 `push.default` 的配置有关。它的默认值取决于你正使用的 Git 的版本，但是在教程中我们使用的是 `upstream`。","这没什么太大的影响，但是在你的项目中进行推送之前，最好检查一下这个配置。*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里我们准备了一些远程仓库中没有的提交记录, 咱们开始先上传吧!"],afterMarkdowns:["过去了, 远程仓库接收了 `C2`，远程仓库中的 `master` 分支也被更新到指向 `C2` 了，我们的远程分支 (o/master) 也同样被更新了。所有的分支都同步了！"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成本关，需要向远程仓库分享两个提交记录。拿出十二分精神吧，后面的课程还会更难哦！"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Nun hab ich also Änderungen vom entfernten Server geholt und in meine lokale Arbeit integriert. Das ist schön und gut ... aber wie teile ich _meine_ Wahnsinns-Entwicklungen mit allen anderen?","","Naja, das Hochladen von Zeug ist das Gegenteil zum Herunterladen von Zeug. Und was ist das Gegenteil von `git pull`? Genau, `git push`!","","`git push` ist dafür verantwortlich _deine_ Änderungen zu einem bestimmten entfernten Server hochzuladen und dort zu integrieren. Sobald das `git push` durch ist, können alle deine Freunde diese Änderungen zu sich herunterladen.","",'Du kannst dir `git push` als einen Befehl zum "Veröffentlichen" deiner Arbeit vorstellen. Es gibt da noch ein paar Feinheiten, aber lass uns mal mit kleinen Schritten anfangen.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein paar Änderungen, die auf dem Remote noch fehlen. Und hoch damit!"],afterMarkdowns:["Na bitte -- das Remote hat den Commit `C2` bekommen, der `master` auf dem Remote ist entsprechend aktualisiert worden und unsere *eigene* Abbildung des `master` auf dem Remote namens `o/master` wurde auch aktualisiert. Alles im Lot!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur zwei neue Commits auf das Remote bringen. Aber stell dich schon mal darauf ein, dass die nächsten Level anspruchsvoller werden!"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Хорошо, мы скачали изменения с удалённого репозитория и включили их в наши локальные наработки. Всё это замечательно, но как нам поделиться _своими_ наработками и изменениями с другими участниками проекта?","","Способ, которым мы воспользуемся, является противоположным тому способу, которым мы пользовались ранее для скачивания наработок (`git pull`). Этот способ - использование команды `git push`!","","Команда `git push` отвечает за загрузку _ваших_ изменений в указанный удалённый репозиторий, а также включение ваших коммитов в состав удалённого репозитория. По окончании работы команды `git push` все ваши друзья смогут скачать себе все сделанные вами наработки.","",'Вы можете рассматривать команду `git push` как "публикацию" своей работы. Эта команда скрывает в себе множество тонкостей и нюансов, с которыми мы познакомимся в ближайшее время, а пока что давайте начнём с малого...',"","*замечание - поведение команды `git push` без аргументов варьируется в зависимости от значения `push.default`, указанной в настройках git-а. Значение по умолчанию зависит от версии git, которую вы используете, однако в наших уроках мы будем использовать значение `upstream`. Лучше всегда проверять эту опцию прежде чем push-ить ваши настоящие проекты.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Здесь у нас имеются изменения, которых нет в удалённом репозитории. Давайте же закачаем их туда!"],afterMarkdowns:["Вот так - удалённый репозиторий получил новый коммит `C2`, ветка `master` на удалённом репозитории теперь указывает на `C2`, и наше *собственное* локальное отображение удалённого репозитория (`o/master`) изменилось соответственно. Всё синхронизировалось!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Чтобы выполнить задачу этого упражнения, просто поделитесь своими двумя новыми коммитами с удалённым репозиторием. Соберитесь, потому что все последующие уроки будут намного сложнее предыдущих!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","さて、私たちは変更をリモートからダウンロードしてきて、ローカルの自分の作業に取り込むことができるようになりました。それは素晴らしいことですが、例えば他の誰かに_自分の_作業を共有する場合はどうすればいいでしょう？","","そうですね、共有する作業をアップロードする方法は作業をダウンロードするものと対照的です。`git pull`の反対はなんでしょう？ `git push`です！","","`git push`は_あなたの_変更をリモートに対話的にアップロードし、リモートにあなたの新しい変更を取り込みます。`git push`が完了すれば、全ての友人たちがあなたの作業をリモートからダウンロードすることができます。","","`git push`は、あなたの作業を「公開する」コマンドと考えることができます。このコマンドは微妙な点をいくつか持っていますが、とりあえずは初歩から始めてみましょう。。。","","*注：引数なしの`git push`の挙動は、`push.default`と呼ばれるgitの設定値によって異なります。この設定のデフォルト値は、使用しているgitのバージョンに依存しますが、私たちのレッスンでは`upstream`という値を使用します。これはあまり大きな問題ではありませんが、あなたのプロジェクトにプッシュする前にあなたのgitの設定を確認する価値はあるでしょう。*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["ここにリモートにはないいくつかの変更点があります。これをアップロードしてみましょう！"],afterMarkdowns:["さて、いってみましょう -- リモートはコミット`C2`を受け取り、リモート上の`master`ブランチは`C2`の位置に更新され、私たち*自身*のリモートブランチ(`o/master`)も良い具合に更新されました。全てが同期されました！"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルを終えるには、単純に二つの新しいコミットをリモートに共有してください。けれども覚悟しておいてください。なぜなら、レッスンは少々難しいことを取り扱っているからです。"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Гаразд, я витягнув останні зміни та інтегрував їх до своїх локальних напрацювань. Все добре... але як мені поділится _своїми_ змінами з рештою учасників?","","Отже, надсилання данних є, по-суті, протилежним звантажуванню данних. А який антонім до `git pull` (притягнути)? `git push` (відштовхнути)!","","`git push` використовується для надсилання _локальних_ змін на вказаний віддалений репозиторій; ця команда оновлює віддалений репозиторій, інтегруючи нові коміти. Після виконання `git push` всі твої друзі зможуть звантажити твої напрацювання з віддаленого сховища.","",'Ти можеш вважати, що `git push` "публікує" твої напрацювання. В цієї команди є кілька особливостей, які ми скоро розглянемо, але почнімо з початку...',"","*Зауваження: поведінка `git push` без параметрів різниться в залежності від налаштування git з назвою `push.default`. Значення за замовчуванням цього налаштування залежить від версії твого git, але в наших уроках ми будемо вважати що воно дорівнює `upstream`. Це не вкрай важливо, але буде корисно перевірити це налаштування перед тим як пушити свій проект.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ось ми маємо деякі зміни яких нема в віддаленому сховищі. Надішлімо їх!"],afterMarkdowns:["Ось, маєш -- віддалене сховище отримало  `C2`, гілку `master` на ньому було оновлено й тепер вона посилається на `C2`, а наше *власне* відображення віддаленого репо  (`o/master`) було також оновлено. Все синхронізовано!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень, просто надішли два коміти у віддалений репозиторій. Але прищібнись, скоро наші уроки стануть значно важчими!"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","좋아요, 원격 저장소에서의 변화들을 가져오는 방법도 알고 로컬의 내 작업과 합칠줄도 알게되었습니다. 아주 좋아요.. 좋은데 이제 _나의_ 훌륭한 작업을 다른 사람들과 공유하려면 어떻게 해야되는거죠?","","공유된 작업을 내려받는것의 반대는 작업을 업로드해 공유하는것입니다. 그렇다면 `git pull` 당기기의 반대는? `git push` 미는겁니다!","","`git push`는 _여러분의_변경을 정한 원격저장소에 업로드하고 그 원격 저장소가 여러분의 새 커밋들을 합치고 갱신하게 합니다. `git push`가 끝나고 나면, 여러분의 친구들은 원격저장소에서 여러분의 작업을 내려받을수 있게됩니다.","",'여러분은 `git push`를 작업을 "공개"하는 과정이라고 생각해도 될것입니다. 곧 알아볼 중요한 세부 요소들이 잔뜩 있지만, 일단은 아기 걸음으로 시작해봅시다...',"","*노트 -- `git push`를 매개변수 없이 사용하는 디폴트 행동은 `push.default`라 불리는 git의 설정에 따라 결정 됩니다. 이 설정의 기본값은 여러분이 사용하는 git 버전에 따라 다릅니다만, 우리 강의에서는 `upstream`을 값으로 사용합니다. 대단한것은 아니지만, 여러분이 프로젝트를 push하기전에 한번쯤 확인해볼 가치가 있습니다.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 원격저장소에는 없는 변경이 있습니다. 이것들을 업로드 해 봅시다!"],afterMarkdowns:["자 됬습니다 -- 원격 저장소가 커밋 `C2`를 받았고, 원격 저장소의 브랜치 `master`가 `C2`라는 지점까지 갱신 되었습니다. 그리고 원격 저장소의 반영인 *우리의* 원격 브랜치 (`o/master`)또한 잘 갱신 되었습니다. 모든게 동기화되어 있습니다!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 마치기 위해, 두개의 새 커밋을 원격 저장소에 공유해봅시다. 마음의 준비를 단단히 하세요, 이제부터 강의들이 훨씬 어려워질거니까요!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Được rồi, ta đã biết cách nạp thay đổi từ kho chứa từ xa và kết hợp chúng vào các nhánh cục bộ. Khá là tuyệt rồi... nhưng nếu tôi muốn chia sẻ tác phẩm tuyệt vời _của tôi_ với mọi người khác thì sao?","","Chà, cách tải lên thì phải ngược với tải xuống rồi. Vậy thì đối nghịch của `git pull`(kéo) là gì? `git push`(đẩy)!","","`git push` có trách nhiệm tải lên thay đổi _của bạn_ vào nhánh từ xa được chỉ định và cập nhật nhánh đó để kết hợp với commit đẩy lên của bạn. Một khi lệnh `git push` hoàn thành, tất cả bạn bè của bạn có thể tải xuống thay đổi của nhánh từ xa đó đó.","",'Bạn có thể xem `git push` là câu lệnh để "xuất bản" thành quả công việc của bạn. Lệnh này có nhiều tính năng tinh tế mà ta sẽ tìm hiểu nhanh thôi, nhưng giờ hãy cứ bắt đầu với từng bước nhỏ đã...',"","*lưu ý --`git push` mà không có tham số hành xử tùy biến phụ thuộc vào cài đặt của git là `push.default`. Giá trị mặc định cho cài đặt này phụ thuộc vào phiên bản git mà bạn đang sử dụng, còn ở bài học của chúng ta thì ta sẽ sử dụng giá trị `upstream` (ngược dòng). Bây giờ thì đó chưa phải là vấn đề gì lớn, nhưng chúng tôi khuyến nghị bạn kiểm tra cài đặt của mình trước khi đẩy lên dự án của bạn.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ở đây ta có một vài thay đổi mà kho chứa từ xa không có. Hãy tải chúng lên!"],afterMarkdowns:["Đó -- kho chứa từ xa đã nhận được commit `C2`, nhánh `master` ở kho chứa từ xa đã được cập nhật lên `C2`, và phản chiếu nhánh từ xa *của ta* (`o/master`) cũng được cập nhật luôn. Mọi thứ đã đồng bộ!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, đơn giản là hãy chia sẻ 2 commit mới với kho chứa từ xa. Chuẩn bị tinh thần nhé, vì các bài học sẽ khó dần lên nhiều đấy!"]}}]}}}},{}],143:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C2","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C3","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"C0","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin master;git push origin foo",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"C0","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',disabledMap:{"git checkout":!0},name:{en_US:"Git push arguments",zh_CN:"Git push 的参数",zh_TW:"git push 的參數",es_AR:"Parámetros de git push",es_ES:"Parámetros de git push",pt_BR:"Parâmetros do git push",gl:"Parámetros de git push",de_DE:"Optionen für Git Push",ja:"Git pushの引数",fr_FR:"Arguments de git push",ru_RU:"Аргументы git push",ko:"git push의 인자들",uk:"Аргументи git push",vi:"Tham số git push"},hint:{en_US:'You can always look at the last slide of the dialog with "objective"',zh_CN:"你可以利用“objective”来阅读对话窗口的最后一页",zh_TW:'你可以利用 "objective" 來閱讀對話視窗的最後一頁',es_AR:'Siempre podés ver el último mensaje tipeando "objective"',es_ES:'Siempre puedes ver el último mensaje escribiendo "objective"',pt_BR:'Você sempre pode rever o último slide com o comando "objective"',gl:'Ti sempre podes desfacer último mensaxe escribindo "objective"',de_DE:'Du kannst dir die Zielsetzung des Levels immer wieder mit "objective" anzeigen lassen',ja:'ダイアログの最後のスライドを参照するには"objective"を実行',fr_FR:'Vous pouvez toujours regarder le dernier slide des dialogues en tapant "objective".',ru_RU:'Вы всегда можете ознакомиться с последним слайдом, воспользовавшись "objective".',ko:'대화창의 마지막 슬라이드를 "objective"로 다시 볼 수 있습니다.',uk:'Завжди можна подивитися останній слайд діалогу за допомогою "objective"',vi:'Bạn có thể sử dụng "objective" để đọc trang cuối của cửa sổ hộp thoại'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push arguments","","Great! Now that you know about remote tracking branches we can start to uncover some of the mystery behind how git push, fetch, and pull work. We're going to tackle one command at a time but the concepts between them are very similar.","",'First we\'ll look at `git push`. You learned in the remote tracking lesson that git figured out the remote *and* the branch to push to by looking at the properties of the currently checked out branch (the remote that it "tracks"). This is the behavior with no arguments specified, but git push can optionally take arguments in the form of:',"","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["What is a `<place>` parameter you say? We'll dive into the specifics soon, but first an example. Issuing the command:","","`git push origin master`","","translates to this in English:","",'*Go to the branch named "master" in my repository, grab all the commits, and then go to the branch "master" on the remote named "origin". Place whatever commits are missing on that branch and then tell me when you\'re done.*',"",'By specifying `master` as the "place" argument, we told git where the commits will *come from* and where the commits *will go*. It\'s essentially the "place" or "location" to synchronize between the two repositories.',"","Keep in mind that since we told git everything it needs to know (by specifying both arguments), it totally ignores where we are checked out!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see an example of specifying the arguments. Note the location where we are checked out in this example."],afterMarkdowns:["There we go! `master` got updated on the remote since we specified those arguments."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if we hadn't specified the arguments? What would happen?"],afterMarkdowns:["The command fails (as you can see), since `HEAD` is not checked out on a remote-tracking branch."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, for this level let's update both `foo` and `master` on the remote. The twist is that `git checkout` is disabled for this level!","","*Note: The remote branches are labeled with `o/` prefixes because the full `origin/` label does not fit in our UI. Don't worry ","about this... simply use `origin` as the name of the remote like normal.*"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les arguments de push","","Bien ! Maintenant que vous connaissez le suivi des branches, nous pouvons fouiller ce qui se cache derrière le fonctionnement de push, fetch, et pull. Nous allons aborder une commande à la fois, mais elles sont très similaires.","","En premier lieu regardons `git push`. Vous avez appris dans la leçon sur le suivi des branches distantes que git détermine le dépôt distant *et* la branche à envoyer en regardant les propriétés de la branche courante (c'est à dire la branche distante que cette dernière \"suit\" -- track). C'est le comportement rencontré quand aucun argument n'est spécifié, mais git push accepte aussi des arguments de la forme :","","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["Qu'est ce que ce paramètre `<place>` ? Avant de passer à l'explication, voyons d'abord un exemple. La commande suivante :","","`git push origin master`","","peut se traduire en français par :","",'*Va dans la branche "master" de mon dépôt, récupère tous les commits, et ensuite va dans la branche distante "master" sur le dépôt nommé "origin". Envoie tous les commits qui lui manquent sur cette branche distante puis préviens-moi quand c\'est terminé.*',"","En spécifiant `master` comme argument `<place>`, nous avons dit à git *d'où* les commits venaient et où ils *allaient*. C'est en fait \"l'emplacement\" à synchroniser entre les deux dépôts.","","Gardez à l'esprit que nous avons dit à git tout ce dont il a besoin pour opérer (en précisant les deux arguments), il n'a donc absolument pas besoin de savoir quelle est la branche courante !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons un exemple d'arguments. Notez bien où se trouve `HEAD` dans cet exemple."],afterMarkdowns:["Voilà ! `master` a été mise à jour puisque nous avons spécifié ces arguments."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Et si nous n'avions pas mis d'arguments ? Que ce serait-il passé ?"],afterMarkdowns:["La commande échoue (comme vous pouvez le voir), car `HEAD` ne se trouve pas sur une branche configurée pour suivre une branche distante."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, pour ce niveau mettez à jour `foo` et `master` sur le dépôt distant. La difficulté est que `git checkout` est désactivée pour ce niveau !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de push","","¡Genial! Ahora que sabés acerca de las ramas que trackean remotos podemos empezar a desvelar algo del misterio detrás de git push, fetch y pull. Vamos a atacar de a un comando a la vez, pero los conceptos entre ellos son muy similares.","",'Veamos primero `git push`. Ya aprendiste en la lección sobre ramas remotas que git determinó el remoto *y* la rama a la que pushear mirando las propiedades de la rama actual (el remoto al que "trackea"). Este es el comportamiento default para cuando no se especifican parámetros, pero git push toma, opcionalmente, parámetros de la forma:',"","`git push <remoto> <lugar>`","",""]}},{type:"ModalAlert",options:{markdowns:["¿Qué será este parámetro `<lugar>`, te preguntarás? Ya vamos a entrar en detalle, pero primero un ejemplo. Correr el comando:","","`git push origin master`","","se traduce así al español:","",'*Andá a la rama llamada "master" en mi repositorio, agarrá todos los commits, y después andá a la rama "master" del remoto llamado "origin". Aplicá ahí todos los commits que falten, y avisame cuando termines.*',"",'Especificando `master` como el parámetro "lugar", le dijimos a git de dónde traer los commits, y a dónde mandarlos. Es, básicamente, el "lugar" o "ubicación" que sincronizar entre ambos repositorios.',"","Tené en cuenta que, como le dijimos a git todo lo que necesitaba saber (especificando ambos parámetros), ¡ignora totalmente dónde estamos parados en este momento¡"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos un ejemplo especificando los parámetros. Notá en dónde estamos parados en este ejemplo."],afterMarkdowns:["¡Ahí está! Se actualizó `master` en el remoto, porque especificamos esos parámetros."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Y si no especificabamos los parámetros? ¿Qué hubiera pasado?"],afterMarkdowns:["El comando falla (como podés ver), porque `HEAD` no está sobre ninguna rama que trackee algún remoto."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok. Para este nivel, actualicemos tanto `foo` como `master` en el remoto. El tema está en que ¡tenemos deshabilitado `git checkout` en este nivel!"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de push","","¡Genial! Ahora que has aprendido sobre las ramas que trackean remotos podemos empezar a desvelar algo del misterio detrás de git push, fetch y pull. Vamos a atacar un comando cada vez, pero los conceptos entre ellos son muy similares.","",'Veamos primero `git push`. Ya aprendiste en la lección sobre ramas remotas que git determinó el remoto *y* la rama a la que pushear mirando las propiedades de la rama actual (el remoto al que "trackea"). Este es el comportamiento por defecto para cuando no se especifican parámetros, pero git push toma, opcionalmente, parámetros de la forma:',"","`git push <remoto> <lugar>`","",""]}},{type:"ModalAlert",options:{markdowns:["¿Qué será este parámetro `<lugar>`, te preguntarás? Vamos a entrar en detalle, pero primero un ejemplo. Ejecutar el comando:","","`git push origin master`","","se traduce así al español:","",'*Vete a la rama llamada "master" en mi repositorio, coge todos los commits, y después vete a la rama "master" del remoto llamado "origin". Copia ahí todos los commits que falten, y avísame cuando termines.*',"",'Especificando `master` como el parámetro "lugar", le dijimos a git de dónde traer los commits, y a dónde mandarlos. Es, básicamente, el "lugar" o "ubicación" que sincronizar entre ambos repositorios.',"","Ten en cuenta que, como le dijimos a git todo lo que necesitaba saber (especificando ambos parámetros), ¡ignora totalmente dónde estamos parados en este momento¡"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos un ejemplo especificando los parámetros. Date cuenta dónde estamos parados en este ejemplo."],afterMarkdowns:["¡Ahí está! Se actualizó `master` en el remoto, porque especificamos esos parámetros."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Y si no especificabamos los parámetros? ¿Qué hubiera pasado?"],afterMarkdowns:["El comando falla (como puedes ver), porque `HEAD` no está sobre ninguna rama que apunte a algún remoto."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Perfecto. Para este nivel, actualicemos tanto `foo` como `master` en el remoto. El tema está en que ¡tenemos deshabilitado `git checkout` en este nivel!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parâmetros do push","","Ótimo! Agora que você sabe sobre remote tracking de ramos, podemos começar a revelar um pouco do mistério por trás de como o push, o fetch e o pull funcionam. Vamos lidar com um comando por vez, mas os conceitos são bastante similares.","",'Primeiro, vamos abordar o `git push`. Você aprendeu na lição sobre remote tracking que o Git descobria o repositório remoto *e* o ramo correspondente onde fazer o push olhando nas propriedades do ramo que está atualmente em checkout (verificando o ramo remoto que ele "segue"). Este é o comportamento quando nenhum parâmetro é especificado, mas o git push pode opcionalmente receber parâmetros na seguinte forma:',"","`git push <repositório remoto> <lugar>`","",""]}},{type:"ModalAlert",options:{markdowns:["Você deve estar se perguntando: o que é esse parâmetro `<lugar>`? Vamos discutir as especifidades em breve, mas vejamos primeiro um exemplo. Executar o comando:","","`git push origin master`","","pode ser traduzido para o seguinte em Português:","",'*Vá ao ramo chamado "master" no meu repositório local, pegue todos os commits, então vá ao ramo "master" no repositório remoto chamado "origin". Coloque quaisquer commits que estiverem faltando nesse ramo, e então me diga quando estiver pronto.*',"",'Especificando `master` como parâmetro "lugar", dizemos ao Git de onde os commits *vão vir* e para onde os commits *irão*. É essencialmente o "lugar" onde sincronizar entre os dois repositórios.',"","Tenha em mente que já que contamos ao Git tudo que ele precisa saber (especificando ambos os parâmetros), ele ignora totalmente o checkout atual!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos um exemplo especificando os argumentos. Preste atenção no commit que sofreu checkout neste exemplo."],afterMarkdowns:["Aqui vamos nós! O `master` foi atualizado no repositório remoto, já que especificamos os parâmetros."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E se eu não especificasse parâmetros? O que aconteceria?"],afterMarkdowns:["O comando falha (como você pode ver), já que o `HEAD` não havia sofrido checkout para um ramo com propriedade de remote-tracking definida."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, neste nível vamos atualizar tanto o `foo` como o `master` no repositório remoto. Porém desabilitamos o comando `git checkout` para dificultar um pouco a tarefa!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de push","","¡Xenial! Agora que sabes acerca das ramas que seguen remotos, podemos empezas a desvelar algo do misterio detrás do git push, fetch e pull. Imos atacar cun só comando dunha vez, pero os conceptos entre eles son moi semellantes.","","Vexamos primeiro `git push`. Xa aprendiches na lección sobre as ramas remotas que git determina o remoto *e* a rama á que empurrar mirando as propiedades da rama actual (o remoto ó que seguir). Este é o comportamento por defecto para  cando non se especifican parámetros, pero git push toma, opcionalmente, parámetros da forma:","","`git push <remoto> <lugar>`","",""]}},{type:"ModalAlert",options:{markdowns:["¿Qué será este parámetro `<lugar>`, fixécheste esa pregunta? Xa imos entrar en detalle, pero primeiro un exemplo. Executa o comando:","","`git push origin master`","","tradúcese así ó galego:","",'*Vai á rama chamada "master" no meu repositorio, colle tódolos commits, e despois vai á rama "master" do remoto chamado "origin". Aplica ahí tódolos commits que falten, e avísame cando remates.*',"",'Indicando `master` como o parámetro "lugar", dixémoslle a git ónde traer os commits, e ónde mandalos. É básicamente, o "lugar" ou "ubicación" que sincroniza entre ámbolos dous repositorios.',"","Ten en conta que, como lle dixemos a git todo o que precisaba saber (indicando ambos parámetros), ¡ignora totalmente ónde andabamos neste momento!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos un exemplo especificando os parámetros. Nota ónde ficamos parados neste exemplo."],afterMarkdowns:["¡Ahí o tes! Actualizouse `master` no remoto, porque especificamos eses parámetros."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿E se non especificáramos os parámetros? ¿Que ocorrería?"],afterMarkdowns:["O comando falla (como podes ver), xa que `HEAD` non está sobre ningunha rama que siga algún remoto."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok. Para este nivel, actualiza tanto `foo` como `master` no remoto. O tema está en que ¡temos deshabilitado `git checkout` neste nivel!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## push 的參數","","太好了！現在你已經明白了 remote tracking，我們可以開始聊 git push、fetch 以及 pull 的一些有趣的地方，我們一次會講解一個指令，但是它們之間的概念是很類似的。","","首先我們來看一下 `git push`，你已經在 remote tracking 的課程中學習到 git 是根據目前 checkout 的 branch 所 track 的 remote branch 來做 push，這是在沒有任何的參數的情況下的預設動作，但是 git push 允許我們可以加上一些參數：","","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["`<place>` 這個參數表示什麼? 我們等一下會提到細節，但是先來看一個例子，執行以下的指令：","","`git push origin master`","","將這段解釋成中文：","",'*先到我的 repo 中的 "master" branch，抓下所有的 commit，然後到叫作 "origin" 的 remote 的 "master" branch，檢查 remote 的 commit 有沒有跟我的 repo 一致，如果沒有，就更新。*',"",'將 `master` 當作 "place" 這個參數，我們告訴 git 這些 commit 是*從哪裡來的*，而且它們要*往哪裡去*。對於要同步兩個 repo， "place" 或者是 "location" 是非常重要的。',"","要記住喔，因為我們告訴 git 它所要知道的（有兩個參數），因此它才不會管你現在所 checkout 的 branch！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來看一個有加上參數的例子，在這個例子中，要特別注意到我們所 checkout 的位置。"],afterMarkdowns:["我說的沒錯吧！因為我們加上了參數，所以在 remote 上的 `master` branch 更新了。"],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["假如我們沒有特別指令參數會發生什麼事情？"],afterMarkdowns:["指令會失敗（就像你看到的），因為 `HEAD` 並沒有指向一個有 track remote branch 的 branch 上面阿。"],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["好的，在這個關卡中，我們要更新在 remote 上的 `foo` 以及 `master` branch，比較遺憾的是 `git checkout` 在這個關卡中是不被允許的喔！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push 的参数","","很好! 既然你知道了远程跟踪分支，我们可以开始揭开 git push、fetch 和 pull 的神秘面纱了。我们会逐个介绍这几个命令，它们在理念上是非常相似的。","","首先来看 `git push`。在远程跟踪课程中，你已经学到了 Git 是通过当前检出分支的属性来确定远程仓库以及要 push 的目的地的。这是未指定参数时的行为，我们可以为 push 指定参数，语法是：","","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["`<place>` 参数是什么意思呢？我们稍后会深入其中的细节, 先看看例子, 这个命令是:","","`git push origin master`","","把这个命令翻译过来就是：","","*切到本地仓库中的“master”分支，获取所有的提交，再到远程仓库“origin”中找到“master”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。*","","我们通过“place”参数来告诉 Git 提交记录来自于 master, 要推送到远程仓库中的 master。它实际就是要同步的两个仓库的位置。","","需要注意的是，因为我们通过指定参数告诉了 Git 所有它需要的信息, 所以它就忽略了我们所检出的分支的属性！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我们看看指定参数的例子。注意下我们当前检出的位置。"],afterMarkdowns:["好了! 通过指定参数, 远程仓库中的 `master` 分支得到了更新。"],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果不指定参数会发生什么呢?"],afterMarkdowns:["命令失败了（正如你看到的，什么也没有发生）! 因为我们所检出的 HEAD 没有跟踪任何分支。"],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["本关我们要更新远程仓库中的 `foo` 和 `master`, 但是 `git checkout` 被禁用了！","","*注意：远程分支使用 `o/` 开头是因为 `origin/` 对于 UI 来说太长了。不用太在意这个，直接用 `origin` 作为远程仓库的名称就可以了。*",""]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push-Optionen","","Großartig! Da du dich jetzt mit Remote Tracking Branches auskennst können wir anfangen, die Geheimnisse hinter `git push`, `fetch` und `pull` zu ergründen. Wir werden uns einen Befehl nach dem anderen vornehmen, aber die Funktionsweisen sind sich sehr ähnlich.","",'Zunächst schauen wir uns `git push` an. Du hast im Level über Remote Tracking schon mitbekommen, dass Git den Remote Server *und* den Branch herausbekommt, indem es sich die Eigenschaften des aktuell ausgecheckten Branches ansieht (in denen das Remote steht, das der Branch "trackt"). Das ist das Verhalten bei keiner Angabe weiterer Optionen -- du kannst bei `git push` aber auch folgende setzen:',"","`git push <Remote> <Ort>`","",""]}},{type:"ModalAlert",options:{markdowns:['Was "Ort" sein soll fragst du? Das klären wir später genau, schauen wir uns zunächst ein Beispiel an:',"","`git push origin master`","","Das bedeutet im Klartext:","",'"Geh zum Branch namens `master` in meinem Repository, nimm all seine Commits, dann geh zum Branch `master` auf dem Remote namens `origin`. Leg da alles Commits ab die fehlen und sag mir wenn du fertig bist."',"",'Dadurch, dass wir `master` als "Ort" angegeben haben, weiß Git *woher* die Commits kommen und *wohin* sie sollen. Es ist im Grunde der Name der Orte, die zwischen zwei Repositorys synchronisiert werden soll.',"","Dadurch, dass wir Git alles explizit gesagt haben, was es für die Operation wissen muss (durch Angabe von Remote und Ort) ist es vollkommen egal, was gerade ausgecheckt ist."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns noch ein Beispiel an. Beachte was in diesem Fall gerade ausgecheckt ist."],afterMarkdowns:["Da haben wir's! `master` wurde auf dem Remote aktualisiert, weil wir beide Optionen angegeben haben."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was wäre passiert, wenn wir keine Optionen benutzt hätten?"],afterMarkdowns:["Der Befehl schlägt fehlt, da `HEAD` nicht auf einem Branch steht, der ein Remote trackt."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, in diesem Level lass uns sowohl `foo` als auch `master` auf dem Remote aktualisieren. Um's spannender zu machen, ist `git checkout` in diesem Level deaktiviert."]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Аргументы команды Push","","Отлично! Теперь, когда вы знаете, как следить за удалёнными ветками, мы можем начать изучение того, что скрыто под занавесом работы команд git push, fetch и pull. Мы будем рассматривать одну команду за другой, однако принципы у них очень схожи.","","Сперва взглянем на `git push`. В уроке, посвящённом слежению за удалённым репозиторием, вы узнали о том, что git находит удалённый репозиторий *и* ветку, в которую необходимо push-ить, благодаря свойствам текущей ветки, на которой мы находимся. Это так называемое поведение без аргументов, однако команда git push может быть также использована и с аргументами. Вид команды в данном случае:","","`git push <удалённый_репозиторий> <целевая_ветка>`","",""]}},{type:"ModalAlert",options:{markdowns:["Что за такой параметр `<целевая_ветка>`? Мы узнаем об этом через секунду, а пока что рассмотрим пример. Допустим, что мы выполняем такую команду:","","`git push origin master`","","дословный перевод с английского будет таким:","",'*Перейди в ветку с именем "master" в моём локальном репозитории, возьми все коммиты и затем перейди на ветку "master" на удалённом репозитории "origin.". На эту удалённую ветку скопируй все отсутствующие коммиты, которые есть у меня, и скажи, когда ты закончишь.*',"",'Указывая `master` в качестве аргумента "целевая_ветка", мы тем самым говорим git-у откуда будут *приходить* и *уходить* наши коммиты. Аргумент "целевая_ветка" или "местонахождение" - это синхронизация между двумя репозиториями.',"","Имейте в виду, что с тех пор, как мы сказали git-у всё, что ему необходимо (указав оба аргумента), ему - git-у - абсолютно всё равно, что вы зачекаутили до этого!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте взглянем на пример, в котором указаны оба этих аргумента. Обратите внимание на местоположение, в котором мы находимся после чекаута."],afterMarkdowns:["Вот так! Мы обновили `master` на удалённом репозитории, принудительно указав аргументы в push."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А что бы было, ели бы мы не указывали эти аргументы, при этом используя тот же алгоритм?"],afterMarkdowns:["Как вы видите, команда не выполнилась, так как `HEAD` потерялся и не находится на удалённо-отслеживаемой ветке."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Хорошо, для выполнения этого уровня давайте обновим обе ветки `foo` и `master` на удалённом репозитории. Фишка в том, что команда `git checkout` не доступна на этом уровне!","","*Замечание: Удалённые ветки помечены как `o/`, а не `origin/`. Дело в том, что полная метка не помещается на экране. Не волнуйтесь ","по этому поводу... просто используйте знакомый нам `origin` для обращения к удалённому репозиторию.*"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push의 인자들","","좋습니다! 여러분은 이제 원격 추적 브랜치도 알고 있기 때문에 이제 git push, fetch, pull이 어떻게 작동하는지에 관한 숨겨져있는 미스테리를 풀어나갈 준비가 되었습니다. 한번에 하나의 명령어를 알아보도록하겠는데 이것들이 가지고있는 컨셉은 아주 비슷해요.","",'먼저 `git push`입니다. 여러분은 push를 하면 git이 push를 할 대상으로 원격저장소, 브랜치를 현재 작업중인 브랜치에 설정된 속성("추적" 대상)을 통해 알아낸다는것을 이전 추적 레슨에서 배웠습니다. 이것은 인자를 넣지않고 실행할 때 일어나는것 입니다, 그런데 git push에 다음과 같은 형식으로 선택적으로 인자를 사용할수도 있습니다:',"","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["`<place>`인자가 무엇을 의미할것 같나요? 세부사항은 알아보기 전에 예시부터 봅시다. 다음 명령어를 보세요:","","`git push origin master`","","해석해 보면:","",'*내 저장소에 있는 "master"라는 이름의 브랜치로 가서 모든 커밋들을 수집합니다, 그다음 "origin"의 "master"브랜치로 가서 이 브랜치에 부족한 커밋들을 채워 넣고 완료 되면 알려줍니다.*',"",'`master`를 "place"인자로 지정해서 우리가 git에게 *어디서부터* 커밋이 오는지, 그리고 *어디로* 커밋이 가야하는지 알려줍니다. 두 저장소간에 동기화 작업을 할 "장소"를 지정해 주는것이라고 볼 수 있습니다.',"","git이 알아야 할 것은 다 알려줬기 때문에(두 인자를 모두 지정했죠), git은 현재 우리가 체크아웃한 브랜치는 무시하고 명령을 수행합니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["인자를 지정해주는 예제를 눈으로 직접 확인해 봅시다. 이 예제에서 우리가 체크아웃한 곳이 어디인지를 주의하며 봅시다."],afterMarkdowns:["됬네요! 지정해준 인자들에 의해 원격 저장소의 `master`가 갱신 되었습니다."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["인자를 지정하지 않으면 어떻게 될까요?"],afterMarkdowns:["명령이 실패하며(보시다시피), `HEAD`가 원격저장소를 추적하는 브랜치에 체크아웃 되있지 않기 때문이죠."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["좋습니다, 이번 레벨에서는 원격저장소의 `foo`, `master`브랜치 모두 갱신해봅시다. 이번 문제는 `git checkout`이 비활성화 되있다는 점이 특징이죠!","","*노트: 원격 브랜치들은 `o/`접두어로 분류되어 있습니다. `origin/`으로 생략없이 표현하면 UI에 안맞아서 이렇게 표현했어요. ","그래서... 원격저장소 이름은 원래처럼 `origin`으로 써주세요.*"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Аргумeнти git push","",'Чудово! А зараз, коли ти знаєш все про відслідковування віддалених гілок, ми можемо розглянути "магію", що відбувається при git push, fetch, і pull. Ми розглянемо лише окремі команди для розуміння загального принципу.',"",'Спочатку розгляньмо `git push`. З уроку про відслідковування віддалених гілок ми знаємо, що git визначає куди і в *яку* гілку робити push, дивлячись на локальну поточну гілку (і віддалену, за якою вона "слідкує"). Це поведінка `push` без аргументів, але git push може приймати необов\'язкові аргументи в форматі:',"","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["Ви спитаєте, що таке аргумент `<place>`? Ми скоро вдамося в детальні пояснення, але спочатку -- приклад. Виконання команди:","","`git push origin master`","","буквально перекладається як:","",'*Піди в гілку, що називається "master" в моєму репозиторії, візьми всі коміти, піди у віддалений "master", що називається "origin". Додай ті коміти, яких немає в цій гілці і надрукуй, що саме ти зробив.*',"",'Вказуючи `master` в якості аргумента "place", ми сказали git-у, *звідки* взяти коміти і *куди* їх додати. ("Place") - фактично точка синхронізації двох репозиторіїв.',"","Пам'ятайте, що оскільки ми надали git-у всю необхідну інформацію (вказавши обидва аргументи), не має значення яка гілка є зараз поточною!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Розгляньмо приклад використання аргументів. Зверніть увагу на поточну гілку в цьому прикладі."],afterMarkdowns:["Ось так! `master` у віддаленому репозиторії оновився, оскільки ми вказали його в аргументах."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А якщо не вказувати аргументів? Що станеться?"],afterMarkdowns:["Команда поверне помилку (як можна побачити), оскільки локальний `HEAD` не співпадає з відповідною віддаленою гілкою."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Гаразд, на цьому рівні оновімо віддалені гілки `foo` і `master`. Для ускладнення ми заборонимо використовувати `git checkout`!","","*Пам'ятай, віддалені гілки позначені префіксом `o/`, оскільки повний префікс `origin/` не влазить в наш UI. Але не хвилюйся ","про це... ти можеш використовувати `origin` посилаючись на віддалений репозиторій.*"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tham số đẩy","","Tuyệt! Bạn đã biết đến theo dõi từ xa, giờ thì ta có thể tìm hiểu sâu hơn về cách hoạt động của đẩy( `git push`), tìm nạp(`git fetch`) và kéo(`git pull`). Ta sẽ giải quyết từng câu lệnh một nhưng về căn bản chúng khá là giống nhau.","",'Trước hết hãy xem qua `git push`. Trong bài học về theo dõi từ xa bạn đã biết rằng git sử dụng thuộc tính(nhánh từ xa mà nó "theo dõi") của nhánh hiện tại để xác định kho và nhánh từ xa để đẩy. Git làm việc này mà không cần tham số chỉ định, nhưng lệnh git push có thể thêm tham số dưới dạng sau:',"","`git push <tên kho từ xa> <vị trí>`","",""]}},{type:"ModalAlert",options:{markdowns:["Tham số `<vị trí>` là gì vậy? Chúng ta sẽ đi sâu vào chi tiết sau sau, hãy xem ví dụ trước. Đưa ra câu lệnh:","","`git push origin master`","","được dịch lại là:","",'*Chuyển sang nhánh "master" trong kho lưu trữ cục bộ, nhận tất cả các commit và tìm nhánh "master" trong kho chứa từ xa tên là "origin". Thêm tất cả các commit không có trong nhánh đó và báo cho tôi biết khi nào hoàn tất.*',"",'Bằng cách chỉ định `master` trong tham số "vị trí",ta báo với git nơi mà commit *xuất phát* và nơi chúng *sẽ đến*. Về căn bản nó là "địa điểm" để đồng bộ hóa 2 kho chứa.',"","Lưu ý rằng ta ta đã thông báo cho gi tất cả thông tin cần thiết( thông qua chỉ định 2 tham số), nó sẽ không quan tâm nhánh mà ta đang đứng!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy xem xét một ví dụ về việc xác định tham số. Lưu ý vị trí nhánh mà ta đang đứng."],afterMarkdowns:["Được rồi! Bằng cách chỉ định các tham số, nhánh `master` trong kho lưu trữ từ xa đã được cập nhật."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Giả sử ta không chỉ định các tham số thì sao? Điều gì sẽ xảy ra?"],afterMarkdowns:["Lệnh thất bại (như bạn có thể thấy, không có gì xảy ra)! Bởi vì `HEAD` không trỏ đến nhánh nào có theo dõi từ xa."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Được rồi, trong cấp độ này hãy cập nhánh `foo` và `master` trên kho lưu trữ từ xa. Cái khó là ở cấp độ này lệnh `git checkout` đã bị vô hiệu hóa!","","*Chú ý: Các nhánh từ xa được đánh dấu bằng tiền tố `o/` bời vì UI của chúng tôi không chứa được hết `origin/`. Đừng lo ","về vấn đề này... đơn giản cứ dùng `origin` như bình thường thôi.*"]}}]}}}},{}],144:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C4","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C4","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C5","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C5","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C5":{"parents":["C2"],"id":"C5"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin master^:foo;git push origin foo:master",startTree:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C4","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git push arguments -- Expanded!",zh_CN:"Git push 参数 2",zh_TW:"git push 的參數，延伸討論！",es_AR:"¡Más! Parámetros de git push",es_ES:"¡Más! Parámetros de git push",pt_BR:"Parâmetros do git push -- expandido",gl:"Parámetros de git push -- ampliado",de_DE:"Optionen für Git Push -- noch mehr!",ja:"Git pushの引数 -- 拡張編!",fr_FR:"Arguments de git push -- toujours plus !",ru_RU:"Аргументы для push -- расширенная версия!",ko:"git push 인자 -- 확장판!",uk:"Розширені аргументи git push!",vi:"Tham số git push -- bản mở rộng!"},hint:{en_US:'Remember you can admit defeat and type in "show solution" :P',zh_CN:"如果你认输的话，可以通过“show solution”查看解决方案 :P",zh_TW:'如果你失敗了，可以利用 "show solution" 來找到解答:P',es_AR:'Recordá que podés admitir tu derrota y tipear "show solution" para ver la solución :P',es_ES:'Recuerda que puedes admitir tu derrota y escribir "show solution" para ver la solución :P',pt_BR:'Lembre-se que você pode admitir que foi derrotado e digitar "show solution" :P',gl:'Lembrate que podes admitir que fuches derrotado e escribir "show solution" para amosala solución :P',de_DE:'Vergiss nicht dass du aufgeben kannst, indem du "show solution" eingibst :P',ja:'降参して解説を見るには"show solution"を実行できるのをお忘れなく',fr_FR:'N\'oubliez pas que vous pouvez toujours déclarer forfait avec "show solution" :P',ru_RU:'Помните, Вы всегда можете признать своё поражение, набрав команду "show solution" (показать решение) :P',ko:'혹시 아세요? 패배를 인정하고 "show solution"을 입력할 수 있다는 걸요 :P',uk:'Пам\'ятай, ти завжди можеш визнати поразку і підглянути рішення командою "show solution" :P',vi:'Nhớ rằng, bạn có thể thừa nhận thất bại và gõ "show solution" :P'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` argument details","","Remember from the previous lesson that when we specified `master` as the place argument for git push, we specified both the *source* of where the commits would come from and the *destination* of where the commits would go.","","You might then be wondering -- what if we wanted the source and destination to be different? What if you wanted to push commits from the `foo` branch locally onto the `bar` branch on remote?","","Well unfortunately that's impossible in git... just kidding! Of course it's possible :)... git has tons and tons of flexibility (almost too much).","","Let's see how in the next slide..."]}},{type:"ModalAlert",options:{markdowns:["In order to specify both the source and the destination of `<place>`, simply join the two together with a colon:","","`git push origin <source>:<destination>`","","This is commonly referred to as a colon refspec. Refspec is just a fancy name for a location that git can figure out (like the branch `foo` or even just `HEAD~1`).","","Once you are specifying both the source and destination independently, you can get quite fancy and precise with remote commands. Let's see a demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember, `source` is any location that git will understand:"],afterMarkdowns:["Woah! That's a pretty trippy command but it makes sense -- git resolved `foo^` into a location, uploaded whatever commits that weren't present yet on the remote, and then updated destination."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if the destination you want to push doesn't exist? No problem! Just give a branch name and git will create the branch on the remote for you."],afterMarkdowns:["Sweet, that's pretty slick :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["For this level, try to get to the end goal state shown in the visualization, and remember the format of:","","`<source>:<destination>`"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## L'argument `<place>` dans le détail","","Rappelez-vous de notre dernière leçon : quand vous passiez `master` comme argument `<place>` à git push, cela spécifiait à la fois la *source* de provenance des commits et leur *destination*.","","Vous vous demandez peut-être donc : et si nous voulions avoir une source et une destination différentes ? Et si vous voulez envoyez des commits de la branche locale `foo` dans la branche distante `bar` ?","","Malheureusement ce n'est pas possible avec git... Mais non, je plaisante ! Bien sûr que c'est possible :)... git a des tonnes de flexibilité (presque trop).","","Voyons cela au prochain slide..."]}},{type:"ModalAlert",options:{markdowns:["Pour spécifier la source et la destination dans `<place>`, on les joint simplement par deux points :","","`git push origin <source>:<destination>`","",'On en parle souvent comme d\'un "refspec". Refspec est juste un nom exotique pour un emplacement que git peut résoudre (comme la branche `foo` ou juste `HEAD~1`)',"","Lorsque vous utilisez cette notation permettant de préciser la source et la destination indépendamment, vous pouvez produire des commandes à la fois très sophistiquées et très précises pour travailler avec les dépôts distants. Faisons une démo !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Rappelez-vous, `source` peut être n'importe quel emplacement que git peut résoudre :"],afterMarkdowns:["Woahou ! C'est une commande très alambiquée mais qui a du sens : git résoud `foo^` en un emplacement, envoie tous les commits qui n'étaient pas encore présents sur le dépôt distant, et met ensuite à jour la branche de destination."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Que se passe-t-il quand la destination du push n'existe pas encore ? Pas de problème ! Donnez simplement un nom de branche et git va créer la branche distante pour vous."],afterMarkdowns:["Cool, c'est habile :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour ce niveau, essayez d'atteindre l'état montré dans la fenêtre d'objectif, et souvenez-vous du format :","","`<source>:<destination>`"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Detalles sobre el parámetro `<lugar>`","","Acordate de la lección anterior que cuando especificamos `master` como el parámetro lugar de git push, especificamos tanto el *origen* del que sacar los commits como el *destino* al que enviarlos.","","Podrías estar preguntándote ¿Y si quisiéramos que el origen y el destino sean distintos? ¿Si quisieras pushear los commits de la rama local `foo` a la rama `bar` del remote?","","Bueno, lamentablemente eso no se puede hacer en git... ¡Bazinga! Claro que se puede :)... git es extremadísimamente flexible (casi casi que demasiado).","","Veamos cómo hacerlo a continuación..."]}},{type:"ModalAlert",options:{markdowns:["Para especificar tanto el origen como el destino de `<lugar>`, simplemente unilos usando un dos puntos:","","`git push origin <origen>:<destino>`","","Esto se lo suele llamar refspec con dos puntos. Refspec es simplemente un nombre cool para una ubicación que git puede entender (como la rama `foo`, o incluso `HEAD~1`)","","Una vez que especificás tanto el origen como el destino independientemente, podés ponerte bastante cómodo y preciso con los comandos remotos. ¡Veamos una demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Recordá: `origen` es cualquier ubicación que git pueda entender:"],afterMarkdowns:["¡Woow! Ese commando es bastante loco, pero tiene sentido: git resolvió `foo^` a una ubicación, subió cualquier commit de ahí que aún no estuviera en el remoto, y luego actualizó el destino."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Y qué hay si el destino al que querés pushear no existe? ¡No hay drama! Simplemente dale un nombre al branch y git se va a encargar de creártelo en el remoto."],afterMarkdowns:["Genial, simplemente fluye :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, tratá de llegar al objetivo final, y acordate del formato:","","`<origen>:<destino>`"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Detalles sobre el parámetro `<lugar>`","","Recuerda de la lección anterior que cuando especificamos `master` como el parámetro lugar de git push, especificamos tanto el *origen* del que sacar los commits como el *destino* al que enviarlos.","","Podrías estar preguntándote ¿Y si quisiéramos que el origen y el destino fuesen distintos? ¿Si quisieras hacer push de los commits de la rama local `foo` a la rama `bar` del remote?","","Bueno, lamentablemente eso no se puede hacer en git... ¡zasca! Claro que se puede :)... git es extremadamente flexible (casi casi que demasiado).","","Veamos cómo hacerlo a continuación..."]}},{type:"ModalAlert",options:{markdowns:["Para especificar tanto el origen como el destino de `<lugar>`, simplemente únelos usando el signo `dos puntos`:","","`git push origin <origen>:<destino>`","","A esto se le suele llamar refspec con dos puntos. Refspec es simplemente un nombre genial para una ubicación que git puede entender (como la rama `foo`, o incluso `HEAD~1`)","","Una vez que especificas tanto el origen como el destino independientemente, puedes ponerte bastante cómodo y preciso con los comandos remotos. ¡Veamos una demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Recuerda: `origen` es cualquier ubicación que git pueda entender:"],afterMarkdowns:["¡Vaya! Ese commando es bastante rompedor, pero tiene sentido: git resolvió `foo^` a una ubicación, subió cualquier commit de ahí que aún no estuviera en el remoto, y luego actualizó el destino."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Y qué ocurre si el destino al que quieres hacer push no existe? ¡Sin problema! Simplemente dale un nombre a la rama y git se va a encargar de creártelo en el remoto."],afterMarkdowns:["Genial, simplemente fluye :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, trata de llegar al objetivo final, y recuerda el formato:","","`<origen>:<destino>`"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Detalhes sobre `<lugar>`","","Lembra que na lição anterior especificamos `master` como o parâmetro lugar para o git push? Lá definimos tanto a *origem* de onde os commits viriam quanto o *destino* para onde os commits foram.","","Você pode estar se perguntando -- e se eu quisesse que a origem e o destino fossem diferentes? E se eu quisesse enviar commits do ramo local `foo` para o ramo remoto `bar`?","","Bem, infelizmente isso é impossível no Git... só brincando! Claro que é possível :)... o Git tem muita flexibilidade (até mais do que deveria).","","Veremos como fazê-lo no próximo slide..."]}},{type:"ModalAlert",options:{markdowns:["Para especificar tanto a origem como o destino do `<lugar>`, simplesmente juntamos os dois usando dois-pontos:","","`git push origin <origem>:<destino>`","",'Isso é geralmente chamado de "colon refspec" (especificação de referência com dois-pontos). Refspec é só um nome extravagante para um local que o Git consiga entender (como o ramo `foo` ou mesmo `HEAD~1`)',"","Uma vez que você está especificando tanto a origem como o destino independentemente, você pode ser bastante preciso nos comandos relacionados a repositórios remotos. Vejamos uma demonstração!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lembre-se, `origem` é qualquer lugar que o Git possa entender:"],afterMarkdowns:["Uau! Esse comando é bastante viajado, mas ele faz sentido -- o Git entendeu a referência `foo^`, enviou quaisquer commits que não estavam presentes no repositório remoto, e então atualizou o destino."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E se o destino para o qual você quiser fazer push não existir? Sem problemas! Dê um nome de ramo e o Git criará o ramo no repositório remoto para você."],afterMarkdowns:["Doce, isso é muito bom :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nível, tente chegar ao estado do objetivo mostrado na visualização, e lembre-se do formato:","","`<origem>:<destino>`"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Detalles sobre o parámetro `<lugar>`","","Lémbrate da lección anterior cando especificamos `master` como o parámetro lugar de git push, especificamos tanto a *orixe* do que sacar os commits como o *destino* ó que envialos.","","Poderías estar a preguntarte ¿E se quixéramos que a orixe  e o destino sexan distintos? ¿Se quixéramos empurrar os commits da  rama local `foo` á rama `bar` do remoto?","","Bueno, esto non se pode facer en git... ¡Caramboliñas! Claro que se pode :D. git é extremadísimamente flexibe (case case que de máis).","","Vexamos cómo facelo a continuación..."]}},{type:"ModalAlert",options:{markdowns:["Para especificar tanto a orixe como o destino de `<lugar>`, sinxelamente úneos empregando dous puntos:","","`git push origin <orixe>:<destino>`","","Esto pódeselle chamar refspec con dous puntos. Refspec é sinxelamente un nome cool para unha ubicación que git pode entender (como a rama `foo`, ou incluso `HEAD~1`)","","Unha vez que especificas a orixe e o destino independientemente, podes poñerte cómodo e preciso cos  comandos remotos. ¡Vexamos a demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lembra: `orixe` é calquera ubicación que git poida entender:"],afterMarkdowns:["¡Woow! Ese commando é unha tolemia, pero ten sentido: git resolveu `foo^` a unha ubicación, subiu calquera commit de ahí que aún non estivera no remoto, e logo actualizou o destino."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿E qué hai se o destino ó que queres empurrar non existise? ¡Non pasa nada! Sinxelamente dalle un nome á rama e git vaise encargar de crealo no remoto."],afterMarkdowns:["Xenial, sinxelamente tira para adiante"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, intenta chegar o obxectivo final, e lembrate do formato:","","`<orixe>:<destino>`"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` 這個參數的細節","","回想一下，我們在之前的課程中提到，當我們用 `git push` 並且把 `master`  當作 `<place>` 這個參數的時候，我們就相當於告訴 git 我們的所要更新的 commit 要*從哪裡來*（source） 並且要 *往哪裡去*（destination）。","","你可能會很好奇，當我們的 source 以及 destination 是不同的時候，應該怎麼做？當你想要 push `foo` branch 上面的 commit 到 remote 的 `bar` branch 的時候，應該怎麼做？","","很遺憾地，對於 git 來說這是不可能的...開玩笑的啦！當然是有可能的:)... git 有非常非常大的彈性（太超過了啦）。","","讓我們來看看下一頁..."]}},{type:"ModalAlert",options:{markdowns:["為了要指定 `<place>` 的 source 以及 destination，只要利用一個冒號將這兩個連在一起：","","`git push origin <source>:<destination>`","","這通常被稱為一個 colon （冒號） refspec，refspec 只是一個表示 location （位置） 的花俏的名稱，這個位置可以被 git 辨別（例如 `foo` branch 或是 `HEAD~1`）。","","一旦你單獨指定了 source 以及 destination，你可以看到花俏且準確的指令。讓我來來看一個例子！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["記住， `source` 表示任意可以被 git 辨識的位置："],afterMarkdowns:["哇!這實在是一個很花俏的指令但是確很合理，git 把 `foo^` 解讀成一個位置，並且 push 該位置的 commit 到目前 remote 的 master branch。"],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果你想要 push 的 destination 不存在怎麼辦？沒有問題！只要給一個 branch 的名稱，git 就會在 remote 幫你建立。"],afterMarkdowns:["太讚了，實在非常地簡單:D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["對於這個關卡，想辦法達到這個視覺化的目標，而且要記得格式：","","`<source>:<destination>`"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>`参数详解","","还记得之前课程说的吧，当为 git push 指定 place 参数为 `master` 时，我们同时指定了提交记录的来源和去向。","","你可能想问 —— 如果来源和去向分支的名称不同呢？比如你想把本地的 `foo` 分支推送到远程仓库中的 `bar` 分支。","","哎，很遗憾 Git 做不到…… 开个玩笑，别当真！当然是可以的啦 :) Git 拥有超强的灵活性（有点过于灵活了）","","接下来咱们看看是怎么做的……"]}},{type:"ModalAlert",options:{markdowns:["要同时为源和目的地指定 `<place>` 的话，只需要用冒号 `:` 将二者连起来就可以了：","","`git push origin <source>:<destination>`","","这个参数实际的值是个 refspec，“refspec” 是一个自造的词，意思是 Git 能识别的位置（比如分支 `foo` 或者 `HEAD~1`）","","一旦你指定了独立的来源和目的地，就可以组织出言简意赅的远程操作命令了，让我们看看演示！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["记住，`source` 可以是任何 Git 能识别的位置："],afterMarkdowns:["这是个另人困惑的命令，但是它确实是可以运行的 —— Git 将 `foo^` 解析为一个位置，上传所有未被包含到远程仓库里 `master` 分支中的提交记录。"],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果你要推送到的目的分支不存在会怎么样呢？没问题！Git 会在远程仓库中根据你提供的名称帮你创建这个分支！"],afterMarkdowns:["很赞吧！它是不是很聪明？！ :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["在这个关卡中，试着完成目标窗口展示的提交树，记住参数格式哟：","","`<source>:<destination>`"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Details zum `<Ort>`-Parameter","",'Du erinnerst dich von dem vorherigen Level, dass, als wir `master` als "Ort" beim `git push` angegeben haben, daraus sowohl die *Quelle* als auch das *Ziel* für die Operation abgeleitet wurden.',"","Daher fragst du dich vielleicht -- was wenn wir möchten, dass Quelle und Ziel anders sind? Was wenn du Commits von einem lokalen Branch `foo` in den Branch `bar` auf einem Server schieben möchtest?","","Tja, leider ist das in Git unmöglich .... ein Scherz! Natürlich ist das möglich. Git besitzt tonnenweise Flexibilität (eher zuviel, als zuwenig).","","Und gleich sehen wir, wie das geht ..."]}},{type:"ModalAlert",options:{markdowns:["Um sowohl Quelle als auch Ziel im `<Ort>`-Parameter anzugeben, gib sie einfach verbunden mit einem Doppelpunkt ein:","","`git push origin <Quelle>:<Ziel>`","","Das wird üblicherweise Refspec (Referenz-Spezifikation) genannt. Refspec ist nur ein anderer Name für einen Ort, mit dem Git etwas anfangen kann (wie mit Branch `foo` oder mit `HEAD~2`)","","Sobald du Quelle und Ziel separat angibt, kannst du flexibel und präzise entfernte Branches ansteuern. Hier eine Demo:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vergiss nicht, `Quelle` ist jeder mögliche Ort, mit dem Git etwas anfangen kann:"],afterMarkdowns:["Boah! Das ist ein ziemlich abgefahrener Befehl gewesen, aber er ist sinnvoll -- Git hat `foo^` zu einem Commit aufgelöst, alle Commits die bis zu diesem einschließich noch nicht auf dem Server waren hochgeladen und dann dort das Ziel aktualisiert."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was wäre wenn das Ziel des `push` gar nicht existiert? Kein Problem! Wenn das Ziel ein Branch-Name ist, wird Git den Branch auf dem Server einfach anlegen."],afterMarkdowns:["Schick, das ist ziemlich praktisch. :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen versuch den dargestellten Zielzustand zu erreichen und vergiss nicht das Format:","","`<Quelle>:<Ziel>`"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Подробности аргумента `<пункт назначения>`","","Помните, когда в прошлом занятии мы указали в качестве аргумента ветку `master` для команды git push, мы указали совместно *источник*, откуда будут приходить коммиты, и *пункт назначения (получатель)*, куда коммиты будут уходить.","","Однако, вы, наверное, задаётесь вопросом - а что, если я хочу, чтобы мои источник и получатель коммитов были различными? Что, если мы хотим запушить коммиты из локальной ветки `foo` в ветку `bar` на удалённом репозитории?","","К огромному сожалению, это невозможно сделать средствами git... Да ладно! Я пошутил! Конечно, это возможно :)... git сам по себе достаточно гибок (даже слишком).","","Мы увидим, как именно, на следующем слайде..."]}},{type:"ModalAlert",options:{markdowns:["В том случае, когда вам необходимо разделить источник и получатель аргумента `<пункт назначения>`, соедините их вместе, используя двоеточие:","","`git push origin <источник>:<получатель>`","","Обычно это называется `refspec`. Refspec — это всего лишь модное имя для определения местоположения, которое git может распознать (например, ветка `foo` или просто `HEAD~1`)","","Как только вы указали источник и получатель независимо друг от друга, вы можете довольно причудливо и точно использовать команды для работы с удалёнными ветками и репозиториями. Давайте взглянем на демонстрацию!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Помните, `источник` - всего лишь местоположение, которое git должен понять:"],afterMarkdowns:["Вау! Это довольно нетривиальная команда, однако она имеет смысл - git видит в `foo^` не что иное, как местоположение, закачивает все коммиты, которые не присутствуют на удалённом репозитории, и затем обновляет получателя."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А что если пункт назначения, в который вы хотите запушить, не существует? Без проблем! Укажите имя ветки, и git сам создаст ветку на удалённом репозитории для вас."],afterMarkdowns:["Класс! Довольно легко! :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Для выполнения данного уровня попытайтесь привести своё дерево к такому же виду, как на визуализации. И не забудьте о формате:","","`<источник>:<получатель>`"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` 인자에 대한 세부사항들","","","기억하세요? 이전 강의에서 우리는 `master`를 커밋의 근원이되는 *source*와 목적지가 되는 *destination*으로 명령어의 인자로 넣어줌으로써 지정해줬습니다.","여러분은 이런 생각이 들 수 있어요 -- 내가 source와 destination이 다르길 원하면 어떻게 해야되지? 로컬의 `foo` 브랜치에서 원격의 `bar` 브랜치로 커밋을 push하고 싶으면 어떻게 해야 되지?","","사실 git에서는 그게 불가능합니다... 네 농담이고! 당연 가능합니다 :)... git의 어마무시하게 유연합니다(지나칠정도로요).","","어떻게 하는지는 다음 슬라이드에서 확인해봅시다..."]}},{type:"ModalAlert",options:{markdowns:["source와 destination을 모두 지정하기 위해서는, 이렇게 간단히 두개를 콜론을 사이에 두고 표현하면 됩니다.","","`git push origin <source>:<destination>`","","이것을 일반적으로 colon refspec(콜론 참조스펙)이라고 부릅니다. 참조스펙은 그냥 \"git이 알아낼 수 있는 위치\"를 이름 붙여서 말하는거에요 (브랜치 'foo'라던가 HEAD~1 라던가)","","source와 destination을 따로 지정할 수 있게 되면서, 이제 원격관련 명령어를 좀 멋지고 정확히 사용할수 있게 되었어요. 데모를 봅시다!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["기억하세요, `source`는 git이 이해하는 아무 위치를 말합니다.:"],afterMarkdowns:["워 뭔가 잘 안쓸것 같은 명령이지만 잘 됩니다 -- git은 `foo^`의 위치를 알아내서 원격 저장소에 아직 반영되지 않은 커밋들을 업로드하고 destination 브랜치를 갱신했습니다."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["만약 여러분이 push하고 싶은 destination(목적지)가 없으면 어떻게하죠? 아무 문제 없어요! git이 만들 새 브랜치 이름을 지어주면 git이 원격 저장소에 새 브랜치를 만들어 줄거에요."],afterMarkdowns:["좋네요, 번지르르 삐까뻔쩍 :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["이번 레벨에서는, goal 시각화에 나오는 것처럼 만들어 주세요 인자의 형식은 다음과 같다는걸 기억하세요:","","`<source>:<destination>`"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Детальніше про аргумент `<place>`","","З попереднього уроку нам відомо, що коли ми вказуємо `master` в якості аргумента place для git push, ми задаємо і гілку, *з якої* брати нові коміти, і гілку *до якої* їх буде перенесено.","","Тут ти можеш задуматись, а чи можуть гілки, звідки беремо, і куди переносимо, бути різними? Що, коли потрібно коміти з локальної гілки `foo` перенести у віддалену гілку `bar`?","","Нажаль в git це неможливо... жартую! Звісно, що можливо :)... git просто неймовірно гнучкий (іноді аж занадто).","","Подивімося як це робиться..."]}},{type:"ModalAlert",options:{markdowns:["Для того, щоб в одному аргументі `<place>` вказати і місце звідки і куди, треба їх просто розділити двокрапкою:","","`git push origin <source>:<destination>`","",'Такий запис називають "colon refspec". Тут refspec - це просто зручна назва місця, яке git може ідентифікувати (наприклад, гілка `foo` чи просто `HEAD~1`)',"","Можливість вказати два різних місця дає велику свободу і гнучкість в роботі з віддаленим репозиторієм. Подивімось демонстрацію!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Пам'ятай, `source` -- це будь-яка назва місця, зрозуміла гіту:"],afterMarkdowns:["Овва! Це доволі незвична команда, але тут все має сенс -- git, знаючи куди вказує `foo^`, завантажив на віддалену сторону ще відсутні там коміти і оновив місце призначення."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["А що, коли вказаного місця призначення не існує? Нема проблем! Просто вкажи назву гілки і гіт створить її на віддаленому сервері."],afterMarkdowns:["Спритно, еге-ж? :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["На цьому рівні спробуй досягти стану ропозиторію, показаного у візуалізації і пам'ятай про формат запису з двокрапкою:","","`<source>:<destination>`"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Chi tiết về tham số `<vị trí>`","","Nhớ lại học trước, khi chỉ định tham số `<vị trí>` là `master` cho lệnh `git push`, ta cũng đã chỉ định nguồn và đích cho các commit.","","Có thể bạn sẽ thắng mắc -- Nếu như ta muốn nguồn và đích khác đi thì sao? Nếu như ta muốn đẩy commit từ nhánh cục bộ `foo` lên nhánh từ xa `bar` thì sao?","","Chà đáng tiếc là điều này là bất khả thi tron git... đùa thôi! Tất nhiên là làm được chứ :)... git có nhiều và rất nhiều lựa chọn linh động(có lẽ là quá nhiều)","","Hãy xem cách nó hoạt động ..."]}},{type:"ModalAlert",options:{markdowns:["Để chỉ định `<vị trí>` cho cả nguồn và đích, chỉ cần sử dụng dấu hai chấm `:` để kết nối cả hai:","","`git push origin <nguồn>:<đích>`","",'Giá trị thực của tham số này là một refspec, "refspec" là một từ tự tạo, nghĩa là một vị trí được Git nhận ra (chẳng hạn như nhánh `foo` hoặc` HEAD ~ 1`).',"","Một khi bạn đã chỉ định các nguồn và đích độc lập, bạn có thể thao tác với kho chứa từ xa một cách khá thú vị và chính xác, hãy xem bản demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nhớ rằng, `nguồn` là bất kỳ vị trí nào mà git hiểu:"],afterMarkdowns:["Wao! Lệnh này khá phức tạp, nhưng mà hợp lý -- git diễn giải `foo^` thành một vị trí, tải lên tất cả các commit từ đó trở về trước mà chưa có trên nhánh đích rồi cập nhật nó."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nếu như đích đến mà bạn muốn không tồn tại thì sao? Chẳng sao cả! Đơn giản hãy gõ tên nhánh và git sẽ tạo nhánh đó trên kho chứa từ xa cho bạn."],afterMarkdowns:["Tuyệt vời, thấy git thú vị không :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ở cấp độ này, hãy hoàn thành mục tiêu được mô tả, và hãy nhớ cấu trúc:","","`<nguồn>:<đích>`"]}}]}}}},{}],145:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3A%5B%22master%22%5D%7D%2C%22side1%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22side1%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22side2%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22side2%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22side3%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22side3%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C8%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C8%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C8%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C8%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C8%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C8%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git fetch;git rebase o/master side1;git rebase side1 side2;git rebase side2 side3;git rebase side3 master;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"side3","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C8","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"}},"HEAD":{"target":"master","id":"HEAD"}}}',hint:{en_US:"Remember you can always use the undo or reset commands",zh_CN:"你随时都可以使用 undo 或 reset 命令。",zh_TW:"你隨時都可以使用 undo 或 reset 指令。",es_AR:"Acordate que siempre podés usar los comandos reset y undo",es_ES:"Recuerda que siempre puedes usar los comandos reset y undo",pt_BR:"Lembre-se que você sempre pode usar undo ou reset",gl:"Lembra que sempre podes usar undo ou reset",de_DE:"Denk dran, du kannst immer undo oder reset benutzen, um deine Befehle zurück zu nehmen.",ja:"undoやresetコマンドをいつでも使用することができるのをお忘れなく",fr_FR:"Rappelez-vous que vous pouvez toujours utiliser les commandes undo et reset.",ru_RU:"Помни - ты всегда можешь отменить команды с помощью undo или reset",ko:"명령어를 undo와 reset으로 되돌릴 수 있다는 것을 잊지마세요",uk:"Пам'ятай, ти в будь-який момент можеш використовувати команди undo або reset",vi:"Nhớ rằng bạn luôn luôn có thể hoàn tác hoặc soạn lại câu lệnh "},name:{en_US:"Push Master!",zh_CN:"推送主分支",zh_TW:"push master！",es_AR:"¡Push Master!",es_ES:"¡Push Master!",pt_BR:"Push Master!",gl:"Empurra ó Master!",de_DE:"Push Master!",ja:"Push Master!",fr_FR:"Maître du push !",ru_RU:"Push Мастер!",ko:"Push Master!",uk:"Push Maйстер!",vi:"Push Master!"},compareOnlyMasterHashAgnostic:!0,startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Merging feature branches","","Now that you're comfortable with fetching, pulling, and pushing, lets put these skills to the test with a new workflow.","","It's common for developers on big projects to do all their work on feature branches (off of `master`) and then integrate that work only once it's ready. This is similar to the previous lesson (where side branches get pushed to the remote), but here we introduce one more step.","","Some developers only push and pull when on the `master` branch -- that way `master` always stays updated to what is on the remote (`o/master`).","","So for this workflow we combine two things:","","* integrating feature branch work onto `master`, and","* pushing and pulling from the remote"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see a refresher real quick of how to update `master` and push work."],afterMarkdowns:["We executed two commands here that:","","* rebased our work onto new commits from remote, and","* published our work to the remote"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["This level is pretty hefty -- here is the general outline to solve:","","* There are three feature branches -- `side1` `side2` and `side3`","* We want to push each one of these features, in order, to the remote","* The remote has since been updated, so we will need to incorporate that work as well","",":O intense! good luck, completing this level is a big step."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Fusionner les feature branches","","Maintenant que vous êtes habitué à fetch, pull et push, mettons ces compétences à profit avec une autre approche de travail.","","Il est commun pour les développeurs de gros projets de faire tout leur travail dans des \"feature branches\" dédiées à une fonctionnalité (en dehors de `master`) et d'intégrer ce travail au reste seulement une fois qu'il est prêt. C'est similaire à la leçon précédente (où les branches secondaires étaient pushées sur le dépôt distant), mais ici nous introduisons une étape supplémentaire.","",'Certains développeurs utilisent la méthode "push puis pull" uniquement sur la branche `master` : de cette manière `master` reste toujours à jour avec ce qu\'il y a sur le dépôt distant (`o/master`).',"","Cette approche combine donc deux choses :","","* intégrer le travail présent depuis la feature branch (la fonctionnalité développée) vers `master`, puis","* pusher et puller sur le dépôt distant."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Rappelons-nous rapidement comment mettre à jour `master` et envoyer (push) le travail."],afterMarkdowns:["Nous exécutons ici deux commandes :","","* on rebase notre travail sur de nouveaux commits, puis","* on publie notre travail sur le dépôt distant"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Ce niveau est assez conséquent; voici l'idée générale de la solution :","","* Il y a trois feature branches : `side1` `side2` et `side3`","* Nous voulons envoyer chacune de ces modifications, dans l'ordre, sur le dépôt distant","* Le dépôt distant a été mis à jour entre-temps, donc nous avons aussi besoin d'intégrer ce travail","",":O difficile ! bonne chance, finir ce niveau est une grande étape."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mergeando feature branches","","Ahora que estás cómodo fetcheando, pulleando y pusheando, pongamos a prueba estas habilidades con un nuevo flujo de trabajo.","","Es bastante común que los desarrolladores en los grandes proyectos trabajen sobre ramas específicas para cada tarea (feature branches) basadas en `master`, y que las integren sólo cuando están listas. Esto es similar a la lección anterior, en que pusheabamos las ramas periféricas al remoto, pero acá tenemos un paso más.","","Algunos desarrolladores sólo pushean y pullean cuando están en `master`: de ese modo, `master` siempre se mantiene actualizado con el remoto (`o/master`).","","Entonces, en este flujo de trabajo combinamos dos cosas:","","* integramos el trabajo de las ramas específicas a `master`, y","* pusheamos y pulleamos del remoto"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Refresquemos un poco cómo actualizar `master` y pushear nuestro trabajo."],afterMarkdowns:["Acá ejecutamos dos comandos que:","","* rebasearon nuestro trabajo sobre los nuevos commits del remoto, y","* publicamos nuestro trabajo en ese remoto"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Este nivel es bastante pesado. Acá tenés algunos lineamientos para resolverlo:","","* Tenemos tres ramas específicas -- `side1` `side2` and `side3`","* Queremos pushear cada una de esas ramas, en orden, al remoto","* El remoto fue actualizado, así que vamos a tener que integrar esos cambios también","",":O ¡Intenso! ¡Éxitos! Completar este nivel representa un gran avance."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo merge con ramas de trabajo","","Ahora que estás cómodo fetcheando, pulleando y pusheando, pongamos a prueba estas habilidades con un nuevo flujo de trabajo.","","Es bastante común que los desarrolladores en los grandes proyectos trabajen sobre ramas específicas para cada tarea (feature branches o ramas de trabajo) basadas en `master`, y que las integren sólo cuando estén listas. Esto es similar a la lección anterior, en la que hicimos push de las ramas periféricas al remoto, pero aquí tenemos un paso más.","","Algunos desarrolladores sólo pushean y pullean cuando están en `master`: de ese modo, `master` siempre se mantiene actualizado con el remoto (`o/master`).","","Entonces, en este flujo de trabajo combinamos dos cosas:","","* integramos el trabajo de las ramas específicas a `master`, y","* pusheamos y pulleamos del remoto"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Refresquemos un poco cómo actualizar `master` y pushear nuestro trabajo."],afterMarkdowns:["Ahora ejecutamos dos comandos que:","","* rebasearon nuestro trabajo sobre los nuevos commits del remoto, y","* publicamos nuestro trabajo en ese remoto"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Este nivel es bastante pesado. Aquí tienes algunas ideas para resolverlo:","","* Tenemos tres ramas específicas -- `side1` `side2` and `side3`","* Queremos hacer push de cada una de esas ramas, en orden, al remoto","* El remoto fue actualizado, así que vamos a tener que integrar esos cambios también","",":O ¡Genial! ¡Éxito! Completar este nivel representa un gran avance."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Merge de ramos de funcionalidades","","Agora que você está confortável com fetch, pull e push, vamos colocar essas habilidades em teste com um novo fluxo de trabalho.","","É comum para desenvolvedores de grande projetos fazer todo o trabalho em ramos de funcionalidades (fora do `master`) e então integrar esse trabalho uma única vez quando ele estiver pronto. Isso é similar à lição anterior (onde ramos laterais eram enviados ao repositório remoto), mas introduzimos mais um passo.","","Alguns desenvolvedores só fazem push e pull quando no ramo `master` -- desta forma o `master` sempre se mantém atualizado com aquilo que está no ramo remoto (`o/master`).","","Então, para este fluxo de trabalho, combinaremos duas coisas:","","* Integrar ramos de funcionalidade no `master`, e","* Realizar push e pull do repositório remoto"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos refrescar a memória sobre como atualizar o `master` e enviar trabalho."],afterMarkdowns:["Nós executamos dois comandos aqui que:","","* Fizeram rebase de nosso trabalho nos novos commits do repositório remoto, e","* Publicaram nosso trabalho no repositório remoto"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Esse nível é um pouco pesado -- aqui está a linha geral de como resolver:","","* Há três ramos de funcionalidades -- `side1`, `side2` e `side3`","* Queremos enviar cada uma dessas funcionalidades, em ordem, para o repositório remoto","* O repositório remoto foi atualizado desde então, então também precisaremos incorporar o trabalho realizado lá","",":O intenso! boa sorte, completar este nível é um grande passo."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mesturando ramas","","Agora que estás afeito a descargar, mesturar e empurrar, poñamos a proba estas habilidades cun novo fluxo de traballo.","","É bastante común que os desenvolvedores nos grandes proxectos traballen sobre ramas específicas para cada tarefa (feature branches) baseadas en `mater`, e que as integren só cando están preparadas. Esto é similar á lección anterior, na que empurrábamos as ramas periféricas ó remoto, pero acá temos un paso máis.","","Algúns desenvovledores só empurran e descargan cando están en `master`: de ese xeito, `master` sempre mantén actualizado o seu estado co remoto (`o/master`).","","Entón, neste fluxo de traballo combinamos dúas cousas:","","* integramos o traballo das ramas específicas a `master`, e","* empurramos e turramos do remoto"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Refresquemos un pouco cómo actualizar `master` e empurrar o noso traballo."],afterMarkdowns:["Agora executamos dous comandos que:","","* rebasamos o noso traballo sobre os novos commits do remoto, e","* publicamos o noso traballo nese remoto"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Este nivel é bastante pesado. Aquí tes algúns patróns para resolvelo:","","* Temos tres ramas específicas -- `side1` `side2` e `side3`","* Queremos empurrar cada unha de esas ramas, en orde, ó remoto","* O remoto foi actualizado, así que imos ter que integrar eses cambios tamén","",":O ¡Intenso! ¡Éxitos! Completar este nivel representa un grande avance."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## merge feature branch","","現在你已經很熟悉 fetch、pull 以及 push，讓我們來針對一個新的問題來應用這些技巧。","","在一個大型的專案裡面，程式設計師經常會在 feature branch（有別於 master branch）上面做開發，之後等開發完之後，在一次 merge 回去。這跟之前的課程是很類似的（其它的 branch 被 push 到 remote），但是現在我們還要再多介紹一個步驟。","","某些程式設計師只針對 `master` branch 進行 push 或者是 pull。這樣子的話 `master` 一直都保持跟 remote （`o/master`） 同步。","","所以針對這個問題我們結合了兩件事情：","","* merge feature branch 到`master` branch，並且","* push remote 以及 pull remote"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們馬上來實際看一下如何更新 `master` 並且 push 到 remote。"],afterMarkdowns:["我們在這裡執行兩個指令:","","* rebase 我們的 branch 到 remote 的新的 commit 上面，並且","* 發佈到 remote 上面"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["這個關卡很複雜，這裡有一些提示：","","* 總共有三個 feature branch，分別是 `side1`，`side2` 以及 `side3`","* 我們想要將這三個 branch 分別 push 到 remote。","* 但是 remote 已經被事先更新過了，所以我們必須要先同步那些更新。","",":O 很好！祝你好運，完成這個關卡是一個很重要的步驟。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Einen Feature Branch reintegrieren","","Nun da du mit `fetch`, `pull`, und `push` vertraut bist sollten wir diese Fähigkeiten mit einem neuen Arbeitsablauf auf die Probe stellen.","","Für Entwickler in großen Projekten ist es nicht ungewöhnlich ihre Arbeit in Feature Branches (von `master` abgeleitet) zu erledigen und dann diese Inhalte zu reintegrieren, wenn sie fertig sind. Das ist ähnlich dem vorherigen Level (in dem ein Feature Branch auf den Server geschoben wird), nur mit einem zusätzlichen Schritt.","","Einige Entwickler pushen und pullen nur auf dem `master` -- dadurch ist `master` immer aktuell zu seinem Gegenstück auf dem Server (`o/master`).","","Für diesen Ablauf werden wir also zwei Dinge kombinieren:","","* einen Feature Branch in `master` reintegrieren und","* vom entfernten Server pushen und pullen."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns zur Erinnerung schnell noch mal an wie man den `master` aktualisiert und seine Commits pusht."],afterMarkdowns:["Wir haben hier zwei Befehle ausgeführt, die:","","* unsere Commits auf die neuen Commits vom Server gepackt und","* unsere Commits zum Server gepusht haben."],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Dieser Level ist ziemlich heftig -- hier ist im Groben der Weg:","","* Es gibt drei Feature Branches -- `side1`, `side2` und `side3`.","* Wir möchten jedes dieser Features, in dieser Reihenfolge, auf den Server bringen.","* Der Server hat Commits, die wir noch nicht haben, diese müssen also bei uns integriert werden.","",":O Krass! Viel Erfolg, diesen Level zu schaffen ist ein großer Schritt."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 合并特性分支","","既然你应该很熟悉 fetch、pull、push 了，现在我们要通过一个新的工作流来测试你的这些技能。","","在大型项目中开发人员通常会在（从 `master` 上分出来的）特性分支上工作，工作完成后只做一次集成。这跟前面课程的描述很相像（把 side 分支推送到远程仓库），不过本节我们会深入一些.","","但是有些开发人员只在 master 上做 push、pull —— 这样的话 master 总是最新的，始终与远程分支 (o/master) 保持一致。","","对于接下来这个工作流，我们集成了两个步骤：","","* 将特性分支集成到 `master` 上","* 推送并更新远程分支"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们看看如何快速的更新 `master` 分支并推送到远程。"],afterMarkdowns:["我们执行了两个命令: ","","* 将我们的工作 rebase 到远程分支的最新提交记录","* 向远程仓库推送我们的工作"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["这个关卡的 Boss 很厉害 —— 以下是通关提示：","","* 这里共有三个特性分支 —— `side1` `side2` 和 `side3`","* 我需要将这三分支按顺序推送到远程仓库","* 因为远程仓库已经被更新过了，所以我们还要把那些工作合并过来","",":O 紧张了？祝你好运！完成了本关, 你就向目标又迈近了一大步啦！"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Слияние фича-бранчей (веток)","","Теперь, когда вы умело владеете командами fetch, pull и push, давайте применим эти навыки в сочетании с новым рабочим процессом (он же workflow).","","Среди разработчиков, вовлечённых в большой проект, довольно распространённ приём — выполнять всю свою работу в так называемых фича-бранчах (вне `master`). А затем, как только работа выполнена, разработчик интегрирует всё, что было им сделано. Всё это, за исключением одного шага, похоже на предыдущий урок (там, где мы закачивали ветки на удалённый репозиторий)","","Ряд разработчиков делают push и pull лишь на локальную ветку `master` - таким образом ветка `master` всегда синхронизирована с тем, что находится на удалённом репозитории (`o/master`).","","Для этого рабочего процесса мы совместили две вещи:","","* интеграцию фича-бранчей в `master`","* закачку (push) и скачку (pull) с удалённого репозитория"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте быстренько вспомним, как нам обновить `master` и закачать выполненную работу."],afterMarkdowns:["Здесь мы выполнили две команды, которые:","","* перебазировали нашу работу на новенький коммит, пришедший с удалённого репозитория, и","* закачали свои наработки в удалённый репозиторий"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Текущая задача является достаточно обильной - здесь представлена общая схема выполнения:","","* Есть три фича-бранчи (фича-ветки) - `side1` `side2` и `side3`","* Нам необходимо закачать каждую из них по очереди на удалённый репозиторий","* При этом удалённый репозиторий хранит в себе какие-то наработки, которые также следует скачать к себе","",":O Сложно! Желаю вам удачи в выполнении этой непростой задачи."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 機能別のブランチ（フィーチャーブランチ）をマージする","","今や、あなたは`fetch`、`pull`、`push`を十分に使えるようになったでしょうから、そのスキルを新しい作業の流れで試してみましょう。","","大きなプロジェクトの開発者にとって、フィーチャーブランチ（`master`を除く）上で全ての作業を行い、完成したら一度でその作業を統合するというような流れが一般的です。これは前のレッスンの内容（他のブランチからリモートにプッシュされるような状況のところが）に似ていますが、ここではもう一歩踏み込んで解説しましょう。","","開発者は、`master`ブランチにいるときプッシュとプルしかしません -- `master`は常にリモート(`o/master`）に追従した状態のままにします。","","この作業の流れでは、私たちは二つのことを組み合わせています:","","* `master`にフィーチャーブランチの作業を統合し、","* リモートへの`push`と`pull`を行う"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`master`の更新と作業の反映の方法を手早く復習しましょう。"],afterMarkdowns:["我々はここで二つのコマンドを動かしました:","","* リモートから新しいコミットを我々の作業にリベースし、","* リモートに我々の作業を公開しました"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["このレベルはかなり難しいです -- ここに解答の一般的な道のりを示しておきます:","","* 三つのフィーチャーブランチ、`side1`、`side2`、`side3`があります。","* この機能をそれぞれ、この順に、リモートにプッシュしてください。","* リモートが更新されたなら、次はより良く作業を統合する方法を紹介しましょう。","",":O これはきつそうだ！このレベルを完了させることは大きな一歩となります。幸運を祈ります。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## feature 브랜치 병합하기","","이제 여러분은 fetch, pull, push하는데에 익숙해졌을겁니다. 연마한 기술들을 새로운 상황에서 시험 해봅시다.","","개발자들은 주로 큰 프로젝트를 개발할때 작업을 feature 브랜치(=토픽브랜치 / `master`브랜치가 아닌 작업을위해 임시로 만든 브랜치를 말합니다)들에 하고 준비가 되면 그 작업을 통합합니다. 이전 강의와 비슷한 모습인데(사이드 브랜치들을 원격저장소로 push한것), 여기서 한 단계 더 나아가 봅시다. ","","어떤 개발자들은 `master` 브랜치에 있을때만 push와 pull을 수행합니다 -- 이렇게하면 `master`는 항상 원격 브랜치 (`o/master`)의 상태와 항상 최신의 상태로 유지될 수 있습니다.","","이런 작업흐름은 두가지 작업을 같이하게됩니다 :","","* feature 브랜치의 작업을 master로 통합하는것과","* 원격저장소에서 push하고 pull하는 작업입니다"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["다음을 보고 `master`를 갱신하고 작업을 push하는 방법을 다시 떠올려봅시다."],afterMarkdowns:["여기서 우리는 두개의 명령어를 실행 했습니다 :","","* 우리의 작업을 원격 저장소의 새 커밋들로 리베이스한 후","* 우리 작업을 원격저장소로 push했습니다."],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["이번 레벨은 꽤 덩치가 큽니다 -- 문제에대한 대략적인 설명을 해드리겠습니다 :","","* 세개의 feature 브랜치가 있습니다 -- `side1`, `side2` 그리고 `side3` 가 있습니다.","* 각각의 브랜치를 순서에 맞게 원격 저장소로 push하고 싶습니다.","* 원격 저장소가 최근에 갱신된적이 있기때문에 그 작업또한 포함시켜야 합니다.","",":O 이야 할게 많습니다! 행운을 빕니다, 이번 레벨은 많은걸 요구합니다."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Мердж гілок з фічами","","Тепер, коли ти вже впевнено володієш засобами `pull` та `push`, час перевірити ці знання в новому процесі.","","Зазвичай розробники працюють над якимось фічами в окремій гілці (не в `master`), а потім, коли роботу закінчено, інтегрують її. Це схоже на попередній урок (де окремі гілки пушили у віддалений репозиторій), але тут буде ще один додатковий крок.","","Деякі розробники виконують push і pull лише в гілці `master` -- тож `master` завжди буде актуальним і синхронізованим з віддаленою гілкою (`o/master`).","","Отже для цього процесу ми об'єднуємо дві речі:","","* інтеграцію гілки з фічею в `master`, і","* пул та пуш для синхронізації з віддаленим репозиторієм"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Пригадаймо коротко як оновити `master` і запушити свої зміни."],afterMarkdowns:["Ми виконали дві команди, які:","","* заребейсили нашу роботу поверх віддалених комітів, і","* опублікували наші зміни у віддаленому репозиторії"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Цей рівень доволі величенький -- ось, що треба буде зробити:","","* Є три гілки з фічами -- `side1` `side2` та `side3`","* Ми хочемо запушити кожну з них по черзі у віддалений репозиторій","* Віддалений репозиторій теж змінився, тож нам потрібно об'єднати всі ці зміни","",":O Чимале завдання! Успіху! Виконання цього рівня буде великим кроком."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Sáp nhập các nhánh tính năng","","Giờ thì bạn đã quen thuộc với tìm nạp, kéo và đẩy, bây giờ chúng tôi sẽ kiểm tra kỹ năng của bạn với một quy trình làm việc mới.","","Trong các dự án lớn, các nhà phát triển thường làm việc trên các nhánh tính năng (được phân nhánh từ `master`) và chỉ thực hiện tích hợp sau khi công việc hoàn thành. Điều này tương tự như mô tả trong bài học trước (đẩy nhánh bên sang kho lưu trữ từ xa), nhưng chúng ta sẽ đi sâu hơn một chút trong phần này.","","Một vài nhà phát triển chỉ thực hiện đẩy và kéo khi ở trên nhánh `master` -- như vậy thì nhánh `master` luôn luôn được cập nhật với nhánh từ xa (`o/master`).","","Vậy nên với quy trình làm việc này chúng tôi đã kết hợp 2 việc:","","* tích hợp nhánh chức năng lên nhánh `master`, và","* đẩy và kéo từ nhánh từ xa"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy xem qua cách cập nhật nhánh `master` và đẩy lên nhánh từ xa hoạt động như thế nào."],afterMarkdowns:["Ta thực thi 2 câu lệnh làm việc sau:","","* tái bố trí (`rebase`) thành quả của ta lên commit của nhánh từ xa, và","* xuất bản thành quả của ta lên nhánh từ xa"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Cấp độ này khá là phức tạp đấy -- để hoàn thành thì hãy xem qua hướng dẫn cơ bản sau:","","* Có 3 nhánh chức năng là -- `side1` `side2` vả `side3`","* Chúng tôi muốn bạn đẩy từng nhánh chức năng, theo thứ tự, lên nhánh từ xa","* Nhánh từ xa cũng đã được cập nhật, nên ta cũng cần sát nhập thay đổi đó nữa","",":O khoai đây! Cố lên nhé, hoàn thành cấp độ này là lên trình nhiều lắm đấy."]}}]}}}},{}],146:[function(e,t,o){o.level={goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git commit;git checkout o/master;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Remote Branches",zh_CN:"远程分支",zh_TW:"remote branch （遠端分支）",es_AR:"Ramas remotas",es_ES:"Ramas remotas",pt_BR:"Ramos remotos",gl:"Ramas remotas",de_DE:"Branches auf entfernten Servern",ja:"リモートのブランチ",fr_FR:"Les branches distantes",ru_RU:"Удалённые ветки",ko:"원격 브랜치(remote branch)",uk:"Віддалені гілки",vi:"Nhánh từ xa"},hint:{en_US:"Pay attention to the ordering -- commit on master first!",zh_CN:"注意顺序 —— 先在 master 分支上提交!",zh_TW:"注意順序的問題喔！先在 master branch 上面送 commit",es_AR:"Prestá atención al orden: ¡commiteá sobre master primero!",es_ES:"Presta atención al orden: ¡haz commit sobre master primero!",pt_BR:"Preste atenção na ordem: commite no master primeiro!",gl:"Preta atención á orde: fai commit no master primeiro",de_DE:"Beachte die Sortierung -- committe zuerst auf dem master!",ja:"順番に注意 -- まずmasterに対してcommitしましょう",fr_FR:"Prêtez attention à l'ordre -- les commits sur master d'abord !",ru_RU:"Уделяйте внимание очерёдности -- сперва commit на master",ko:"순서에 주의하세요 -- master에서 먼저 커밋하세요!",uk:"Звертайте увагу на послідовність -- спочатку коміт в мастер!",vi:"Chú ý đến thứ tự -- commit trên nhánh master trước!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remote Branches","","Now that you've seen `git clone` in action, let's dive into what actually changed.","","The first thing you may have noticed is that a new branch appeared in our local repository called `o/master`. This type of branch is called a _remote_ branch; remote branches have special properties because they serve a unique purpose.","","Remote branches reflect the _state_ of remote repositories (since you last talked to those remote repositories). They help you understand the difference between your local work and what work is public -- a critical step to take before sharing your work with others.","","Remote branches have the special property that when you check them out, you are put into detached `HEAD` mode. Git does this on purpose because you can't work on these branches directly; you have to work elsewhere and then share your work with the remote (after which your remote branches will be updated)."]}},{type:"ModalAlert",options:{markdowns:["### What is `o/`?","","You may be wondering what the leading `o/` is for on these remote branches. Well, remote branches also have a (required) naming convention -- they are displayed in the format of:","","* `<remote name>/<branch name>`","","Hence, if you look at a branch named `o/master`, the branch name is `master` and the name of the remote is `o`.","","Most developers actually name their main remote `origin`, not `o`. This is so common that git actually sets up your remote to be named `origin` when you `git clone` a repository.","","Unfortunately the full name of `origin` does not fit in our UI, so we use `o` as shorthand :( Just remember when you're using real git, your remote is probably going to be named `origin`!","","That's a lot to take in, so let's see all this in action."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets check out a remote branch and see what happens"],afterMarkdowns:["As you can see, git put us into detached `HEAD` mode and then did not update `o/master` when we added a new commit. This is because `o/master` will only update when the remote updates."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["To finish this level, commit once off of `master` and once after checking out `o/master`. This will help drive home how remote branches behave differently, and they only update to reflect the state of the remote."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les branches distantes de git","","Maintenant que nous avons vu `git clone` en action, plongeons dans ce qui a changé.","","La première chose que vous avez peut-être remarqué est qu'une nouvelle branche est apparue dans votre dépôt local appelée `o/master`. Ce type de branche est appelée une branche _distante_ ; les branches distantes ont des propriétés spécifiques car elles servent à un but précis.","","Les branches distantes reflètent _l'état_ des dépôts distants (depuis la dernière fois où vous avez parlé avec ceux-ci). Elles vous aident à comprendre les différences entre votre travail et le travail public -- une étape critique à effectuer avant de partager son travail avec les autres.","","Les branches distantes ont une propriété particulière: quand vous vous rendez dessus (checkout), `HEAD` est détaché. Git fait cela car vous ne pouvez pas travailler sur ces branches directement ; vous devez travailler ailleurs et ensuite partager votre travail avec le dépôt distant (après quoi vos branches distantes seront mises à jour)."]}},{type:"ModalAlert",options:{markdowns:["### Qu'est-ce que `o/`?","","Vous vous demandez peut-être ce qu'est le préfixe `o/` devant ces branches distantes. En pratique, les branches distantes ont aussi une convention de nommage (obligatoire) -- elles sont affichées avec le format :","","* `<nom dépôt distant>/<nom de la branche>`","","Donc, si vous regardez une branche nommée `o/master`, le nom de la branche est `master` et le nom du dépôt distant est `o`.","","La plupart des développeurs nomment leur principal dépôt distant `origin`, pas `o`. C'est si commun que git configure en fait votre dépôt local pour être nommé `origin` quand vous faîtes un `git clone` du dépôt.","","Malheureusement le nom complet `origin` ne rentre pas dans notre interface graphique et nous utilisons donc `o` comme raccourci :( Rappelez-vous juste que quand vous utilisez le vrai git, votre dépôt distant est probablement nommé `origin`!","","Cela fait beaucoup d'un coup, donc voyons cela en action."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Rendons-nous sur une branche et regardons ce qui se passe"],afterMarkdowns:["Comme vous pouvez le voir, git nous a mis dans le mode \"detached\" (cf. `HEAD`) puis n'a pas mis à jour `o/master` quand nous avons ajouté un nouveau commit. C'est parce que `o/master` va se mettre à jour uniquement quand le dépôt distant sera mis à jour."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faîtes un commit en dehors de `master` puis un après vous être rendu dans `o/master`. Cela va nous aider à comprendre la différence de comportement des branches distantes, et le fait qu'elles se mettent à jour uniquement pour refléter l'état du dépôt distant."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas remotas de git","","Ahora que viste `git clone` en acción, ahondemos en lo que realmente cambió.","","Lo primero que habrás notado es que apareció una nueva rama en tu repositorio local llamada `o/master`. A este tipo de ramas se las llama ramas _remotas_. Las ramas remotas tienen propiedades especiales porque sirven un propósito específico.","","Las ramas remotas reflejan el _estado_ de los repositorios remotos (cómo estaban la última vez que hablaste con ellos). Te ayudan a entender las diferencias entre tu trabajo local y el trabajo que ya está publicado - un paso crítico antes de compartir tu trabajo con los demás.","","Las ramas remotas tienen la propiedad especial de que cuando las checkouteás, pasás al modo detached `HEAD`. Git lo hace a propósito porque no podés trabajar en esas ramas directamente: tenés que trabajar en algún otro lado y después compartir tu trabajo con el remoto (tras lo que tus ramas remotas se actualizarán)."]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué es `o/`?","","Podrías estar preguntándote qué significa ese `o/` al principio de las ramas remotas. Bueno, las ramas remotas también tienen una convención de nombres obligatoria -- se las muestra con el formato:","","* `<nombre del remoto>/<nombre de la rama>`","","Entonces, si mirás una rama llamada `o/master`, el nombre de la rama es `master`, y el nombre del remoto es `o`.","","La mayoría de los desarrolladores llaman `origin` a su remoto en lugar de `o`. Esto es tan común que git efectivamente crea tu remoto llamándolo `origin` cuando hacés `git clone` de un repositorio.","","Desafortunadamente el nombre `origin` completo no entra en nuestra UI, así que usamos `o` para abreviar :( Simplemente recordá que cuando uses el git real, tu remoto ¡probablemente se llame `origin`!","","Hay mucho para procesar, así que veámoslo en acción."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Checkouteemos una rama remota a ver qué pasa"],afterMarkdowns:["Como ves, git nos puso en el modo detached `HEAD` y no actualizó `o/master` cuando creamos un nuevo commit. Esto es porque `o/master` sólo va a actualizarse cuando el remoto se actualice."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, commiteá una vez sobre `master` y una después de checkoutear `o/master`. Esto te va a ayudar a caer en cómo las ramas remotas funcionan distinto, y que sólo se actualizan para reflejar el estado del remoto."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas remotas de git","","Ahora que viste `git clone` en acción, ahondemos en lo que realmente cambió.","","Lo primero que habrás notado es que apareció una nueva rama en tu repositorio local llamada `o/master`. A este tipo de ramas se las llama ramas _remotas_. Las ramas remotas tienen propiedades especiales porque sirven un propósito específico.","","Las ramas remotas reflejan el _estado_ de los repositorios remotos (cómo estaban la última vez que hablaste con ellos). Te ayudan a entender las diferencias entre tu trabajo local y el trabajo que ya está publicado - un paso crítico antes de compartir tu trabajo con los demás.","","Las ramas remotas tienen la propiedad especial de que cuando haces checkout sobre ellas, pasas al modo detached `HEAD`. Git lo hace a propósito porque no puedes trabajar en esas ramas directamente: tienes que trabajar en algún otro lado y después compartir tu trabajo con el remoto (tras lo que tus ramas remotas se actualizarán)."]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué es `o/`?","","Podrías estar preguntándote qué significa ese `o/` al principio de las ramas remotas. Bueno, las ramas remotas también tienen una convención de nombres obligatoria -- se muestran con el formato:","","* `<nombre del remoto>/<nombre de la rama>`","","Entonces, si observas una rama llamada `o/master`, el nombre de la rama es `master`, y el nombre del remoto es `o`.","","La mayoría de los desarrolladores llaman `origin` a su remoto en lugar de `o`. Esto es tan común que git efectivamente crea tu remoto llamándolo `origin` cuando haces `git clone` de un repositorio.","","Desafortunadamente el nombre `origin` completo no entra en nuestra UI (interfaz de usuario), así que usamos `o` para abreviar :(Simplemente recuerda que cuando uses el git real, tu remoto ¡probablemente se llame `origin`!","","Queda mucho por aprender, así que veámoslo en acción."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hagamos checkout sobre una rama remota a ver qué pasa"],afterMarkdowns:["Como ves, git nos puso en el modo detached `HEAD` y no actualizó `o/master` cuando creamos un nuevo commit. Esto ocurre porque `o/master` sólo va a actualizarse cuando el remoto se actualice."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, haz commit una vez sobre `master` y otra vez después de checkoutear `o/master`. Esto te va a ayudar a aprender cómo las ramas remotas funcionan distinto, y que sólo se actualizan para reflejar el estado del remoto."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramos Remotos no Git","","Agora que vimos o `git clone` em ação, vamos estudar aquilo que realmente mudou.","","A primeira coisa que você pode ter percebido é que um novo ramo chamado `o/master` aparece no nosso repositório local. Esse tipo de ramo é chamado de ramo _remoto_; ramos remotos possuem propriedades especiais pois eles servem a um propósito único.","","Ramos remotos refletem o _estado_ de repositórios remotos (desde a última vez na qual você falou com eles). Eles ajudam a entender as diferenças entre o trabalho local e o trabalho atualmente público -- um passo crítico a ser dado antes de compartilhar seu trabalho com os outros.","",'Ramos remotos possuem a propriedade especial de, ao sofrerem um checkout, colocarem o repositório em modo "Detached HEAD". O Git faz isso de propósito, porque você não pode trabalhar nesses ramos diretamente; você é obrigado a trabalhar em outro lugar e só então compartilhar seu trabalho com o remoto (depois disso, os ramos remotos serão atualizados).']}},{type:"ModalAlert",options:{markdowns:["### O que é `o/`?","","Você pode estar se perguntando o que o `o/` no início do nome dos ramos remotos significa. Bem, ramos remotos possuem uma convenção obrigatória de nomes -- eles são mostrados no seguinte formato:","","* `<nome do repositório remoto>/<nome do ramo>`","","Então, se o ramo remoto é chamado `o/master`, o nome do ramo é `master` e o nome do repositório remoto é `o`.","","A maioria dos desenvolvedores na verdade chama o repositório remoto principal de `origin`, e não de `o`. Isso é tão comum que o Git define por padrão o nome `origin` para o repositório remoto quando você usa o comando `git clone` para clonar um repositório.","","Infelizmente o nome completo `origin` não cabe na nossa tela, então usamos `o` como uma abreviação :( Apenas lembre-se que no Git de verdade, o repositório remoto provavelmente será chamado `origin` em vez de `o`!","","É muita informação de uma só vez, então vamos dar uma pausa e ver um pouco de ação."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos fazer checkout de um ramo remoto e ver o que acontece"],afterMarkdowns:['Como você pode ver, o Git nos colocou no modo "Detached HEAD", e não atualizou o `o/master` quando adicionamos um novo commit. Isso é porque o `o/master` só será atualizado quando o repositório remoto for atualizado.'],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, commite uma vez em `master`, e outra vez depois de fazer checkout em `o/master`. Isso vai ajudá-lo a sentir como os ramos remotos se comportam de forma diferente, e como eles apenas se atualizam para refletir o estado do repositório remoto."]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas remotas de git","","Agora que viches `git clone` en acción, mergullémonos no que realmente mudou.","","O primeiro que notarías é que apareceu unha nova rama no teu repositorio local chamada `o/master`. A este tipo de ramas chámaselle ramas _remotas_. As ramas remotas teñén propiedades especiais porque serven para un propósito específico.","","As ramas remotas reflexan o _estado_ dos repositorios remotos (como estaban á última vez que falaches con eles). Axúdante a entender as diferencias entre o teu traballo local e o teu traballo que xa está publicado - un paso crítico antes de compartir o teu traballo cos demáis.","","As ramas remotas teñen a propiedade especial de que cando fas checkout, pasas o modo detached `HEAD`. Git faino a drede porque non podes traballar nesas ramas directamente: tes que traballar nalgún outro lado e despois compartir o teu traballo co remoto (tras o que as túas ramas remotas actualizaranse)."]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué é `o/`?","","Poderías estar a preguntarte qué significa ese `o/` ó principio das ramas remotas. Bueno, as ramas remotas tamén teñen unha convención de nomes obligatoria -- se as amosas co formato:","","* `<nome do remoto>/<nome da rama>`","","Entonces, se miras unha rama chamada `o/master`, o nome da rama é `master`, e o nome do remoto é `o`.","","A maioría dos desenvolvedores chaman `origin` ó seu remoto no lugar de `o`. Esto é tan común que git efectivamente crea o teu remoto chamandoo `origin` cando fas `git clone` dun repositorio.","","Desafortunadamente o nome `origin` completo non entra na nosa  UI, así que empregaremos `o` para acortar: (Sinxelamente recorda que cando uses git na vida real, o teu remote ¡probablemente se chame `origin`!)","","Hai moito para procesar, así que vexámolo en acción."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Fagamos checkout a unha rama remota a ver qué pasa"],afterMarkdowns:["Como ves, git púxonos no modo detached `HEAD` e non actualizou `o/mater` cando creamos un novo commit. Esto é porque `o/mater` só vai actualizarse cando o remoto se actualice."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, fai commit unha vez sobre `mater` e despois de facer o checkout a `o/master`. Esto vaite axudar a entender cómo funcionan as ramas remotas, e que só se actualizan para reflexar o estado do remoto."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git remote branch","","現在你已經知道 `git clone` 在幹嘛了，讓我們仔細看看到底發生了什麼事。","","你首先看到的是在你的本地端（local repository）出現了一個新的 branch 叫作 `o/master`，這種型態的 branch 叫作 remote branch （遠端分支），因為特殊的需求，因此 remote branch 有特殊的性質。","","remote branch 反應了 remote repository 的狀態（因為你最後接觸的是這些 remote repository），最重要的是，在你想要分享你的 commit 給其他人時，你必須知道你現在的 commit 跟 remote repository 有哪些不同，而 remote branch 的狀態就是在告訴你這些資訊。","","remote branch 有特別的特性，當你移動到 remote branch 時，你就進入到分離 `HEAD` 的狀態，git 這樣做的原因是告訴你不能夠直接影響這些 branch。你必須要在其它的 branch 工作，並且分享到 remote （分享之後，你的 remote branch 就會被更新）。"]}},{type:"ModalAlert",options:{markdowns:["### 什麼是 `o/`?","","你也許會對於 remote branch 前面的 `o/` 感到困惑，喔！remote branch 也（需要） 一個命名法則，或者是一般表示 remote branch 的格式。","","* `<remote 名稱>/<branch 名稱>`","","因此，當你看到一個 branch 叫做 `o/master`，就表示這個 branch 叫做 master，而且這個 remote 的名稱叫作 `o`。","","很多程式設計師實際上會把他們的 remote 命名為 `origin`，而不是 `o`，這在 git 是很常見的事情，因為當你使用 `git clone` 時，git 會自動把你的 remote 命名為 `origin`。","","但是很不幸的是 `origin` 並沒有辦法完全顯示在我們的 UI 上面，所以我們用 `o` 來簡化它（只要記住當你使用 git 的時候，實際上是命名為 `origin`）。","","有很多事情需要說明，現在讓我們來看看吧！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們移動到（checkout）一個 remote branch 並且看一下會發生什麼事情"],afterMarkdowns:["就像你看到的， git 讓我們進到 detached `HEAD` 狀態，同時，當我們加入一個新的 commit 時，`o/master` 都沒有更新，這是因為只有當 remote 更新的時候，`o/master` 才會更新。"],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，先在 master branch 上面做一次 commit，再移動到 `o/master` 上做一次 commit，這有助於我們了解到 remote branch 的不同，它們只會反應 remote 的狀態。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches auf entfernten Servern","","Nun da du `git clone` in Aktion gesehen hast, lass uns tiefer in die Materie eintauchen.","","Das erste, was dir wahrscheinlich aufgefallen ist, ist dass ein neuer Branch in unserem lokalen Repository aufgetaucht ist, namens `o/master`. Diese Art von Branch nennt sich _Remote_ Branch; er hat besondere Eigenschaften, weil er einem bestimmten Zweck dient.","","Ein Remote Branch bildet den Zustand des entsprechenden Branch in einem entfernten Repository ab (dem Zustand in dem der Branch war, als du das letzte mal das entfernte Repository angesprochen hast). Er hilft dir, den Unterschied zwischen deinem lokalen Branch und dem Gegenstück auf dem Server zu sehen -- eine nötige Information, bevor du deine Arbeit mit anderen teilen kannst.","",'Remote Branches besitzen die besondere Eigenschaft dein Repository in den "Detached `HEAD`" Zustand zu versetzen, wenn du sie auscheckst. Git macht das absichtlich so, denn du kannst nicht direkt auf Remote Branches arbeiten; du musst auf Kopien von ihnen arbeiten und deine Änderungen von dort auf den entfernten Server schieben (wonach der Remote Branch dann auch bei dir aktualisiert wird).']}},{type:"ModalAlert",options:{markdowns:["### Was heißt `o/`?","","Du fragst dich vielleicht was das `o/` am Anfang des Namens des Remote Branch bedeuten soll. Nun, Namen von Remote Branches folgen einer (zwingenden) Konvention -- sie werden mit diesem Format gebildet:","","* `<Name des Remote>/<Name des Branches>`","","Wenn du also einen Remote Branch namens `o/master` hast, ist es eine Abbildung des Branches `master` auf dem Server, der in deinem Repository als `o` bekannt ist.","","Die meisten Entwickler nennen das Haupt-Remote tatsächlich `origin` und nicht `o`. Das ist so verbreitet, dass Git den entfernten Server von dem man ein `git clone` macht tatsächlich als `origin` im Clone speichert.","","Leider passt der ganze Name, `origin`, nicht in unsere Darstellung, deshalb benutzen wir hier kurz `o`. :( Merk dir einfach: wenn du echtes Git benutzt werden die Remotes meistens `origin` heißen!","","So, das war eine Menge zu verdauen, schauen wir uns das in Aktion an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Checken wir mal einen Remote Branch aus und schauen was passiert"],afterMarkdowns:['Wie du siehst setzt uns Git in den "Detached `HEAD`" Modus und aktualisiert dann nach dem Commit nicht den Branch `o/master`. Das liegt daran, dass der Remote Branch nur aktualisiert wird, wenn sich der entsprechende Branch auf dem Remote verändert.'],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu bewältigen musst du einen Commit in `master` machen und einen nachdem du `o/master` ausgecheckt hast. Das illustriert noch einmal wie sich Branches und Remote Branches unterschiedlich verhalten und dass letztere sich nur verändern, wenn sich ihr Zustand auf dem entfernten Server ändert."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 远程分支","","既然你已经看过 `git clone` 命令了，咱们深入地看一下发生了什么。","","你可能注意到的第一个事就是在我们的本地仓库多了一个名为 `o/master` 的分支, 这种类型的分支就叫**远程**分支。由于远程分支的特性导致其拥有一些特殊属性。","","远程分支反映了远程仓库(在你上次和它通信时)的**状态**。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.","","远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, （更新了远程分支之后）再用远程分享你的工作成果。"]}},{type:"ModalAlert",options:{markdowns:["### 为什么有 `o/`？","","你可能想问这些远程分支的前面的 `o/` 是什么意思呢？好吧, 远程分支有一个命名规范 —— 它们的格式是: ","","* `<remote name>/<branch name>`","","因此，如果你看到一个名为 `o/master` 的分支，那么这个分支就叫 `master`，远程仓库的名称就是 `o`。","","大多数的开发人员会将它们主要的远程仓库命名为 `origin`，并不是 `o`。这是因为当你用 `git clone` 某个仓库时，Git 已经帮你把远程仓库的名称设置为 `origin` 了","","不过 `origin` 对于我们的 UI 来说太长了，因此不得不使用简写 `o` :) 但是要记住, 当你使用真正的 Git 时, 你的远程仓库默认为 `origin`! ","","说了这么多，让我们看看实例。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果检出远程分支会怎么样呢？"],afterMarkdowns:["正如你所见，Git 变成了分离 HEAD 状态，当添加新的提交时 `o/master` 也不会更新。这是因为 `o/master` 只有在远程仓库中相应的分支更新了以后才会更新。"],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["要通过本关，在 `master` 分支上做一次提交；然后检出 `o/master`，再做一提交。这有助于你理解远程分支的不同，他们的更新只是反映了远程的状态。"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## リモートのブランチ","","あなたは今や`git clone`の動作を知ったことでしょうから、次は実際に詳細を見てみましょう。","","まず、もしかしたらもう気付いているかもしれないですが、私たちのローカルリポジトリにo/masterという名前の新しいブランチが追加されています。このようなブランチは、_リモート_ブランチと呼ばれます。リモートブランチは、その固有の役割を担うために特別なプロパティを持っています。","","リモートブランチは、リモートリポジトリの_状態_を反映します（あなたがそのリモートリポジトリから変更を最後に問い合わせてからの）。","","リモートブランチは、あなたがチェックアウトするとき、`HEAD`が分離された状態になるという特殊な性質を持っています。Gitはこの上での動作を保証しません。なぜこのようになるかというと、リモートブランチ上での直接の作業はできないからなのです。あなたは、別の場所で作業をし、その後でリモートブランチに共有するようにしなければなりません（その後であなたのリモートブランチは更新されます）。"]}},{type:"ModalAlert",options:{markdowns:["### `o/`とは何か?","","あなたは、リモートブランチが`o/`で始まることに驚くかもしれません。そう、リモートブランチには固有の（必要な）命名規則も存在するのです。 -- これは次のようなフォーマットで表示されます:","","* `<リモート名>/<ブランチ名>`","","これに基づいて、`o/master`と名付けられたブランチを見てみると、`master`はブランチの名前、`o`はリモートの名前であることが分かります。","","多くの開発者は、実際にはメインのリモート名として`o`ではなく`origin`を使います。これは一般的には、Gitが`git clone`した時に`origin`という名前をリモートに付与するためです。","","残念ながら、`origin`という長い名前は私たちのUIには合いませんでした。なので、私たちは短い`o`を使っています（覚えておいてもらいたいのは、実際のGitでは、リモートはおそらく`origin`と名付けられるであろうということです！）","","理解すべきことはたくさんあるので、ひとまず全ての動作を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["リモートブランチをチェックアウトすると何が起こるかを見てみましょう"],afterMarkdowns:["見ていた通り、`o/master`に移ってから新しいコミットをしても`HEAD`が分離状態になり`o/master`は更新されていません。これは、`o/master`がリモートの更新時のみ更新されるからです。"],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["このレベルを終えるには、まずコミットを`master`に一回行い、その後`o/master`にチェックアウトしてからもう一度コミットをします。これは、リモートブランチがどれほど違った動きをするか、そしてリモートブランチがリモートの状態を反映する時しか更新されないことを理解するのに役立つでしょう。"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["## Удалённые ветки в Git","","Теперь, когда вы уже увидели `git clone` в действии, давайте углубимся в детали и посмотрим что же на самом деле изменилось.","","Во-первых, вы должны были заметить, что у нас в локальном репозитории появилась новая ветка с именем `o/master`. Такой тип ветки называется _удалённой_ веткой. Поскольку удалённые ветки играют важную и уникальную роль, они обладают рядом специальных свойств.","","Удалённые ветки отражают _состояние_ удалённых репозиториев (с того момента, как вы обращались к этим удалённым репозиториям в последний раз). Они позволяют вам отслеживать и видеть разницу между вашими локальными наработками и тем, что было сделано другими участниками - важный шаг, который необходимо делать, прежде чем делиться своими наработками с другими.","","Важным свойством удалённых веток является тот факт, что когда вы извлекаете их, вы отделяете (detaching) `HEAD`. Git делает это потому, что вы не можете работать непосредственно в этих ветках; сперва вам необходимо сделать наработки где-либо, а уж затем делиться ими с удалёнными репозиториями (после чего ваши удалённые ветки будут обновлены)."]}},{type:"ModalAlert",options:{markdowns:["### Что такое `o/` в названии ветки?","","Вы, наверное, догадались, что первый символ `o/` в названии ветки служит для обозначения именно удалённых веток. Да. Удалённые ветки также имеют (обязательное) правило именования - они отображаются в формате:","","* `<удалённый репозиторий>/<имя ветки>`","","Следовательно, если вы взглянете на имя ветки `o/master`, то здесь `master` - это имя ветки, а `o` - это имя удалённого репозитория.","","Большинство разработчиков именуют свои главные удалённые репозитории не как `o`, а как `origin`. Также общепринятым является именование удалённого репозитория как `origin`, когда вы клонируете репозиторий командой `git clone`.","","К сожалению, полное имя `origin` не помещается на элементах дизайна наших уроков, поэтому мы используем краткое `o` :( Просто помните, когда вы пользуетесь git в реальном проекте, ваш удалённый репозиторий скорее всего будет называться `origin`!","","Давайте посмотрим на всё это в действии."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Давайте извлечём (check out) удалённую ветку и посмотрим что произойдёт"],afterMarkdowns:["Как вы можете видеть, git отделил (detached) `HEAD` и не обновил `o/master`, когда мы добавили новый коммит. Всё потому, что `o/master` обновится тогда и только тогда, когда обновится сам удалённый репозиторий."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Для завершения уровня выполните коммит единожды на `master`, а затем на `o/master` (предварительно переключившись на эту ветку). Это наглядно продемонстрирует поведение удалённых веток, а также покажет, как изменения влияют на состояние удалённых репозиториев."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 원격 브랜치","","이제 `git clone`을 직접 확인 해 보셨습니다. 이제 무엇이 변했는지 살펴 봅시다.","","가장 먼저 알아차릴만한 변화는 우리의 로컬 저장소에 `o/master`라고하는 새 브랜치가 생긴겁니다. 이런 종류의 브랜치는 _원격_브랜치라고 불립니다; 원격 브랜치는 특정한 목적을 제공하기 때문에 특별한 속성들이 있습니다.","","원격 브랜치는 원격 저장소의 _상태_를 반영합니다(가장 최근 원격 원격저장소와 작업을 했을때를 기준으로). 원격 브랜치는 로컬에서의 작업과 공개적으로 되고있는 작업의 차이를 이해하는데 도와줍니다 -- 다른 사람들과 작업을 공유하기전에 반드시해야할 과정이죠.","","원격 브랜치는 체크 아웃을 하게 되면 분리된 `HEAD` 모드로 가게되는 특별한 속성이 있습니다. Git은 여러분이 이 브랜치들에서 직접 작업할 수 없기 때문에 일부로 이렇게 합니다; 여러분은 다른곳에 작업을 하고 원격 저장소와 여러분의 작업을 공유해야합니다(그 이후에 원격 브랜치가 갱신됩니다)."]}},{type:"ModalAlert",options:{markdowns:["### `o/`가 뭐죠?","","여러분은 원격 브랜치들 앞에 붙는 `o/`가 뭔지 궁금할 것입니다. 음, 원격 브랜치 또한 (필수적인) 이름짓기 규약이 있습니다 -- 다음의 형식으로 나타납니다:","","* `<remote name>/<branch name>`","","이런 이유로, 만약 `o/master`라는 이름의 브랜치를 보게되면, 브랜치의 이름은 `master`이고 원격 저장소의 이름은 `o`인겁니다.","","대부분의 개발자들은 자신의 주 원격 저장소를 `o`가 아닌 `origin`이라고 짓습니다. 사실 보통 다 이렇게 쓰기 때문에 git은 저장소를 `git clone`하게 되면 원격 저장소의 이름을 `origin`이라고 자동으로 설정해놓습니다.","","부득이하게도 `origin`이라는 풀네임은 우리 UI에 안 맞아서 `o`로 간략히 표현하겠습니다 :( 진짜 git을 사용하게되면 여러분의 원격저장소가 아마 `origin`이라고 되있다는것을 알아두세요!","","머리속에 넣기엔 너무 많이 떠든것 같습니다. 직접 확인해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["원격 브랜치를 체크아웃하고 무엇이 일어나는지 확인해 봅시다"],afterMarkdowns:["보이는것 처럼, git은 우리를 분리된 `HEAD` 모드로 만들고 새로운 커밋을 추가해도 `o/master`를 갱신하지 않습니다. 이것은 `o/master`가 원격 저장소가 갱신될때만 갱신되기 때문입니다."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["다음 레벨로 가기 위해서는 `master`에서 한번 커밋하고 `o/master`를 체크아웃 하고 다시 한번 커밋을 하세요. 이를 통해서 원격 브랜치가 어떻게 다르게 작동하는지 알아보고, 원격 브랜치는 원격 저장소의 상태를 반영하기만 한다는것을 이해해 봅시다."]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["## Віддалені гілки","","Тепер, коли ти познайомився з `git clone` в дії, розгляньмо деталі й подивімося, що дійсно змінилося.","","Перше, що ти міг помітити -- це те, що з’явився новий бранч з назвою `o/master`. Такі гілки називаються  _віддаленими_ (remote); віддалені гілки в гіт відіграють в певному сенсі унікальну роль, тому в них є деякі спеціальні властивості, непритаманні іншим гілкам.","","Віддалені гілки відображають _стан_ віддалених репозиторіїв (точніше, стан віддаленого репо на момент останньої синхронізації). Вони дозволяють  відрізняти та відслідковувати локальні зміни та зміни інших учасників, що є дуже важливим для успішної синхронізації роботи між різними репозиторіями.","","Важливою властивістю віддалених гілок є те, що коли перейти на них, ти опинишся в стані `detached HEAD`. Git робить це спеціально, так як неможливо працювати з ними напряму; ти маєш працювати в локальній гілці й по необхідності синхронізуватися з віддаленим репозиторієм (після чого віддалену гілку буде оновлено)."]}},{type:"ModalAlert",options:{markdowns:["### Що за `o/`? Або Римський салют","","Ти, можливо, здогадуєшся для чого потрібен префікс `o/` на віддалених гілках. Так, існує (примусове) правило іменування віддалених гілок  -- вони відображаються в форматі:","","* `<ім’я віддаленого репо>/<ім’я гілки>`","","Отже, якщо розглянути гілку з назвою `o/master`, то ім’я гілки -- це `master` а ім’я віддаленого репозиторію -- це `o`.","","Більшість розробників насправді називають ім’я головного віддаленого репозиторію `origin` (початок), а не `o`. Це настільки поширена практика, що гіт автоматично називає віддалений репозиторій `origin` коли ти його клонуєш.","","На жаль повністю ім’я `origin` не влазить в наш UI, натомість ми будемо використовувати коротше `o` :( Просто не забудь, коли будеш використовувати звичайний гіт, що твій віддалений репо скоріш за все називається `origin`!","","Це багато інформації, погляньмо як це працює на прикладі."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Зробімо checkout віддаленої гілки й подивімось, що буде"],afterMarkdowns:["Як бачиш, git перейшов в стан `detached HEAD` і не оновив `o/master` коли ми зробили новий коміт. Це тому, що `o/master` буде оновлено лише тоді, коли буде оновлено віддалений репозиторій."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Щоб пройти цей рівень, зроби один коміт в `master`, а потім переключись в `o/master` і закомітся ще раз. Це наглядно продемонструє поведінку віддалених гілок, а також покаже як зміни впливають на стан віддаленого репозиторію."]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["## Nhánh Git từ xa","","Giờ bạn đã thấy cách thức hoạt động của `git clone`, cùng xem xét kỹ hơn những gì đã xảy ra.","","Điều đầu tiên mà có thể bạn để ý là một nhánh mới xuất hiện trong kho chứa địa phương của ta là `o/master`. Loại nhánh này được gọi là nhánh _từ xa_ (_remote_) ; nhánh từ xa có những thuộc tính đặc biệt vì chúng phục vụ những mục đích duy nhất.","","Nhánh từ xa phản ánh _trạng thái_ (_state_) của kho chứa từ xa (kể từ lần cuối cùng bạn tương tác với kho chứa từ xa). Chúng giúp bạn hiểu về sự khác biệt giữa công tác trên kho chứa cục bộ với kho chứa từ xa -- một bước quan trọng trước khi chia sẻ công việc của bạn với người khác.","","Nhánh từ xa có một thuộc tính đặc biệt đó là khi bạn chuyển sang chúng bạn sẽ vào trạng thái tách rời `HEAD`. Git chủ tâm làm việc này vì bạn không thể công tác trực tiếp trên chúng; bạn phải công tác ở nơi khác và chia sẻ thành quả lên kho chứa từ xa (sau đó nhánh từ xa sẽ được cập nhật)."]}},{type:"ModalAlert",options:{markdowns:["###`o/` là gì vậy?","","Có thể bạn sẽ thắc mắc về ký tự `o/` ở đầu tên nhánh từ xa có ý nghĩa gì. Chà, tên nhánh từ xa cũng có (thiết yếu) quy tắc đặt tên -- chúng được hiển thị dưới dạng:","","* `<tên kho từ xa>/<tên nhánh>`","","Do đó, ở trong `o/master` thì `master` là tên nhánh còn `o` là tên kho chứa từ xa.","","Thực tế thì hầu hết các nhà phát triển đặt tên kho chứa từ xa là `origin` chứ không phải `o`. Nó trở thành thông lệ đến nỗi Git đặt tên `origin` cho kho chứa từ xa khi bạn dùng `git clone` để sao chép một kho chứa.","","Đáng tiêc là `origin` không khớp trong giao diện của chúng tôi, nên chúng tôi đành phải viết tắt là `o` :( Nhưng hãy nhớ rằng khi dùng git thật sự thì chắc hẳn tên của kho chứa từ xa sẽ là `origin`!","","Lý thuyết hơi nhiều rồi, đi vào thực hành thôi."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy thử chuyển sang nhánh từ xa xem điểu gì xảy ra"],afterMarkdowns:["Như bạn thấy, git đưa ta vào trạng thái `HEAD` và không cập nhật nhánh `o/master` khi ta thêm một commit. Đó là bởi vì `o/master` chỉ cập nhật khi kho chứa từ xa được cập nhật."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Để hoàn thành cấp độ này, commit một lần trên `master` và một lần nữa sau khi chuyển sang `o/master`. Điều nãy sẽ giúp ta hiểu cách nhánh từ xa hành xử, chúng chỉ cập nhật để phản ánh trạng thái của kho chứa từ xa."]}}]}}}},{}],147:[function(e,t,o){o.level={disabledMap:{"git branch":!0,"git checkout":!0},goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"bar":{"target":"C1","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin :foo;git fetch origin :bar",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Source of nothing",zh_CN:"没有 source 的 source",zh_TW:"沒有 source",es_AR:"Origen de nada",es_ES:"Origen de nada",pt_BR:"Origem vazia",gl:"Orixen de nada",de_DE:"Die Quelle des Nichts",ja:"無のsource",fr_FR:"Source de rien du tout",ru_RU:"Пустой источник",ko:"Source가 없다",uk:"Нема джерела",vi:"Không có nguồn"},hint:{en_US:"The branch command is disabled for this level so you'll have to use fetch!",zh_CN:"本关的 branch 命令被禁用了，你只能用 fetch！",zh_TW:"在本關卡中，不允許使用 branch 指令，因此你只能使用 fetch！",es_AR:"El comando branch está deshabilitado para este nivel, así que ¡vas a tener que usar fetch!",es_ES:"El comando branch está deshabilitado para este nivel, así que ¡vas a tener que usar fetch!",pt_BR:"O comando branch está desabilitado para este nível, então você terá de usar o fetch!",gl:"O comando branch está deshabilitado para este nivel, entón terás que empregar o comando fetch!",de_DE:"Der branch Befehl ist für diesen Level inaktiv, du musst also fetch benutzen",ja:"このレベルではbranchコマンドが無効になっているのでfetchを使うしかない！",fr_FR:"La commande branch est désactivée pour ce niveau, vous devrez donc utiliser fetch !",ru_RU:"Команда branch недоступна на этом упражнении, пользуйтесь командой fetch!",ko:"branch 명령이 비활성화 되어있습니다. fetch를 사용해야 되요!",uk:"Команда branch недоступна на цьому уроці, користуйся командою fetch!",vi:"Lệnh branch đã bị vô hiệu hóa ở cấp độ này nên bạn sẽ phải dùng fetch!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Oddities of `<source>`","",'Git abuses the `<source>` parameter in two weird ways. These two abuses come from the fact that you can technically specify "nothing" as a valid `source` for both git push and git fetch. The way you specify nothing is via an empty argument:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Let's see what these do..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['What does pushing "nothing" to a remote branch do? It deletes it!'],afterMarkdowns:['There, we successfully deleted the `foo` branch on remote by pushing the concept of "nothing" to it. That kinda makes sense...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finally, fetching "nothing" to a place locally actually makes a new branch'],afterMarkdowns:["Very odd / bizarre, but whatever. That's git for you!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["This is a quick level -- just delete one remote branch and create a new branch with `git fetch` to finish!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Les bizarreries de `<source>`","","Git permet de faire deux choses contre-intuitives avec le paramètre `<source>`. Ces deux astuces viennent du fait que vous pouvez techniquement ne *rien* spécifier comme `source` valide pour git push et git fetch. Autrement dit laisser vide la partie gauche de la refspec (avant le deux-points) :","","* `git push origin :side`","* `git fetch origin :bugFix`","","Voyons ce que cela fait ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Qu'est-ce que produit l'envoi de \"rien\" sur une branche distante ? Cela la détruit !"],afterMarkdowns:['Ici, nous avons brillamment supprimé  la branche `foo` du dépôt distant en lui envoyant le concept de "rien". Cela paraît à peu près logique...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Ensuite, un fetch de "rien" dans un emplacement local crée une nouvelle branche.'],afterMarkdowns:["Très étrange, mais peu importe. C'est git !"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["L'exercice pour ce niveau est simple : supprimez d'abord une branche distante puis terminez en en créant une nouvelle (locale) avec `git fetch` !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rarezas de `<origen>`","",'Git abusa del parámetro `<origen>` de dos extrañas maneras. Estos dos abusos vienen del hecho de que técnicamente podés especificar "la nada" como un `origen` válido tanto para git push como para git fetch. El modo de especificar la nada es a través de un parámetro vacío:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Veamos qué hacen estos..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['¿Qué hace el pushear "nada" a una rama remota? ¡La elimina!'],afterMarkdowns:['Ahí está, borramos la rama `foo` exitosamente del remoto pusheándole el concepto de "nada". Tiene algo de sentido...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finalmente, fetchear "nada" a un lugar local en realidad crea una nueva rama'],afterMarkdowns:["Bastante bizarro, pero, meh, da igual. Así es git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Este es un nivel rápido: simplemente borrá una rama remota y creá una nueva usando `git fetch` para completarlo."]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rarezas de `<origen>`","",'Git abusa del parámetro `<origen>` de dos extrañas maneras. Estos dos abusos vienen del hecho de que técnicamente puedes especificar "la nada" como un `origen` válido tanto para git push como para git fetch. El modo de especificar la nada es a través de un parámetro vacío:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Veamos qué hacen estos..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['¿Qué hace el hacer push de "nada" a una rama remota? ¡La elimina!'],afterMarkdowns:['Ahí está, eliminamos la rama `foo` exitosamente del remoto haciendo push con "nada". Tiene algo de sentido...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finalmente, hacer fetch de "nada" a un lugar local en realidad crea una nueva rama'],afterMarkdowns:["Bastante extraño, pero bueno, da igual. Así es git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Este es un nivel breve: simplemente elimina una rama remota y crea una nueva usando `git fetch` para completarlo."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Coisas estranhas do `<origem>`","",'O Git abusa do parâmetro `<origem>` de duas formas estranhas. Esses dois abusos vem do fato de que tecnicamente você pode especificar "nada" como uma `origem` válida tanto para o git push como para o git fetch. A forma como você especifica "nada" é por meio de um argumento vazio:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Vejamos o que esses comandos fazem..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['O que fazer push de "coisa nenhuma" para um ramo remoto significa? Deletar o ramo!'],afterMarkdowns:['Aqui, excluímos com sucesso o ramo `foo` do repositório remoto por meio de um push de "coisa nenhuma" direcionado a ele. Até que faz sentido...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finalmente, fazer um fetch de "coisa nenhuma" para uma referência local cria um novo ramo'],afterMarkdowns:["Bastante estranho / bizarro, mas de qualquer forma. É assim que o Git é!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Este é um nível rápido de resolver -- basta remover um ramo remoto com `git push` e criar um novo ramo local com `git fetch` para terminar!"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rarezas do `<orixe>`","",'Git abusa do parámetro `<orixe>` de dúas maneiras extranas. Estos dous abusos veñen do feito de que técnicamente podes especificar "á nada" como un `orixe` válido tanto para git push como para git fetch. O modo de especificar a nada é a través dun parámetro vacío:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Vexamos qué fan..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['¿Qué fai cando se empurra a "nada" a unha rama remota? ¡Eliminaa!'],afterMarkdowns:['Ahí está, borramos a rama `foo` exitosamente do remoto empurrando o concepto da "nada". Ten algo de sentido...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finalmente, descargar a "nada" a un lugar local na realidade crea unha nova rama'],afterMarkdowns:["Bastante bizarro, pero, meh, da igual. Así é git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Este é un nivel rápido: simplemente borra unha rama remota e crea unha nova empregando `git fetch` para completalo."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["###`<source>` 奇怪的地方","",'在兩個奇怪的情況下，git 不使用 `<source>` 參數，事實上，在`git push`以及`git fetch`的情況下，可以允許你"不用"指定` source`，你可以藉由把參數留空，來表示你不想指定 source：',"","* `git push origin :side`","* `git fetch origin :bugFix`","","讓我們來看看這些在做什麼..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["當*沒有*指定 source 的時候，`push` 對於 remote branch 做了什麼？`push`把它刪除掉了！"],afterMarkdowns:['看吧，我們藉由把 source "留空"，成功用 `push` 刪除了 `foo` branch，這合理吧...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['最後，對於 `fetch` 來說，source "留空" 表示我們要在 local 上建立一個新的 branch。'],afterMarkdowns:["很奇怪吧！但那正是 git 為你做的事情！"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["這是一個很簡單的關卡，只需要利用 `git push` 刪除一個 remote 的 branch，並且利用 `git fetch` 建立一個新的 local 的 branch！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 古怪的 `<source>`","","Git 有两种关于 `<source>` 的用法是比较诡异的，即你可以在 git push 或 git fetch 时不指定任何 `source`，方法就是仅保留冒号和 destination 部分，source 部分留空。","","* `git push origin :side`","* `git fetch origin :bugFix`","","我们分别来看一下这两条命令的作用……"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果 push 空 <source> 到远程仓库会如何呢？它会删除远程仓库中的分支！"],afterMarkdowns:["就是这样子, 我们通过给 push 传空值 source，成功删除了远程仓库中的 `foo` 分支, 这真有意思..."],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果 fetch 空 <source> 到本地，会在本地创建一个新分支。"],afterMarkdowns:["很神奇吧！但无论怎么说, 这就是 Git！"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["这个关卡很容易 —— 只要删除一个远程的分支, 再用 `git fetch` 在本地创建一个新分支就可以了！"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Die Eigentümlichkeiten von `<Quelle>`","",'Git "missbraucht" den `<Quelle>`-Parameter in zwei Fällen. Diese rühren daher, dass man technisch gesehen "nichts" als gültige `<Quelle>` sowohl für `git push` als auch für `git fetch` angeben kann. Das macht man so:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Schauen wir, was das bewirkt ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Was passiert, wenn man "nichts" auf einen entfernten Branch pusht? Er wird gelöscht!'],afterMarkdowns:['Und schon haben wir `foo` erfolgreich auf dem Remote gelöscht, weil wir "Leere" darauf geschoben haben. Ist auf seine Weise irgendwie logisch ...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Und weiter: indem man "nichts" von einem Remote in sein lokales Repository zieht, erstellt man tatsächlich einen neuen Branch.'],afterMarkdowns:["Ziemlich abgefahren / bizarr, aber was soll's. Das ist halt Git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Das ist ein kurzer Level -- lösch einfach den Remote Branch und erstelle einen neuen Branch mit `git fetch`, um ihn zu lösen."]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["### Странный `<источник>`","","Git использует параметр `<источник>` странным образом. Странность заключается в том, что Вы можете оставить пустым параметр `<источник>` для команд git push и git fetch:","","* `git push origin :side`","* `git fetch origin :bugFix`","","Посмотрим, что же из этого выйдет..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Что же будет с веткой, на которую мы делаем git push с пустым аргументом `<источник>`? Она будет удалена!"],afterMarkdowns:['Как видите, мы удалили ветку `foo` в удаленном репозитории, попытавшить протолкнуть(git push) в неё "ничего".'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Наконец, если мы попытаемся притянуть изменения(git fetch) из "ничего" к нам в локальный репозиторий, то это создаст у нас новую ветку'],afterMarkdowns:["Вот такой вот чудной git!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Это легкое упражнение - нужно всего лишь удалить одну ветку в удаленном репозитории и создать новую ветку в локальном, с помощью команд `git push` и `git fetch` соответственно!"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["###`<source>`의 이상함","",'Git은 `<source>` 인자를 두가지 방법으로 이상하게 사용합니다. 이 두가지 오용은 여러분이 git push와 git fetch에 `source`에 "없음"을 지정할 수 있기 때문에 나타납니다. "없음"을 지정하는 방법은 인자로 아무것도 안쓰면 됩니다:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","위에 처럼 말이죠, 뭘 할 수 있는지 확인해봅시다..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['"없음"을 원격 브랜치로 push하면 무엇을 할까요? 원격저장소의 그 브랜치를 삭제합니다!'],afterMarkdowns:['됬습니다, 원격 저장소의 `foo`브랜치를 성공적으로 삭제했습니다. "없음"을 push한다는것이 이것을 이뤘습니다. 흠 말이 되는것 같네요 null을 push했어요...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['마지막으로, "nothing"을 fetch하면 로컬에 새 브랜치를 만듭니다'],afterMarkdowns:["기괴합니다... 뭐어때요. git이 이런데요 뭐!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["이번 레벨은 금방 넘어가는 레벨입니다 -- 원격저장소의 브랜치하나를 삭제하고 `git fetch`를 이요해서 새 브랜치를 만들어보세요!"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["### Неочевидні способи використання `<source>`","","Git має два хитрі способи використання `<source>`. Обидва випливають з факту, що формально (і цілком легально) ти можеш не вказувати джерело (`source`) як для git push так і для git fetch. Ось, як саме ти можеш це зробити:","","* `git push origin :side`","* `git fetch origin :bugFix`","","Погляньмо, що в результаті вийде..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Що буде, якщо спробувати запушити "ніщо" у гілку віддаленого репозиторію? Git її видалить!'],afterMarkdowns:['Ось, ми успішно видалили гілку `foo` на віддаленому сервері, запушивши в неї "ніщо". Ну, ніби все правильно...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['І останнє, звантаження "нічого" в локальний репозиторій створює нову гілку'],afterMarkdowns:["Дуже дивно, але такий він, git!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Це швидкий рівень -- просто видали одну віддалену гілку і створи нову локальну гілку, використовуючи `git fetch`!"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["### Sự kỳ quặc của `<nguồn>`","",'Git lợi dụng tham số `<nguồn>` theo 2 cách khá dị.Hai cách lợi dụng này bắt nguồn từ thục tế là bạn có thể "không chỉ định" `nguồn` cho cả git push và git fetch. Bạn có thể làm điều này bằng cách để trống tham số như sau:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Hãy xem thử 2 câu lệnh này làm việc gì..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Nếu ta đẩy "không gì cả" lên một nhánh từ xa thì nó sẽ làm gì? Nó xóa nhánh đó!'],afterMarkdowns:['Đó, ta đã xóa thành công nhánh `foo` trên kho chứa từ xa bằng cách đẩy "không gì cả" lên nó. Khá là hợp lý...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Cuối cùng, nạp "không gì cả" vào một kho chứa cục bộ thực tế sẽ tạo ra một nhánh mới'],afterMarkdowns:["Khá là quái và dị. Nhưng mà dó là những gì git làm!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Ở cấp độ đơn giản này -- bạn chỉ cần xóa một nhánh từ xa và tạo ra một nhánh mới với `git fetch` để hoàn thành!"]}}]}}}},{}],148:[function(e,t,o){o.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%7D%2C%22side%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22side%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22side%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git checkout -b side o/master;git commit;git pull --rebase;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Remote Tracking",zh_CN:"远程追踪",zh_TW:"remote tracking",es_AR:"Trackeando remotos",es_ES:"Trackeando remotos",pt_BR:"Seguindo remotos",gl:"Traceando os remotos",de_DE:"Remote Tracking",ja:"リモートのトラッキング",fr_FR:"Suivi de branche distante",ru_RU:"Слежка за удалённым репозиторием",ko:"원격 저장소 추적하기",uk:"Слідкуємо за віддаленим репозиторієм",vi:"Theo dõi từ xa"},hint:{en_US:"Remember there are two ways to set remote tracking!",zh_CN:"记住，有两种设置 remote tracking 的方法!",zh_TW:"記住喔，有兩個方式可以去設定 remote tracking",es_AR:"¡Acordate de que hay dos formas de trackear un remoto!",es_ES:"¡Recuerda que hay dos formas de trackear un remoto!",pt_BR:"Lembre-se que há duas formas de seguir um ramo remoto!",gl:"¡Lembrate de que hai dúas formas de seguir unha rama remota!",de_DE:"Nicht vergessen, es gibt zwei Arten Remote Tracking einzurichten!",ja:"リモートトラッキングを設定する方法が二つあるのをお忘れなく!",fr_FR:"Rappelez-vous qu'il existe deux façons de configurer le suivi de branche distante !",ru_RU:"Помни, есть два способа установить слежку за удалённым репозиторием!",ko:"원격 추적하기를 설정하는데에는 두가지 방법이 있습니다!",uk:"Пам'ятай, є два способи слідкувати за віддаленим репозиорієм!",vi:"Hãy nhớ rằng, có 2 cách để thiết lập theo dõi từ xa!"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote-Tracking branches","",'One thing that might have seemed "magical" about the last few lessons is that git knew the `master` branch was related to `o/master`. Sure these branches have similar names and it might make logical sense to connect the `master` branch on the remote to the local `master` branch, but this connection is demonstrated clearly in two scenarios:',"","* During a pull operation, commits are downloaded onto `o/master` and then *merged* into the `master` branch. The implied target of the merge is determined from this connection.","* During a push operation, work from the `master` branch was pushed onto the remote's `master` branch (which was then represented by `o/master` locally). The *destination* of the push is determined from the connection between `master` and `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'Long story short, this connection between `master` and `o/master` is explained simply by the "remote tracking" property of branches. The `master` branch is set to track `o/master` -- this means there is an implied merge target and implied push destination for the `master` branch.',"","You may be wondering how this property got set on the `master` branch when you didn't run any commands to specify it. Well, when you clone a repository with git, this property is actually set for you automatically. ","","During a clone, git creates a remote branch for every branch on the remote (aka branches like `o/master`). It then creates a local branch that tracks the currently active branch on the remote, which is `master` in most cases.","","Once git clone is complete, you only have one local branch (so you aren't overwhelmed) but you can see all the different branches on the remote (if you happen to be very curious). It's the best of both worlds!","","This also explains why you may see the following command output when cloning:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Can I specify this myself?","","Yes you can! You can make any arbitrary branch track `o/master`, and if you do so, that branch will have the same implied push destination and merge target as `master`. This means you can run `git push` on a branch named `totallyNotMaster` and have your work pushed to the `master` branch on the remote!","","There are two ways to set this property. The first is to checkout a new branch by using a remote branch as the specified ref. Running","","`git checkout -b totallyNotMaster o/master`","","Creates a new branch named `totallyNotMaster` and sets it to track `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Enough talking, let's see a demonstration! We will checkout a new branch named `foo` and set it to track `master` on the remote."],afterMarkdowns:["As you can see, we used the implied merge target of `o/master` to update the `foo` branch. Note how master doesn't get updated!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["This also applies for git push"],afterMarkdowns:["Boom. We pushed our work to the `master` on the remote even though our branch was named something totally different"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Way #2","","Another way to set remote tracking on a branch is to simply use the `git branch -u` option. Running","","`git branch -u o/master foo`","","will set the `foo` branch to track `o/master`. If `foo` is currently checked out you can even leave it off:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this other way of specifying remote tracking real quick..."],afterMarkdowns:["Same as before, just a more explicit command. Sweet!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok! For this level let's push work onto the `master` branch on remote while *not* checked out on `master` locally. I'll let you figure out the rest since this is the advanced course :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Le suivi des branches distantes","",'Dans les dernières leçons, git savait que la branche `master` était reliée à `o/master`, et cela a pu vous paraître "magique". Il est certain que ces deux branches ont des noms similaires et il peut être logique de croire que la branche locale `master` est liée à la branche distante `master`, mais la relation n\'est prouvée que dans deux scénarios :',"","* Pendant un pull, les commits sont téléchargés dans `o/master` et ensuite *fusionnés* (merge) dans la branche `master`. La cible impliquée dans cette fusion est déterminée par cette relation.","* Pendant un push, le travail de la branche `master` a été envoyé sur la branche distante `master` (qui est localement représentée par `o/master`). La *destination* du push est déterminée par la relation entre `master` and `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","","Pour faire court, cette relation entre `master` et `o/master` est simplement portée par la propriété \"remote tracking\" (suivi distant) des branches. La branche `master` est configurée pour suivre `o/master` : cela signifie qu'il y a une cible de fusion et une destination d'envoi implicites pour la branche `master`.","","Vous vous demandez peut-être comment cette propriété a été configurée pour la branche `master` alors que vous n'avez exécuté aucune commande pour le faire. Eh bien, quand vous clonez un dépôt avec git, cette propriété est configurée automatiquement. ","","Pendant le clonage, git crée une branche distante pour chaque branche du dépôt distant (c'est à dire des branches comme `o/master`). Il crée ensuite une branche locale qui suit la branche actuellement active sur le dépôt distant, qui se trouve être `master` dans la plupart des cas.","","Une fois que git clone est terminé, vous avez seulement une branche locale (comme ça vous n'êtes pas submergé) mais vous pouvez voir toutes les branches distantes (si vous êtes très curieux). C'est le compromis idéal !","","Cela explique aussi pourquoi vous avez peut-être vu la sortie suivante pendant le clonage :","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Puis-je configurer cette relation moi-même ?","","Absolument ! Vous pouvez suivre `o/master` depuis n'importe quelle branche, et si vous le faîtes, cette branche va avoir la même destination de push et cible de merge que pour `master`. Cela signifie que vous pouvez exécuter `git push` sur une branche nommée `totallyNotMaster` mais envoyer tout de même votre travail sur la branche `master` du dépôt distant !","","Il y a deux façons de configurer cette propriété. La première est de créer une nouvelle branche en la branchant immédiatement sur la branche distante, à l'aide de `git checkout -b` :","","`git checkout -b totallyNotMaster o/master`","","Cette commande crée une nouvelle branche nommée `totallyNotMaster` et la configure pour suivre `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Assez parlé, faisons une démonstration ! Nous allons nous placer sur une nouvelle branche nommée `foo` et la configurer pour suivre `master` du dépôt distant."],afterMarkdowns:["Comme vous pouvez le voir, nous avons utilisé la cible de fusion déclarée pour `o/master` afin de mettre à jour la branche `foo`. Remarquez que la branche master n'a pas été mise à jour !!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cela s'applique aussi pour git push :"],afterMarkdowns:["Boum. Nous avons envoyé notre travail sur `master` vers le dépôt distant alors que notre branche avait un nom totalement différent."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Méthode n°2","","Une autre façon de configurer le suivi d'une branche est d'utiliser l'option `git branch -u`. La commande est alors :","","`git branch -u o/master foo`","","Ce qui va configurer la branche `foo` (déjà existante) pour suivre `o/master`. Si `foo` est la branche courante, vous pouvez même ne pas la préciser :","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons cette autre manière de paramètrer le suivi d'une branche distante..."],afterMarkdowns:["C'est la même chose, et c'est juste un peu plus explicite. Cool !"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok ! Pour ce niveau, envoyons notre travail sur la branche distante `master` en ne se trouvant *pas* sur la branche `master` locale. Je vous laisse chercher comment faire, puisque c'est une leçon de niveau avancé :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Ramas que trackean remotos","",'Una de las cosas que pueden haber parecido "mágicas" de las últimas lecciones es que git sabía que la rama `master` estaba relacionada con `o/master`. Obviamente, estas ramas tienen nombres parecidos, y podría parecer lógico conectar la rama `master` del remoto con la rama `master` local, pero esta conexión es bien evidente en dos escenarios:',"","* Durante una operación de pull, los commits se descargan a `o/master` y después se *mergean* a la rama `master`. El objetivo implícito del merge se determina con esta conexión.","* Durante un push, el trabajo de la rama `master` se sube a la rama `master` del remoto (que estaba representada localmente por `o/master`). El *destino* del push se determina con esta conexión entre `master` y `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Trackeando remotos","",'Haciéndola corta, esta conexión entre `master` y `o/master` se explica simplemente por la propiedad de "trackear (seguir) remotos" de las ramas. La rama `master` está configurada para trackear `o/master` -- osea, que hay un objetivo implícito para el merge y un destino implícito para de la rama `master`.',"","Podrías estar pensando cómo esa propiedad apareció en tu rama `master` si vos no corriste ningún comando para especificarlo. Bueno, cuando clonás un repositorio con git, esta propiedad se asigna por vos automáticamente.","","Durante un clone, git crea una rama remota por cada rama en el remoto (por ejemplo, ramas como `o/master`). Pero después crea una rama local que trackea la rama activa del remote, que suele ser `master`.","","Una vez completado el git clone, sólo tenés una única rama local (para que no te asustes) pero podés ver todas las ramas que del remoto (si fueras tan curioso). ¡Es lo mejor de ambos mundos!","","Esto también explica por qué podrías ver un mensaje como este durante la clonación:","",'    local branch "master" set to track remote branch "o/master"',"",'    rama local "master" establecida para trackear la rama remota "o/master"']}},{type:"ModalAlert",options:{markdowns:["### ¿Puedo especificarlo yo?","","¡Claro que sí! Podés hacer que cualquier rama que quieras trackee `o/master`, y si lo hicieras, esa rama va a tener el mismo destino implícito de push y objetivo implícito de merge que `master`. Eso significa que podés correr `git push` en una rama llamada `absolutamenteNoEsMaster` y ¡que tu trabajo se pushee a la rama `master` del remoto!","","Hay dos formas de establecer esta propiedad. La primera es checkoutear una nueva rama usando una rama remota como la referencia especificada. Ejecutar","","`git checkout -b absolutamenteNoEsMaster o/master`","","Crea una nueva rama llamada `absolutamenteNoEsMaster` y la hace trackear a `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Suficiente charla, ¡veamos una demo! Vamos a checkoutear una nueva rama llamada `foo` y hacer que trackee a `master` en el remoto."],afterMarkdowns:["Como podés ver, usamos el objetivo implícito de merge `o/master` para actualizar la rama `foo`. ¡Notá cómo `master` no fue actualizada!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lo mismo aplica para git push"],afterMarkdowns:["Boom. Pusheamos nuestro trabajo a la rama `master` del remoto incluso cuando nuestra rama se llamaba totalmente distinto"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Forma número 2","","Otra forma de especificar la rama a trackear es usar la opción `git branch -u`. Ejecutando","","`git branch -u o/master foo`","","establecemos que la rama `foo` trackee a `o/master`. Si encima estás parado en `foo`, incluso podés obviarlo:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos rápidamente esta otra forma de especificar la rama a trackear..."],afterMarkdowns:["Lo mismo que antes, sólo que con un comando bastante más explícito. ¡Una belleza!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["¡Ok! Para este nivel, pusheá tu trabajo a la rama `master` del remoto *sin* estar parado sobre `master` localmente. Te dejo que te des cuenta del resto solo, que para algo este es el curso avanzado :P"]}}]},es_ES:{childViews:[{type:"ModalAlert",options:{markdowns:["### Ramas que trackean remotos","",'Una de las cosas que te pueden haber parecido "mágicas" de las últimas lecciones es que git sabía que la rama `master` estaba relacionada con `o/master`. Obviamente, estas ramas tienen nombres parecidos, y podría parecer lógico conectar la rama `master` del remoto con la rama `master` local, pero esta conexión es bien evidente en dos escenarios:',"","* Durante una operación de pull, los commits se descargan a `o/master` y después se *mergean* a la rama `master`. El objetivo implícito del merge se determina con esta conexión.","* Durante un push, el trabajo de la rama `master` se sube a la rama `master` del remoto (que estaba representada localmente por `o/master`). El *destino* del push se determina con esta conexión entre `master` y `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Trackeando remotos","",'Resumiendo, esta conexión entre `master` y `o/master` se explica simplemente por la propiedad de "trackear (seguir) remotos" de las ramas. La rama `master` está configurada para trackear `o/master` -- osea, que hay un objetivo implícito para el merge y un destino implícito para de la rama `master`.',"","Podrías estar pensando cómo esa propiedad apareció en tu rama `master` si no ejecutaste ningún comando para especificarlo. Bueno, cuando clonas un repositorio con git, esta propiedad es asignada por ti automáticamente.","","Durante un clone, git crea una rama remota por cada rama en el remoto (por ejemplo, ramas como `o/master`). Pero después crea una rama local que trackea la rama activa del remote, que suele ser `master`.","","Una vez completado el git clone, sólo tienes una única rama local (para que no te asustes) pero puedes ver todas las ramas del remoto (si fueses curioso). ¡Es lo mejor de ambos mundos!","","Esto también explica por qué podrías ver un mensaje como este durante la clonación:","",'    local branch "master" set to track remote branch "o/master"',"",'    rama local "master" establecida para trackear la rama remota "o/master"']}},{type:"ModalAlert",options:{markdowns:["### ¿Puedo especificarlo yo?","","¡Claro que sí! Puedes hacer que cualquier rama que quieras trackee `o/master`, y si lo hicieras, esa rama va a tener el mismo destino implícito de push y objetivo implícito de merge que `master`. Eso significa que puedes ejecutar `git push` en una rama llamada `absolutamenteNoEsMaster` y ¡que tu trabajo se pushee a la rama `master` del remoto!","","Hay dos formas de establecer esta propiedad. La primera es hacer checkout sobre una nueva rama usando una rama remota como la referencia especificada. Ejecutar","","`git checkout -b absolutamenteNoEsMaster o/master`","","Crea una nueva rama llamada `absolutamenteNoEsMaster` y la hace trackear a `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Basta de charla, ¡veamos un ejemplo! Vamos a hacer checkout de una nueva rama llamada `foo` y hacer que trackee a `master` en el remoto."],afterMarkdowns:["Como puedes ver, usamos el objetivo implícito de merge `o/master` para actualizar la rama `foo`. ¡Observa cómo `master` no fue actualizada!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lo mismo aplica para git push"],afterMarkdowns:["Zas. Hacemos push de nuestro trabajo a la rama `master` del remoto incluso cuando nuestra rama se llamaba totalmente distinto"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Forma número 2","","Otra forma de especificar la rama a trackear es usar la opción `git branch -u`. Ejecutando","","`git branch -u o/master foo`","","establecemos que la rama `foo` trackee a `o/master`. Si encima estás parado en `foo`, incluso puedes obviarlo:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos rápidamente esta otra forma de especificar la rama a trackear..."],afterMarkdowns:["Lo mismo que antes, sólo que con un comando bastante más explícito. ¡Muy útil!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["¡Perfecto! Para este nivel, haz push de tu trabajo a la rama `master` del remoto *sin* estar parado sobre `master` localmente. Te dejo que te des cuenta del resto solo, que para algo este es el curso avanzado :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Seguindo ramos remotos","",'Uma coisa que pode ter parecido "mágica" nas lições passadas é que o Git sabia que o ramo `master` estava relacionado com o `o/master`. Certamente esses ramos possuem nomes similares, e tem todo sentido lógico conectar o ramo `master` do lado remoto com o ramo `master` local, mas essa conexão é demonstrada claramente em dois cenários:',"","* Durante uma operação de pull, os commits são baixados em `o/master` e então são *mergidos* no ramo `master`. O alvo do merge é determinado a partir dessa conexão.","* Durante uma operação de push, o trabalho do ramo `master` local é enviado para o ramo `master` remoto (que é representado localmente por `o/master`). O *destino* do push é determinado da conexão entre `master` e `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'Resumindo a história, essa conexão entre `master` e `o/master` é explicada pela propriedade de "remote tracking" dos ramos. O ramo `master` é configurado para seguir o ramo `o/master` -- isso significa que existe um alvo implícito de merge e um destino implícito de push para o ramo `master`.',"","Você pode estar se perguntando como essa propriedade foi configurada no ramo `master` se você não executou nenhum comando ordenando que isso fosse feito. Bem, quando você clona um repositório com o Git, essa propriedade é configurada para você automaticamente. ","","Durante a clonagem, o Git cria um ramo remoto para cada ramo que existe no repositório remoto (ou seja, ramos como o `o/master`). Ele cria então um ramo local que segue o ramo atualmente ativo no repositório remoto, que geralmente é o `master`.","","Uma vez que a clonagem esteja completa, você terá apenas um único ramo local (para que você não seja sobrecarregado), mas você pode ver todos os ramos diferentes que existem no repositório remoto (caso você esteja curioso). É o melhor dos dois mundos!","","Isso também explica porque você vê a seguinte mensagem quando clona um repositório:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Posso eu mesmo especificar isso?","","Sim, você pode! Você pode fazer com que qualquer ramo arbitrário siga o `o/master`, e se você fizer isso, esse ramo terá o mesmo destino de push implícito que e o mesmo alvo de merge que o `master`. Isso significa que você pode executar `git push` em um ramo chamado `realmenteNaoSouOMaster` e ainda assim ter seu trabalho enviado ao ramo `master` do repositório remoto!","","Há duas formas de configurar essa propriedade. A primeira consiste em fazer checkout de um novo ramo usando o ramo remoto como especificação de referência. Executar","","`git checkout -b realmenteNaoSouOMaster o/master`","","Cria um novo ramo chamado `realmenteNaoSouOMaster` e o configura para seguir o `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Já foi conversa o suficiente, vamos ver uma demonstração! Vamos fazer checkout de um novo ramo chamado `foo` e configurá-lo para seguir o `master` do repositório remoto."],afterMarkdowns:["Como você pode ver, usamos o alvo implícito de merge do `o/master` para atualizar o ramo `foo`. Veja como o master local não sofreu atualização!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Isso também se aplica ao git push"],afterMarkdowns:["Boom. Nós enviamos nosso trabalho para o ramo remoto `master` ainda que nosso ramo local tivesse um nome completamente diferente"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Forma #2","","Outra maneira de configurar remote tracking em um ramo é utilizando `git branch -u`. Executando","","`git branch -u o/master foo`","","configuraremos o ramo local `foo` para seguir o `o/master`. Se `foo` for o que estiver atualmente em checkout, você pode inclusive omiti-lo:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos outra forma realmente rápida de configurar remote tracking..."],afterMarkdowns:["O mesmo de antes, apenas um comando mais explícito. Doce!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok! Para este nível, vamos fazer push no ramo remoto `master` *sem estar* em um checkout do `master` local. Vou deixar você descobrir o resto, já que isto é um curso avançado :P"]}}]},gl:{childViews:[{type:"ModalAlert",options:{markdowns:["### Ramas que trackean os remotos","",'Unha das cousas que poden semellar "máxicas" das últimas leccións é que git sabía que a rama `master` estaba relacionada co `o/master`. Obviamente, estas ramas teñen nomes semellantes, e podería semellar lóxico conectar a rama `master` do remoto ca rama `master` local, pero esta conexión é ben evidente nos dous escenarios:',"","* Durante unha operación de pull, os commits descarganse ó `o/master` e logo *mesturanse* á rama `master`. O obxectivo implícito do merge determinase con esta conexión.","* Durante un push, o traballo da rama `master` súbese á rama `master` do remoto (que estaba representada localmente por `o/master`). O *destino* do push determinouse con esta conexión entre `master` e `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Trackeando remotos","",'Facéndoa curta, esta conexión entre `master` e `o/master` ensínase pola propiedade de "trackear (seguir) remotos" das ramas. A rama `master` está configurada para trackear `o/master` -- o que quere dicir, que hai un obxectivo implícito para o merge e un destino implícito para a rama  `master`.',"","Poderías estar pensando cómo esa propiedade apareceu na túa rama `master` se ti non executaches ningún comando para especificalo. Bueno, cando clonas un repositorio co git, esta propiedade asignase por ti automáticamente.","","Durante un clone, git crea unha rama remota por cada rama no remoto (por exemplo, ramas como `o/master`). Pero despois crea unha rama local que trakea a rama activa do remoto, que habitúa ser `master`.","","Una vez completado o git clone, só tés unha única rama local (para que non te asustes) pero podes ver todalas ramas que do remoto (se fora tan curioso). ¡É o mellor de ámbolos dous mundos!","","Esto tamén explica por qué poderías ver unha mensaxe como este durante a clonación:","",'    local branch "master" set to track remote branch "o/master"',"",'    rama local "master" establecida para trackear a rama remota "o/master"']}},{type:"ModalAlert",options:{markdowns:["### ¿Podo especificalo eu?","","¡Claro que sí! Podes facer que calquera rama que quixeras seguir `o/master`, e se o fixeras, esa rama vai ter o mesmo destino implícito de push e  obxectivo implícito de merge que `master`. Eso significa que podes executar `git push` nunha rama chamada `nonMaster` e ¡que o teu traballo se empurre á rama `master` do remoto!","","Hai dúas formas de establecer esta propiedade. A primeira é facer checkout a unha nova rama empregando unha rama remota como a referencia especificada. Executar","","`git checkout -b nonMaster o/master`","","Crea unha nova rama chamada `nonMaster` e persigue a `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Suficiente charla, ¡vexamos unha demo! Imos facer checkout a unha nova rama chamada `foo` e facer que siga a `master` no remoto."],afterMarkdowns:["Como podes ver, empregamos o obxectivo implícito de merge `o/master` para actualizar a rama `foo`. ¡Nota como `master` non foi actualizada!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["O mismo aplica para git push"],afterMarkdowns:["Boom. Empurramos o noso traballo á rama `master` do remoto incluso cando a nosa rama se chamaba totalmete distinto"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Forma número 2","","Outra forma de especificar a rama a seguir é usar a opción `git branch -u`. Executando","","`git branch -u o/master foo`","","establecemos que a rama `foo` segue a `o/mater`. Se por riba estás parado en `foo`, incluso podes obvialo:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vexamos rápidamente está outra forma de especificar a rama a seguir..."],afterMarkdowns:["O mesmo que antes, só que un comando bastante máis explícito. ¡Unha cousa preciosa!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["¡Ok! Para este nivel, empurra o teu traballo á rama `master` do remoto *sen* estar parado sobre `master` localmente. Déixote que te decates do resto ti só, que para algo estás nun nivel avanzado :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### remote tracking branch","",'在之前的課程中，有一件事情看起來很"神奇"，那就是 git 知道 `master` branch 是對應到 `o/master` branch。當然這些 branch 有類似的名稱，所以可以大概猜到， local 的 `master` branch 可以對應到 remote 的 `master branch`，但是我們是在兩種情況下可以確定有這個對應關係：',"","* 在使用 `pull` 的時候，下載 commit 到 `o/master`，並且 `merge` 這些 commit 到 `master` branch，這就表示這個 merge 的目標是決定於這個對應關係。","* 在使用 `push` 的時候，在 `master` branch 上面的 commit 被 push 到 remote 上面的 `master` branch （它在 local 被表示成 `o/master`），這就表示 push 的目標是決定於 `master` 以及 `o/master` 之間的對應關係。",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'長話短說，我們可以用 branch 上面的 "remote tracking" 特性來表示介於 `master` 以及 `o/master` 的對應關係，`master` branch 被設定用來追蹤（track） `o/master`，這就表示對於 `master` branch 來說的話，有一個 merge 的目標以及 push 的目標。',"","你可能會覺得很奇怪，當你沒有下任何指令去設定的時候，關於 `master` branch 的對應關係是如何被設定的。喔！其實當你 clone 一個 repo 的時候，其實就已經自動幫你做設定了。 ","","在做 clone 的時候，git 會針對每一個在 remote 上面的 branch 建立一個 branch （例如 `o/master`），之後它會建立一個 local branch 來追蹤目前在 remote 上面的 active branch，在大部份的情況下，幾乎都是設定 `master` branch。","","一旦 git 完成這個動作，你就只會有一個 local branch ，但是你可以看到所有在 remote 上面的不同的 branch，對於 local 和 remote 來說的話，這樣子是最好的！","","這也解釋了為什麼當你 clone 的時候可能會看到以下被輸出的指令：","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### 我可以自己設定嗎？","","是的你可以！你可以設定任何的 branch 來 track `o/master`， 假如你真的這麼做的話，那麼該 branch 的 push 及 merge 的目標就會跟 `master` 一樣。這就表示說你可以在 `totallyNotMaster` branch 上面執行 `git push`，並且 push 你的 commit 到 remote 的 `master` branch！","","有兩個方式可以設定，第一個就是藉由參考一個 remote branch 來 checkout 一個新的 branch。執行","","`git checkout -b totallyNotMaster o/master`","","建立一個新的 `totallyNotMaster` branch 並且它會 track `o/master`。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["說的好多，我們現在來看一個例子！我們會 checkout 一個新的 `foo` branch，而且該 branch 會被用來 track remote 上的 `master` branch。"],afterMarkdowns:["就像你看到的，當 `o/master` 更新的時候，`foo` branch 也跟著一起被更新，要注意 master 並沒有被更新！"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["同樣適用於 `git push`"],afterMarkdowns:["哇，即使我們的 branch 名稱完全一點關係都沒有，但我們還是 push 了 commit 到 remote 的 `master` branch 上面。"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### 方法 #2","","另外一個設定 remote tracking 的方法是使用 `git branch -u` 這一個指令，執行","","`git branch -u o/master foo`","","你就會看到 `foo` branch 被設定成 track `o/master`，如果你現在已經 checkout 到 foo 這個 branch 上面了，你就可以省略掉它：","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我們來看這個快速設定 remote tracking 的方法..."],afterMarkdowns:["跟之前一樣，就只是一個更加明確的指令，讚啦！"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["好！在這個關卡中，我們要 push 我們的 commit 到 remote 上面的 `master` branch，但是我們*不* checkout 到 local 的 `master` branch。因為這是一個進階的課程，所以我會讓你明白其它的東西。:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 远程跟踪分支","","在前几节课程中有件事儿挺神奇的，Git 好像知道 `master` 与 `o/master` 是相关的。当然这些分支的名字是相似的，可能会让你觉得是依此将远程分支 master 和本地的 master 分支进行了关联。这种关联在以下两种情况下可以清楚地得到展示：","","* pull 操作时, 提交记录会被先下载到 o/master 上，之后再合并到本地的 master 分支。隐含的合并目标由这个关联确定的。","* push 操作时, 我们把工作从 `master` 推到远程仓库中的 `master` 分支(同时会更新远程分支 `o/master`) 。这个推送的目的地也是由这种关联确定的！",""]}},{type:"ModalAlert",options:{markdowns:["## 远程跟踪","","直接了当地讲，`master` 和 `o/master` 的关联关系就是由分支的“remote tracking”属性决定的。`master` 被设定为跟踪 `o/master` —— 这意味着为 `master` 分支指定了推送的目的地以及拉取后合并的目标。","","你可能想知道 `master` 分支上这个属性是怎么被设定的，你并没有用任何命令指定过这个属性呀！好吧, 当你克隆仓库的时候, Git 就自动帮你把这个属性设置好了。","","当你克隆时, Git 会为远程仓库中的每个分支在本地仓库中创建一个远程分支（比如 `o/master`）。然后再创建一个跟踪远程仓库中活动分支的本地分支，默认情况下这个本地分支会被命名为 `master`。","","克隆完成后，你会得到一个本地分支（如果没有这个本地分支的话，你的目录就是“空白”的），但是可以查看远程仓库中所有的分支（如果你好奇心很强的话）。这样做对于本地仓库和远程仓库来说，都是最佳选择。","","这也解释了为什么会在克隆的时候会看到下面的输出：","",'    local branch "master" set to track remote branch "o/master"',""]}},{type:"ModalAlert",options:{markdowns:["### 我能自己指定这个属性吗？","","当然可以啦！你可以让任意分支跟踪 `o/master`, 然后该分支会像 `master` 分支一样得到隐含的 push 目的地以及 merge 的目标。 这意味着你可以在分支 `totallyNotMaster` 上执行 `git push`，将工作推送到远程仓库的 `master` 分支上。","","有两种方法设置这个属性，第一种就是通过远程分支检出一个新的分支，执行: ","","`git checkout -b totallyNotMaster o/master`","","就可以创建一个名为 `totallyNotMaster` 的分支，它跟踪远程分支 `o/master`。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["闲话少说，咱们先看看演示！我们检出一个名叫 `foo` 的新分支，让其跟踪远程仓库中的 `master`"],afterMarkdowns:["正如你所看到的, 我们使用了隐含的目标 `o/master` 来更新 `foo` 分支。需要注意的是 master 并未被更新！"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git push 同样适用"],afterMarkdowns:["我们将一个并不叫 `master` 的分支上的工作推送到了远程仓库中的 `master` 分支上"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### 第二种方法","","另一种设置远程追踪分支的方法就是使用：`git branch -u` 命令，执行：","","`git branch -u o/master foo`","","这样 `foo` 就会跟踪 `o/master` 了。如果当前就在 foo 分支上, 还可以省略 foo：","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["看看这种方式的实际的效果..."],afterMarkdowns:["跟之前一样, 但这个命令更明确！"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["OK! 本节我们在**不**检出 `master` 分支的情况下将工作推送到的远程仓库中的 `master` 分支上。因为这是高级课程, 就不做过多的提示了! :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote Tracking Branches","",'In den letzten paar Leveln wirkte es womöglich etwas "magisch", dass Git automatisch wusste, dass der Branch `master` irgendwie mit `o/master` verwandt ist. Klar, sie haben ähnliche Namen und daher mag es logisch erscheinen sie in Verbindung zu bringen, aber offensichtlich wird es in zwei Szenarien:',"","* Beim `pull` werden Commits in `o/master` heruntergeladen und dann per *Merge* in den Branch `master` gebracht. Aus der Verbindung zwischen den beiden Branches leitet sich das Ziel des Merges ab.","* Beim `push` werden Commits vom `master` auf den `master` auf dem Remote Server geschoben (und die Änderung _danach_ in `o/master` abgebildet). Das *Ziel* des Push wird aus der Verbindung zwischen `master` und `o/master` abgeleitet.",""]}},{type:"ModalAlert",options:{markdowns:['Langer Rede kurzer Sinn, die Verbindung zwischen `master` und `o/master` ist einfach die Eigenschaft des "Remote Tracking" dieser Branches. `master` ist so eingestellt, dass er `o/master` trackt -- das heißt es gibt ein implizites Ziel für `pull` und `push` Operationen auf dem `master` Branch.',"","Du fragst dich vielleicht wieso diese Eigenschaft auf dem `master` definiert ist, wenn du das doch gar nicht explizit gemacht hast. Naja, beim Clonen eines Repository macht Git das für den `master` automatisch.","","Während des Clonens erstellt Git einen Remote Branch für jeden Branch, den es auf dem Remote Server findet (also Branches wie `o/master`); dann erstellt es für den Branch, auf den auf dem entfernten Server `HEAD` zeigt (meistens `master`) automatisch einen lokalen Branch und stellt ihn so ein, dass er sein Gegenstück auf dem Server trackt. Deswegen hast du beim clonen vielleicht schon mal dies gesehen:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Kann ich das auch selbst machen?","","Na klar! Du kannst jeden beliebigen Branch so einstellen, dass er `o/master` trackt, und wenn du das tust wird der Branch dieselben impliziten Zielangaben für `push` und `pull` haben wie `master`. Du kannst also `git push` auf dem Branch `absolut_nicht_master` ausführen und deine Commits auf `master` auf dem entfernten Server schieben lassen.","","Es gibt zwei Möglichkeiten diese Eigenschaft zu definieren. Die erste ist, einen neuen lokalen Branch von einem Remote Branch auszuchecken. Wenn man","","    git checkout -b absolut_nicht_master o/master","","eingibt, wird ein neuer lokaler Branch namens `absolut_nicht_master` angelegt, der `o/master` trackt."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Genug gequatscht, schauen wir uns eine Demonstration an! Wir checken einen neuen Branch `foo` aus, so dass er `master` auf dem Server trackt."],afterMarkdowns:["Wie du siehst benutzen wir der implizite Ziel beim `pull` um `foo` zu aktualisieren. Beachte, dass `master` nicht aktualisiert wird."],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Das gilt auch für `git push`."],afterMarkdowns:["Bämm. Wir haben unsere Commits auf den `master` auf dem Server geschoben, obwohl unser lokaler Branch völlig anders heißt."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Methode 2","","Noch eine Möglichkeit um Remote Tracking auf einem Branch einzustellen, ist einfach `git branch -u` zu benutzen. Wenn man","","    git branch -u o/master foo","","eingibt, wir damit der lokale Branch `foo` so eingestellt, dass er `o/master` trackt. Den Namen des lokalen Branch kannst du auch weglassen, falls du ihn eh aktuell ausgecheckt hast:","","    git branch -u o/master",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns auch diese Methode noch an ..."],afterMarkdowns:["Genau wie vorher, nur ein bisschen ausführlicherer Befehl. Schick!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok. In diesem Level muss du Commits auf den `master` auf dem Server schieben, *ohne* den lokalen `master` ausgecheckt zu haben. Den Rest kannst du selbst herausfinden, schließlich ist das hier für Fortgeschrittene. :P"]}}]},ru_RU:{childViews:[{type:"ModalAlert",options:{markdowns:["### Удалённые-отслеживаемые ветки","",'Единственное, что могло бы показаться вам "магией" в нескольких предыдущих уроках - это то, как git знает, что ветка `master` соответствует `o/master`. Конечно, эти ветки имеют схожие имена и связь между локальной и удалённой ветками `master` выглядит вполне логично, однако, эта связь наглядно продемонстрирована в двух сценариях:',"","* Во время операции pull коммиты скачиваются в ветку `o/master` и затем *соединяются* в ветку `master`. Подразумеваемая цель слияния определяется исходя из этой связи.","* Во время операции push наработки из ветки `master` закачиваются на удалённую ветку `master` (которая в локальном представлении выглядит как `o/master`). *Пункт назначения* операции push определяется исходя из связи между `master` и `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Удалённые-отслеживаемые ветки","",'Короче, связь между `master` и `o/master` объясняется не иначе как свойство "удалённое отслеживание" веток. Ветка `master` настроена так, чтобы следить за `o/master` -- это подразумевает наличие источника для merge и пункта назначения для push в контексте ветки `master`.',"","Вы, должно быть, удивлены, как это отслеживание появилось на ветке `master`, если мы не запускали ни одной специфической команды. На самом деле, когда вы клонируете репозиторий, это слежение включается автоматически.","","В процессе клонирования git локально создаёт удалённые ветки для каждой ветки с удалённого репозитория (такие как `o/master`). Затем он - git - создаёт локальные ветки, которые отслеживают текущую, активную ветку на удалённом репозитории. В большинстве случаев - это `master`.","","К тому моменту как `git clone` завершит своё выполнение, у вас будет лишь одна локальная ветка (так что вы ещё не сильно перегружены), но, если вам будет интересно, вы сможете увидеть все удалённые ветки (при желании).","","Именно это объясняет, почему сразу после клонирования вы видите в консоли надпись:","",'    local branch "master" set to track remote branch "o/master"',"",'    (локальная ветка "master" теперь следит за удалённой веткой "o/master") ']}},{type:"ModalAlert",options:{markdowns:["### А могу ли я сделать это самостоятельно?","","Само собой! Вы можете сказать любой из веток, чтобы она отслеживала `o/master`, и если вы так сделаете, эта ветка будет иметь такой же пункт назначения для push и merge как и локальная ветка `master`. Это значит, что вы можете выполнить `git push`, находясь на ветке `totallyNotMaster`, и все ваши наработки с ветки `totallyNotMaster` будут закачены на ветку `master` удалённого репозитория!","","Есть два способа сделать это. Первый - это выполнить checkout для новой ветки, указав удалённую ветку в качестве ссылки. Для этого необходимо выполнить команду","","`git checkout -b totallyNotMaster o/master`","",", которая создаст новую ветку с именем `totallyNotMaster` и укажет ей следить за `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Хватит болтовни, давайте взглянем на демонстрацию! Мы выполним checkout для новой ветки `foo` и укажем ей, чтобы она отслеживала `master` с удалённого репозитория."],afterMarkdowns:["Как вы увидели, мы использовали `o/master`, чтобы обновить ветку `foo`. Обратите внимание, как обновился `master`!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Это работает также и для git push"],afterMarkdowns:["Оп! Мы закачали наши наработки на ветку `master` нашего удалённого репозитория. При том, что наша локальная ветка называется абсолютно по-другому."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Способ №2","","Другой способ указать ветке отслеживать удалённую ветку — это просто использовать команду `git branch -u`. Выполнив команду","","`git branch -u o/master foo`","","вы укажете ветке `foo` следить за `o/master`. А если вы ещё при этом находитесь на ветке `foo`, то её можно не указывать:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Как видно, второй способ указать слежение за веткой намного быстрее..."],afterMarkdowns:["Словом, всё как и раньше, просто отдельная, специальная команда. Здорово!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Отлично! Для выполнения этого уровня давайте выполним push наших наработок в ветку `master` на удалённом репозитории, при этом *не* скачивая и не создавая ветку `master` локально. Я объясню вам оставшееся чуть позже, т.к. это продвинутый курс :P"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### リモートトラッキングブランチ","","もしかしたら直近の幾つかの章で、あることが「魔法」に見えたかもしれません。それは、gitが`master`ブランチは`o/master`に関連していることを知っていたということです。確かにこれらのブランチは似た名前を持っていて、それは、リモートの`master`ブランチとローカルの`master`ブランチを繋ぐ論理的な意味を成すかもしれません。しかし、リモートトラッキングの関係が、次のような2つの手順を明確にしています:","","* プルの実行時は、コミットを`o/master`上にダウンロードし、`master`ブランチにそれを*マージ*します。マージの暗黙のターゲットは、リモートトラッキングの関係によって決められます。","* プッシュの実行時は、`master`ブランチの作業はリモートの`master`ブランチ（ローカルでは`o/master`によって表現されています）にプッシュされます。プッシュ動作の決定は、`master`と`o/master`のリモートトラッキングな関係から決定されます。",""]}},{type:"ModalAlert",options:{markdowns:["## リモートトラッキング","",'かいつまんでは、`master`と`o/master`の関係は、単にそれぞれのブランチの"remote traking"というプロパティによって説召されます。`master`ブランチには`o/master`を追跡しているというように設定されているのです。これは、`master`ブランチのための暗黙のプッシュ先と暗黙の取り込み先が存在することを意味します。',"","あなたは特に何も指定せずにコマンドを走らせていたのに、`master`ブランチにこのプロパティが設定されていたことに疑問を持つかもしれません。そう、gitによってリポジトリを複製した時、gitは実はこのプロパティを自動的に設定してくれるのです。","","クローンしている間、gitはリモートブランチをリモートのブランチ全てに対して作ります（例えば、`o/master`のような感じです）。その後、現在アクティブなブランチを追跡するローカルブランチを作成します。多くの場合それは`master`ブランチになります。","","gitのクローンが完了した時、あなたの手にはたった一つだけローカルブランチがあります（なので、閉口しないでも大丈夫です）。しかし、あなたは全てのリモートのブランチ同士の違いを見ることができるのです（もし、あなたがそれについて非常に好奇心旺盛であるときはいつでもね！）。これは、両方の世界にとってベストです！","","これはクローン中に次のようなコマンド出力が表示されることも説明します:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### 私は自分でトラッキングを設定できますか？","","はい、できます！あなたは、全てのブランチについて`o/master`との追跡を設定でき、もしそうした時は、同じ暗黙のプッシュ先と取り込み先を`master`として設定します。これは、例えば`tottallyNotMaster`という名前のブランチで`git push`を走らせ、作業をリモートの`master`ブランチにプッシュするといったことができるということを意味しています！","","このプロパティを設定するには2つの方法があります。一つ目は、リモートブランチのリファレンスを使用して新しいブランチをチェックアウトするというものです。例えば次のコマンドを走らせてます","","`git checkout -b totallyNotMaster o/master`","","これは`totallyNotMaster`という名前のブランチを新しく作り、`o/master`への追跡プロパティを設定します。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["説明は十分でしょう、デモを見ていきましょう！`foo`という名前の新しいブランチをチェックアウトし、リモートの`master`への追跡プロパティを設定してみます。"],afterMarkdowns:["私たちは暗黙の取り込み先である`o/master`を使って、`foo`ブランチを更新します。`master`は更新されないことに注意してください！！"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["これは`git push`にも適用されます"],afterMarkdowns:["わーお。全く違う名前がつけられているブランチですが、リモートの`master`に私たちの作業をプッシュできました。"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### 二番目の方法","","ブランチのリモートトラッキングを設定するもう一つの方法は、単に`git branch -u`オプションを使うというものです。例えば以下のようにです","","`git branch -u o/master foo`","","これは、`foo`ブランチを`o/master`を追跡するように設定します。もし、`foo`が現在チェックアウトしているブランチだった場合、以下のように省略することができます:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["実際に素早く、もう一つの方法でリモートトラッキングを指定する様子を見てみましょう..."],afterMarkdowns:["前回と一緒で、より明示的なコマンドですね。とてもいい感じです！"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["OK！このレベルでは、ローカルで`master`にチェックアウトしていない状態で、リモートの`master`ブランチに作業をプッシュしてみましょう。これは高度な課題ですから、理解するのに少し時間をおく必要があると言っておきます:P"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 원격-추적 브랜치","",'지난 몇개의 레슨에서 "마법"처럼 보일 수 있는게 하나 있었는데, git이 `master`브랜치가 `o/master`와 연관 되어있는걸 안다는 것입니다. 물론 이 두 브랜치가 이름이 비슷하기 때문에 로컬 `master`브랜치가 원격의 `master`브랜치와 연결 되어있다고 하자면 어찌 논리적으로 말이 되긴 합니다만..., 이 연결은 두가지 시나리오를 통해 뚜렷하게 확인이 됩니다:',"","* pull 작업을 하는 도중, 커밋들은 `o/master`에 내려받아 지고 그다음 `master` 브랜치로 *merge*됩니다. merge에서 내재된 타겟은 이 연결에서 결정합니다.","* push 작업을 하는 도중, `master` 브랜치의 작업은 원격의 `master`브랜치(로컬에서 `o/master`로 표현되는)로 push 됩니다. push의 *목적지*는 master와 `o/master`의 연결에서 결정됩니다.",""]}},{type:"ModalAlert",options:{markdowns:["## 원격 추적","",'간단히 말해서, 이 `master`와 `o/master`사이의 연결은 브랜치의 "원격 추적" 속성을 통해 간단하게 설명됩니다. `master`브랜치는 `o/master`브랜치를 추적하도록 설정되어 있습니다 -- 이것은 `master`가 merge와 push할 내재된 목적지가 생겼다는 뜻 입니다.',"","여러분은 어떻게 이 속성을 지정해주는 그 어떤 명령어 없이 `master` 브랜치에 설정되있는지 궁금할것 입니다. 사실, 여러분이 git으로 저장소를 clone할때 이 속성이 여러분을 위해 자동으로 설정 됩니다.","","clone을 진행하면서 git은 원격 저장소에있는 모든 브랜치에 대해 로컬에 원격 브랜치를 생성합니다(`o/master`같은것들 말이죠). 그 후 원격 저장소에서 현재 active한 브랜치를 추적하는 로컬 브랜치를 생성합니다, 대부분의 경우 `master`가 됩니다.","","git clone이 완료되면, 여러분은 오로지 하나의 로컬 브랜치를 가지게 됩니다(부담스럽지 않도록) 물론 원격 저장소에있는 여러 다른 브랜치도 여전히 확인할 수 있습니다(호기심이 많으시다면). 로컬, 원격 저장소 양쪽에 최적화 되있는거죠!","","여러분이 clone을 할 때 아래의 명령어를 볼 수도 있는 이유입니다:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### 내 스스로 지정할수도 있나요?","","당연하죠! 여러분은 아무 임의의 브랜치를 `o/master`를 추적하게 만들 수 있습니다. 이렇게 하면 이 브랜치 또한 내재된 push,merge 목적지를 `master`로 할 것입니다. 여러분은 이제 `totallyNotMaster`라는 브랜치에서 `git push`를 수행해서 원격 저장소의 브랜치 `master`로 작업을 push할 수 있습니다!","","이 속성을 설정하는데에는 두가지 방법이 있습니다. 첫 번째는 지정한 원격 브랜치를 참조해서 새로운 브랜치를 생성하여 checkout 하는 방법 입니다. 다음을 실행하면","","`git checkout -b totallyNotMaster o/master`","","`totallyNotMaster`라는 이름의 새 브랜치를 생성하고 `o/master`를 추적하게 설정합니다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["설명은 충분히 한듯 합니다. 직접 확인해 봅시다! `foo`라는 이름의 새 브랜치를 checkout하고 이것을 원격 저장소의 `master`를 추적하도록 설정하겠습니다."],afterMarkdowns:["보이듯이, 우리는 `o/master`를 `foo` 브랜치를 갱신하기 위한 내재된 merge 타겟으로 사용하고 있습니다. master가 갱신되지 않는다는것을 눈치챘죠?"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git push에도 적용이 됩니다"],afterMarkdowns:["Boom. 브랜치의 이름을 전혀 다른것으로 지었는데도 불구하고 우리 작업이 `master`로 push 되었습니다."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### 방법 #2","","브랜치에 원격 추적 설정을 하는 또 다른 방법으로는 간단하게 `git branch -u` 옵션을 사용하는 방법이 있습니다. 다음을 실행하면","","`git branch -u o/master foo`","","가 `foo` 브랜치가 `o/master`를 추적하도록 설정합니다. 만약 `foo`가 현재 작업하고 있는 브랜치라면 생략해도 됩니다:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["자 이 다른 방법이 작동하는 모습을 확인해 봅시다..."],afterMarkdowns:["이전과 같습니다,  좀 더 분명하게 알 수 있느 명령어죠. 좋아요!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:[" 이번 레벨에서는 로컬의 `master`브랜치가 아닌 다른 브랜치에서 작업을 원격 저장소의 `master`브랜치로 push하세요. 고급 과정이니 더 길게 설명하지는 않을게요 :p"]}}]},uk:{childViews:[{type:"ModalAlert",options:{markdowns:["### Гілки віддаленого стеження","",'Одна з речей в попередніх уроках, яка могла виглядати, наче "магія" -- це те, що гіт якось знає, що локальна гілка `master` відповідає віддаленій `o/master`. Звичайно, ці гілки мають схожі назви, і виглядає логічним співставити віддалену гілку `master` з локальною `master`, однак цей зв\'язок найкраще видно в двох випадках:',"","* Під час операції `pull`, коміти попадають в `o/master`, а вже потім *мерджаться* в локальний `master`. Гілка в яку відбудеться мердж якраз і визначається цим зв'язком.","* Під час операції `push`, коміти з гілки `master` переносяться у віддалений `master` (який локально представлений як `o/master`). *Гілка-призначення* для `push` визначена зв'язком між `master` і `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Гілки віддаленого стеження","",'В двох словах, цей зв\'язок між `master` та `o/master` і є тим "віддаленим стеженням", визначеним для гілки. Гілка `master` налаштована стежити за `o/master` -- це визначає неявну ціль для мерджу і неявне призначення під час операції `push` для гілки `master`.',"","Ви можете подумати, а як же такий зв'язок було встановлено, якщо я не виконував жодної команди? Ну, коли гіт клонує репозиторій, він встановлює цей зв'язок автоматично.","","Під час клонування гіт створює гілки для стеження за кожною гілкою віддаленого репозиторію (напр. `o/master`). Потім він створює локальну гілку, що пов'язана і стежить за активною гілкою у віддаленому репозиторії, яка в більшості випадків називається `master`.","","Після закінчення клонування у вас буде лише одна локальна гілка (щоб не перевантажувати) але ви можете переглянути всі віддалені гілки (якщо буде цікаво). Такий собі розумний компроміс!","","Це пояснює чому ви бачите наступне повідомлення під час клонування:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### А можу я сам вибирати?","","Так, можеш! Ти можеш вибрати довільну гілку, яка слідкуватиме за `o/master`, і тоді для цієї гілки `push` та `merge` автоматично працюватимуть з `master`. Це означає, що виконання `git push` в гілці з назвою `totallyNotMaster` (зовсім не master) може зберегти локальні коміти у віддалену гілку `master`!","","Є два шляхи встановити такий зв'язок. Перший - створити нову гілку з явним вказанням зв'язку (за ким слідкувати). Виконання","","`git checkout -b totallyNotMaster o/master`","","створить гілку `totallyNotMaster`, яка слідкує за `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Досить розмов, подивімось в дії! Створімо нову гілку `foo` і змусьмо її слідкувати за віддаленою гілкою `master`."],afterMarkdowns:["Як видно з результату, при оновленні `foo` було використано автоматичний зв'язок з `o/master` під час операції `merge`. Зверніть увагу, `master` не було оновлено!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Це також справджується і для git push"],afterMarkdowns:["Ка-бум!. Ми запушили наші зміни у віддалений `master`, незважаючи на те, що локальна гілка називалась зовсім по-іншому."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Спосіб №2","","Інший спосіб вказати за якою віддаленою гілкою слідкувати -- просто використовувати опцію `git branch -u`. Виконання","","`git branch -u o/master foo`","","заставить гілку `foo` слідкувати за `o/master`. Якщо `foo` є поточною гілкою, її можна навіть не вказувати:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Подивімось на цей спосіб швидко вказати віддалену гілку для відслідковування..."],afterMarkdowns:["Як і перший спосіб, але своя окрема команда."],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Гаразд! На цьому рівні збережімо свою роботу у віддалену гілку `master` *без* переходу на локальну `master`. Про решту здогадайся сам, раз ти вже дойшов до цього рівня :P"]}}]},vi:{childViews:[{type:"ModalAlert",options:{markdowns:["### Theo dõi nhánh từ xa","",'Trong những bài học vừa qua có một điểu có vẻ như là "ma thuật" đó là git lại biết được nhánh `master` có liên kết đến nhánh `o/master`. Đúng là chúng có tên tương tự và nhánh `master` ở kho chứa từ xa có kết nối đến nhánh `master` ở kho chứa địa phương có vẻ như là hợp lý, nhưng kết nối này được thể hiện rõ ràng trong 2 trường hợp:',"","* Trong quá trình thực hiện thao tác kéo, các commit được tải xuống nhánh `o/master` và sau đó *hợp nhất* vào nhánh `master`. Mục tiêu hợp nhất dược ngầm định bởi kết nối này.","* Trong quá trình thực hiện thao tác đẩy, thảnh quả trên nhánh `master` được đẩy lên nhánh `master` từ xa (sau dó được biểu thị bằng nhánh `o/master` ở kho chứa địa phương). *Đích đến* của lệnh đẩy được xác định bằng kết nối giữa nhánh `master` và nhánh `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Theo dõi từ xa","",'Nói tóm lại, kết nối giữa nhánh `master` và nhánh `o/master` đơn giản được giải thích bằng thuộc tính "theo dõi từ xa" ("remote tracking") của các nhánh. Nhánh `master` được thiết lập để theo dõi nhánh `o/master` -- Điều này có nghĩa là nhánh `master` được chỉ định đích của lệnh đẩy và mục tiêu hợp nhất sau khi kéo.',"","Có thể bạn sẽ thắc mắc rằng tại sao thuộc tính này được thiết lập lên nhánh `master` trong khi bạn chẳng hề chạy một câu lệnh nào chỉ định điều này. Chà, khi bạn dùng git để nhân bản kho chứa, thì thuộc tính này đã được tự động thiết lập cho bạn rồi. ","","Trong quá trình thực hiện nhân bản, git tạo ra nhánh từ xa trên kho chứa địa phương cho tất cả các nhánh trên kho chứa từ xa (các nhánh như `o/master`). Sau đó nó sẽ tạo một nhánh địa phương theo dõi nhánh hoạt dộng hiện tại của kho chứa từ xa, đa phần các trường hợp là nhánh `master`.","","Một khi quá trình nhân bản hoàn thành, bạn sẽ chỉ có một nhánh địa phương (để bạn không thấy quá tải) nhưng bạn có thể thấy tất cả các nhánh trên kho chứa từ xa (phòng trường hợp bạn thấy tò mò). Đây là phương án tối ưu!","","Điều này giải thích việc sau khi nhân bản bạn có thể thấy dòng lệnh sau xuất hiện:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Tôi có thể tự chỉ định chứ?","","Tất nhiên là được chứ! Bạn có thế khiến bất kỳ nhánh nào theo dõi nhánh `o/master`, và nếu bạn làm vậy, nhánh đó sẽ được được chỉ định đích của lệnh đẩy và mục tiêu hợp nhất giống như nhánh `master`. Điều này có nghĩa là bạn có thể chạy lệnh `git push` trên nhánh có tên là `totallyNotMaster` và thành quả của bạn sẽ được đẩy lên nhánh `master` ở kho chứa từ xa!","","Có 2 cách để thiết lập thuộc tính này. Cách đầu tiên là chuyển sang một nhánh mới từ một nhánh từ xa bằng cách thực hiện","","`git checkout -b totallyNotMaster o/master`","","Tạo ra một nhánh mới `totallyNotMaster` và thiết lập cho nó theo dõi nhánh `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nói vậy là đủ rồi, hãy xem thử một mô tả nào! Ta sẽ chuyển sang một nhánh tên là `foo` và thiết lập cho nó theo dõi nhánh `master` trên kho chứa từ xa."],afterMarkdowns:["Như bạn đã thấy, chúng tôi đã sử dụng mục tiêu ngầm `o / master` để cập nhật nhánh` foo. Để ý rằng nhánh `master` không được cập nhật!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Điểu này cũng được áp dụng cho lệnh git push"],afterMarkdowns:["Bùùm. Ta đã đẩy thành quả lên nhánh `master` ở kho chứa tù xa mặc dù nhánh của ta có tên hoàn toàn khác biệt"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Cách thứ #2","","Cách khác để thiết lập theo dõi trên một nhánh đó là đơn giản sử dụng lệnh `git branch -u`. Thực hiện","","`git branch -u o/master foo`","","sẽ thiết lập nhánh `foo` theo dõi nhánh `o/master`. Nếu nhánh `foo` đang được `HEAD` trỏ tới bạn có thể bỏ tham số này:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hãy xem thử cách khác để thiết lập theo dõi..."],afterMarkdowns:["Y hệt như trước, nhưng lệnh này biểu hiện rõ ràng hơn. Tuyệt!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Được rồi! Ở cấp độ này hãy để thành quả lên nhánh `master` trên kho lưu trữ từ xa mà không chuyển sang nhánh `master` tại kho địa phương. Hãy tự tìm ra cách nhé, giờ là khóa học nâng cao rồi :P"]}}]}}}},{}]},{},[42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,88,89,90,92,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,71,73,72,74,75,76,77]);